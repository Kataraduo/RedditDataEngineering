id,title,selftext,score,num_comments,author,created_utc,url,gilded,subreddit
5ed4xg,"I've taught 30,000 students how to code. Now I'm offering my course for free, forever.","I've decided to make my course on complete full-stack web development [free forever, here!](https://upskillcourses.com/p/essential-web-developer-course). It's a massive amount of content. Please let me know what you think of the course!",16587,709,robeendey,2016-11-22 20:54:48,https://www.reddit.com/r/learnprogramming/comments/5ed4xg/ive_taught_30000_students_how_to_code_now_im/,2,learnprogramming
rlmulr,I ran a 100% free full stack web development bootcamp for those laid off by the pandemic. 65 people got jobs and we are doing it again! I would love to have you join us!,"Hey, everyone!

&#x200B;

Starting Jan 11th, I will be running a FREE live intensive full stack web development bootcamp covering everything you need to know to go from no technical skills to employable. We’ll meet every Tuesday and Thursday from 6:30pm EST to 9:30pm EST with office hours on Sundays from 12pm EST to 3pm EST on Twitch. The goal is to give folks who have been laid off or affected by the pandemic the tools they need to command a job in software engineering. Last cohort saw 65 folx get jobs with an average increase in salary of $53,000!

If you would like to join, please follow the instructions \[here\]([https://leonnoel.com/100devs/](https://leonnoel.com/100devs/)).

Also, feel free to ask any questions here! About the bootcamp, how to get a job in tech, or the dark side of coding bootcamps. I'll answer every single one :)

&#x200B;

A little about me:

&#x200B;

I’m Managing Director of Engineering for \[Resilient Coders\]([http://resilientcoders.org/](http://resilientcoders.org/)). We help folx underrepresented in tech break into high paying careers as software engineers. We’re pretty damn good at it too. 85% of our graduates, most of whom do not have degrees or prior experience, go on to get full time offers at an average starting salary of $98,000. All free and stipended. No bullshit or funny business. I’m also a Distinguished Faculty Member at General Assembly were I’ve been helping folks learn to code for the past 9 years. You can see a sampling of my classes taught at Harvard, MIT, and elsewhere \[here\]([https://leonnoel.com/teach/](https://leonnoel.com/teach/)) and reviews from my past students \[here\]([https://leonnoel.com/students/](https://leonnoel.com/students/)).

&#x200B;

What to expect:

&#x200B;

We’ll have class two nights a week with the expectation that you come prepared and have done the assigned reading ahead of time. I like to use lecture as a means of exploration and not dictation, but that only works if you come prepared. The first half of class will be exploring new topics and the second half will be lab. During lab, you will tackle what we just covered by building. You’ll never just listen to me and then sign off. You’ll have real time guidance / feedback and a chance to have all your questions answered. We'll be covering Full stack Javascript - HTML, CSS, JS, Node, React, and MongoDB!

&#x200B;

This course is designed to give you the skills you will need to pursue a career as a software engineer, but will only work if you are committed and ready to put in serious work.

&#x200B;

Why am I doing this:

&#x200B;

My activism is teaching. I want to help folks affected by the pandemic and those under represented in tech. The bootcamps I run are either very selective or expensive, so I am hoping to help in the best way I know how by offering a full stack course for free and open to all.

&#x200B;

Disclaimer:

&#x200B;

I like to joke, curse, and have fun. I do the same thing in my classroom. I value learning over nit picky correctness. If any of these things bother you, this course might not be the best fit.

&#x200B;

You can view every class from my last bootcamp \[here\]([https://www.youtube.com/watch?v=YRemMgGfbKg&list=PLBf-QcbaigsKwq3k2YEBQS17xUwfOA3O3](https://www.youtube.com/watch?v=YRemMgGfbKg&list=PLBf-QcbaigsKwq3k2YEBQS17xUwfOA3O3))

&#x200B;

These should give you a good idea of my teaching style and what to expect.

&#x200B;

Happy to answer any questions here on reddit.

&#x200B;

Peace!  


Edit: Some folx noted that the original link pointed to our old bootcamp page. It is updated now! Thank you everyone for all the comments and well wishes! I responded to everyone I could for 12 hours straight yesterday and will get to everyone over the next few days!",14149,1854,leonnoel,2021-12-21 20:02:04,https://www.reddit.com/r/learnprogramming/comments/rlmulr/i_ran_a_100_free_full_stack_web_development/,3,learnprogramming
t2jaes,I learned to code in 2 months and got a remote job for 100k,"Just kidding, it took 3 years of hard work and a grueling job search. I reached the final interview at 8 companies and was rejected from every single one of them. But guess what, I never gave up. Now I have a stable 6 figure salary and work from home at an insanely cool company. 


Ignore the top post on this sub, ignore anyone who tells you the job market is too saturated, ignore everyone who rejects or doubts you.

It's all about *relentless pursuit*. People say the entry market is saturated, but it's saturated with shitty devs. Become a good dev and you will have companies crawling to your door to hire you and *keep* you as well.

Relentlessly pursue your goals, and you will achieve what you set out to do.

The industry is desperate for developers who can do the job, and they are actually extremely few and far between. Once you get the skills to do this job, you will realize how much power and control over your life you have.


DO NOT GIVE UP",9189,430,browat,2022-02-27 08:01:44,https://www.reddit.com/r/learnprogramming/comments/t2jaes/i_learned_to_code_in_2_months_and_got_a_remote/,1,learnprogramming
i9vuhr,"I wrote a syllabus for learning Python and Django. Four people have gone through it, two are interviewing and one got a job. It's based on using a somewhat even mix of coding challenges, personal projects and books.","[Syllabus](https://www.notion.so/095503041d6a46ddb6986f488e578778)

Edit July 2021:

It’s been almost a year since I wrote this post. I’ve learned a lot more about learning Python in that time. I up-leveled my own coding skills to prepare for interviews, which I just completed. I also mentored more people. I really want to make a new version of this syllabus but I don’t have the time (I’m starting a new job!). To not let perfect win over good, here are some changes I have in mind.

Start off with some [edabit](https://edabit.com/challenges/python3) problems. edabit has the easiest problem of all the different code challenge sites I know of so it’s a great place to start and build confidence.

See if I can swap HackerRank mediums for leetcode Easies. The leetcode discussions are great.

Maybe swap out How to Think Like a Computer Scientist for Python Crash Course.

Drop Problem Solving with Data Structures and Algorithms. I generally like the explanations. I really dislike a lot of the code. If you’re doing the syllabus, you should probably just skip it. There is no book I know of that teaches algorithms in Python at the level I want, to the audience I want, in the code style I want. Maybe I’ll have to write it some day. Closest might be Grokking Algorithms. Check it out.

Maybe add How to Solve It. Maybe the best book for getting better at coding that isn’t about coding.

Make a “further reading” section with Fluent Python and Python Algorithms: Mastering Basic Algorithms in the Python Language.

If you have questions about these changes, feel free to message me on reddit. You can also email me at my last name at gmail. Now, on to the original post.

I've helped a few people become software engineers. The ones that learned the fastest used a mix of studying, coding challenges and personal projects. When you do all three of these things, they amplify each other. It also keeps you out of [tutorial hell](https://www.reddit.com/r/learnprogramming/comments/i0kld3/how_students_get_themselves_into_tutorial_hell/).

Studying (tutorials/videos/books) are how you learn about new topics and get exposed to good code. Coding challenges give you small problems to implement what you've learned and compare your solutions to other people's. Projects let you put it all together and give you something to show off when you're done.

I put together my favorite resources and then iterated on it by mentoring a few people through it. It seems to be working well. The syllabus is free and all of the books together would total up to a few hundred dollars (money very well spent IMO).

It's set up in Notion as a non-linear path. You can copy the syllabus and then mark your progress as you go. You should have 2 or 3 things that are available to work on most of the time.

It's based on my own experience of learning to code. I've taken my favorite study materials and put them in somewhat logical order. By the end of it, you will be able to make basic web applications in Django.

You won't have just created one web app following a tutorial. That can be done from no experience in a weekend. You will have built up enough knowledge to do it on your own. There is hundreds of hours of work in this syllabus.

The beginning is probably a bit fast-paced if you are absolutely new to programming. Give yourself some more time to practice. If you want a *really* good foundation, check out Harvard's free online course, CS50.

#### Focus

The first focus is on Python. Python is one of the most popular languages. It's used across many different fields (scripting, web apps, ML, data). It's also one of the easiest languages for beginners. This combination makes it a great first language.

The second focus is on making web apps in Django. Django is a web framework written in Python. Django isn't introduced until more than halfway through the tutorial. 

If the goal was just to display web pages, that could be done much sooner. But the goal here is to make real programs and let people interact with them over the internet. A strong foundation in Python is essential for that.

#### Then what?

This syllabus is light on frontend work. If you want to focus on that, you could switch over to JavaScript when you're done. Your time with Python won't have been wasted.

If you want to stay on backend development, you can just keep making more projects. You could also learn how to make web APIs, maybe with Django Rest Framework.

You could stop on web apps all together and go to some other domain. Python is probably used there. If you already know that's what you want do, this may not be the syllabus for you. You could at least work until Django shows up and then stop.

#### How to use the Syllabus

1. Go to the [Syllabus page](https://www.notion.so/095503041d6a46ddb6986f488e578778).
2. Duplicate it (there's a link in the top right).
3. Pick an assignment with a green check mark next to it.
4. Click on the assignment to see the notes and URL.
5. Do the assignment.
6. Check off the ""Finished"" box.
7. Pick a new assignment with a green check mark and repeat.
8. Refer back to the original Syllabus to see any changes
9. When you get stuck, unstick yourself.

#### When you don't know how to do something

1. Read the documentation
2. Search
    1. Google
    2. Stack Overflow
3. Post
    1. Stack Overflow
    2. Subreddits

#### FAQ

Do you have this for X?

Check out [The Odin Project](https://www.theodinproject.com/) for a version of JavaScript, optionally with Ruby. I don't know any others well enough to recommend.

How long will it take?

Two people going full time finished it in a little over three months.

#### Syllabus

Duplicate it [on Notion](https://www.notion.so/095503041d6a46ddb6986f488e578778) if you want tracking.

[How to Think Like a Computer Scientist](https://runestone.academy/runestone/books/published/thinkcspy/index.html)  
Skip sections 14 and 15.  

[CODE: The Hidden Language of Computer Hardware And Software](https://amzn.to/2YjGCTR)  

[HackerRank: 30 Easy](https://www.hackerrank.com/domains/python?filters%5Bdifficulty%5D%5B%5D=easy)  
Never spend more than 10 minutes stuck on a problem! Do even less if you're sure you can't get anywhere.  
If you're stuck, just look up the answer in the comments section or online.  
Prerequisites: How to Think Like a Computer Scientist

[The Hitchhiker's Guide to Python: Getting Started With Python](https://docs.python-guide.org/#getting-started-with-python)  
Prerequisites: How to Think Like a Computer Scientist

[The Hitchhiker's Guide to Python: Python Development Environments](https://docs.python-guide.org/#python-development-environments)  
Prerequisites: The Hitchhiker's Guide to Python: Getting Started With Python

[Mastering PyCharm: Why PyCharm and IDEs](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: The Hitchhiker's Guide to Python: Python Development Environments

[Mastering PyCharm: Course setup](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Mastering PyCharm: Why PyCharm and IDEs

[Mastering PyCharm: PyCharm Projects](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Mastering PyCharm: Course setup

[Mastering PyCharm: The Editor](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Mastering PyCharm: PyCharm Projects

First Python Project  
If you can't think of something useful, just make something fun. This should be a project that takes about 2 days.  
Prerequisites: Mastering PyCharm: The Editor, HackerRank: 30 Easy

[HackerRank: 60 Easy](https://www.hackerrank.com/domains/python?filters%5Bdifficulty%5D%5B%5D=easy)  
Prerequisites: HackerRank: 30 Easy

[Mastering PyCharm: Debugging Python applications](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: First Python Project

Git Tutorials  
https://rogerdudler.github.io/git-guide/  
https://guides.github.com/introduction/git-handbook/  
https://github.github.com/training-kit/downloads/github-git-cheat-sheet/  
Just the intro and 5 minute summary: https://trunkbaseddevelopment.com/  
This is a pretty high level overview. Just enough to get started.  
Prerequisites: First Python Project

[Mastering PyCharm: Source control](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Git Tutorials

Second Python Project  
Prerequisites: First Python Project, HackerRank: 60 Easy

[HackerRank: 90 Easy](https://www.hackerrank.com/domains/python?filters%5Bdifficulty%5D%5B%5D=easy)  
Prerequisites: First Python Project, HackerRank: 60 Easy

[The Hitchhiker's Guide to Python: Writing Great Python Code](https://docs.python-guide.org/#writing-great-python-code)  
Prerequisites: First Python Project, HackerRank: 60 Easy

[Mastering PyCharm: Refactoring](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Second Python Project

[Mastering PyCharm: Tool windows](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Second Python Project

Third Python Project  
Prerequisites: Second Python Project, Mastering PyCharm: Source control, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code

[Effective Python](https://amzn.to/2Y4BtyB)  
Skip chapters 7 and 9  
Prerequisites: Second Python Project, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code

HackerRank: 120 Easy  
[Link](https://www.hackerrank.com/domains/algorithms?filters%5Bdifficulty%5D%5B%5D=easy&filters%5Bstatus%5D%5B%5D=unsolved) and 
[link](https://www.hackerrank.com/domains/data-structures?filters%5Bstatus%5D%5B%5D=unsolved&filters%5Bdifficulty%5D%5B%5D=easy)  
Prerequisites: Second Python Project, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code

Fourth Python Project  
Prerequisites: Third Python Project, HackerRank: 120 Easy, Effective Python

[Python Cookbook](https://amzn.to/2Y4BlPD)  
Skip 7.10, 7.11, 8.10, 8.11  
Skip chapters 9, 11, 12, 15  
Prerequisites: Third Python Project, HackerRank: 120 Easy, Effective Python

[SQL Course](https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/)  
Skip chapters 16, 17 and 18.  
Check for coupons! You should be able get it for like $15.  
Prerequisites: Second Python Project

[Mastering PyCharm: Databases](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Second Python Project

[Django for Beginners](https://learndjango.com/books/)  
Prerequisites: SQL Course, HackerRank 120 Easy, Fourth Python Project

[Mastering PyCharm: Server-side Python web apps](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Django For Beginners

Django Tutorial  
Step 0: Set up the Django project in PyCharm. Call it ""mysite"" to match the tutorial.  
https://www.jetbrains.com/help/pycharm/creating-django-project.html  
Prerequisites: Django For Beginners

First Django Project  
Use https://github.com/travisjungroth/django-base  
Prerequisites: Django Tutorial

[Heroku Django Deployment Tutorial](https://devcenter.heroku.com/articles/getting-started-with-python)  
Prerequisites: Git Tutorials, Django Tutorial

[Test-Driven Development with Python](https://www.obeythetestinggoat.com/)  
Prerequisites: Django Tutorial

[Mastering PyCharm: Unit testing](https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide)  
Prerequisites: Django Tutorial

Second Django Project  
Prerequisites: First Django Project, Test-Driven Development with Python

[Django For Professionals](https://learndjango.com/books/)  
Prerequisites: First Django Project, Test-Driven Development with Python

Third Django Project  
Prerequisites: Second Django Project, Django For Professionals

[HackerRank: 20 Medium](https://www.hackerrank.com/domains/python?filters%5Bdifficulty%5D%5B%5D=medium)  
Prerequisites: Second Django Project, HackerRank 120 Easy

[Problem Solving with Algorithms and Data Structures using Python](https://runestone.academy/runestone/books/published/pythonds/index.html)  
Prerequisites: CODE: The Hidden Language of Computer Hardware and Software, HackerRank 120 Easy

[HackerRank: 40 Medium](https://www.hackerrank.com/domains/python?filters%5Bdifficulty%5D%5B%5D=medium)  
Prerequisites: HackerRank: 20 Medium, Problem Solving with Algorithms and Data Structures using Python

Fourth Django Project  
Prerequisites: Third Django Project, HackerRank: 40 Medium",8481,354,TravisJungroth,2020-08-14 22:31:06,https://www.reddit.com/r/learnprogramming/comments/i9vuhr/i_wrote_a_syllabus_for_learning_python_and_django/,1,learnprogramming
4q6tae,"I highly recommend Harvard's free, online 2016 CS50 ""Intro to CS"" course for anyone new to programming","Basically, it will blow your socks off. 

It is a pretty famous as well the largest(aka most popular?) 101 course at Harvard. The class routinely has 800 students. Mark Zuckerberg and Steve Ballmer have given guest lectures. 

For some crazy reason they let us mere mortals sit in on the class. 

The professor is incredibly charismatic and extremely good at making the complicated easy to understand.

Here is the [syllabus](http://cdn.cs50.net/2016/x/references/syllabus/syllabus.html). 

Here is the [Intro Video](https://www.youtube.com/watch?v=zFenJJtAEzE)

Be warned, there are 10-20 hours of challenging homework a week(remember, this is Harvard), BUT....

**If you do not have a CS degree**, taking this class and putting it on your resume is a great way to show future employers that you have what it takes.

Just watch the [video](https://www.youtube.com/watch?v=zFenJJtAEzE). You won't regret it. 

edit: just realized I forget to put a link to the course homepage: 

https://courses.edx.org/courses/course-v1:HarvardX+CS50+X/info
",7375,468,None,2016-06-28 01:12:39,https://www.reddit.com/r/learnprogramming/comments/4q6tae/i_highly_recommend_harvards_free_online_2016_cs50/,0,learnprogramming
imcydz,Please do not downvote someone who is asking for help in solving a code that looks stupid.,"I don't know if some people here just like to troll beginner programmers by downvoting them or are just feeling salty towards beginner programmers and ugly code. Just don't downvote a post because of that and say nothing about the problem with the bignner's code. I've asked for help maybe twice before in this sub, and while I got some suggestions and advice from those who helped me, I get confused why there are a few who downvote me asking for help to fix a code even though I follow the rules. This is just discouraging for beginner programmers. Do not do that if they're being genuine about asking for help.

Edit: Since this post has been locked, I'd like to say thank you to everyone who replied, whether it was a friendly or tough advice. I learned a lot! Programming, like any other technical or practical field, tends to have egoistic people or people with superiority complex, but don't give up!",6934,99,Miu_K,2020-09-04 09:35:45,https://www.reddit.com/r/learnprogramming/comments/imcydz/please_do_not_downvote_someone_who_is_asking_for/,1,learnprogramming
6glirv,How would people like a series of cartoons of ELI5s for important software engineering concepts?,"Things like API vs Library vs Framework, Architecture patterns (MVC, MVVM, VIPER), REST, NoSQL vs SQL databases, etc. I haven't yet found a great, singular resource on easy to understand explanations of all of this stuff so wondering if everyone else would want this.

EDIT: wow, this got a lot of likes. I'm actually thinking of maybe making a tiny book of this to publish. It would cover basic Data Structures and Algorithms, the SWE concepts I listed above, and maybe common problems developers face during their process

EDIT 2: got one of my friends on board to help :)

EDIT 3: The more I think about it, the more I think that this should be a pseudo-open source project in the spirit of programming. I'm going to make a collaborative list of topics that everyone wants covered, and consult a few trusted sources to reconfirm my final analogies/definitions. It will be posted on Github as a .md file and I'll update.

UPDATE: If anybody would like to contribute to the list, submit a pull request to this repo: 
https://github.com/sudotoons/collab-content

It's currently a little disorganized but I just started listing things I would have wanted to be explained. 


UPDATE 2: My partner and I are going to upload 4 different styles of cartoon for our first piece, which is explaining the important distinction of ""print"" vs ""return"" for beginners. We'll appreciate the feedback!",6481,174,tangerto,2017-06-11 14:02:58,https://www.reddit.com/r/learnprogramming/comments/6glirv/how_would_people_like_a_series_of_cartoons_of/,0,learnprogramming
fhvhal,The Massachusetts Institute of Technology has a class called ’The missing semester of your computer science education’ It is a collection of things that most developers and data scientists typically teach themselves on the job.,"The content is available for free. 

**Course:** [https://missing.csail.mit.edu](https://missing.csail.mit.edu/?fbclid=IwAR1NEIiwwk-e2k3ykSTrxF5YkrLshitO3ZK_BlnbtG9_FWtpu2Vb0w78OZY)",6371,149,ai-lover,2020-03-13 06:45:25,https://www.reddit.com/r/learnprogramming/comments/fhvhal/the_massachusetts_institute_of_technology_has_a/,0,learnprogramming
bz3rys,"The online course for ""Automate the Boring Stuff with Python"" is free to sign up this week.","School's out, but that doesn't mean you have to stop learning. The online video course from the author of ""Automate the Boring Stuff with Python"" (that's me) is free to sign up for this week. This sign up will give you life time access to the course. Just use the following link:

https://www.udemy.com/automate/?couponCode=SCHOOLS_OUT2

This course is made for complete beginners who have no experience programming. It's ""programming for office workers"" because it skips computer science and teaches you how to do practical tasks: web scraping, updating Excel spreadsheets, parsing PDFs and Word documents, sending out automated email and text notifications, controlling the mouse and keyboard, and more. If you're an experienced programming, you can skip the first half (which covers basic programming concepts) and directly learn about several useful modules for Python.

(This code expires on June14th. Previously I'd give out codes to folks who asked me after the expiration, but it turns into a logistical headache to keep making coupons each time someone asked, so the deadline is firm.)

If you'd like to support me by using an affiliate code (or encourage yourself to finish the course since you put money down on it), you can also use one of these links to pay what you like: (MODS: if this is too spammy, I can take these links down)

* https://www.udemy.com/automate/?couponCode=PAY_10_DOLLARS
* https://www.udemy.com/automate/?couponCode=PAY_20_DOLLARS
* https://www.udemy.com/automate/?couponCode=PAY_30_DOLLARS
* https://www.udemy.com/automate/?couponCode=PAY_40_DOLLARS

This online course covers most, but not quite everything, in the Automate the Boring Stuff with Python book, which is freely available online under a Creative Commons license. You can read it at: https://automatetheboringstuff.com/ (The book has a few more examples, and also covers programmatically creating/editing image files, for example).

If you like the course (or don't like it), please remember to rate it.

Good luck on your programming journey!",6160,389,AlSweigart,2019-06-10 21:44:58,https://www.reddit.com/r/learnprogramming/comments/bz3rys/the_online_course_for_automate_the_boring_stuff/,4,learnprogramming
t8pc7n,"TIL that a software engineer filed a Freedom of Information Act request to get access to NSA's training material for teaching Python, the popular programming language. The material is now available for free online for anyone who wants to learn Python using it.","""Software engineer Christopher Swenson filed a Freedom of Information Act (FOIA) request with the NSA for access to its Python training materials and received a lightly redacted 400-page printout of the agency's COMP 3321 Python training course.   


Swenson [has since scanned the documents](https://twitter.com/chris_swenson/status/1225836060938125313), ran OCR on the text to make it searchable, and hosted it on Digital Oceans Spaces. The material has also been [uploaded to the Internet Archive](https://archive.org/details/comp3321/page/n89/mode/2up/search/device).""  


[https://www.zdnet.com/article/python-programming-language-now-you-can-take-nsas-free-course-for-beginners/](https://www.zdnet.com/article/python-programming-language-now-you-can-take-nsas-free-course-for-beginners/)",5917,235,liquid_light_,2022-03-07 13:34:32,https://www.reddit.com/r/learnprogramming/comments/t8pc7n/til_that_a_software_engineer_filed_a_freedom_of/,0,learnprogramming
6fto5j,How to start learning to code when you don't know where to start,"**Why is it so hard to figure out where to start?**  

It's no secret that software development has exploded in the past 20 years. New software startups pop up like dandelions in the spring. It then follows that a lot of people think software development is a good career choice and are afraid of missing out on a lot of great opportunities.   

Software developers are, in general, pretty opinionated. I doubt this is unique to developers, but it gets tiresome when you've dealt with it for years. If we're not fighting over what operating system is better, then it's what language is better. If it's not that, then it's code editors, or databases, or frameworks, or bug trackers, or development processes, or...or...or. It's like we enjoy fighting.   

In a time where more and more people are becoming developers, it's not enough to be just ""a developer"" anymore. No, to feel superior now, developers need to somehow differentiate themselves from both the non-developer “rabble” _and_ their fellow developers.  

This mentality has lead to more coding languages being developed that purport to ""fix"" issues with other languages. New frameworks are built to ""fix"" issues with previous frameworks. And on and on.  

All this leads to a _huge_ amount of choices, opinions, and resources. Naturally, that makes _starting_ to learn, daunting.   

Since I'm a developer too, I'm susceptible to the same opinions and biases that I just railed against. The difference is, I'm right. I'm *kidding*, seriously, calm down everybody. Here are my suggestions.  

**Choose your ~~weapon~~ language**  

As someone once said: “the weapon doesn’t make the man.” It’s probably a quote from some B martial arts movie or Dragonball Z, but the philosophy holds true for programming languages. A good developer is a good developer regardless of language. Learning *any* language will help you understand the core concepts of programming. _However_, you need to start someplace, and if you pick your first language wisely, you’ll drastically shorten the time to hit your goal.  

Picking a language boils down to what you want to do. This is a quick list of general development goals and what language(s) are your best options to get there (*NOTE*: this is not meant to indicate that these are the *only* languages that you can use for a given domain, just my suggestion on what to _start_ with):  

1. Front-end web development (user interface and interaction): Javascript, HTML & CSS  
1. Back-end web development  (services that front-end web apps and mobile apps call out to): Ruby, Python, Javascript, or PHP  
1. Mobile development: Swift (iOS) or Java (Android)  
1. Windows development: C#  
1. MacOS development: Swift or Objective-C  
1. Operating systems, file systems, embedded systems, etc: C/C++
1. Game development: (C++, Unity and C#)
1. Data Science: R  

Naturally, there are other options for each of these. Javascript is useful for items 1-5, for instance. But the list is a good starting place as-is. *NOTE*: A number of people contacted me and mentioned that in certain places, especially outside the US, the above list is different for back-end web development. In those locations, C# and Java are used more often than Python or Ruby. The suggestion is to check job postings where you plan (or hope) to work for the job _and companies_ you want to work in and see what languages they require.

**How to find good resources to start learning**  

There are a *ton* of resources to learn to code out on the web. How do you sift through the chaff and find the real gems?  

Most resources fall into the following categories:  

* Books  
* Videos  
* Blogs/tutorials  
* Courses  

Books are the traditional go-to resource. Search Amazon.com for your topic and read reviews. Make sure that any books you're considering are new. Languages change and older books could slow your progress.  

A lot of people have gravitated to videos to learn coding and other topics. YouTube is the first place most people look. Fair warning, this is going to turn up a bunch of crap. Look at how many subscribers a given instructor has, and watch some videos to see if their style and method works for you. Another possible issue is that because video is more difficult to update for new versions of a language (or corresponding tools), some videos might be outdated.  

For blogs and tutorials, a simple google search like ""best python tutorial"" or ""best swift tutorial for beginners"" is a great place to start. As with videos, you'll have to try a few to see how they work with your learning style.  

Online courses are the newest resource on the scene. [Codecademy](http://www.codecademy.com) is one that a lot of people find immediately. However, after I talked to a lot of people who tried it, none really thought it did a good job. [Free Code Camp](http://www.freecodecamp.com) or [The Odin Project](http://www.theodinproject.com) are both highly regarded for web development. [Udacity](http://udacity.com), [Coursera](http://www.coursera.com), [Udemy](http://www.udemy.com) all have courses in different genres. Each has reviews so you can compare and only look at ones that helped others. My specific examples follow in the next section.  

**Where you should start, specifically**  

Each development goal in the above list is different enough to require different starting points. I’ll list the place that I’d recommend you start for each one. I have _not_ personally tried all of them, but have come across them when doing research. There also might be better ones, and so if you know of any, let me know and I’ll update this list.  

1. Front-end web development: [Free Code Camp](http://www.freecodecamp.com)  
1. Back-end web development: [Ruby (for Rails)](http://poignant.guide/), [Python (for Django)](https://learnpythonthehardway.org/book/), [Javascript (for Node)](http://www.freecodecamp.com), [PHP The Right Way](http://www.phptherightway.com/), for places where C# and Java are used more often, see Windows development and Mobile (Java) development respectively for resources.  
1. Mobile development: Swift [Lynda’s Swift Essentials](https://www.lynda.com/Swift-tutorials/Swift-3-Essential-Training-Basics/517449-2.html) (check your local library to see if you get a free Lynda account with a library card) or [Flatiron school’s free Swift course](https://flatironschool.com/programs/online-swift-free-course/), [Swift Programming book](https://smile.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/013461061X/ref=sr_1_1?s=books&ie=UTF8&qid=1493732230&sr=1-1&keywords=swift+programming) or Java [Head First Java](https://smile.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=sr_1_2?ie=UTF8&qid=1493732143&sr=8-2&keywords=java), [University of Helsinki’s MOOC](http://mooc.fi/courses/2013/programming-part-1/)  
1. Windows development: [Head First C#](https://smile.amazon.com/Head-First-2E-Real-World-Programming/dp/1449380344/ref=sr_1_2?ie=UTF8&qid=1493732390&sr=8-2&keywords=head+first+c%23+.net), [Pluralsight’s C# course](https://www.pluralsight.com/paths/csharp?aid=701j0000002BGlGAAW&oid=&promo=&searchsegment=ppcnonbrand&utm_campaign=Courses-C&utm_medium=ppc&utm_source=google#-US-BMM&utm_content=&utm_term=&gclid=CNmbxqyr0dMCFdiNswodkyEJ5Q)  
1. MacOS development: [Cocoa programming for OS X](https://smile.amazon.com/Cocoa-Programming-OS-Ranch-Guides/dp/0134076958/ref=sr_1_2?ie=UTF8&qid=1493732643&sr=8-2&keywords=mac+os+development), or the same courses for mobile Swift  
1. Operating systems, filesystems, embedded systems: [C++ How to Program book](https://smile.amazon.com/How-Program-10th-Paul-Deitel/dp/0134448235/ref=sr_1_1?ie=UTF8&qid=1493732916&sr=8-1&keywords=c%2B%2B+deitel), [C++ Tutorial for Complete Beginners](https://www.udemy.com/free-learn-c-tutorial-beginners/)
1. Game development: See previous for C++, and Windows development for C#
1. Data Science: R [Swirl](http://swirlstats.com/) or [Coursera's R course](https://www.coursera.org/learn/r-programming)

Once you pick your language and starting point and you start learning, some things will be obvious, but others will be difficult to understand. You’re going to run into trouble and with concepts and code errors. That’s normal. We’ve all been there. _Getting unstuck takes practice too_.   

**How to get unstuck once you’ve started**  

Once you start learning to code, you're going to run into problems that you don't know how to solve. _This is normal and part of the process_. You don't really learn unless you struggle through it. That said, you won't always be able to move forward without some help. So how do you find that help?  

First off, forget books. They aren't a great place to start here, because the number and types of errors they can cover is so small.  

Online is the easiest place to find help. Most devs look for solutions on [StackOverflow](www.stackoverflow.com) or just google the error message (if they have one). Other solutions are to find newsgroups or forums dedicated to the language you're using.  

**How to use Google to get unstuck**  

When you first try to google an answer to your problem, you're going to run into the issue of what to search for. Experienced developers are really good at this part, but unfortunately, it's hard for beginners, who need it the most. So here I'll give you some expert hints on how to improve your search results.  

1. Always include the name of the language you're using. If you're using a specific tool, database, or framework, include that as well. Don't include *all* of them, just the ones that you believe are relevant. This will take practice.  
1. If you're getting an error message, include that _in quotes_. Edit the message to contain only the core of the message so it doesn't reference any files, classes, path or filenames that are specific to _your_ program or computer. The trick here is to make the error message as specific as possible while still being general enough to apply to others who are using the same language/tool/etc. but in a different context.  
1. If you're working through a publicly-published problem from a book or course, add that information to the search.  
1. Explain what you're trying to do, with the fewest words. This is tough for developers of all levels. For a beginner, you may have trouble coming up with the right terminology. This is where the books, tutorials, and course materials come in handy. They should use the right language if you're doing something similar to what's covered in them. If not, you're going to need to try some different wording. Remember, other beginners are going to be having problems too and might explain the problem the same way.  

Here are a few examples I’ve used (minus the quotes):  

* 'ruby rails form helper checkbox' - I included ‘rails’ because I knew the form_helpers were part of Rails. I could remove ‘ruby’ here since ‘rails’ is ruby-specific and should narrow the search fine. And yes, I know it’s “Ruby on Rails” but searching google for ‘on’ just doesn’t help.   
* 'ruby devise invitable after invited path' - Here ‘devise\_invitable’ is a gem, a Ruby code library (collection of reusable code) and I wanted to know more about its `after_invited_path` method. Google usually gives better results when you remove the underscores, ‘\_’. If not, try adding them in and enclosing the underscored words in quotes: “devise\_invitable”, “after_invited_path”.  
* 'java ""cannot refer to a non-final variable""' - The error I was getting _included_ “cannot refer to a non-final variable” but referred to files specific to my project before that phrase, so I didn’t include those parts.   

Once you _find_ a solution, *DO NOT COPY AND PASTE*. This is a huge no-no. Copying code verbatim from the web is a good way to slow your progress and keep you from becoming a better developer.   

You need to _understand_ the code, adapt it to your situation, try it and rinse and repeat. There's a risk of copying bad or wrong code, but you also may find yourself going deeper down the rabbit hole. If the code you copy or adapt doesn't fix the errors or creates new ones, you could be making your code more complicated and harder to understand all while trying to fix a problem.  

So go slow, understand the changes you're making and don't be afraid to back out and try a different solution. Sometimes the problem you're seeing _is_ caused by multiple issues, but not usually.  


**Getting help from a person**  

Since googling for a solution is an art that takes practice, it's easier and quicker just to ask someone. That assumes you have access to someone of course. A couple of ways to find someone to ask are, starting with the best:  
* Friends or family, or friends of friends or family.  
* Local meet ups, a la [meetup.com](http://www.meetup.com) or user groups (google for 'ruby user groups near me' or similar). This is a great idea anyway, in order to build a network of peers, mentors, and possible employers.
* campus groups if you're in or near a college campus.  
* [Reddit.com](www.reddit.com) (naturally) - [r/learnprogramming](http://www.reddit.com/r/learnprogramming) is a good place to start (you're here!) or language-specific subreddits like [r/learnjava](http://www.reddit.com/r/learnjava).  
* Local, virtual groups on [Slack](http://www.slack.com). Google for something like 'tech slack &lt;my city&gt;' or 'developer slack &lt;my city&gt;'  
* IRC, Internet Relay Chat. This is what slack has modernized and has been around for decades. A surprising number of tech companies have a presence on IRC. Google '&lt;my language&gt; IRC channel' to find one.
* Facebook groups (although I've found these to usually be lower-quality).  


**If you work better with more accountability and people, there are other options**  

Self-teaching is great but it takes a _lot_ of work. You have to figure out what to learn. You have to find where to learn it from. You need to understand how to get unstuck and what projects to do. You have to find people to meet to build relationships with. Furthermore, you’re not held to any commitments other than your own. For some people, that’s enough. Others, myself included, work better when held accountable to others.   

There are 2 main alternatives to self-teaching that address most of the difficulties, albeit for a price:  
* Degree programs at universities  
* Coding bootcamps  

Which is best for you is too big a topic for this post, but if you're interested you can DM me or add a comment and we can chat.  

I hope this is useful. If there are parts that are unclear, or you feel something is missing, let me know and I'll revise it.  

If you disagree with parts of this post, as I know some people will, let me know that too (I know you don't need an explicit invitation :) ) and if we agree, I'll update the post. 

EDIT: Adding PHP, game dev, data science and some clarifying remarks  
EDIT 2: Added notes for back-end development with C# and Java.",5780,368,e7hz3r0,2017-06-07 14:13:31,https://www.reddit.com/r/learnprogramming/comments/6fto5j/how_to_start_learning_to_code_when_you_dont_know/,1,learnprogramming
bu6645,Cornell's entire Machine Learning class (CS 4780) is now entirely on You Tube. Taught by one of the funniest and best professors I have ever had.,"You Tube Playlist:

[https://www.youtube.com/playlist?list=PLl8OlHZGYOQ7bkVbuRthEsaLr7bONzbXS](https://www.youtube.com/playlist?list=PLl8OlHZGYOQ7bkVbuRthEsaLr7bONzbXS)

First Lecture Notes:

[http://www.cs.cornell.edu/courses/cs4780/2018fa/syllabus/index.html](http://www.cs.cornell.edu/courses/cs4780/2018fa/syllabus/index.html)",5553,130,delta777er,2019-05-28 21:58:50,https://www.reddit.com/r/learnprogramming/comments/bu6645/cornells_entire_machine_learning_class_cs_4780_is/,2,learnprogramming
9n1gsb,Just turned 34 and I'm interested in trying a career in computer programming. How much of an uphill battle do I face?,"Here's a little background about me: My current job (mailman) has nothing to do with programming. I have a bachelor's degree, but it's in Liberal Arts. I have taken some math (precalc, statistics, algebra with trig) and enjoy math, but admittedly I don't know much about programming. I've been practicing Java on Khan Academy and I like it so far. I was wondering how should I go about it? Should I just keep practicing on sites like Khan Academy? Should I take courses online or at a community college? Is it unrealistic of me to think I can become a programmer at 34 with no real background in programming? I have to head back to work, but if you need any additional information I will answer when I get back. Thanks.

&#x200B;

Edit: Wow! I just got home can't believe all the responses I got. Thank you all so much for taking the time out to respond. I really appreciate it.",5497,863,flipadelphia22,2018-10-10 17:19:58,https://www.reddit.com/r/learnprogramming/comments/9n1gsb/just_turned_34_and_im_interested_in_trying_a/,0,learnprogramming
9mq4bt,Would anyone be interested in a website that teaches c++ from complete beginner to more advance concepts?,"I am thinking about making a website that is used to teach people programming. C++ first probably, other stuff later after that.

Would anyone be interested in this? The only thing that im considering, is that there are already hundreds of resources that do this same thing.

However, I feel like a lot of online resources just teach you the basics over and over again, and very few of them actually move on to more advanced concepts or help the readers understand where to go from there. Would anyone be interested in this, or would i just be making something that hundreds of other people are already doing? Let me know!",5452,340,InsaneTeemo,2018-10-09 15:27:42,https://www.reddit.com/r/learnprogramming/comments/9mq4bt/would_anyone_be_interested_in_a_website_that/,0,learnprogramming
drmk30,"""Automate the Boring Stuff with Python"" Udemy course is free to sign up for with code NOV2019FREE","https://www.udemy.com/course/automate/?couponCode=NOV2019FREE

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. I'll no longer be able to make free coupon codes with arbitrary restrictions. Instead I can:

* Make free codes that are only good for 3 days for an unlimited number of people (NOV2019FREE lasts until November 7, 2019 11:05 AM PST)
* Make codes that make the course cheap (but not cheaper than what Udemy offers, allowing them to undercut me) for unlimited people that lasts for 30 days. (I've made a code NOV2019 for this.)

There's two other options, but they're less than ideal: free but only 10 people can use it, or lowest price but it's only good for a few days instead of a month. I can only make 3 codes a month, so I can't just generate new codes every few days.

If you're reading this post after the NOV2019FREE code, you can use the NOV2019 code to get the course for about $14. I plan on making new free codes for the first three days of each month. You can probably guess what next month's free code will be.

To head off any questions:

* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers the same content as the book, which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python will be posted on the website in mid-November. It gets released on the 12th, and I'll need a couple days to format it to HTML and make it look nice.
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* I used to do free codes once or twice a year. The last time I did, I had an amazing 80,000 people sign up (so a dozen of them might have actually finished the course, if people are as good as I am about finishing the online courses I sign up for). Udemy's new policies mean I can't do this anymore. I find this to be a less than ideal situation. So I'm rolling out new codes each month. NOV2019FREE is the free code, and NOV2019 is the cheap code. I'll come out with new ones at the start of each month. (And yes, I'll probably write a script to automate this.)

EDIT: Hey, if anyone has ideas for how to motivate people to stick to and finish the course, I'd be all ears. Most people who sign up for gym memberships on New Year's stop going come February, and there's a similar dynamic with online courses. Anything that could up that rate would be good.",5261,309,AlSweigart,2019-11-04 19:20:14,https://www.reddit.com/r/learnprogramming/comments/drmk30/automate_the_boring_stuff_with_python_udemy/,4,learnprogramming
3xo4bo,I made 47 free C++ tutorials on YouTube and wanted to share them with you guys,"Dear /r/learnprogramming,

I made a free C++ course for beginners and it seems relevant to share it with all of you here. It's a full introductory course made up of 47 lessons that start with ""Hello World,"" assuming one has absolutely no programming experience, and goes on to cover loops, functions, vectors, and more. All the lessons all hosted on YouTube and organized into a course on my website. Hope you like it!

http://www.engineer4free.com/cplusplus  
  
EDIT: Wow thanks for the gold, upvotes, and all the feedback!!! This is a much bigger response than I was expecting, I'll hopefully get around to answering questions later today!
",5129,293,engineer4free,2015-12-21 05:53:10,https://www.reddit.com/r/learnprogramming/comments/3xo4bo/i_made_47_free_c_tutorials_on_youtube_and_wanted/,1,learnprogramming
8gqddo,I made this free tool for learning programming (it's like Duolingo for learning to code),"# [Coding practice](https://edabit.com/challenges)

* [C# practice](https://edabit.com/challenges/csharp)
* [C++ practice](https://edabit.com/challenges/cpp)
* [Java practice](https://edabit.com/challenges/java)
* [JavaScript practice](https://edabit.com/challenges/javascript)
* [PHP practice](https://edabit.com/challenges/php)
* [Python practice](https://edabit.com/challenges/python3)
* [Ruby practice](https://edabit.com/challenges/ruby)
* [Swift practice](https://edabit.com/challenges/swift)

I posted this here a little over a year ago when I first launched Edabit. Back then, the site only supported JavaScript, had about 50 challenges and was brand new with no user base. There are now over 500 challenges, it supports eight coding languages (and eight spoken languages for the UI), and has a pretty active community. So, I think it's worth posting again. If you've got any feedback, thoughts or ideas, I'd love to hear them!

Enjoy

**EDIT: Thanks for the gold(x3)!**",4989,192,memystic,2018-05-03 13:29:56,https://www.reddit.com/r/learnprogramming/comments/8gqddo/i_made_this_free_tool_for_learning_programming/,4,learnprogramming
le1uwk,"At the age of 29, I've been able to save up enough money to buy myself my first ever desktop computer! It's refurbished but this is huge for me coming from a third world country.","I've been browsing this site for a while, wishing for the day I will get to have my own computer and put more time to learning programming.

There is a lot of work to do but I'm really excited about the journey ahead!

Thanks for the inspiration!

**EDIT:**

Thank you for all the love and support. This has been a great dream and a great deal for me! I really appreciate all the comments and suggestions. I will spend to read every comment. I am very keen to actively participate in this community and learn so much! Bless you, all. 

**Thank you so much Reddit!!!**

**A few people have been asking I'm from Ghana, a city called Kumasi.**",4956,196,GHManno,2021-02-06 17:11:01,https://www.reddit.com/r/learnprogramming/comments/le1uwk/at_the_age_of_29_ive_been_able_to_save_up_enough/,1,learnprogramming
gyqxed,"After 2 years of learning programing, I knew how to write code, but didn't know how to make an application. So now, I'm writing the guide that I wish I had at that time. Here's part 1.","I call it [The Beginner’s Advanced Guide to building an App — Part I](https://medium.com/@abdul.osman8/break-it-down-or-the-making-of-an-app-part-i-b2f260c2dffb?source=friends_link&sk=a125b117c8a07ac6ba8296f2bc56077b). 

While I use React native to write mobile apps, I've left out the programming so you can use the language you need and platform you want (desktop, web etc),  and so that people who are non-technical can also use this guide. 

I hope to release this in 6 parts, around bi-weekly:

1- Getting your requirements

2- Designing the UI/UX

3 -  Cloud services and APIs

4 - Testing and Launching

5 - Post Launch

Bonus: Hiring and Working with Contractors 

The order above is not 100% and might change based on some of the feedback I'm getting.

This is the first article I've ever written, so if you have any critiques, I'd love to hear them!.",4915,176,smoke4sanity,2020-06-08 03:19:39,https://www.reddit.com/r/learnprogramming/comments/gyqxed/after_2_years_of_learning_programing_i_knew_how/,2,learnprogramming
7zj64e,40+ Programming PDF's,"[Here](http://book.goalkicker.com/) 

Someone shared this in my school group. I tought this may help people in here too.

Have a nice work :)

Edit: You're welcome everyone  🙂",4923,195,Mr_Lkn,2018-02-22 22:53:14,https://www.reddit.com/r/learnprogramming/comments/7zj64e/40_programming_pdfs/,0,learnprogramming
5iat63,I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them.,"## https://github.com/mrpappas/squeaky-wheel  
  
A couple days ago I posted a python script that monitored / logged my modem levels and a few people had mentioned [this guy](https://twitter.com/a_comcast_user?lang=en) who had set up his twitter to automatically tweet speed test results at his ISP.  
  
I thought that was hilarious and also a cool project so I gave it a wack myself.  
  
The script uses the same test the new Google Speed Test widget runs from [M-Lab (Measurement Lab)](http://www.measurementlab.net/) and if the results are below the specified threshold it sends out at tweet to the given ISP.  
  
[Example output](https://camo.githubusercontent.com/a2ee65006cda09b9f28a1220953fc30278d92b0d/68747470733a2f2f7332332e706f7374696d672e6f72672f6876353261756b6a762f696d6167652e706e67)
  
Original post:  https://www.reddit.com/r/learnprogramming/comments/5hl7ao/comcasttimewarner_was_pissing_me_off_so_i_wrote_a/",4884,268,leonardnimoyNC1701,2016-12-14 14:22:02,https://www.reddit.com/r/learnprogramming/comments/5iat63/i_was_pissed_at_comcasttime_warner_so_i_wrote/,0,learnprogramming
g98sn4,"Spent the last 100 days learning to code, and told no one","Hey Reddit, this is my first post ever. Seems like a cool community so I thought I'd share my story.

I started coding January 17, 2020, I’m now 101 days in.

*An interesting side note:* In the past 100 days, I have told no one what I was doing. My friends, family, girlfriend. No one knows that I'm learning to code. So you’re actually the first.

**Learning To Code**

I wanted to document, both quantitatively and qualitatively, what it’s like to learn coding. For anyone completely new to this, I hope it helps. To any vets, *your feedback is incredibly valuable.*

To begin, I started from actual zero. I didn’t know what a <div> was, a function, loop, the difference between front-end and back-end, and honestly I think I had never used a curly brace in my entire life.

I began reading blogs, detailing people’s personal journeys with coding. The most influential, for me, outlined how she became a developer in 1 year, making several original web apps along the way. She estimated her time spent learning to code (having documented every day she actually spent learning) around 300 hours.

When I actually committed to this Project, I oscillated between “how *fast* I can learn this”, and  “how *effectively* I can learn this”, the latter was without a consideration of time (and not to be confused with how efficiently can I learn this). I created a plan, knowing well that things would change as I moved forward. In the time since starting I've more or less kept to the original concept while tweaking details along the way.

**Base Level Plan**

I determined with focused practice, 3 hours a day, every day for 100 days, I would reach the 300 goal in, more or less, three months. Getting to the bloggers (who I based much of this project around) proficiency. I reached that today. *I still have quite a bit of work to do.*

Second I determined *FOCUS* was probably the single most important variable. It seems that many people “work” or “study” for much longer hours (I believe much of which is hyperbole), and see diminishing progress.

An analogy that I like to use is, if you give a bodybuilder and a novice the same weight to work out with, will they achieve the same results (or more specifically will they achieve equal muscular stimulation?) The answer is obviously no. Rest time between sets, movement quality, heart-rate, range of motion, time spent in eccentric vs concentric are all variables in the gym. All to say that, how you use the tool (time, in this case) is equally, if not more, important than the tool itself. Reducing all of “learning to code” down to  “time spent” simply  wasn't a helpful metric alone.

So what did this mean?

* Study Sessions would be no longer than 1 hour. After which I would take between 5-15 minute break before starting the next session.
* All notifications would be turned off every device I owned. None of the tools I would use would even *have the ability to* distract me.
* Using a focus app (Forest for IOS) I would set a timer before I started a Session, and then leave my phone in the other room. This allowed me to track actually time “in-focus”
* No other tabs would be opened. If I had a question, I would simply jot it down, and move on. (This became painful later on when trying to diagnose errors, but led to more time trying to reason through and solve problems in my own code. *i.e. a super important skill*)

Focus Stopped

* If I saw that my hour was up, regardless of where I was in my lecture or in my code, I would stop.
* My focus broke. I would count this as any time my mind wandered in any way.
   * If I started thinking about problems at work.
   * What I was going to have for lunch.
   * If I was working in a coffee shop and started eavesdropping on someone else's conversation
   * If I started fiddling with things on my desk, or daydreaming of any kind.
   * If my focus extended beyond the 60 minutes (which happened on the rare occasion I truly lost track of time. Usually deep in a project) that time would count. Thus leading to the possibility of 90/60 minutes of focus or a 150% focus for that session.
   * *Side Note:* I used a screen time restriction on all social media to 8 minutes a day, across all devices. I can’t attribute this to better focus (since I didn’t also conduct this independently while having a limit of, say, 2 hours) but I think it definitely helped, at least my mental health.

**The Three Phases**

I split my learning into three distinct Phases.

Each Phase is 50 days long. Split into five, 10 days Sections.

* ***Phase 1- Learn***
   * The learning Phase was all about figuring out “The right questions” to ask.
   * There was so much (and still is so much) about this world that I don’t know or understand. Learning the fundamental concepts was the first goal.
   * With that understanding I could begin to create a mental map of the road ahead, and more importantly find better tools to help me along my way.
   * There were some hiccups here, with direction.
   * For example, I started with CSS, then HTML, then moved to JS, then React. Realized I didn’t know enough JS to learn React so went back to JS. Learned some Node and Express, then back to React.
* ***Phase 2- Practice (Where I am now)***
   * The goal of this Phase is to create as much as possible.
   * To make things, either through code alongs, prompted projects, and even personal projects and experiments.
   * One of the best tools for this was learning a new method, and then the next day (leaving a little time to forget) test myself by trying to build a small, invariably ugly little application using it.
   * Many of my apps are beyond hideous. Inelegant code, little to no styling, but every once and a while I’ll write something and just look at it thinking “Wow, that’s actually pretty badass”
* ***Phase 3- Build***
   * This is all about building big, fully functional apps.
   * Working only projects that take weeks or even months to fully see realized. This is about trying to simulate, as close as possible what it’s like to *actually* be a developer.

**Tracking**

When I started, I didn’t even know what would be important to track. So things have grown, quite a bit, since day one. I spend about 3-5 minutes updating my spreadsheets before and after my hour-long Sessions. As well as 15 minutes at night writing a summary of everything I learned that day.

Here’s a link to Phase 1 and 2 Tracking as of today! There are accompanying Google Docs with notes, and summaries of what I learned everyday.

**Phase 1 Notes**

[**https://docs.google.com/spreadsheets/d/1eMZ9JO5CA\_kuagzTasagde46jVcUmJkipsnG9dKTWD0/edit?usp=sharing**](https://docs.google.com/spreadsheets/d/1eMZ9JO5CA_kuagzTasagde46jVcUmJkipsnG9dKTWD0/edit?usp=sharing)

**Phase 1 Focus Tracking**

[**https://docs.google.com/spreadsheets/d/1Rh78qLXiL\_MfllhI1OwbKKvvn0JXfH4avYP7TbACmcM/edit?usp=sharing**](https://docs.google.com/spreadsheets/d/1Rh78qLXiL_MfllhI1OwbKKvvn0JXfH4avYP7TbACmcM/edit?usp=sharing)

**Phase 2 Comprehensive**

[**https://docs.google.com/spreadsheets/d/1gN73DpRbQrBIPO4CAmNPcWBsE-9A8prEZWtOeY0-rUs/edit?usp=sharing**](https://docs.google.com/spreadsheets/d/1gN73DpRbQrBIPO4CAmNPcWBsE-9A8prEZWtOeY0-rUs/edit?usp=sharing)

**Tools**

Before listing out the Tools I use, I really want to warn you if you're thinking about starting on this journey. It’s not about the *specifics* of the tools. It really isn’t, and it's hard not to get caught up in that. It’s about the application of the knowledge, thats where the real learning happens.

When you JUST start out, find an instructor online that you like, and make sure the course is up to date. Those two will get you 80% of the way there. Keep moving forward, momentum is your friend.

As you’ll see below, I like Colt Steele, his style is great BUT at this point I’ve realized I need to see other people write code. So in addition to learning new material during a course, I’ll search on YouTube for the same *specific* topic that he's teaching, and watch how other people implement that technology. There are so many ways to do the same thing. Now..... tools!

**Tools**

* ***Codecademy***
   * I used the editors on here to complete HTML, CSS, JS and React.
   * This and FreeCodeCamp are where you start.
* ***FreeCodeCamp***
   * What’s nice about them is the blogs that are featured on their site.
   * I also signed up for their newsletter which features some interesting articles and quick reads to expose you to more of this world.
* ***YouTube***
   * Avoid at all costs, honestly.
   * Now obviously you’ll need to go here, but youtube is kinda like the slimy underbelly of learning to code. You go in for something that you need, but (quite literally by design) you’ll be enticed to stay, go off on tangents, and start thinking to yourself “Hmm I wonder what extensions he’s using on VS Code” or “Wow, I do need to know the top 7 tricks that ex-Facebooks used to get an interview”
   * Get it, get out. Other than that, there are a few good Youtubers, who have udemy courses. Which leads me to...
* ***The Web Developer BootCamp (Colt Steele Udemy)***
   * Great, great, great introduction to full stack web development.
   * Slightly outdated. In all honesty I cut it short when it came to the backend because almost everything they were discussing and tools they were doing needed to be modified in some way.
   * At the time I wasn’t great at reading documentation, so I ended up spending more time trying to make code compatible, than actually progressing through the course.
* ***Modern JavaScript BootCamp(Colt Steele, Steven Gridder Udemy)***
   * This was a doozy, directly after The Web Developer BootCamp. It rehashed alot of the same topics, but with new examples and updated JavaScript syntax which is nice.
* ***The Modern React BootCamp (Colt Steele, Udemy)***
   * I’m still working on this now. So far, I would give it (and plan to) 5 stars.

In addition I just bought

* ***The MERN fullstack guide (Maximilian S.,  Udemy)***
* ***CSS- The complete guide 2020 (Maximilian S., Udemy)***

Beyond this, in my notes I list specific documentation I read on a daily basis, blogs, and specific YouTube videos.

**Goals For Phase 3**

Next as you can see I’ll be working on both deepening my understanding of backend development, as well as design and CSS. Kind of seem at odds right?

***Goals***

* ***Post more on Reddit***, and get more involved in the community (timing is pretty awful, I know).
* Create projects and seek feedback from other developers.
* Have actual conversations with developers and in an attempt to uncover my blindspots, and to help tweak my trajectory.
* Publish on Github.
* Build something aesthetically pleasing (lol).

I hope this was helpful if you’re just starting out on your journey. If you have any questions for me, please feel free to reach out. I’d love to talk to someone about this, considering I haven’t in the past 100 days.",4829,366,zac_solo,2020-04-27 20:32:59,https://www.reddit.com/r/learnprogramming/comments/g98sn4/spent_the_last_100_days_learning_to_code_and_told/,0,learnprogramming
itbw45,Lessons for beginners and junior developers after 11 years of coding. Some of these are things I wish I knew at the beginning so I could stress less.,"Let's jump into it.

# All tutorials are not created equal

Imagine yourself as a lab rat.

As you learn and experiment, pay attention to the kinds of tutorials that work for you. Many will not work. That’s fine. In fact, that’s exactly how experiments work until you find a solution.

After you strike gold, stick to it, consume it voraciously and then find similar tutorials like that to continue rapid growth.

When I started, I used to bang my head against *Head First Java*, the book. But after studying for many hours, I just wasn’t getting anywhere. Yet, everyone online said it was the best book ever. But an old java youtube tutorials did it for me.

I wish I could say this stopped after my 1st year.

Fast forward 2 years down the line when I started learning algorithms and *ALL* the blog tutorials I followed just didn’t make sense until I watched Youtube videos on Hungarian folk dance teaching algorithms.

And it just clicked.

Since then, my approach to learning has been **to learn the same thing from multiple places until I find the instructor and style that works for me.**

&#x200B;

# Work within fear; not against it

I’ll admit: this one is easier than done.

But you have to master this if you want to last long.

There’s this temptation to fix your fear first before you continue to learn. Unfortunately, it doesn’t work like that.

In fact, you’ll spend a lot of time trying to make your fear disappear that it’ll only double your anxiety. You have to find a way – your way – to acknowledge that you’re afraid, and frankly will continue to be afraid for a long time, then work within that realization. No need to fight it.

Sometimes, this fear disappears as you become more proficient.

Other times, it vanishes for a while and comes back when you get into a new environment, work with smart people, or move to a completely new stack.

It’s okay.

**This** ***IS*** **the life.**

It’s a sinusoidal wave – endlessly going up and down. Don’t take it too seriously or you’ll lose yourself.

&#x200B;

# You’ll forget a lot of things

Deeply understanding this will change how you learn.

I can’t can’t the number of times I took Introduction to Python programming on Udacity, Coursera, etc and still forgot everything.

It’s so annoying.

But I’ve since learned that you’ll forget anything you learn in isolated exercises because they are stored in short term memory. Neuroscience research shows that this is just how the brain works.

If you don’t want to forget, test your knowledge using spaced repetitions. To do this, build projects.

I’ll give you a concrete example: len(myList) will give you the length of a list in Python. You’ll learn this in Udacity’s intro course.

Come back a month later and you might not remember if it’s len, length() or myList.size( ).

But with spaced repetition through a project, the outcome is different. For example, you work on a 2-month long Django app for new coders where you need to count multiple times the number of users, the number of exercises done, the number of chats, etc. Imagine doing this throughout the span of the project, for two months. it’s hard to forget what len( ) does.

This is a trivial example, but hopefully you get the idea.

New learners can start with simple, isolated examples.

But **if you’re not practicing within the scope of a project that makes you use and reuse what you’ve learned, nothing is going into your long term memory;** it’s all short-term. And you’ll forget.

&#x200B;

# Consistency > hard work

Consistency is king.

When you start learning,  you lay down neural pathways that make it easier to retrieve information. According to Neuroscience research, these pathways only get strong through frequency of use, not just intensity.

**This means 30 minutes a day, for 5 days a week is way better than 2.5 hours one day, only once a week.**

Same hours; Different impact.

Don’t just work hard, apply wisdom here.

&#x200B;

# Talent = hidden practice

It’s easy to dismiss progress as talent.

My first programming class was in C++ and my classmates refused to believe I had never coded before because I was *just-so-talented*.

But what they also refused to accept was that right after class, I would spend five hours typing *cout << “this is my first program”,* realize it didn’t run because I forgot a semicolon; retype it and realize it didn’t print out my statement on a new line because I didn’t add *endl*.

This deliberate practice built perceived talent.

Talent is sexier than hustle so no one wants to hear that you worked hard and got here. Just tell me you were born this way - it’s more believable.

But becoming a proficient developer is like playing an instrument.

Only a tiny few are born talented.

**The majority can only get as good as the amount of practice they put in.** And you can immediately tell a student hasn’t been practicing the moment they sit at the keyboard.

&#x200B;

# You’ll meet a**holes

I’m not sure what it is about this field that attracts a\*\*holes. Maybe because coding gives the feeling of having a super-power or a rare skill.

If you’re a newbie, you’ll meet those who’ve been coding for years and think no one else should come in.

A windows developer only? You’ll meet linux fanatics that think you’re mediocre.

If you’re a woman, you’ll immediately be dismissed because of your gender. I know this from personal stories from colleagues over the years.

If you’re a minority, you’ll meet people who think you should only fetch coffee; not code.

If you’re coming from another field (particularly not STEM), you’ll meet people who automatically make themselves gatekeepers of the programming community. *“We don’t want social scientists here; we’re purists!”*

They’re online. At work. And sadly sometimes in your family.

*It’s not if you’ll meet them, it’s when.*

**Learn to move on.**

Things are getting better but there’s still a lot to do to educate people.

But don’t let this deter you. Build your resilience so you don’t quit after you meet these people.

And when you get to the top don't be an a\*\*hole.

&#x200B;

# Master 1 thing

New devs tend to jump around learning a lot of things.

Okay, it’s not just new devs; it’s also experienced folks.

You learned React for one week.

Then Django for two weeks.

Laravel for three.

**Stop**.

You need to wake up and realize that the harsh truth is that you’re simply extending the time it’ll take you to truly learn anything.

>*“If one is a master of one thing and understands one thing well, one has at the same time, insight into and understanding of many things.”* \- Vincent Van Gogh

Pick one thing.

Stick with it for a few months – ideally 6 to 12 months before you move to something else.

This has two benefits:

1. You’ll go deep enough and hit critical mass that moves you towards mastery.
2. After you master one domain, you can transfer knowledge to another.Learn Flask and you can easily walk into Django. Learn React deeply, and you can quickly identify the pros and cons of Laravel within a few days.

&#x200B;

# Software dev is an ever evolving field.

It’s exciting.

It’s frustrating.

It’s intimidating.

But if I had to, I’d do it all over again.

&#x200B;

# Thanks for reading

If you have any questions, let me know.

I’m trying out a new initiative to help new developers feel less overwhelmed and learn smarter.

To be honest, I’m not sure what this looks like yet. But I’m putting together some resources and write-ups based on what people need the most help with.

If you’re interested, I’m [@LifeTechPsych](https://twitter.com/LifeTechPsych) on Twitter. Feel free to DM me what you’d need help with.

Heads up - I love research so I tend to back my advice and approach with concepts from Behavioral Psychology and Neuroscience.

&#x200B;

**Edit**: removed mention of old java youtube tutorial I used back in the day but I see is now discouraged.

**Edit 2:** This blew up more than I expected. I'll do my best to get to all questions and DMs. There are interesting questions about tutorials and studying patterns that I think others will benefit from so I'll shoot to write posts in the future that specifically address those. The Learning never stops! Let's go!!

**Edit 3:** I initially didn't link to my blog post with images. But another blog copy-pasted this poorly and w/o credit. So here goes a [proper blog post](https://www.lifetechpsych.com/lessons-for-junior-dev/).",4764,238,a-gentility,2020-09-15 16:12:11,https://www.reddit.com/r/learnprogramming/comments/itbw45/lessons_for_beginners_and_junior_developers_after/,2,learnprogramming
yrepyf,Do you want to simulate a real software engineering job?,"Hey everyone - I'm Seb.

I am a senior web dev, and I believe there are some core skills required for software engineers that majority of courses generally don't dig into. Things like reading other people's code, reading documentation on libraries/frameworks, and debugging.

To help fill this gap, I started something called JobSimulator. I make simple front-end projects, add some bugs to them, put the bugs on a task management board (github issues), and share it with you on github. The idea is to give beginners a chance to simulate a real world dev job.

I'm excited to release a new vanilla HTML/CSS/JS challenge 🎉

It's a [Vanilla HTML/CSS/JS Login](https://github.com/developer-job-simulation/vanilla-login-form) form with a couple of bugs and feature requests. Your job is to fix 5 issues that will give you experience with:

* How to use vanilla JavaScript to manipulate the DOM
* How to use vanilla JavaScript to listen to form submission events
* How to use [Client Side HTML form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)
* Vanilla Javascript methods for [searching through array data](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
* How to use [CSS Flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox) to center elements on the page
* [modern JS syntax](https://www.w3schools.com/js/js_es6.asp) ([arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals))

I am also taking a new approach to checking your work with automated PR testing 🦾 When you open a PR to submit your answer, github actions will run automated tests on your code and tell you if you've succeeded ✅ or failed ❌ at solving the issue.

I'm excited to see what you think. As always, all of the above is free and available on github. If you need help, check out [the project readme](https://github.com/developer-job-simulation/vanilla-login-form#vanilla-login-form-by-jobsimulatordev).

My goal is to make helpful challenges that give you a chance to apply the knowledge you are learning from your studies. I'd love to get your feedback and prepare another challenge for you. Please let me know what you're looking to learn next in the comments below, and I'll use that feedback to help me make better challenges.

Kudos, and I hope you like it! 🙏",4730,201,sbmsr,2022-11-10 13:19:01,https://www.reddit.com/r/learnprogramming/comments/yrepyf/do_you_want_to_simulate_a_real_software/,4,learnprogramming
v47qfk,I (self-taught) had my first-ever interview for a web dev job yesterday. Here is what the interview was like and the questions I was asked. [Long],"**\[Interview questions at the end\]**

Hey everyone,

Long-time lurker, first time poster. I see a lot of posts on here asking about what it takes to become a self-taught developer and what you need to know to get your first job. I appreciate reading the detailed answers people give, and I find comfort in seeing that I might be on the right path in my learning. In an effort to contribute to the community here, I thought I would share my first interview experience. I hope this is helpful for some of you out there. I'll answer as many questions people have as I can.

Here's the context:

**Me:** 

I am self-taught, in my 30's, with zero professional software development experience.

* I have a bachelor's degree in a non-tech field (linguistics).   

* I have 10 years' experience teaching English in Canada, no formal tech experience.  

* I have done freeCodeCamp's Responsive Web Design course and The Odin Project's Foundations course.  

* I am 38% finished with The Odin Project's Full Stack JavaScript curriculum, but I have jumped ahead to learning React through a Udemy course (Zero to Mastery).  

* I have one project to speak of. It's a meal planning web app where you can input recipes, and then add recipes to a meal plan and populate a grocery list from the ingredients of the recipes in your meal plan. It's a mess of an app. It was kind of a learning playground for me, and it's missing a lot of functionality. I only started organizing my files properly halfway through writing it, and I also switched to writing it in TypeScript halfway through after I watched a 40-minute intro to TypeScript video on Traversy Media's YouTube channel. I'm currently working on rewriting the whole thing in React + TypeScript. This is a personal project that I made to meet a need in my own life.  

* I have been applying to jobs casually as I learn, mostly through Indeed and LinkedIn, but occasionally I'll put more effort into a cover letter for a local company or a job that I think I have a realistic chance of getting. **I've done over 100 applications, and I have had positive responses from 3 companies**, with 2 of which I didn't get past the first stage. **For this company, I wrote a tailored cover letter.**

&#x200B;

**The job:**

Junior Full-Stack Developer (Remote)

Requirements in the posting:

* Bachelor's degree (field not specified)
* 1-4 years IT industry experience
* Experience in one or more JS frameworks
* Experience in one or more backend languages

Listed nice-to-haves:

* AWS/Azure/Google Cloud, Docker/Kubernetes, API Gateways

\*Posting included salary range and a list of benefits

&#x200B;

**The interview:**

This was the **third stage** of the interview process, the Technical Interview. First was a screening call with the HR person. Second was a coding test on **HackerEarth** (which I failed the first time but was allowed a second try with a different set of problems because I had been just below their required score). It took them 3 weeks to schedule the tech interview because the senior devs were busy or taking time off (or no one wanted to do it?).

The interview was done over Google Meet, and it was scheduled to be **45 minutes**. There was one interviewer, a senior dev, who kept his camera off. He was friendly but sounded tired.

After asking me to briefly introduce myself, he got right into the questions. I got the impression he was reading from a list of questions by topic, and he chose the topics based on what I had on my resume and what I had mentioned in my introduction.

&#x200B;

**The questions:**  
**\*(Questions in bold are ones I didn't know or didn't have a great answer for.)**

1. JavaScript
   1. What are the different types of variables in JS? How are they different from each other? (This one confused a lot of people. He was looking for distinctions between var/let/const)
   2. What are some different ways to create an object in JS? (eg. Object literal, new keyword)
   3. How can you get the type of a variable in JS? (typeof)
   4. Can you tell me the difference between == and ===?
   5. Do you know what arrow functions are? **How are they different from traditional functions?**   
**(I said I had read about this (true) but couldn't remember off the top of my head.)**
   6. What can you tell me about 'callbacks?'
2. TypeScript
   1. What are some features of TypeScript that JS doesn't have?
   2. What are some disadvantages of TypeScript?
   3. **What can you tell me about access modifiers?**   
**(I said I didn't know what they were and asked if he could tell me. He gave an example, 'private,' which I had seen before. I said 'Oh ok, like public and private functions. I haven't used them yet, but I imagine private functions are meant to be restricted from any user access or modification, which he said was more or less correct.)**
3. React
   1. Why do we say, 'Everything is a component' in React?
   2. What are some advantages of using React?
   3. What can you tell me about JSX?
   4. What's the difference between 'state' and 'props?'
   5. What is the difference between a 'stateful component' and a 'stateless component?'
   6. What is the difference between DOM and Virtual DOM in React?
   7. What is React Router, and why would you use it? (With this one, the interviewer seemed satisfied with my answer for why being that with Router, you can persist certain elements on the page while changing or re-rendering others that you include as subroutes. For example, the navbar can remain while having the main content of the page change. The navbar won't need to re-render as it would with basic anchor tags to separate HTML pages, which can improve performance.)
   8. What are 'events' in React? **How are they different from events in JS?**
   9. **What is a 'higher order component?'**
   10. **What are 'mixins' in React?**   
**(Didn't know. I said I know what they are in SASS, so he asked me to tell him about mixins in SASS)**
   11. **Have you used Redux? What can you tell me about it?**   
**(My answer was that I am just learning about it now (true), and that it uses 'actions' and 'dispatch' functions instead of hooks for updating state)**
4. Databases
   1. What can you tell me about different kinds of databases?
   2. What experience do you have with different databases?
5. Backend
   1. **What experience do you have with backend languages, like Node?**   
**(My answer was 'Not too much yet, just a little with Node, but I'm really interested in learning as much as I can because I find the full stack really fascinating.')**

&#x200B;

There were a few more questions about JavaScript and TypeScript, but I can't remember them all. The last question about backend languages was at about the 35-minute mark. Then he asked me to show him my project through screen share. I took a few minutes to show him all the functionality. He asked if I had coded it all myself or used any templates (100% designed and coded by me). Then, he said the interview was over and asked if I had any questions. Salary and benefits were listed on the posting, so I asked some light questions (What's their team structure like? What does the company name stand for? (It's an abbreviation of letters, but its meaning wasn't listed on their website anywhere I could see. I wanted to show that I was curious.)

Now, I'm waiting to hear the result. I don't expect to get the job, but I enjoyed the experience of the interview despite the stressfullness. I'm glad I now have some idea of what to expect and what I might need to be able to talk about for future interviews.

I hope this is helpful for some of you other aspiring programmers/developers!  

Edit 1: formatting  
  
Edit 2: added other JS questions I remembered about callbacks and ===  
  
Edit 3: Some links to interview prep questions from comments and ones that I read before the interview:  
* https://arc.dev/developer-blog/reactjs-interview-questions/  
* https://github.com/sudheerj/reactjs-interview-questions  
* https://github.com/sudheerj/javascript-interview-questions  
* https://github.com/DopplerHQ/awesome-interview-questions  
   
Edit 4: Thank you everyone for the upvotes, awards, and comments. I'm glad this was helpful! I'm headed off now, but I'll try and answer any other questions people have later tonight.  
  
Edit 5: Clarified a couple of the questions",4662,305,jojawhi,2022-06-03 20:03:59,https://www.reddit.com/r/learnprogramming/comments/v47qfk/i_selftaught_had_my_firstever_interview_for_a_web/,1,learnprogramming
hca1ig,"Had to teach my ""Learn Python for Research"" PhD course remotely and decided to make the recordings and material publicly available for those interested. Feel free to check it out!","I teach a yearly PhD course on programming with Python for (social science) research. However, this year I had to deliver the course remotely and recorded a bunch of videos to go along with the material (to substitute for in person classes).  So I figured to make it publicly available for those that are interested.

It covers five main topics:    
\* Basic basics  
\* Handling data with Pandas  
\* Gathering data from the web with Python  
\* NLP with Python  
\* Misc. topics / Best practices

Each topic will come with an accompanying lecture, demonstration recording, and problem notebook.

The Github repository is here:  [https://github.com/TiesdeKok/limperg\_python](https://github.com/TiesdeKok/limperg_python)

The Youtube playlist is here:  [https://www.youtube.com/playlist?list=PLLhTRTyOWssE95iZqJGtD8A9YP1DtSl4i](https://www.youtube.com/playlist?list=PLLhTRTyOWssE95iZqJGtD8A9YP1DtSl4i)

The reference material is here:  [https://github.com/TiesdeKok/LearnPythonforResearch](https://github.com/TiesdeKok/LearnPythonforResearch)",4660,101,Tieskeman,2020-06-19 22:14:28,https://www.reddit.com/r/learnprogramming/comments/hca1ig/had_to_teach_my_learn_python_for_research_phd/,1,learnprogramming
34r807,"I'm 32 years old, and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned, I found via /r/learnprogramming, so just wanted to share my experience.","Just wanted to share my story here, in case anyone is interested.

**About me**
I initially started programming for fun, but quickly realised that it was something I could see myself doing as a job as well.  So I pursued it.

I've worked in the film industry for the last 8 years, and have been ready for this change for a while.  I reached a point in my career where I felt I had plateaued, and to be honest I felt a bit worried about my long-term financial stability.  The industry has gone through some very painful changes lately, and most people I know are quite worried.  Being self-employed was also starting to become a bit of a drag.

**How I started**
I got all my ""how to get started"" information from /r/learnprogramming.  I read the FAQ, and then tried out some of the different courses that show up in the subreddit, including the Udacity programming 101, 'Learn Python the Hard way' as well as various Coursera intro courses.  

I was definitely pretty directionless at first, and not really getting anywhere.  Eventually I saw a link on here for [The Odin Project](http://www.theodinproject.com), so I decided to check that out.  Something about the program clicked, so I stuck with it - maybe because it's so focused, as it's geared toward skilling you up to be employable as a web developer.  (I'm not associated with the website, btw, other than that I've done the full course).

**Key things I learned in the last year**

- It's extremely important to work your ass off.  If something is hard, then you need to learn it.  If it feels impossible, sit your ass down and work your way through it.  It's literally the only way you will ever learn.  Programming is the hardest thing I've ever done in my life.  Even now that I'm getting paid, I know that I'm still a total beginner.

- The best way to get noticed is to talk about the things you've built.

- The second-best way to get noticed is to talk like a human being.  All my job application cover letters had a pretty casual tone, which seemed to work - I got something like a 60% callback rate.

- When you land an interview, don't be afraid to demonstrate enthusiasm.  Nobody wants you to be amazing, they just want to feel like you care, and like you can learn to be an effective programmer.  (Also it's ok to be nervous).

- Make sure you have a GitHub and Stack Overflow Careers page.  LinkedIn can't hurt, but be prepared to receive lots of recruiters emails from there.

- I worked my ass off, but I couldn't have done it myself.  My partner supported me, both morally and financially.  

- Career changes are extremely stressful.  It was hard on all my relationships, most of all at home.

- Make sure you learn the principles behind programming, and not just a ""language"" or ""framework"".  If you do this, you will be able to pick up new technologies when you need to.  I learned mainly Ruby as well as RoR, but I landed a job as a Node.js developer because I showed that I'd be able to pick it up quickly.

**Timeline of my progress**

*March 2014*

Stumbled around trying to learn to program, trying all sorts of different things, including Python and Unity 3D

*April 2014*

More blind stumbling, but also some (limited) amount of learning.  Found out my partner is pregnant.  ""This career change thing better work out"" she tells me.  No pressure.

*May 2014*

Started The Odin Project.  Felt like ""hey, this is challenging, but a lot of fun"".  Made me feel like if I worked hard, I could really make this happen.

*June 2014*

Started learning Ruby scripting, OOP principles, etc.  This was probably the hardest part of learning programming for me - it felt like I was rewiring my brain.  I spent hours banging my head against the keyboard, trying to make my assignments work. I would be staring at something, unable to make heads or tails of it.  It was incredibly frustrating. I actually ended up taking time off from work, so I could spend more time on this.

*July 2014*

Had to work extra hard at my job to make up for the work I missed in June, so I didn't have tons of time for code.

*August 2014*

Again, not lots of time for code, but I did get to start learning Ruby on Rails.

*September 2014*

Lots more time spent learning Rails, and the principles of MVC.  Again, I took time off work to focus on my studies.

*October 2014*

Started learning JavaScript, which was actually somewhat straightforward as I felt I had a solid grasp on the fundamentals now.

*November 2014*

Wrangled a small part-time job writing a Rails-based CMS for a touring artist.  I was basically doing full-stack work for almost no money, but it's great experience.  I eventually ended up creating the back and front ends for a blogging, photo uploading, and event management system administered by a single user.  Also went to a big local careers fair, which landed me a few interviews.

*December 2014*

My partner and I have our first child.  No time for studying!  I ended up loosing out on some of the job interview opportunities as well as a result.  Such is life.

*January 2015*

Started studying again, solidifying my understanding of the principles I've learned throughout 2014.

*February 2015*

Started applying for jobs, while simultaneously working harder at film work than I ever have before.  Made a ton of money, landed a few interviews, did a few programming tests.  Did ok, feedback was generally good, but received no job offers.

*March 2015*

Film work dried up, but I interviewed and received a job offer with a startup looking for a Junior Ruby Developer.  However, I ended up rejecting the role, because they needed someone who was willing to work long and unpredictable hours plus unpaid overtime.  I'm not against those kinds of roles, in fact they're great for people who want to learn a lot - but I wasn't prepared to sacrifice time with my daughter this early in her life.

*April 2015*

The day after I turned down the job, I got an email from somebody who found my Stack Overflow profile, asking if I would like to come in for an interview.  The reason they were interested in me is because I had a film background, which was needed for the role.  They were upfront about the fact that I am probably too junior for the role, but it would be worth having a conversation anyway.  The meeting ended up going very well, and I started freelancing with them on a trial basis.

*May 2015* 

I became full time with the company, after showing myself to be useful, and a quick learner.  The work is lots of JavaScript - mainly Node.js, which is tricky because it's not something I have ever used.  However, I've shown the company that I can learn quickly.  Now that I'm full time, I've got to prove that their faith in me is not misplaced. 

**EDIT** I posted this and went to bed.  Guess it kind of blew up, so I'm answering questions now :)

**EDIT2** Thanks for the gold :)",4654,399,None,2015-05-03 21:28:55,https://www.reddit.com/r/learnprogramming/comments/34r807/im_32_years_old_and_just_started_my_first/,1,learnprogramming
6w5vgy,"Huge list of Computer Science courses with video tutorials, compiled from all over the internet.","I came across this Github a year back and I've always referred to it when I want to learn something about some area of Computer Science subject I'm taking at college.


I hope this resource helps you as much as it has helped me.


Here's the link: https://github.com/Developer-Y/cs-video-courses",4589,77,faizanchaki,2017-08-26 14:37:36,https://www.reddit.com/r/learnprogramming/comments/6w5vgy/huge_list_of_computer_science_courses_with_video/,0,learnprogramming
dzzflm,"If you are learning programming(newbie), these may be your treasures on the internet!","As many ask for free resources in this vast world of internet, so I thought of sharing these treasures with you I came across on Twitter.

👉**16 Sites you can learn coding for free.**

- **GitHub**
- **Codecademy**
- **Treehouse**
- **Udemy**
- **Coursera**
- **Khan Academy**
- **W3Schools**
- **EdX**
- **FreeCodeCamp**
- **Evanto tuts +**
- **Codeconquest**
- **Udacity**
- **Sololearn**
- **Code Avengers**
- **Learnenough**

**ETA from comments:**

- **The Odin Project (TOP)**
- **GeeksforGeeks**
- **chingu.io**

👉**10 Free Games to improve your coding skills**

- **CodeMonkey**
- **Flexbox Defense**
- **Ruby Warrior**
- **CodeCombat**
- **Robocode**
- **Cyber Dojo**
- **Code Wars**
- **CodinGame**
- **Flexbox Froggy**
- **Code Hunt**

**ETA from comments:**

- **exercism.io**
- **edabit**
- **HackerRank**
- **Advent of Code**
- **Leetcode** 

👉**10 Programming Blogs You can follow**

- **Coding Horror**
- **A List Apart**
- **Codepen**
- **The Crazy Programmer**
- **CodeWall**
- **Cloudscaling**
- **CodePen Blog**
- **Hackster . io**
- **CSS-Tricks**
- **The Mozilla Blog**

**Edit to Add:**

👉**Here are 20 YT channels to follow** 
- **Corey Schafer**
- **TheNewBoston**
- **Traversy Media**
- **Dev Ed**
- **Sentdex**
- **Data School**
- **FreeCodeCamp**
- **ProgramWithErik**
- **Coding Garden With CJ**
- **FunFunFunction**
- **The Coding Train**
- **CodingPhase**
- **CSDojo**
- **MMTuts**
- **LevelUpTuts**
- **Wes Bos**
- **Academind**
- **The Net Ninja**
- **Stefan Mischook**
- **Caleb Curry**

**ETA from comments(mostly for learning C++):**
- **Javid9x**
- **Bo Qian**
- **CoffeeBeforeArch**
- **Vadim Karpusenko**
- **The Cherno**
- **RealToughCandy**

**ETA(Android and iOs apps for learning programming)**
- **SoloLearn**
- **Codemurai**
- **Encode**
- **Mimo**
- **Programming Hero**
- **Enki App**
- **Grasshopper**
- **Tynker**
- **Easy Coder**


If you know and use other resources, please do mention in your comments so that others may find them helpful. 

Have an amazing day! 
Happy coding! :)",4488,226,Datadevourer,2019-11-22 10:55:01,https://www.reddit.com/r/learnprogramming/comments/dzzflm/if_you_are_learning_programmingnewbie_these_may/,1,learnprogramming
lrcrxx,To make career-planning less confusing while learning to code and I made a website with over 50 CS career roadmaps!,"Hey folks! Four years ago as I was learning to code, I was frustrated about my lack of clarity about where to go and whom to learn from. With overwhelming career choices within tech and everchanging programming languages and frameworks, the first few months were painfully hard for me.

Six months ago I decided to revisit this problem again and came to learnprogramming to talk with folks to see if they still faced this problem and they very much did. To solve this, I decided to build a web-app to curate and share learning roadmaps where people who are new to coding can have more clarity regarding how to go about building their tech career and hopefully not face the problems which I did.

I managed to get over 50 learning roadmaps on a variety of careers and programming languages which I gathered from my friends, network and the internet and it's only increasing by the day! If you want to give back to the community, feel free to build your own roadmap and share your journey with the people starting out! I'd love your feedback and your criticism to know how I could make this better.

You can find the platform here and everything is entirely free - https://reallyconfused.co

Best Regards.",4438,315,roonishpower,2021-02-24 13:22:54,https://www.reddit.com/r/learnprogramming/comments/lrcrxx/to_make_careerplanning_less_confusing_while/,3,learnprogramming
uey0xs,"Guys, I did it. After a year, a bootcamp, a bunch of rejection, I got a job working as a dev in a language I don’t really know on a platform I don’t understand.","I’ve never posted here, but I’ve lurked a long time. I’m 30(M) from central Alabama in literally the middle of nowhere. I’m posting to hopefully provide a positive underdog story. 

I started my development journey learning C# about a year ago. I was in trade school for CNC programming and had worked at a machine shop for 12 years. As of right now I haven’t graduated. I joined a .Net bootcamp and struggled through most of it, but did manage to graduate about a month or so ago. I built about 40 or so projects, 90% working off the bootcamp projects. 

I started putting out feelers on LinkedIn, randomly applying for jobs, reaching out to recruiters, all that. I finally got a bite with a guy that had an entry level dev job available and was willing to set me up with an interview, but the pay wasn’t anything more than what I was making as a machinist, and the job was 70 miles one way. But I figured why not, I could use the interview experience. 

I get up there and the interview is going about how you expect. Brain teaser type questions, whiteboard stuff. I felt like I was bombing it. The job itself is mostly writing JavaScript on a platform I had literally never heard of. I was brutally honest, about my education, my blue collar background, everything. I figured walking out that I had bombed it. 

They called me a few days later and offered me the job. They said they appreciated my approach to the interview, and thought my background could be an interesting addition to their team. I just finished my first week and it’s been amazing. Three days remote, two in office, flexible hours, really well managed from what I can tell. Totally different world from the machine shops and foundrys I’m used to. Now if only I could get my ears to quit ringing when I’m in the office, but maybe that comes with time. 

The reason I’m posting is to say that if this college dropout, machine shop redneck from Alabama can pull this off, you can too. Don’t ever give up, and be honest about who you are in the interview. Good places run by good people can overlook things like that.

Edit: Since people keep asking the bootcamp was TrueCoders down in Birmingham.",4383,283,DogfaceJake,2022-04-29 23:07:44,https://www.reddit.com/r/learnprogramming/comments/uey0xs/guys_i_did_it_after_a_year_a_bootcamp_a_bunch_of/,1,learnprogramming
i0kld3,How students get themselves into tutorial hell and how to get the heck out of it.,"If you're learning to program, there's a good chance that at some point you've been stuck in ""tutorial hell"". It's an experience of doing more and more tutorials, but being unable to actually build anything. Many essays and videos have been made about this topic, but I've never seen someone else describe the perspective I'm going to share.

Tutorial hell is an unstable system of perceived incompetence caused by students using the wrong methods to fix the difference between what they know how to do and what they've been exposed to. That's a doozy of a sentence and I'm going to spend the rest of this essay unpacking it.

A quick review on stability. A system is stable when it will tend to return to some state. Imagine an apple in an otherwise empty fruit bowl. You poke it, and it rolls down to the bottom. That's stable. Flip the fruit bowl over and put the apple on top. You poke it, and the apple rolls off to the side. That's instability.

Incompetence just means not knowing how to do something. It also has a connotation of being dumb, but that's unwarranted. It's a temporary state. Learning is just going from incompetence to competence.

When you learn things, especially programming, there's a difference between what you've been exposed to and what you actually know how to do on your own. This makes sense. You wouldn't expect to look at everything just once and be able to do it on your own forever. The need for repeated exposure makes the group of things you've been exposed to much larger than the group of things that you can do on your own.

The difference between what you know and what you've seen causes perceptions of incompetence. ""I've done a React tutorial, why can't I make a React app? I watched that algorithm video, why can't I solve coding problems?"" This delta between ability and exposure causes anxiety in many students.

Where things go wrong is how students try to fix it. They reach for more tutorials, generally on more topics. ""I'm not getting React, maybe I should try Vue."" This only makes things worse. A tutorial on a new topic increases exposure faster than it increases ability. This increases the ability/exposure delta, increasing anxiety and self-perception of incompetence. You're learning more, but you feel like you know even less.

This is the unstable system. The feelings the student is trying to relieve (anxiety, perceived incompetence) are only made worse by the method they use to relieve it (more tutorials on more topics).

Part of the solution might be obvious at this point. You need to increase ability without increasing exposure. This will narrow the gap between ability and exposure, relieving some of the negative feelings. It also means you're actually increasing ability, which is the whole point of all of this anyway.

But how do you do that? The best method is to build things with the knowledge you already have. The easiest way to do this is through play. The most important aspects of play are that it is self-prescribed and enjoyable. You have to decide what to do for yourself and you have to like it.

It's common for students to say ""I don't know how to actually make anything!"". They've defined ""anything"" to mean the peak of what they've been exposed to. Maybe that's a full blown web app. That's not what ""anything"" means.

Can you make text appear on a web page? Can you write a script that tells you if today is Christmas? Then you can make something. Make those things of your own choosing and of slowly increasing difficulty.

To get out of tutorial hell you need to make a trade. You need to trade your anxiety about your abilities for embarrassment about how basic the stuff you're making is. I think it's a good trade.

The second method is to combine play with the tutorials you've already done. Go back through your old tutorials, but push the edges a little bit. What if I add this little extra feature at the beginning and then try to keep it all the way through? What if I try to do a bit from memory and then check back if I did it right? This may feel a bit safer.

The last method is to do more tutorials on the exact same topic. This won't get you all the way out of tutorial hell, but it might get you closer to the gates. For example, there are at least a dozen beginner books and courses on Django. Keep working through them. Go back and redo the ones that seemed too hard. The essential thing is you have to stay on topic until you actually gain the ability. If you venture off too soon (Maybe I should try Django REST Framework. Maybe I should learn Docker) you're only going to make things worse. You'll be like an apple rolling off a fruit bowl.

Edit: I sat down and wrote this post this morning because I woke up early and couldn't fall back asleep. I'm glad I did because it seems to have resonated with a lot of people. Thank you all for sharing that with me. Best of luck in your learning.",4331,222,TravisJungroth,2020-07-30 11:43:39,https://www.reddit.com/r/learnprogramming/comments/i0kld3/how_students_get_themselves_into_tutorial_hell/,2,learnprogramming
mumrgn,How to Plan and Build a Programming Project – A Legitimate Guide for Beginners,"Hi Everybody, 

I'm making this post because initially when I was a beginner learning to code, I really struggled to make projects, I couldn't quite get out of tutorial hell. 

Initially to overcome this, I posted my frustrations here. The  responses I received were all centered around building my own projects.  This advice sounds great on the surface and was the right advice, yet the issue for me was I couldn't even watch a tutorial and reproduce the  results. How was I supposed to build a project? A project is 10 levels  above a tutorial and at the time it seemed that projects were so far  away from my abilities. I had no clue how to even get started, let alone  how I was going to put it all together. 

This is an issue I see all the time on r/learnprogramming. Beginners are frustrated that they can't seem to get out of tutorial hell and so they seek advice. But, what they get is well meaning  redditor's slamming the build projects response in their face without  even considering that if the newbie can't even replicate a tutorial how are they going to create their own project. I thought it was about time I did something about it and gave back to the universe.

So here I am, writing a post that actually breaks down how to build  your own projects so that you can start making stuff.

In order to plan and build a programming project there are three key steps I now use when building projects, these are what work for me but they should work for anyone.

### Step 1: Defining the project

The first step when planning a programming project is to define it.

When I am defining the project I ask myself these 4 questions:

1. What is the project?
2. What is the [MVP](https://www.productplan.com/glossary/minimum-viable-product/) (Minimal Viable Product)?
3. What are the nice to haves?
4. When will the project be complete?

**Example project definition** 

To give a simple example, let's say we are going to build a calculator app. We would have a basic project definition like below.

**Calculator app project**

*What is the project?* \- The calculator project is a project  to build a calculator that is accessible in a web browser. The project  is going to be solved using HTML, CSS and JavaScript. It will allow  users to input numbers and calculate the results of those numbers based  on the arithmetic operation they choose.

*What is the MVP?* \- The minimal viable product is a  calculator that renders in a web browsers that can perform addition,  subtraction, multiplication and division operations based on a users  input and show the user the result of that equation.

*What are the nice to haves?* \- The nice to haves for this  project are styling the calculator, taking keyboard presses as input not  just users clicking buttons and adding higher order operations like 'to  the power of x'.

*When will the project be complete?* \- The project will be complete once all the MVP features have been implemented and the calculator has been styled.

The above definition is simple and straight forward. If my Mum picked it up she would understand what the project is about. She would understand because it tells you what the project is, the MVP features you must build, the nice to have features and when it will be complete. By defining the project you make a project less intimidating.

Once you have the project definition you can begin the next step.

### Step 2: Creating the workflow

The next step is the simplest. Usually this step can be combined with  step 3.  But, just for now we are going to look at it here as a  separate step so that I can show you how to set up a very basic workflow  for your own projects. Once you have done it once, it can be a default step for the rest of your projects.

You first want to use something like [Trello](https://trello.com/) a free tool to manage projects.

To set up our [Kanban](https://www.atlassian.com/agile/kanban) board we want to create 4 columns.

1. TODO
2. DOING
3. DONE
4. BUGS / NOT SURE HOW TO DO

[*what it looks like*](https://www.peterlunch.com/_next/image?url=%2Fimages%2FarticleImgs%2Fkanban-1-800x415.png&w=828&q=70)

Within these columns we are going to add cards. As we work on the cards we move them into the **doing** column and once we have finished with that card we can move it to the **done** column. If you have a bug you are stuck on or are not sure how to do something we can move it to the **bugs/not sure** column.

Now we have our workflow set up we can get onto the last step, the one that stumped me the most when I was learning to code.

### Step 3: Breaking the project down into smaller components

The key to building your own projects starts with breaking the big project down into smaller, less intimidating components. These smaller components are what become our cards from step 2.

Now this sounds simple enough, but when I was first starting out it did not occur to me that you could do this. I thought most developers just start coding and the project flowed out of them like you see in the  movies. I thought that was what I was supposed to be able to do.  However, now that I have had a chance to work in the industry I know  that is definitely not the case, in fact a good developer will break  that project down into smaller tasks.

Yet, as a beginner it can be hard to know how to break something down into smaller tasks. If you don't know how to actually build the project then how can you break it down?

Well the first thing you need to do is look at your project definition and then break it down into smaller parts.

Let's continue using the calculator app example to make our component cards:

* Calculation functions - MVP
* Get user input - MVP
* HTML user interface - MVP
* Style user interface - sprinkles 
* JavaScript event listeners - MVP
* Add animations for calculations - sprinkles  

[*update what it should look like*](https://www.peterlunch.com/_next/image?url=%2Fimages%2FarticleImgs%2Fkanban-2-800x373.png&w=828&q=70)

You'll notice that for each card, we assigned a label of either MVP  or sprinkles this is to visually help you see which cards are the most important and therefore the ones to work on first.

The biggest benefit of the cards is that they have simplified what we have to do already. This makes projects less intimidating as you are not making a big daunting calculator app, rather you are doing 6 smaller projects that will combine to create one big project.

As you work on a card you move it into the doing column. Taking your time to get the component working before you move onto the next card.

But we are not done yet, we can simplify and improve our workflow  even more to ensure we are not getting blocked by the size of the project when building.

### Step 3a: Break each component into smaller checklists

Once we have the high level cards we can then break those components  down again into smaller tasks by breaking those tasks into checklists so  we can track our progress.

The example below is just how my brain works so you can break it into  smaller or larger items depending on what works for you. Let's use the  calculation functions card as an example of how to break a component  down further.

As the task is an MVP task and I have defined the MVP as basic  calculations addition, subtraction, multiplication and division we need  to add those functions to the checklist.

[*what the checklist would look like*](https://www.peterlunch.com/_next/image?url=%2Fimages%2FarticleImgs%2Fkanban-3-600x483.png&w=828&q=70)

We have now broken our calculation functions card into 4 little  projects that we can work on. How much easier is that than the abstract  and super daunting task of building a calculator app, or even writing  the calculator functions (the card).

We can now focus and figure out how to make each of these functions.  As we do that we get to check those items off giving us a sense of  accomplishment and progress. Then once we have done all four of those  items we can move the card into the done column and get cracking on the  next card.

From here on we just need to repeat the process for each card. So you are ready to get building awesome projects. 

***

Now you should have everything you need to get building projects. If you see someone on r/learnprogramming in the future struggling to get  out of tutorial hell, don't just tell them to build. Tell them how  to plan and build.

If you made it to the end of the post firstly thanks for reading - I originally published this (with a bit more detail) on my blog [here](https://peterlunch.com/how-to-plan-and-build-a-programming-project/), I like to write about coding and what I'm learning to help others so consider checking it out and [my newsletter](https://mailchi.mp/f0f37a739f7a/fpe252ehqs) if you got value out of this.",4325,116,cowinkiedink,2021-04-20 09:43:01,https://www.reddit.com/r/learnprogramming/comments/mumrgn/how_to_plan_and_build_a_programming_project_a/,2,learnprogramming
h10ooq,Tools I wish I had known about when I started coding,"Hey all! I had compiled this list about two years ago, shortly after I started programming, and I found that is was helpful to a lot of folks, so I wanted to resurrect it.

While the way I do some things has changed a lot in the last couple of years, these all helped me a lot when I was just getting into web development, and hopefully they might help you too!

## Chrome Extensions

Now that I am a self-proclaimed web developer, I practically live in my Chrome console. Below are some tools that allow me to spend less time there:

* [WhatFont](https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm?hl=en) — The name says it all. This is an easy way of finding out the fonts that your favorite website is using, so that you can borrow them for your own projects.
* [Pesticide](https://chrome.google.com/webstore/detail/pesticide-for-chrome/bblbgcheenepgnnajgfpiicnbbdmmooh?hl=en) — Useful for seeing the outlines of your HTML elements and modifying CSS. This was a lifesaver when I was trying to learn my way around the box-model.
* [Colorzilla](https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=en) — Useful for copying exact colors off of a website. This copies a color straight to your clipboard so you don’t spend forever trying to get the right RGBA combination.
* [CSS Peeper](https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk?hl=en) — Useful for looking at colors and assets used on a website. A good exercise, especially when starting out, is cloning out websites that you think look cool. This gives you a peek under the hood at their color scheme and allows you to see what other assets exist on their page.
* [Wappalyzer](https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en) — Useful for seeing the technologies being used on a website. Ever wonder what kind of framework a website is using or what service it is hosted on? Look no further.
* [React Dev Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) — Useful for debugging your React applications. It bears mentioning that this is only useful if you are programming a React application.
* [Redux Dev Tools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) — Useful for debugging applications using Redux. It bears mentioning that this is only useful if you are implementing Redux in your application.
* [JSON Formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en) — Useful for making JSON look cleaner in the browser. Have you ever stared an ugly JSON blob in the face, trying to figure out how deeply nested the information you want is? Well this makes it so that it only takes 2 hours instead of 3.
* [Vimeo Repeat and Speed](https://chrome.google.com/webstore/detail/vimeo-repeat-speed/noonakfaafcdaagngpjehilgegefdima?hl=en) — Useful for speeding up Vimeo videos. If you watch video tutorials like most web developers, you know how handy it is to consume them at 1.25 times the regular playback speed. There are also versions for YouTube.

## VS Code Extensions

Visual Studio Code is my editor of choice.

People love their text editors, and I am no exception. However, I’m willing to bet most of these extensions work for whatever editor you are using as well. Check out my favorite extensions:

* [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) — Auto rename paired HTML tags. You created a <p> tag. Now you want to change it, as well as its enclosing </p> tag to something else. Simply change one and the other will follow. Theoretically improves your productivity by a factor of 2.
* [HTML CSS Support](https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css) — CSS support for HTML documents. This is useful for getting some neat syntax highlighting and code suggestions so that CSS only makes you want to quit coding a couple of times a day.
* [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets) — Useful code snippets. Another nice time saver. Pair this with [Emmet](https://emmet.io/) and you barely ever have to type real HTML again.
* [Babel ES6/ES7](https://marketplace.visualstudio.com/items?itemName=dzannotti.vscode-babel-coloring) — Adds JavaScript Babel syntax coloring. If you are using Babel, this will make it much easier to differentiate what is going on in your code. This is neat if you like to play with modern features of JavaScript.
* [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) — Adds colors to brackets for easier block visualization. This is handy for those all-too-common bugs where you didn’t close your brackets or parentheses accurately. EDIT: Version 2 now available [https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)
* [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) — Integrates ESLint into Visual Studio Code. This is handy for getting hints about bugs as you are writing your code and, depending on your configuration, it can help enforce good coding style.
* [Guides](https://marketplace.visualstudio.com/items?itemName=spywhere.guides) — Adds extra guide lines to code. This is another visual cue to make sure that you are closing your brackets correctly. If you can’t tell, I’m a very visual person.
* [JavaScript Console Utils](https://marketplace.visualstudio.com/items?itemName=whtouche.vscode-js-console-utils) — Makes for easier console logging. If you are like most developers, you will find yourself logging to the console in your debugging flow (I know that we are supposed to use the debugger). This utility makes it easy to create useful console.log() statements.
* [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker) — Spelling checker that accounts for camelCase. Another common source of bugs is fat-thumbing a variable or function name. This spell checker will look for uncommon words and is good about accounting for the way we write things in JavaScript.
* [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens) — Makes it easier to see when, and by whom, changes were made. This is nice for blaming the appropriate person when code gets broken, since it is absolutely never your fault.
* [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) — File path autocompletion. This is super handy for importing things from other files. It makes navigating your file tree a breeze.
* [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) — Automatic code formatter. Forget about the days where you had to manually indent your code and make things human-legible. Prettier will do this for you much faster, and better, than you ever could on your own. I can’t recommend this one enough.
* [VSCode-Icons](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons) — Adds icons to the file tree. If looking at your file structure hurts your eyes, this might help. There is a helpful icon for just about any kind of file you are making which will make it easier to distinguish what you are looking at.

EDIT: found more tools I had compiled on a per operating system basis!

&#x200B;

# Operating System Agnostic

[Postman](https://www.getpostman.com/) — At its most basic, this is an application that allows you to test the different endpoints of an API. You know, that good CRUD stuff. Once you dive deeper into it, you will find it is also incredibly useful for writing up test suites and much more.

[Insomnia](https://insomnia.rest/) — This is an open-source alternative to Postman. It appears to have a lot of the same functionality with a slightly lower price tag for their premium packages. Between this and Postman, the choice seems to mostly be personal preference for the UX. Don’t stay up all night making a decision between the two (I had to, forgive me).

[Restlet](https://chrome.google.com/webstore/detail/talend-api-tester-free-ed/aejoelaoggembcahagimdiliamlcdmfm?hl=en) — If you don’t want to download either of the above, this is an API testing client that is available as a Chrome extension. It even allows the importing of Postman tests and several other formats.

[Charles](https://www.charlesproxy.com/) — This is a sweet web debugging proxy that allows you to view all of the information you could possibly want to see about the requests being made between your machine and the internet. It basically turns you into a hacker, allowing you to check your website for security vulnerabilities and such.

[Fiddler](https://www.telerik.com/fiddler) — Basically the same tool as Charles. Personal preference seems to be the main deciding factor between the two, though both can greatly increase your debugging/troubleshooting capabilities.

[Flux](https://justgetflux.com/) — If you’re reading this, chances are you probably spend a ton of time on your computer. Flux is a program that turns the blue light down on your screen as the sun sets, with the hopes of mimicking the day/night cycle and helping you sleep better. Not as good as getting time away from the screen, certainly, but it’s better than nothing!

# Windows Specific

[ConEmu](https://conemu.github.io/) — If you are on Windows and you would like to have multiple terminal tabs, this is an easy, free solution to your tab-related woes. Never again will you have to flip back and forth through entire windows just to look at your different error messages.-

[Ditto](https://ditto-cp.sourceforge.io/) — You know when you’re trying to copy four separate answers from Stack Overflow and you have to keep switching back and forth from your browser to your IDE? Worry no more. With the Ditto clipboard manager, you can copy-paste your way to victory.

[TouchCursor](http://martin-stone.github.io/touchcursor/) — Programmers of all sorts are notorious for wanting to use the mouse as little as possible. If you find yourself in that camp, then this will be right up your alley

[Cmder](https://cmder.net/) — I am going to forego my description of this product, as I feel the description on their website is much better — “Cmder is a software package created out of pure frustration over the absence of nice console emulators on Windows. It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start.” I don’t know about you, but I am a fan of any software that describes itself as “sexy”

[Directory Opus](https://www.gpsoft.com.au/) — This is basically what Windows Explorer should have been from the start. Opus allows you to dig through your poorly-organized documents almost as if they were well-organized.

[Zeal](https://zealdocs.org/) — With over 200 documentation sets to search through, Zeal is an offline goldmine of documentation for the developer who loves to read documentation so much that they do it even when the internet is out. (Copy-pasted from Dash in the Mac section).

# Mac Specific

[Paw](https://paw.cloud/) — A competitor to both Postman and Insomnia above, Paw is a similar piece of software that feels more like a native Mac application than the others. If you love that Mac feel, this might be the API tool for you.

[Dash](https://kapeli.com/dash) — With over 200 documentation sets to search through, Dash is an offline goldmine of documentation for the developer who loves to read documentation so much that they do it even when the internet is out.

[Bear](https://bear.app/) — Not directly coding related, but a neat piece of software for taking notes if that is something you do in your day-to-day. I can’t help but wish that this would be integrated with Paw somehow, for pun-related purposes.

[Magnet](https://apps.apple.com/us/app/magnet/id441258766?mt=12) — Okay. Fair warning: This one costs money. If you can afford to dish up the 99 cents, however, I think it is worth it for those tough times when you don’t have access to a second monitor. This tool allows you to easily snap different windows to separate areas of your screen so you can run multiple terminals at once and tell your mom you are a hacker. (They are not paying me for this recommendation, sadly. However, if you are the creator of Magnet and you wish to pay me, please get in touch).

EDIT 2: adding new version of Bracket Pair colorizer here and to description above [https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)  


EDIT 3: I've had people in dms asking about more advice/tooling. I'll definitely continue to cross post anything that makes sense to here like this post. I also try to help out on [https://twitter.com/marioahoyos](https://twitter.com/marioahoyos) . I am a career switcher like many people here are and I want to help as many people make the transition as I can :) ",4287,302,mariohoyos,2020-06-11 14:47:31,https://www.reddit.com/r/learnprogramming/comments/h10ooq/tools_i_wish_i_had_known_about_when_i_started/,2,learnprogramming
icr9ac,Resources I wish I knew about long ago!,"FREE RESOURCES

Recently I decided to make a career change into the tech industry and did a full-stack Bootcamp. Now I am done and looking to enter the field. Throughout my journey of both Bootcamp and on my own learning, I have stumbled upon some great FREE resources. I thought I would make a list to help anyone else who is trying to learn!

&#x200B;

**Full-Stack Programs:**

\- [The Odin Project](https://theodinproject.com/) \- Javascript, Node.js, Ruby on Rails. (additional Front-end as well)

\- [Full-Stack Open](https://fullstackopen.com/en) \- MERN, GraphQL, Typescript

\- [App Academy](https://open.appacademy.io/) \- Ruby on Rails, MERN, Javascript, Fundamentals

&#x200B;

**Multiple Language Resources:**

\- [Solo Learn](https://www.sololearn.com/) \- LOTS of languages here.

\- [Jet Brains](https://www.jetbrains.com/) \- IDE for many Languages

\- [Free Code Camp](https://www.freecodecamp.org/) \- Alot of Languages and resources

&#x200B;

**Python Resources:**

\- [Python Programming](https://pythonprogramming.net/) \- Python, Machine learning

\- [Devoted Learner](https://devotedlearner.com/how-to-become-a-machine-learning-engineer/#Introduction) \- Python

\- [Python Principles](https://pythonprinciples.com/) \- Python

&#x200B;

**Front-End Resources:**

\- [Color Hunt](https://colorhunt.co/) \- Color Palettes for CSS

\- [Adobe Color Wheel](https://color.adobe.com/create/color-wheel) \- Color Palette for CSS

\- [Contrast Checker](https://contrastchecker.com/)

\- [Google Fonts](https://fonts.google.com/) \- Different Fonts

\- [Frontend Mentor](https://www.frontendmentor.io/challenges/insure-landing-page-uTU68JV8/intro) \- Challenges to sharpen Styling Skills

&#x200B;

**Algorithms:**

\- [Code Wars](https://www.codewars.com/)

\- [Hacker Rank](https://www.hackerrank.com/)

\- [Leet Code](https://leetcode.com/problemset/algorithms/)

\- [Coding Dojo Algos](https://algorithm.codingdojo.com/lesson)

\- [ProjectEuler](https://projecteuler.net/archives)

\- [Edabit](https://edabit.com/)

\- [CodingBat](https://codingbat.com/java)

\- [Exercism](https://www.exercism.io)

\- [CP-Algorithms](http://cp-algorithms.com/) \- For Understanding Algorithms

&#x200B;

**Miscellaneous:**

\- [Learn X in Y minutes](https://learnxinyminutes.com/) \- Library of syntax for different languages

\- [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code) \- Database of information and how each language handles them

\- [VS Studio Code Shortcuts (Windows)](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) \- Keyboard shortcuts for Windows

\- [Balsamiq](https://balsamiq.com/) \- Wire Frame creation

\- [Dribble](https://dribbble.com/) \- Design platform for inspiration

\- [Whimsical](https://whimsical.com/) \- Wireframes and Flow Charts

\- [Figma](https://www.figma.com/) \- WireFrames

\- [Repl.it](https://repl.it/) \- IDE, storage, collab, and more.

\- Enki - Mobile App for practicing Coding.

&#x200B;

If you guys have anymore, comment them below. Hope this helps!

&#x200B;

EDIT: This post was much more popular than I expected. Throughout the day I will take the things commented as resources and add them to the list! Thanks all!",4246,201,willcal09,2020-08-19 16:43:24,https://www.reddit.com/r/learnprogramming/comments/icr9ac/resources_i_wish_i_knew_about_long_ago/,0,learnprogramming
mjjwt1,"After many years of prison I was released, learn to program, and was hired as a mobile developer. If you are learning to code and need the extra support reach out.","I went to prison when I was a teenager for many years. I learned to program and now work as a software engineer developing iOS mobile apps.

Last year I started an org called Underdog Devs dedicated to supporting the formerly incarcerated (and those from disadvantaged backgrounds) who want to become software developers. If you need the extra support/network reach out. On Twitter, Insta, and LinkedIn at UnderdogDevs.

Also.... we are currently hosting a month long event called Spring into Swift. Tons of free talks all April focused on programming, getting into mobile development, and the programming language Swift. There are talks for everyone from beginner to advanced.

[Reach out to us on Twitter](https://twitter.com/UnderdogDevs) or directly to me here [here](https://twitter.com/RwoltX)

&#x200B;

[we are on Insta here](https://instagram.com/underdog_devs?igshid=1r7e8jo5n02s3)

[Sign up for our event here](https://www.eventbrite.com/e/spring-into-swift-tickets-147704641559)",4139,158,swiftlyRising,2021-04-03 23:24:32,https://www.reddit.com/r/learnprogramming/comments/mjjwt1/after_many_years_of_prison_i_was_released_learn/,0,learnprogramming
vup50l,Ya’ll I did it. I am now officially a frontend developer. HIRED,"After ranting on here last week about how much i sucked at data structures and algorithms. i lifted myself up (largely due to the inspiring words i received in this sub) and i got to work. 

well yesterday i had my third and longest interview with a company… AND TODAY THEY NOTIFIED ME THAT I GOT THE JOB. 

they started by giving me 3 timed leetcode/hackerank questions.

then i had to whiteboard 😫. and the code had to work when written in the ide. 

lastly was a conversational tech interview where they pretty much sat me down in front of 3 geniuses with stone faces (no expression, no smiles, nothing). and they basically rapid fire asked me questions related to frontend. and a little backend. 

heres a little bit of what i can remember.

1. whats hoisting?
2. what are closures, and describe a time where you would use it.
3. describe synchronous js vs async.
4. describe what happens when a script is run. (i talked about global execution context, event loops, code blocking, task queue etc)
5. how would you setup/define a class component in react. same question for functional.
6. explain the 4 pillars of oop
7. explain why every function is an object in js(i talked about dunder proto and prototype)
8. explain prototype chaining
9. what goes in the head tag.
10. how do you debug. 
11. what are promises?
12. what are 3 ways to create an object in js.
13. what does the new keyword do?
14. list 5 or more ways to optimize a website for speed?

and a lot more.

the question that stumped me was web speed caching. and questions about a11y accessibility standard section 508. I’ve never heard of it until now. 😔

anyway, i just wanted to post this as inspiration for some of you who may feel like you’re trash at programming like i did. you got this.

im much older than most of you. late 30s. no programming background at all. im also a single father raising two kids. but the desire to do better for my kids kept me going despite almost always feeling like i wasn’t worthy. so find your reason why, and lean on that when you feel down.

my story is also not super cool like a lot of you all. i dont have a “i learned how to code in 6 months and landed a high six figure job story). haha nope.

i first learned html in june 2020. so it took me approximately 2 years to learn html, scss, jquery, bootstrap, react, javascript, typescript, java/spring boot, SQL and git (thats literally everything that i know lol).

*keep in mind, i dont know java that well at all. and i dont like it. Its just to confusing for me. I know just enough to get in trouble lol im like 95% sure i would never take a job that required me to know java… better yet, im 95% sure i wouldnt get hired for a java job lol.  

i was hired by a company that has contracts with the US military. so i will be working on a military base in Texas. 

pay is in the $80,000s not quite six figures. but i just needed to get my foot in the door. once i really learn web development from a professional standpoint… i can always demand more or look elsewhere. 

how i studied.
passion projects and udemy courses (any course thats project based.)

also, every week i would write a document  to explain what i learned. and i would act like i was trying to explain it to a 5th grader. this helped me identify knowledge gaps and areas that i needed to spend more time learning. if i couldn’t easily explain it, i needed to do more studying.

books are helpful too. core java by oracle press. Any book by head first (they write for crayon chewers and glue sniffers like me 😂😂).

i didnt have a set schedule. some days i would code for 2 hours. some days i would code for 10 hours. many days i didnt code at all. 

i highly recommend scrimba. that site is awesome. 

additionally akshay saini - namaste’ javascript series. and codesmith - the hard parts series, i literally watched those series until i pretty much memorized every video. probably not the best method but hey, the interviewers said they were impressed at the deepness of my javascript knowledge. 

also, i believe i couldve applied to jobs last year, but im hard on myself. so if you feel ready, just apply. i guess at worst you’ll discover what you need to spend more time studying. and at best you may get lucky and get a job. 

i do have a portfolio, but they never saw it. also, i haven’t been gainfully employed in 10 years due to injuries from the military. so i was scared that they wouldn’t want me because of that. But they never mentioned it. (in fact not a single company ever mentioned. they always talked about my projects).

lastly, projects.

- fully functional fiverr clone.
- movie database site (add, delete, update movies in the database)
- tip calculator 
- regular arithmetic calculator ( js “oop”)
-text based rpg game in java (oop)
- java contacts manager (oop)
- notes app with draggable components
- a blog with a database and login security

hopefully that really helps someone. 

get motivated. get to work. 

i tried to answer everything. i just started my job, but if my story motivates even one person. then ive done my good deed.


**##UPDATE 1: ##**

So after many people said that this is not a typical interview for a beginner/junior dev. I went back to the listing and read through it again.

Sure enough it says. ""BLANK is looking for an experienced Front-end Developer (mid-level) who will assume a key role on our team.""

further in the description, this is one of the responsibilities. ""Mentor other junior team members""

So my fellow junior devs, you can breathe a sigh of relief, this is not a typical junior dev interview because it wasn't for a junior dev position. I have been applying and interviewing everywhere, so the whole ""mid-level"" must have gotten lost in the sauce.

That means the pressure is on me even more to perform.. let's gooo!!!.

UPDATE #2: 
First day on the job in the books. 

So my actual role is a react developer. Working with financial data for the Air Force. I work with designers and ui/ux people to create dashboards and filters for the data. Basically we’re taking their ugly data and making it beautiful and easy to consume. 

I also have 3 weeks to become somewhat decent with azure and sharepoint (sharepoint im already familiar with from my military days). They said the 3 weeks arent set in stone.

Everybody is really nice here, like overly nice. I appreciate that. 

Also they pretty much said, they dont care what time i work, as long as i get my 8 hours and im there between 11-1 for possible meetings. 

Anyway, hope this helps give insight to future developers. Good luck everybody. This is probably my last update. i dont know what else to add.",4133,341,sandynuggetsxx,2022-07-09 00:29:39,https://www.reddit.com/r/learnprogramming/comments/vup50l/yall_i_did_it_i_am_now_officially_a_frontend/,0,learnprogramming
koivx0,You're not too stupid for programming,"Hi,

For a year of computer science class I've always felt I was ''too stupid'' for programming. I've been looking up posts with people facing the same problems. A year of computer science, I've seen people progress ten, sometimes a hundred times faster than me. It would take me hours to figure out one function. I kid you not, I spend over a week working 8 hours a day trying to build a simple function where my POST function would stay on the same page using Ajax. I just assumed that I could copy code and it would all magically work in mine. 

The problem is not your brain. The problem is the way your brain is used to solving problems. Solving problems in programming is not the same as solving problems anywhere else. You can't just follow a cooking tutorial and cook the same. Your program is always somewhat different, and therefore has to be implemented different. 

So what did I do to get over ''being to stupid to code''. 

1. Clean your desk and work space.
2. Set a timer for the amount you'll program without distraction.
3. Work as simplistic as possible. Don't look up ''how to make an online registration form''. Instead start by learning about how you can register a single character into your database. Be as simplistic as possible. Baby steps. 
4. Spend 80% of the time reading and understanding your problem and solution. Don't write a letter of code until you fully understand it.
5. Now spend time testing your code in a raw file.
6. Now that you fully understand the code, that's where you implement it in your own. 

Good job. You're no longer ''too stupid to code''. 

.",4101,283,Celiuu,2021-01-01 20:55:10,https://www.reddit.com/r/learnprogramming/comments/koivx0/youre_not_too_stupid_for_programming/,1,learnprogramming
9j3oi5,After 9 months of teaching myself how to program I finally landed a job. I want to share some of the things I learned on how to achieve this goal (mostly focused on front end).,"*Disclaimer: everything I write is my own opinion so take it with a grain of salt. You never know who's writing what and why on the internet :)*

Long story short, in December 2017 I was at crossroads in my life. Either finishing my endless journey to finish my master in chemistry or reinvent myself. Since by then I did some coding (literally few hundreds line of Python) and I enjoyed the experience I decided to throw all my savings into surviving for enough time till I could get a job as a developer. Meanwhile I would've studied and programmed till I was comfortable applying for jobs. Reflecting back into this long and hard journey I want to share my opinions on what this journey looks like, how does it start and how does it end. My points are in no particular order, albeit I guess I'll write some of those I find most important first.

1) **Set a very precise goal**. By this I mean a real life goal. This is by far the most important aspect of your journey. You need to have a clear vision on what's the finish line? Are you learning to code because you want to solve some real problem of yours? Maybe you want to automate some tasks you have at your home/job. Maybe you want to crack a videogame, maybe you're moved by curiosity, maybe you like learning new things, maybe you're an entrepeneur with no funds but a very solid idea you want to develop into a real world application. For the rest of this post tho I'll mostly speak from a perspective of who'se learning to code to find a job.

2) **If your goal is to find a job look at the job market, not on what's hot on Twitter and Medium**. Remember point one? You have to set a very *precise* goal. A goal such as ""I'd like to be a developer and work on videogames"" is imho already too vague. Let's assume for a moment that finding a job in the videogame industry is your priority. I can't but think that these two things are sort of exclusive. You're already being focused on a small (but relevant) niche of programming jobs. Yet, what's your priority? Finding a **real** coding job, or working in the videogame industry? What if you won't find a job in the videogame industry cause there are no companies in your area or you will simply not meet their requirements (likely in the gaming industry). If you'll learn to code in whatever language, I can guarantee you that you will be able to translate that knowledge someday on videogames if that's your goal. You'll have to learn tons of new stuff. But you have the problem solving skills and knowledge of programming to make this step.

Seriously, look at the job market and remember point 1. Are you willing to move abroad? Cross state? Cross country? Cross continent? It'll be harder to find a job that's far from your house. It's harder for a company to ask you to take a flight for an interview. And since you're a self taught developer and not an MIT stellar graduate those expenses will likely be all on you. I did a mistake on pointi in Decembet 2017. I decided that my priority was finding a job and I wanted to be a front end developer. I can't but feel this was a mistake. In my area C#, php and Java works are in a 9:1 ratio to front end JS jobs. So check carefully the companies in your area, literally count the positions and their requirements.

3) **Do never, ever, ever, make assumptions on what's harder and what's easier in programming**. I did this when I decided to learn front end. This was a huge mistake. It's not true that front end is easier than backend, neither is the opposite, and more importantly you can't even possibly know at this point what you'll like more and you're more adapt to. Don't make assumptions. Just don't. Do never, ever, think that JavaScript is easier than C, nor the opposite. Different tools for different problems with different complexities. I could tell you you could fit everything about C in a 200 pages book, literally everything about the language, and tell you that it would take twice the pages just to give a solid, yet incomplete, picture of objects in JavaScript. You are simply not qualified to know what's ""harder"" and what's ""easier"". Neither I am. For the love of god, don't make this mistake. Of course, some aspects of programming leverage more or less maths or creativity or organization or whatever. But can you really tell me that in 24 months from now optimizing rendering and network performance on x platforms will be ""easier"" than refining algorithms that predict weather based on some geospatial data? Are you sure that managing state in complex real time applications will be easier than writing shaders or teaching a computer how to translate or paint? You simply do not know. Do, not, make, any fuckin assumption of this kind. 

4) **Be consistent in your learning**. How much time do you have to study programming? Are you already a student? Or maybe you're unemployed (as I was) but have enough savings to dedicate yourself to studying. Be realistic about your goals but be **consistent**. Writing code for 1 hour every day for a week will make you a better programmer, than coding once a week for 7 hours. 

5) **Do not feel compelled to know everything's that required on the positions you want to apply**. This is especially true for frameworks and libraries. There's a reason why top companies focus a lot on data structures and algorithms, they show you can think and solve a problem. More specifically, whatever programming language you choose (any of Java, JavaScript, C#, Python and PHP is likely to find you a job, the others might be more nichey) learn it's fundamentals as best as possible. I learned front end development. I felt this huge need to learn from html to the dom, plenty of libraries, transpiling, webpack, etc, etc. Yet reality is that at job interviews those topics were barely if ever touched. But what they wanted to know is that I **really** understood JavaScript. I've applied for 3 front end react jobs, I've never been asked a single question about react's ecosystem. Not once, ever. Nobody cared. What they cared of? If I knew what was strict mode, the difference between a function expression and a function declaration, the utility of IIFEs, prototypical inheritance, closures, etc. Nobody gives a damn if you know React's methods (I mean, if you learn React you're supposed to have at least a basic knowledge of how it works), but the core knowledge needed to be a good React developer is knowing JavaScript. If you know JavaScript and the dom, learning React is a matter of a week. If you don't you'll never be a good React developer. Higher order functions, the *this* binding, those are the real problems and knowledge React developers need everyday. The rest is a google search away. I can tell you that I haven't been asked once something that wasn't written in Eloquent JavaScript, not once. Of course, I did some research and work to understand some topics better. If they ask you what a promise is, you answer that it is an object. Sure, there might be the need to expand. But seriously, just because you used promises, doesn't mean you understand them. Mumbling about ""they are *something* you use to make asynchronous code"" might say something more than saying ""they are objects"". But the second answer simply shows you have no understanding of JavaScript. Plain and simple. Maybe you get they are objects because they are declared with the *new* keyword, but you really need to understand the basics of JavaScript. The same applies for any other language. The overwhelming majority of errors and bugs that will make you bang your head on the wall derive from lack of proper understanding of the basics of a language. Just because you read something, doesn't mean you absorbed it, even less mastered it. It's hard to trust a person who has 10 skills/tools on their cv, yet he didn't really master one.

6) **Try to find a mentor**. Plenty of people more experienced than you are active on slacks, irc, discord, etc. You may find somebody willing to help you long term. Also there are the beautiful people on ##javascript on freenode which have been an invaluable learning experience for me and I thank all the members here (especially ljharb, slikts, stennowork, liste, innovati, zsoc, cjhonson, qswz, GreenJello, sillyslux). Mind you I'm not inviting any of you to contact these people, they help in general chats not one on one, I'm not aware of them doing any mentoring, I found some mentors here on reddit and on a slack channel for developers in my area. Two tips: don't abuse the patience and will of a mentor to help you. If you keep asking basic questions that can be googled or found in basic books (such as Kochan's C book or Eloquent for JavaScript) they will get tired of you and start answering less and less. The second tip: programmers, all of them, including you, they love to feel the smartest person around, I think it's the nature of people that solve problems through logic. Abuse this fact to find information you need. A simple example: if you go in a chatroom and write ""lol I didn't know you could bind arrow functions"" you'll get 20 answers telling you why you're write (and wrong). If you go in a chatroom and ask ""how does this work in arrow functions?"" you may not receive any answer.

7) **Understand what programming is**: you take data as input, you do something with it, you generate an output. That's what every meaningful program or subroutine does. Nothing less nothing more. I wish somebody told me that when I started and stared at this overwhelming amount of endless information. In the end, I was always solving the very same problem over and over. Each time differently, with different tools, different approaches, but every program as small as you think about it does that. You may add two numbers: input numbers -> process- -> output sum. You may want to render a 3d model on the screen: camera + matrice of vertices -> process -> 2d image on the screen. You may want to set your profile picture on a website: data input + address -> process -> response from server. That's all there is to programming, and that's why algorithms and data structures are the backbone of most top companies interviews: because that's **all** there is to computing. data -> processing -> data. That being said I know very little of data structures and algorithms. I'm unlikely to implement a merge algorithm or implement complex data structures and they were never really asked at any interview. Just knowing time complexity and different utility of different data structures was more than enough for my interviews. But that might differ in other companies and positions. 

8) **Understand what programmers do**. They solve problems through the use of code. That's why it is very required that you bang your head on a wall when you can't find a solution to your coding problem. When I started I was desperate when I was writing a small demo and every time I pressed a button the page refreshed. Even asking around I couldn't find the reason. In the end it was something pretty trivial: button elements without a type attribute are treated as submits. Submits by default refresh the page when triggered. Many people looked at my code and couldn't find the reason and yet they overlooked this very trivial issue. But in reality that's what's going to happen over and over: why ""foo"" is not a function? Why is my program reading the property of undefined? As a programmer you solve problems (often created by yourself). If you think that following some bullshit video cours on youtube/udemy will make you a programmer you're in for a bad time. Looking at people solving problems for you means you are not developing your problem solving skills. When you don't understand why something's not behaving resist the urge from googling right away, or asking somebody more experienced. Please understand that this is exactly how's your job gonna look like. Get good at solving problems. Some might be syntax problems (as the ones before), some will be performance related, etc. Regardless. Learn to solve problems, embrace the power of debuggers. Understand that code is merely an implementation of an idea. Get used to program with pencil and paper. Define well your problems, input, output and how to go from one to the other. Organize your code. Look at your mess of spaghetti code, at your messy and poorly named functions and variables, at the code you can't already follow after few hundred lines. Then improve it.

9) **Have a basic knowledge of how computers (so every single device out there) works**. Seriously. Knowing von Neumann's architecture basics and the memory model is the very least you should know and you can learn this things in few hours. Even wikipedia, youtube or some blog are enough, but learn it. The memory model and the call stack will then no longer be something complex and your code will get better and you'll learn coding faster. No longer you'll wonder why you can't mutate a string or why why you pass non primitive types by reference rather than value. This will have a meaningful impact on your learning speed and understanding on how computers work (from our perspective, at least).

10) **Don't learn from videos**. The more advanced and nichey stuff you'll have to do the less resources you will have to solve it. Get used to write programs only with resources that require you one google search and as little information as possible. You'll have to use libraries with poor or no documentation. You'll have to look at the code to understand why that library is mutating that particular object or it is behaving differently from expected. Go on github, look at popular libraries. They are overwhelmed of problems. And the dozens of brilliant engineers that wrote this technology never had this issue before you. I understand this is advanced stuff. But it's a good habit. I have yet to see a single code topic that cannot be learned better through reading the code or some well written book/article than some video. Also, beware, most people out there doing those courses and lectures are not necessarily good programmers, even if they are, they are not necessarily good teachers. Remember the guy who answered ""what's a promise"" mumbling about something to do asynchronous programming? That's the guy who learned to code from videos and never had a real rigor in studying. The more defined a concept is, the easier it is to understand it. I'm not saying ""don't use videos"". There's hundreds of videos that helped me both with concepts, problem solving or by watching how to use some technology. Just get in the habit of making them your last resource. I myself liked, e.g., Andrew Mead's React course it teached me **a lot**. But in the end, not a single thing I was shown really stuck with me if in the end I didn't researched stuff on my own and tried it over and over, and going back to a specific point of a specific video to watch a specific example of a specifc version of a software is nothing short of a weak surrogate to proper critical learning.

11) **Debugging and version control**. These two are probably more important than anything safe for language and computing basics and the most required in a working environment. Tooling would be a safe second spot. If you know Java properly (just to change from the usual JS examples :P) then learning Spring is much easier than learning docker and git. Yet probably you'll invest 95% of your time writing Spring code, e.g. If you know Python properly, you can grasp Django in a weekend..What about proper error handling in Python tho..? Same goes for your IDEs, etc. Learn one and master it. Knowing 5 IDEs is useless if you're constantly using your mouse to open a terminal, you don't know how to navigate your documents properly, rename variables in a file together, etc. Mind you, I'm not saying that these are fundamental for a junior position (well, maybe debugging with anything by prints or console.logs kinda is), you can get away not knowing them but this stuff sticks for years.

12) **Do never attempt to learn too many things at once**. Move with small but solid steps. I made this error and I think it costed me a lot. I'm not saying reading Hennessy and Patterson wasn't useless..Or that reading about design patterns was useless..Or that playing with Rust, C# was...Or that watching all this youtube videos, interesting talks, reading about behaviour driven design and gerkin was useless..Or that all of those blog posts I reed was useless..But remember point 1? You must have priorities. You must move by small solid steps. It's good if you're curious as I am. But it's much better to receive a salary, learn in a comfortable environment under the guidance of senior developers and then go home and play with Rust or watch talks about immutability if you want to than do it when you have a different goal.

**For the hiring process**:

12) **network > experience > knowledge**. Most companies around are always hiring. You don't see their ad, because they have none. Maybe they don't even have a ""work with us"" section on their website. But most companies are always hiring talent. As you're likely to enter at the lowest position, with the lowest possible salary, they might still be interested in you for this very same reasons. So networking, knowing people is paramount for your job research. I invite you strongly, if you can, to participate to your local communities both online and especially offline. I didn't get a single answer to any of my CVs I sent. But all the interviews I had derived from me knowing somebody who worked somewhere. ""oh, you're a developer"", ""yeah I just started, still learning, I kind of suck xD"", ""well when you feel like it send me your cv I'll give it to my hr/team leader"". If you're a self taught developer your hiring process (this depends also on the area and position you're looking for) is going to be very hard. You don't have experience. You may have skills and knowledge, but nothing to put on your cv. Just because you say you know Python nobody's gonna interview if you have nothing to show nor way to prove it. Interviewing you means the company is actually losing money. Two or more developers are not working, but getting paid. HR/management could be doing something eòse. Time is money, the bigger the company, the more money they are losing to put you in a room. I know and I felt the pain of knowing stuff and having no way to prove it, but that's how it is. So after network comes experience. Here you have basically two options: contribute to open source (either write some library/module people use, even a good pull request is a nice on a CV) or develop something people use. Even if it's for free. I didn't go with the first, but I went for the second. I developed a small application for a football club in my city that needed to inform players of the various youth teams who was going to play on sunday game. Nothing too impressive, nothing too pretty, but it's something hundreds of people use every single week. The fact that you solved a real world problem using code, you meet the requirements somebody gave you, is massive. My uncle needed a website for bookings for his bed and breakfast. I wrote it for him. Complex database with real time booking? No. But I solved a real world problem for somebody, and people use it everyday. Does it matter that it has plenty of anti patterns? Maybe your beautiful instagram clone with rest endpoint etc is much cleaner code but..Does anybody uses it? Is there anything original and not cloned from some udemy course? Maybe you have a smart tv and you're tired of transferring files with your usb to watch your shows you have on your hard disk? You've got a router..You've got a tv that you can install program to? Maybe spend a month to write some very basic, even ugly, but working application that allows for data transfer between your computer and tv? Somebody's gonna use it. Solve real world problems, for real world people. Those are sound things to put on a cv. They give you endless opportunities to talk about how you solve problems. What did you do well, what sucked? I didn't use no state manager on my first react application, as the application grew I encountered plenty of problems due to that and maintaining code got harder. I met a real world problem, I solved it, I know if and why my solution was good or bad. Look around you, what problem you can solve and help somebody? Start from your own problems and move asap on somebody's else. Even if it means it's for free.

What's there to talk about your perfectly implemented Django+PostgreSQL twitter clone? Nothing. Zero. Last comes knowledge. And this is a big problem. Because if nobody puts your resume on somebody's desk saying you can be a good resource after some time that's the only thing you're going to be judged for. If you'll be even given this opportunity. Having released two android apps even if they are nothing spectacular (maybe you just created an offline version of some website/doc, e.g.) means you can solve problems. You have something on your cv. Maybe you weren't able to answer questions given to you, but fact is a fact: given time you can find the resources (on the net, and inside you) to deliver a product. So knowledge becomes your only resource. And it's a bad resource. Because when you're put in front of somebody with 10 years of experience, saing ""value"" rather than ""variable"" tells a lot about you. So nobody recommends you, nobody uses anything you wrote, your github is a collection of initialized and abandoned projects and copy cuts from tutorials, you're asked about basic stuff (which is the hardest questions btw) and you are not providing clear confident answers who's gonna pay you?

13)** Bonus**: if you have more than 6-7 months to prepare before you'll start actively looking for jobs one thing I may recommend you is to start with the C programming language. C is a small language, it doesn't have many things, most C books are shorter than any introduction to higher level languages. Learning C teaches you a lot about computing. An awful lot. To put it differently. I'm confident that if I spent 2 months learning C (at least 4 hours a day) and solving easy and intermediate leetcode or similar problems and then spent 4 months learning another higher language I'd be a much better programmer than if I just started in this other higher language. There's much too much focus on too many technologies, there's too much noise in higher level languages. You'll be tempted way too soon to move from ""how do I go from input to output"" which is the very essence of programming to developing full programs. I know that text input and output isn't sexy, but remember point 1? We want the best and possibly the shortest path to get ourselves onto being decent and proficient asap. C might be slower at first. But then you move unto another language and not only you'll find that in the end you're solving the same problems you were solving with C (because it's always the same fuckin problem as I told you) but you need to do so with an endless amount of different APIs and conflicting, similar methods.

14) **Bonus 2**: learn to manage your time. You're sitting behind a computer all day learning how to code. It's tempting to go on lichess, launch league or procrastinate but it's lots of time wasted. You can **easily** cut off large amount of weeks/months needed to reach a decent level of preparation by managing your time better.

14) **Bonus 3**: resting, socializing, relations, having fun, taking care of yourself are super important. Sitting alone reading blogs and staring at Visual Studio all day can be very hard for your mental health and can alienate you. Work hard, be disciplined, but be disciplined in other aspects of your life too, because if a certain balance is broken it leaks in every other of your aspects.

That's all, I'm sorry if that was long, I hope somebody might find it helpful and remember anything here is my mere opinion and you'll find plenty of people disagreeing.",4020,201,None,2018-09-26 15:46:27,https://www.reddit.com/r/learnprogramming/comments/9j3oi5/after_9_months_of_teaching_myself_how_to_program/,1,learnprogramming
qgx47b,"My teenager is learning Python and a few other languages. Never had them ""take"" to a hobby like this. Ideas for XMas gifts and other ways to support?","Apologies if this is a bit out of the scope of this sub, but as a parent who has never really had an interest in programming, I'm struggling with gift ideas.

My son is a freshman and, during covid, he began to self-teach Python. Fast-forward to today and he's writing all kinds of scripts, even automating tasks the staff do in school. Heck, I gave him a database that I'd normally pay a contractor for and he wrote me a script within 3 days. 

Goes without saying, but we're super proud of him and got him enrolled in the local community college where he's continuing to learn a ton.

The intent of the post is to elicit gift ideas, but any general advice you'd give is welcome as well.",3995,668,None,2021-10-27 13:49:28,https://www.reddit.com/r/learnprogramming/comments/qgx47b/my_teenager_is_learning_python_and_a_few_other/,2,learnprogramming
xlprsg,"I asked 500 people on this sub if they were able to become software engineers. Out of the 267 that responded, only 12 told me they made it.","This post is not meant to discourage anyone. Nor is it a statistically valid study. I was just curious and decided to do a fun experiment.

I have been hearing recently about how everyone should ""learn to code"", and how there are mass amounts of people going into computer science in university, or teaching themselves to code.

What puzzled me is that if there are so many people entering the field, why is it still paying so much? why are companies saying they can't find engineers? Something was not adding up and I decided to investigate.

So I spent a few months asking \~500 people on this sub if they were able to teach themselves enough to become an actual software engineer and get a job. I made sure to find people who had posted at least 1-1.5 years ago, but I went back and dug up to 3 years ago.

Out of the 500 people I asked, I had a response rate of 267. Some took several weeks, sometimes months to get back to me. To be quite honest, I'm surprised at how high the response rate was (typically the average for ""surveys"" like this is around 30%).

What I asked was quite simple:

1. Were you able to get a position as a software engineer?
2. If the answer to #1 is no, are you still looking?
3. If the answer to #2 is no, why did you stop?

These are the most common answers that I received:

Question # 1:

\- 12 / 267 (roughly 4.5%) of respondents said they were able to become software engineers and find a job.

Question # 2:

\- Of the remaining 255, 29 of them (roughly 11%) were still looking to get a job in the field

Question # 3:

Since this was open ended, there were various reasons but I grouped up the most common answers, with many respondents giving multiple answers:

1. ""I realized I didn't enjoy it as much as I thought I would"" - 191 out of 226 people (84%)
2. ""I didn't learn enough to be job ready"" - 175 out of 226 people (77%)
3. ""I got bored with programming"" - 143 out of 226 people (63%)
4. ""It was too difficult / had trouble understanding"" - 108 out of 226 people (48%)
5. ""I did not receive any interviews"" - 58 out of 226 people (26%)
6. ""Decided to pursue other areas in tech"" - 45 out of 226 people (20%)
7. ""Got rejected several times in interviews and gave up"" - 27 out of 226 people (12%)

&#x200B;

Anyways, that was my little experiment. I'm sure I could have asked better questions, or maybe visualized all of this data is a neat way (I might still do that). But the results were a bit surprising. Less than 5% were actually able to find a job, which explains my initial questions at the start of this post. Companies are dying to hire engineers because there still isn't that large of a percentage of people who actually are willing to do the work. 

But yeah, this was just a fun little experiment. Don't use these stats for anything official. I am not a statistician whatsoever. ",3974,644,yeahdude78,2022-09-23 06:35:09,https://www.reddit.com/r/learnprogramming/comments/xlprsg/i_asked_500_people_on_this_sub_if_they_were_able/,0,learnprogramming
i2c0ud,"Keep being told to build projects, but don't know what to build? Here's some ideas","Many comments in every thread about escaping 'Tutorial Hell', involve the advice of 'Just build some projects'. However, if you are like me, or /u/corshi whom I saw in a thread about this exact thing when I got on this morning, you don't have any idea of where to start or what to build, how to plan or how to structure.

Thankfully, the internet is a wide web of information, and some lovely people out there decide to create lists that can point you into any sort of direction you desire.

----------------------

**Projectlearn** - A curated list of full project tutorials in different categories from Game Dev and Web Dev, to AI and Machine Learning.
[Website](https://projectlearn.io/); [Github Repo](https://github.com/Xtremilicious/ProjectLearn-Project-Based-Learning)

**Project Based Tutorials in C** - A list of tutorials that work from small projects up to larger projects in C. Covers everything from learning Computer Architecture via building an emulator or VM, to building a kernel or OS  [Github](https://github.com/rby90/project-based-tutorials-in-c)

**Project Based Learning** - A list of programming tutorials about building applications from scratch. Covers all sorts of languages including: C#, C/C++, Go, Java, Javascript, HTML/CSS, Kotlin, PHP, Python, Lua, R, Rust, Swift, Clojur, Elixir, Erlang, and more! [Github Repo](https://github.com/tuvtran/project-based-learning)

**Build Your Own X** - A list of projects that teach you how to *'Build Your Own X'*. X can be a 3D rendered, BitTorrent Client, Docker, Database, Git, Programming Language, Search Engine, Text Editor, Web Server, and more. Covers various languages for each different *'X'* [Github](https://github.com/danistefanovic/build-your-own-x)

**Project Based Learning - Frontend** - Project Based Learning tailored to Frontend devs. Includes things like calculators, chrome extensions, chat interfaces, pagination, notifcation boxes, design systems, spotify search app, and a reddit clone. Covers Javascript, HTML/CSS, Angular, React, Vue, and others. [Github](https://github.com/binconsole/project-based-learning-frontend)

**Community Project Ideas** - A community maintained catalog of projects. Has some in Android, C/C++, OpenGL, Java, Javascript, React, Angular, Python, and more. [Github](https://github.com/fnplus/community-project-ideas)

-----------------

**App Ideas** *Courtesy of /u/Kapsize* - A list of app ideas, each with a clear goal, and 3 levels of difficulty for different places in programming careers/knowledge. [Github](https://github.com/florinpop17/app-ideas)",3937,105,XxNerdAtHeartxX,2020-08-02 13:26:33,https://www.reddit.com/r/learnprogramming/comments/i2c0ud/keep_being_told_to_build_projects_but_dont_know/,3,learnprogramming
wjqj7i,Just pushed my first commit to Google Search!,I've recently gotten a job at Google and today was the first time my code was approved for production! Damn does it feel good to know your own code is out there! Time to celebrate!,3868,163,freds_pancakes,2022-08-09 01:42:26,https://www.reddit.com/r/learnprogramming/comments/wjqj7i/just_pushed_my_first_commit_to_google_search/,0,learnprogramming
7hb7ka,"Learned to code, got interview at Google but I wish I was told...","I started learning to code a few years ago. Went through Codecademy, a bootcamp, and a Udacity nanodegree and got a Google interview. Nice right? Here's what I wish I was told much earlier.

- Learning to code does not guarantee a career in coding. It gives you coding literacy, which is powerful.
- Portfolios are so important. I wish I started earlier. Real world experience really matters. Many times in the past, I learned a concept hardcore by debugging well into the night and try to patch something of my own. Knowledge is rarely cemented by one pass through a book. 
- Watch videos and tutorials but also stop watching those and code.
- Do not shell out tons of money for the sake of education. Education is important don't get me wrong, but when you learn to code it's like running a startup. You are bootstrapping until you turn lead into gold. Ramen noodle profitability is key. Before you purchase a nanodegree or a coursera subscription think hard and google like crazy till you find something gold on the internet. Chances are the internet has good free materials that is created by tons of individual experts. Chances are you need not one but all learning resources till an idea sync and becomes second nature. use your budget wisely.
- Algorithms really matter and code in C++ or JAVA in addition to Python and Ruby. Ruby and Python allow new programmers to do magic in minutes, but when interviews come around: bit manipulation, memory management, big O.... suddenly, we will realize using Python and Ruby as a beginner to code fancy things is like using a fancy graphic calculator. It can do amazing things, but if the operator has a weak foundation in math, it's still a no go. Remember fibonacci sequence? It's in every basic coding example. You can just write an elegant recursion function. Memorize it why not, there are just a few lines. But soon (except a few years down the road) you will find out that it is not very realistic to calculate anything that grows exponentially. Turns out, beginners like myself have done fibonacci sequence all wrong. There is a lot of room for optimization. Can you do this iteratively? Can you use dynamic programming? 
- Interviews. Like it or not, good companies get a lot of candidates. Many of them brilliant, can communicate and can code. As much as I'd like to think myself as special, really, there are at least thousands of people who can do as well as me graduating every year from colleges around the world. Interviews really do matter, no matter how limiting the format seems. Some interview sites have 600+ questions and growing daily. So one question a day can cost you nearly two years. Unless your have already created a massively popular tool, Google will not hire you. Oh wait, even if you created Homebrew, Google can still tell you to f**k off if you can't invert a binary tree (Google this bit). Start interview prep early unless you are a genius at programming just happened to major in English because you were bored in CS classes. Bonus: my interview experience has been super positive. People are nice now and treat other people right - contrary to what I read about online. I think sometimes the recruiter seems to ignore candidates is because they are super busy. I had someone from a top company called me on a Sunday night. Not because they were being mean, just because that's the first chance they got. They actually wanted to offer helpful advice.
- Specifically, Google and Facebook are all about really really large datasets. Imagine when iterating through an array becomes a hard problem? If your array stores all hyperlinks that NYTimes links to (internal sites, external, and ads), now imagine that array is chopped and stored across different data centers, now imagine you have to put the links together and query them and display them in milliseconds. Now imagine using an array is too inefficient. What about a trie with linked list nodes? What about scratch all that, that's not how it is done. What if you just have to check if the username matches, except it's Facebook and there are millions of usernames that start with hotchick hotchick21 hotchick_99?
- Phone interviews are serious, lengthy and rigorous. Top tech holds phone interviews to the same standard as on-site. Consider these interviews technical. One friend was scheduled for a 10 minute conversation about drone, it was technical starting second 0, caught him off guard and didn't go well. 
- Had to say I don't know but also defend myself: hey look I don't know this, but I really think it is related to this ... here're my thought process, and let me find out more and get back to you. Search like crazy and go back with a strong something to show.
- CS graduates may take up to one year to prep for top company interviews. 
- If you walk your roommate through your white board algorithm session he/she might fall asleep. Be prepared to spend some lonely hours practicing and constantly being questions by your parents and peers why are you doing this to your self.
- Oh, when you finish that bootcamp, or the video series, chances are there's something new for you to learn. New tech pops up every day. Being a strong mathematician or a general relativity physicist really helps. Hate math? Draw pictures, paint them pink and rainbow, I don't care, just do it. The more your practice, the better you get. 
- Practice lots, read tons of code, write tons of code, dream coding and puke coding. Happy holidays.

Google interview status: ongoing, better than I thought. Probably going to fail, not the first time. Numb, nervous and excited at the same time yay! Proud of it but also worried about totally freezing up in upcoming interviews. Practicing more.


-----------
EDIT: wow I am shocked. Thank you thank you all for taking time to comment on this! Here're are few points to add. 
NEW EDIT: I am humbled. Sincerely apologize. My grammar is hopeless...

These are words of wisdom I heard in the comments below and also in other r/learnprogramming posts:

- There are hundreds of companies in the world. Don't have to die trying to join Google and Facebook. Grass is not greener on the other side. Also the interview and prep process may be more enjoyable. 
- These prep guidelines may be too ""dramatic"", ""rigorous"", ""unreasonable"". Yes, r/learnprogramming posts have mentioned luck, matter of keep trying (chance), and also don't let the ""imposter syndrome"" take over. NEW EDIT: Upon graduating from a full stack bootcamp a few years ago, I decided that JavaScript was obviously essential for web development so it was natural for me to use it as my interview language. I had an interview with Walmart Labs (a cool and interesting arm of Walmart and it's local unlike the HQ). The interview was deceivingly simple. He just nested variables in functions and ask me what is the value of the variable when it is placed inside, outside a function, and what does  ""this"" refer to. It was a pure self respect massacre. The questions were clever, simple, elegant and so precise - precisely identified me as a total newb. It was embarrassing. I felt so bad that I wasted this guy's time. He was quiet, patient, did not demean or laugh. After the interview, he thanked me for my time and hung up only when we both said goodbye. I could've buried myself. It was horrendous. It did discourage me a bit. I mean I butchered it, horribly. This experience may explain why I am doing this today.
- Top tech companies employ smart folks but not all are whom you expect them to be. Don't let the brand or the notion intimidate you. 
- NEW EDIT: Studying all 600 questions is a complete waste of time. Companies actually want to see how you think and break down a new problem. I agree! That being said for bootcamp students and other new programmers, doing 60-100 of these questions can really shed light on knowledge gaps! It happened to me, so I wrote this post. It turns out I am quite good with ""puzzles"" and ""interview questions"". I did some hard questions quite okay. OOP implementation, not a problem. Surprisingly Linked List and Pointer, Array, String Manipulation though fundamental, really got me. If you didn't take college CS courses, or only worked with high level languages like Ruby and Python, these will likely be sore spots for you too. Do a few to test your knowledge. The return quickly diminishes after two dozens of questions. It's more important to understand each type of question and how to approach each individual type. Looking for types? Just take a look at Gayle's Cracking the Coding Interview Table of Contents. 
- NEW EDIT: Comments say: you don't have to know all these to be a good programmer. Yes! In plenty of scenarios, being able to hack and integrate and put together a solution of many components prove to be extremely useful. In the real world, problems are rarely well defined. It takes wit to be successful. Algorithms are useful for large scale tech companies where data structure, time complexity and space complexity make a big difference. I met a developer who used bootcamp + self study to make a text based iOS RPG game that massed one million +  downloads without a single image. Ingenious. Something about a fire that you need to kindle, shadows in the difference and you will encounter a shadowy figure every once in a while. The ability to SHIP a product is god send. I think it is called A Dark Room, freaking amazing https://www.newyorker.com/tech/elements/a-dark-room-the-best-selling-game-that-no-one-can-explain Mind blowing. 
- Interview moderator / interviewer can be nervous too. Yes! Agreed! In fact, my engineer friends dread talking to people sometimes. 
- This post is useful and useless at the same time. lol Here's a practice question. Please implement a cat class. Create lots of instances. Make sure it eat() play() sleep() and repeat. I wish I can be a cat this Christmas. It'd be nice. Don't forget to
```
while alive:
    eat()
    play()
    if interview:
        continue
    sleep()
```
    
",3839,279,glassjar123,2017-12-03 18:12:11,https://www.reddit.com/r/learnprogramming/comments/7hb7ka/learned_to_code_got_interview_at_google_but_i/,0,learnprogramming
spf27q,A single podcast episode changed my whole perspective when it comes to learning how to code.,"A month ago I listened to a podcast by one of the best neuroscientists, Andrew Huberman. 
In the podcast he mentioned that making errors, (even if they were on purpose) is very essential for the learning process… In that moment of frustration, your brain is actually building new pathways in the brain. This is also when most people quit, not knowing that this is the key to learning a new skill. 
Ever since I listened to that podcast and I encounter a challenging topic, instead of feeling frustrated and hopeless, I literally reverse those feelings. Changing your perspective is sometimes more than enough! 
This has helped a lot in addition to many other tips he mentioned on that episode, that’s why i had to share it with you guys, especially those who feel like quitting. 
(Episode number: 20 Learn skills faster.)",3824,166,kok163,2022-02-10 19:40:32,https://www.reddit.com/r/learnprogramming/comments/spf27q/a_single_podcast_episode_changed_my_whole/,0,learnprogramming
k4hian,"2 years ago I started learning JavaScript so I could automate my Google Sheets docs. 15 months ago I left my sales job and started an internship in front end development, today, I promoted from Junior Frontend Engineer to Frontend Engineer!","Just wanted to celebrate.  
More details on my journey here:  
[https://www.reddit.com/r/learnjavascript/comments/cd5jud/9\_months\_ago\_i\_started\_learning\_front\_end/?utm\_source=share&utm\_medium=web2x&context=3](https://www.reddit.com/r/learnjavascript/comments/cd5jud/9_months_ago_i_started_learning_front_end/?utm_source=share&utm_medium=web2x&context=3)",3798,187,rushfordj,2020-12-01 09:10:14,https://www.reddit.com/r/learnprogramming/comments/k4hian/2_years_ago_i_started_learning_javascript_so_i/,0,learnprogramming
hl2jmd,"Can someone help, I want to understand my boyfriend when he talks about programming.","Hi smart humans, my boyfriend enjoys talking about programming, virtual machines, containers, red hat and Linux in general, does anyone have any links that I could study to learn things? He talks about tech stuff a lot and half of the time I have no clue what he's talking about, but I want to be more supportive. 

Thank you so much, any links for beginners would be great!",3798,505,thatgirlisback,2020-07-04 12:28:45,https://www.reddit.com/r/learnprogramming/comments/hl2jmd/can_someone_help_i_want_to_understand_my/,1,learnprogramming
ubfotz,I made it! Started as Self-taught 4 years ago and today I just got promoted to Senior.,"Hello, I came here to brag a bit and also trying to motivate others.
I started learning programming 4 years ago at home while working at grocery store. When there were no clients I would read programming books, just trying to understand how things work. It took me 7 months of continuous every day learning to land my first job, it took hundreds of applications to land an interview without any experience and degree, but i finally did it. Well today I was promoted to Senior Software Engineer.

I'm not really bright person, but somehow I made it. I believe all of you out there can make it happen as well. You just have to believe strong enough and keep pushing yourself forward, eventually you will succeed. Never give up guys!",3738,189,BlacksmithAlarmed997,2022-04-25 07:48:21,https://www.reddit.com/r/learnprogramming/comments/ubfotz/i_made_it_started_as_selftaught_4_years_ago_and/,1,learnprogramming
og1zyc,I recorded a 1 hour long HTML Crash Course for Udemy in 30 days but in the end decided to release it for free on my YouTube channel. No reason. Just think it will help more beginners in the long run.,Don't Panic – It's Only HTML course is [here](https://www.youtube.com/watch?v=3939sZ20kPk). (YouTube),3723,113,mutantdustbunny,2021-07-08 07:00:31,https://www.reddit.com/r/learnprogramming/comments/og1zyc/i_recorded_a_1_hour_long_html_crash_course_for/,0,learnprogramming
f0ccap,Somebody has going to be the a**hole that tells you the truth:,"I applaud self-paced learning. I love the fact that the smartest and best programmers I know impressively proved that a degree is not necessary in the field. And I cherish today's possibilities of free learning resources. But there is one fact about the human capability people seem to completely neglect: **No! You cannot become a full-stack junior web developer earning 80k/year within two weeks!**

The amount of people on this sub asking for ""How can I score this interview? I have been learning x for y weeks..."" always put us in a predicament. Yes, we want to help. And yes, we want to motivate. But there is a terrible side to this:

WE are not a protected profession. You can't call yourself a lawyer after reading the constitution but you can call yourself a developer after a YouTube video. The implications of that are manifold, but here are the worst parts:

1. Capable, young developers have a very hard time finding a job because the recruiting process had to adapt to all the ""posers"" that apply to jobs they are not qualified for. Those little unrealistic tests in interviews? They are a direct result of having to filter out the weeds while having no other option of constructing unrealistic tasks that say little about the interviewees potential. They filter out the complete noobs securely, but also burn a lot of people that would otherwise deserve a chance. 

2. You destroy trust in the industry and income potential of your peers! If HR finds a resume claiming to be a sufficient React developer and asking for 40k/year the resume next to it asking for double doesn't look that enticing. It is a fact that most jobs go through several filtering layers before somebody with the knowledge to assess capabilities will look at resumes. More often than not, no such person exists at the hiring company and shiny portfolio pages copied from templates make it into the pile while capable devs are not considered. Once an unqualified dev makes it into a company, a certain price is set (let's take the example of 40k). What many people thinking that ""learning on the job"" will help them catch up don't understand is: the peers that will come in will now be in the same bracket. Your ""mentor"" will never join this company (and if he/she would, you'd be fired within weeks), as from the company's perspective that resource is too expensive now. I have seen many startups die like this.

3. Globalization. Even ""bad developers"" need to feed themselves. But if the quality, speed and overall outcome cannot compete with a remote resource available for less than $10/hour, what kind of message do you think you project into the industry? A famous example is India. You will find (just like anywhere) good developers there. The best work for Google, Twitter etc. But India has over a billion people. So the percentage of ""I don't know much but am confident enough to hack it"" might be the same, but ultimately accounts for many, many more people in absolute numbers. And given the difference in cost of living, they can flush the international market with $5/hour offers. So think this through: local hiring has become very cost-intensive due to all the local ""I graduated from a bootcamp last Monday""-devs. The interview process alone requires so much time and money, that you might as well hire multiple people oversees and hope for the best, since you have the same risk when hiring locally. So what you are effectively doing is endangering the complete field by trying to ""sneak in"" with actual developers.

Conclusion for learners:

As stated in the beginning - Learning how to code is a useful, almost magic experience. And being able to teach yourself abstract and complex concepts in order to facilitate digital tasks deserves the highest respect. And you might have a combination of pattern thinking, intelligence and learning capacity to be a sufficiently trained developer in a relatively short amount of time. But the general notion that people can become junior developers within weeks is a LIE. A lie all the bootcamps and online schools sell you in order to make money. Many of those systems (better not mention names here), are almost a pyramid scheme: the teachers are former students. They do not hold the knowledge to get a well-paid job in the field, but they can repeat what they have gone through. (Don't get me wrong, there are reputable online schools and bootcamps for the most part)

Conclusion for devs:

Just today I found myself answering a questing a question ala ""how to get this job I am not qualified for"" with (hopefully) helpful tips. But then I thought: I wouldn't want to work with this person. If a project relied on such a resource, I'd be doomed. My team would suffer. Countless hours in overtime would have to be considered. I decided not to post that comment, then. I didn't want to tell that person that I think he/she is not qualified. I want to help, I want to motivate. But I also realize that in the greater picture, I am not helping. I want to work with people that deserve it. People that are skilled and have worked hard to get there. Maybe fresh and young (in the sense of little industry experience, not age) - yes - but ultimately I will not pay you for teaching you something without getting the output my team needs. If that becomes the case, then you should pay me. How do you feel about this?",3665,471,evaluating-you,2020-02-07 15:54:11,https://www.reddit.com/r/learnprogramming/comments/f0ccap/somebody_has_going_to_be_the_ahole_that_tells_you/,1,learnprogramming
6oz03w,How to Program: My new YouTube Channel pulling from 7+ years of experience working at Amazon and Facebook to teach people programming.,"Hi everyone.

I've worked in the Software industry for over 10 years including my last job which was spending 5 years at Facebook working as a Senior Software Engineer and Engineering Manager.

I got tired of seeing people make the same mistakes in teaching others programming, namely introducing hard concepts too early, not starting with very simple basics first, and not teaching solid Computer Science fundamentals early on.

I started a new YouTube Channel to teach people programming: https://www.youtube.com/channel/UCZIoQFEhSJxBRQUZ1g54Z1Q

I plan on adding a new lesson at least once a week.

If you are interested in following along, please subscribe! Even if you already know a bit of programming, I hope you will still find some interesting things amongst the videos I am putting together!",3663,111,imperio59,2017-07-23 02:28:00,https://www.reddit.com/r/learnprogramming/comments/6oz03w/how_to_program_my_new_youtube_channel_pulling/,0,learnprogramming
patmv7,Senior Software Engineer advice to Junior developers and/or newbies (what to learn),"I work as a Senior Software Engineer in the UK and I'd like to lend my advice to new developers who are just starting out or what to become developers in the future. My experience is limited to the UK but may be applicable in other countries. And of course it varies on what you want to acheive as a software developer. My experience is in business and FinTech and I have been developing software professionally since the early 2000s and a lot has changed in that time. I am 44 and started programming when I was around 15. I started with Visual Basic and played around with Python and few other languages. But primarily I use C#, SQL using AWS and Azure platforms.

So anyway, here's an un-ordered list of things you should probably learn and why.

* Pick a language you like and get competent with it, don't fret the big stuff, just learn the basics. I would recommend a business focused language such as C# as it is very well supported.
* While doing the above, learn Dependency Injection at the same time.
* Start learning coding principles, such as SOLID, DRY, Agile software development practices. These will hold you in good stead in business. Many business use the Agile framework for project management, so learning how to code in an Agile manner will make things a lot easier for you and your team. I recommend reading the following books, all will give you good grounding common coding techniques in business
   * Clean Code and The Clean Coder both by Robert C. Martin (Uncle Bob),
   * Design Patterns: Elements of Reusable Object-Oriented Software
   * Head First Design Patterns: A Brain-Friendly Guide
   * Refactoring: Improving the Design of Existing Code
* Learn how to write behaviour based unit tests! Behaviour Driven Design will help ensure your code does what it is meant to do based on the business requirement. Learn how to write tests for your code by testing the abstraction and not the implementation. Test behaviour and expected results, now how those results are derived.
* You don't need a degree! If anyone tells you otherwise they are lying. The grads I have worked with, while knowledgable about computer science subjects, have been terrible coders. It's nice to know these things but most of the time some of the subjects are not all that relevant to business coding (as I said I am from a business background, so it is possible that if you want to go more indepth then a degree is most likely very useful). By all means get a degree if you want, but what you actually need to get started is experience. You only get this by coding and developing software, making mistakes and learning from them and learning from more experienced developers.
* Ask questions! ALWAYS ASK QUESTIONS! It's the only way you are going to learn. There are no stupid questions. Don't be embarassed, be a pain in the ass! As a Senior I would be more concerned about devs NOT asking questions than those who constantly bug me. I want to be sure you are doing the best you can.
* Learn a cloud platform! Your code has to be hosted somewhere (if its not local) so learn a cloud platform such as Azure (recommended), AWS (somewhat recommended) or Google Cloud (meh!). Learning this kind of thing will really help in the dev ops world where you are responsible for coding AND deployment AND support. You will learn fast when you have to support your product.
* Learn Agile Scrum practices. A lot of businesses use this method to manage their projects. A good book on this subject is ""Scrum: The Art of Doing Twice the Work in Half the Time"". It's pretty much essential, as the days of just coding what you want how you want are pretty much gone, especially in business. See coding practices above.
* Learn a datastore. This could be My/MSSQL, Mongo, Cosmos anything. You don't have to know it inside and out but an ability to create and run queries will be good, especially if you can do it in code.
* Also, learn a framework like Entity Framework or Dapper as your ORM (Object Relational Mapping) framework.
* Learn security basics. Read up on OWASP and appreciate common methods of attacks on your code and learn how to mitigate the risks by coding defensively.
* EDIT: Learn GIT! Learn how to branch, fork, merge etc. It's so essential.
* EDIT: Learn REST. Representational State Transfer. A very common paradigm for building web based APIs. It's super easy and intuitive to understand, so no excuses.

So thats a minimum I would expect from a dev in my team. But I would not expect them to know it all straight away. Just having a good awareness of the subjects and a willingness to learn.

Do your own projects and make it fun! Make a Git repo and show off your code. Coding makes you confident and learning from mistakes and remaining humble and willing to learn is the sign of a good developer. No one knows everything and ignore those that think they do! Even the experienced ones.

I hope this helps. Happy coding!

EDIT: It's nearly midnight here in UK. I need to sleep. I will answer as many people as I can in the morning. You can add me on discord Duster76#3746

Great to see so many responses",3657,317,edgeofsanity76,2021-08-24 18:51:46,https://www.reddit.com/r/learnprogramming/comments/patmv7/senior_software_engineer_advice_to_junior/,0,learnprogramming
lnq975,Programming pro tip: learn to read code. You’ll be doing a lot more reading than writing most of the time.,"I’m not a very experienced programmer, I’ve been in it for like 1.5-2 years professionally now, but this is the best piece of advice that I can give.

If you don’t have a job yet, try to get some project from GitHub and customize it somehow, play with the inheritance, just do anything that will force you to read someone else’s code.

Can’t tell how many times I’ve fucked up or taken a long time or bugged my seniors because I just sucked at reading code.

Edit: this post went way beyond what I expected. It’s great to hear from other (and even more senior) devs that we share from this opinion. Thanks for the awards!",3644,107,LeatherNoodles,2021-02-19 20:54:49,https://www.reddit.com/r/learnprogramming/comments/lnq975/programming_pro_tip_learn_to_read_code_youll_be/,0,learnprogramming
wme0gu,Amazing new developer who joined my company,"Recently a new developer joined our team at the company I work and the guy is out of this world. He can see a codebase once, spend an hour max and understand how to navigate through it immediately. We have projects in multiple programming languages and even though he has not worked with them he can easily get around. Now I know people will say ""but all languages share common patters"". Yes, it's true but the guy is able to go through a 3k line project (just one of the many microservices we have) he has never seen before in a language he has never seen before and find the issue in less than 2-3 hours. Also he is knowledge in all areas. DevOps, FE, BE, data analysis, security... it's insane. And on top of all of that our product is really big and complex and people have spend years working in this company and still have gaps yet he seems to pick everything up extremely fast and connect everything together. I really look up to him and admire him but I know he is a very rare case as no one else in my entire company comes even close to that. And he doesn't call himself by a fancy title like many other people do. He always says ""I'm just a developer"" and is really extremely humble. And on top of all of that he is always open to help or teach others. I no longer want to become senior, tech lead or principle engineer but rather become someone like him one day.",3627,381,Technical_Dog6975,2022-08-12 06:26:03,https://www.reddit.com/r/learnprogramming/comments/wme0gu/amazing_new_developer_who_joined_my_company/,0,learnprogramming
n52d3g,You're not stupid. An important a-ha moment I had recently.,"If you don't understand something, chances are the concept has just been abstracted to a level that you haven't learned yet.  It's in no way a refection of your intelligence.

For example, if you're reading something along the lines of...

""Log the callback for the eventlistener function and parse the JSON."", and you don't understand what this means.. don't take it personally. 

Read the sentence carefully and you'll realise there's a concept that has been abstracted to a level that you're not up to yet. Read each word carefully.. Do you truly understand what an eventlistener is. A callback? A JSON? A function? Parsing? Work out what you don't understand and grok it until you can ELI5 it. Keep doing this and everything will become clear. 

If this is happening a lot to you then you're rushing the process. Remember, you're not saving any time by skipping over things. If you grok the core concepts you can fold them up, put them in your pocket and not have to think about them again which frees you up for the next layer of abstraction.",3577,158,Standardweasel,2021-05-05 00:11:00,https://www.reddit.com/r/learnprogramming/comments/n52d3g/youre_not_stupid_an_important_aha_moment_i_had/,0,learnprogramming
nj6ccv,"After 8 months of self-teaching, I finally coded a job ready project - A Nexflix clone! Any tips or feedback highly appreciated!","Eight months ago I quit my job as a digital media editor and was determined to make a career switch. Since then, I've been teaching myself web development from absolutely scratch.

Recently, I finally finished a project that I could confidently call job-ready: a Netflix clone.

It has all the basic functionalities the original one has. Users can sign up, sign in, create, edit, delete their profiles. After choosing their profile, there will be a video playing on the browse page and also Netflix 'lolomo' aka list of movies below. Users can also view certain Tv shows or movie details and search for their desired ones.

Here is the [live demo](https://hotflix-clone.vercel.app), and [Github repo](https://github.com/Halmesn/Hotflix).

What do you guys think? Do you think it's a job-ready project for a junior developer position? Any improvements or feedback highly appreciated!",3577,258,Halmesn,2021-05-23 12:00:32,https://www.reddit.com/r/learnprogramming/comments/nj6ccv/after_8_months_of_selfteaching_i_finally_coded_a/,1,learnprogramming
5zs96w,Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!,"TLDR: [Github Repo with 100+ Free resources to learn Full Stack Web Development](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer/)

18 months ago I dove head first into Full Stack Web Development. I wouldn't have been able to get off the ground without this sub. So, I wanted to give back a little. I'm a chronic note-taker, and anything that I have found useful, I've saved along the way. Yesterday, I started cleaning them up, and added them all to a [github repo](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer/). I still have a ton of links to go through, but wanted to release this in case others wanted to add links as well. 

My links focus on Javascript, React, and Node.js. It's a mix of reddit posts, articles, tutorials, classes, and courses. **Everything is Free.** There is also a wealth of information on interview prep and applying to jobs. This is all stuff you could find on the internet on your own, but hopefully this format will make it a little easier. 

Whether you're just starting to learn, or you've been learning for a while, hopefully this is helpful! Thanks again for helping me out along the way as well!

Here are all of the topics that I have:

* Start Here
* How to learn
* What is the Most Useful CS Bookmark You have
* Free Full-Stack Programs & Classes
* Learn HTML
 * Empty because I already knew HTML. Feel free to add links!
* Learn CSS
 * Pretty empty, for the same reason as above. 
* Learn Javascript
* Learn React.js
* Learn Node.js
* Learn APIs
* Learn Git
* Games & Challenge Websites
* Free Programming Books
* Open Source Contribution Opportunities
* Am I Ready to be a Developer?
* Software Developer Success Stories
* Resume's, Portfolio's, LinkedIn, Interview Prep, & Salary Information",3564,179,web-dev-123,2017-03-16 18:14:12,https://www.reddit.com/r/learnprogramming/comments/5zs96w/github_repo_with_100_free_resources_to_learn_full/,1,learnprogramming
lae2nd,"In December 2019, I got fired from my civil engineering job. In July 2020, I started learning programming. In February 2021 I got offered a job as a Junior iOS Developer! I start tomorrow!","I just wanted to thank this amazing community for helping me getting started into the journey that is the programming world. I am so happy!

EDIT: Sorry for not replying. I've been celebrating. I promise I'll respond to every single message in the morning

EDIT 2: Thank you so much for everybody's words. I tried to answer as many questions as possible, but now I have to go get ready for my first day. I'll try to keep answering questions later today.",3550,210,dickdeamonds,2021-02-01 21:03:39,https://www.reddit.com/r/learnprogramming/comments/lae2nd/in_december_2019_i_got_fired_from_my_civil/,0,learnprogramming
fzwbiw,[Free] Google is giving free courses.,"Total Course: 126 courses.

There are Bunch of programming courses (scroll down to end)

Check it out

 [https://learndigital.withgoogle.com/digitalgarage/courses](https://learndigital.withgoogle.com/digitalgarage/courses)",3552,175,pramit_marattha,2020-04-12 12:59:46,https://www.reddit.com/r/learnprogramming/comments/fzwbiw/free_google_is_giving_free_courses/,0,learnprogramming
7zxvr9,"A while back, I shared the idea of an Urban Dictionary for coding terms. You liked it, so I built it.","A few months ago, I posted here about a [Urban Dictionary/Stack Overflow for coding terms](https://www.reddit.com/r/webdev/comments/7265h6/what_do_you_guys_think_of_an_urban_dictionary_for/?utm_content=title&utm_medium=user&utm_source=reddit&utm_name=u_maxverse), and you guys were really encouraging of the idea. While learning to code, I'd often fall down a rabbit hole of research for things I didn't really need. There are lots of resources that teach you _how_ to do something, but few explain _when_ and _why_. So, over the past few months, I built **[Hackterms - a crowdsourced dictionary of programming terms](https://www.hackterms.com)** to answer these questions:

1. at a high level, what does this tool/process/concept do? When is it used? What are the alternatives?
2. Is this worth my time to learn now?

Check out the definitions, let me know what you think, and feel free to contribute!

TL;DR: Hackterms - simple definitions that explain when/where/why programming terms are used (but not _how_ to use them). Built in Node/Express, Mongo, jQuery.",3521,203,maxverse,2018-02-24 17:06:23,https://www.reddit.com/r/learnprogramming/comments/7zxvr9/a_while_back_i_shared_the_idea_of_an_urban/,0,learnprogramming
fbjt3g,"The Udemy ""Automate the Boring Stuff with Python"" online course is free for the next 9 days.","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

EDIT: I've switched the code to MAR2020FREE, although it seems to not be taking. Check back in an hour or so. It should work eventually.

You can also click this link or manually enter the code: FEB2020FREE2 (on Monday the code changes to MAR2020FREE and Friday it changes to MAR2020FREE2, but the above link should always work.)

This promo code works until March 9th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. I won't be able to make codes after this period, but I will be making free codes in the future.

You can also purchase the course at a discount using my code MAR2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* The course is made for complete beginners with no previous programming experience. If you already know some Python programming, you might want to skip to the later parts that cover the modules that do web scraping/updating spreadsheets/sending emails, etc.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",3492,207,AlSweigart,2020-02-29 21:56:53,https://www.reddit.com/r/learnprogramming/comments/fbjt3g/the_udemy_automate_the_boring_stuff_with_python/,2,learnprogramming
efuvy8,"Learn the syntax of any programming language really fast, like in minutes","[Learn X in Y Minutes](https://learnxinyminutes.com/)

\^

This helped me when I wanted to learn JavaScript really fast to start developing web apps (I knew some basic things in C++). Though you would probably need a basic experience in any other language. This could form a good base to start practicing right away.

(I don't know if this has been posted earlier. I thought this is a really useful website everyone should know.)",3498,84,1TMission,2019-12-26 12:28:14,https://www.reddit.com/r/learnprogramming/comments/efuvy8/learn_the_syntax_of_any_programming_language/,1,learnprogramming
m9ctq7,Your fear of looking stupid is keeping you stupid,"Take it from me. One of my biggest fears in life is looking stupid because my biggest fear is trying and failing. I just started a co-op at a large corporation in my city and it’s been going well due to one single thing:asking questions. Ask the dumbest questions. Interrupt other coders even if they seem too preoccupied to help you. You WILL get some who seem annoyed. But you HAVE to embrace that and do it anyways. If you feel the anxiety and hesitation to ask someone for help based on their reaction, you’re not doing what’s best for you. Everyone has been in your situation at some point. To gauge your progress is to see how many times you have to ask the same question. You will ask the same questions more than once, it’s inevitable. But don’t forget to step back and physically write out everything you’ve learned. I know how vast and endless learning development feels. But one of my favorite quotes ever is simple and very helpful. “Feel the anxiety and do it anyways.” Hope this helps others.

Edit- I get everyone’s concern about asking questions to developers who are busy. I’m not saying that someone should go out of their way to bother a busy developer, I’m saying that you can’t let that fear keep you from learning. Obviously, if the other developer says they are busy, then you adjust to that. No where did I say you should keep badgering them, that’s obviously disrespectful. But don’t stop yourself from asking because they APPEAR busy. A lot of times, they’ll still help you. I hope that makes sense and clears things up",3486,108,ConsciousCog1,2021-03-20 18:19:48,https://www.reddit.com/r/learnprogramming/comments/m9ctq7/your_fear_of_looking_stupid_is_keeping_you_stupid/,1,learnprogramming
j886l4,A list of 100 Projects to build,"I've compiled a list of about 100 projects that you can try out to learn more about programming and also at the same time build serious projects that you can put up on your portfolio.

Do check it out and tell me what you all think!
Here's the link:

https://github.com/arpit-omprakash/100ProjectsOfCode",3468,192,Aceking007,2020-10-09 21:51:32,https://www.reddit.com/r/learnprogramming/comments/j886l4/a_list_of_100_projects_to_build/,0,learnprogramming
iz064h,List of YouTubers that teach coding you may find useful,"The list: [https://github.com/JoseDeFreitas/awesome-youtubers](https://github.com/JoseDeFreitas/awesome-youtubers).

It contains YouTubers that teach you about programming (and other tech-related topics). I'm sharing this because I often find videos much more useful than documentation. They have good playlists to learn from, apart from new videos they upload every week. The list is being updated every day so you can expect many more YouTubers to be added.",3433,182,JoseFrey,2020-09-24 16:12:19,https://www.reddit.com/r/learnprogramming/comments/iz064h/list_of_youtubers_that_teach_coding_you_may_find/,0,learnprogramming
s3ysl4,Software Engineer === Student,"For context, I'm a lead engineer at a 200+ man company with a team and deliverable list of my own.

NO ONE knows it all. NO ONE. The tech field is booming and expanding at a rate much faster than any one mind can understand. We're all here to learn, apply (with bugs), and keep learning. 

To all beginners, stay encouraged. To all wizards, stay humble. 

Keep typing y'all.",3425,200,impspring,2022-01-14 18:12:53,https://www.reddit.com/r/learnprogramming/comments/s3ysl4/software_engineer_student/,0,learnprogramming
o9q5oc,"The greatest pain in programming comes from thinking ""I should understand this"". Screw that. It takes time and repetition to really understand something. Do you think a piano player can play a piece after only one runthrough?",Keep the expectations on yourself grounded and stay on track. You will get there.,3408,160,allun11,2021-06-28 18:22:18,https://www.reddit.com/r/learnprogramming/comments/o9q5oc/the_greatest_pain_in_programming_comes_from/,1,learnprogramming
qtlqba,The Odin Project is PHENOMENAL.,"I just finished working my face off with the Odin Project. Finished fundamentals in 2-3 weeks (8 hours per day as fulltime job during vacation). The things I can make now and the knowledge I have now (it's a refresher, haven't coded in years) compared to 3 weeks ago is INSANE! 

It's all laid out so well, it's free, the quality is high, it's easy to follow and understand. And also, it knows when it gives you more that you can chew, and it also has many times when it says 'It you don't quite get this year, read X article first'. So great.

I can recommend this to anyone learning programming. So happy!

https://www.theodinproject.com/",3410,407,WolfofAnarchy,2021-11-14 08:46:43,https://www.reddit.com/r/learnprogramming/comments/qtlqba/the_odin_project_is_phenomenal/,0,learnprogramming
489tmy,I've written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It's yours for free (no sign up required).,"Hey guys!

I've been writing a series on how to build an Instagram clone with Ruby on Rails for the last few months and finally it's finished!  To celebrate, I've converted the whole series to a pdf and edited slightly so it feels more *bookey*.

[Download right now here](https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=0)

No signup / etc at all is required and I hope you find it useful.  I had a great time writing it and working with the people who've followed along.

Ben

ps.  Wow, thanks for the support everyone!  My regular old blog is www.devwalks.com but I must admit that this book pretty much contains 95% of the content thus far.  I'm planning on building a Basecamp clone for the next series which will incorporate all of the good SAAS stuff.  Sign up over at the blog if that sounds like something that'd make you smile with joy.

You can pre-order the paid version of this book that is completely Test-Driven (industry standard) and formatted much nicer along with much greater detail.  There's a link for that in the front part of the book, I won't spam it here.",3383,197,devwalks,2016-02-29 11:42:35,https://www.reddit.com/r/learnprogramming/comments/489tmy/ive_written_a_200_page_ebook_on_how_to_build_an/,1,learnprogramming
5zc24o,The Best Way To Learn How To Code,"The thing that really frustrated me when I first started learning to code was what I now call the “foggy bridge”. It’s a long and dark bridge where everything on the left is too easy and everything on the right is too hard. So you’re stuck aimlessly stumbling across this damn bridge not knowing what you don’t know.

Most people new to programming suffer from an inability to find intermediate tasks and sources of knowledge to bridge the gap between being a beginner and becoming a proficient coder. The people who make it across the bridge do it by endlessly grinding through simple tasks or hitting their head against the wall of a project that’s probably way beyond their current ability.

This results in the vast majority of beginners getting frustrated and giving up before they should. They burn out. Not because coding is hard \(it’s not\), but because *learning to code* is hard. And it really shouldn’t be.

So, is there a better way?

For over a year, I was literally obsessed with finding an answer to that question. What’s the best approach to [learn to code](https://edabit.com)? It’s a deceptively simple question and the answer, as it turns out, perfectly explains why learning to code is so difficult in the first place. Or perhaps I should say why *explaining to others* how to learn is so *misleading*.

If you were to ask five developers what the best way to learn programming is, you’d probably get five very different answers. One guy will confidently say you have to start building real applications. Another guy will give you a huge list of links to blog posts, YouTube videos and online courses. There will be the guy who says his brother went to such\-and\-such bootcamp and it’s apparently awesome. The really nerdy looking guy will give you a .edu link to an introductory computer science course and somebody else will undoubtedly mention a well respected book or two.

You know what’s *really* frustrating about those responses? They’re all legitimately great answers. So why are you still left with that same feeling of discouragement you had when you first asked the question?

Here’s why: Learning to code is easiest when done in a particular order. When you try to learn it out of sequence, you’ll get *really* frustrated or *really* bored. Like trying to ride a bike without first using training wheels or learning your ABCs when you can already read and write.

The best way to cross the foggy bridge is to break it up into three separate but distinct segments. Think of these segments like you would think of borders on a map. They’re helpful for navigating but they aren’t real.

1. Learn syntax
2. Solve problems
3. Make stuff

Each segment is a prerequisite for what comes after, yet none of the segments are mutually exclusive. In other words, crossing the foggy bridge won’t be a strictly linear process. While each segment reinforces the others \(independent of order\) you should focus primarily on one segment at a time. If you do it that way, you’ll make it across the bridge faster, easier and with much less of a headache.

Let’s take a look at each segment in greater detail.

**Learn syntax**

This segment gives you a false sense of confidence which will quickly disappear when you move to problem solving. It’s the realm of countless introductory books, videos and courses. A lot of money is made in this segment because most people learn a bit of syntax and never go any further with it \(not their fault, but I’ll get to that in just a sec\).

There really isn’t anything lacking in this area. The market for learning the basics is so massive and so few people go beyond it, you’ll find an almost endless supply of material. Don’t get caught in the common trap of continuously learning and relearning syntax. Once you’ve read two decent beginner books on your language of choice, call it good and move on to solving problems.

**Solve problems**

Now this is an area desperately in need of some attention. It’s almost completely overlooked and I believe that’s the main reason so few people get past learning syntax. They have no direction other than vague advice to start making things, which is kind of like trying to ride a bike without ever having used training wheels. It’s possible but far from an ideal way to learn.

When you can take the syntax from the first segment and apply it without being told what to do, you’re in the problem solving segment. This is the very essence of *thinking like a programmer* and it is by far the most difficult and important part on your journey across the foggy bridge. In fact, It’s what I’ve spent the past six months of my life working on.

Beginners simply don’t have a source of intermediate tasks and resources to bridge the gap between knowing basic syntax and actually building stuff with it. They’re left with no other choice but to stumble across the foggy bridge until eventually they start figuring things out through sheer brute force alone.

**Make stuff**

Pretty much every developer I know went straight from learning syntax to making stuff \(or… trying to\). It’s very frustrating because not only are you learning to think like a programmer, you’re also learning about frameworks, all the jargon that goes along with frameworks, how to use an IDE and a bunch of other things I won’t get into.

Once you understand syntax and can actually solve basic coding problems on your own, it’s time to either contribute to open source projects or work on some hair brained idea you’ve got. Build stuff that makes you excited to get out of bed in the morning and prevents you from falling asleep at night. Passion will get you past the remaining hard parts.

The reason so many people get frustrated and ultimately give up on learning to code isn’t because coding is hard. It’s because *learning to code* is hard. It’s messy, loaded with jargon and it leads to extreme information overload. There’s just so much *stuff* you need to learn. So at the very least, keep your approach simple.

1. Learn syntax
2. Solve problems
3. Make stuff

Generally in that order.

For those who find themselves trapped on the foggy bridge, start with these interactive [coding challenges](https://edabit.com/challenges).

**EDIT:** This sub apparently gives out gold like it's candy. Thanks stranger.",3350,171,memystic,2017-03-14 13:20:18,https://www.reddit.com/r/learnprogramming/comments/5zc24o/the_best_way_to_learn_how_to_code/,2,learnprogramming
oigbjn,I got a job! At 39 years old and exactly 18 months from when I quit my marketing career.,"Huge thanks to this awesome reddit community. The number of times I googled something paired with the words “reddit learnprogramming” and got my answer, I can’t even count. You guys have taught me so much. So, I wanted to try to give back and detail everything I have learnt from the past 18 months (and 15-year career before this).

I’ll try and break this up into my learning journey and my job-hunting journey.

**Learning**

Below was basically my curriculum.

(But note that people learn differently. What works for me might not work for somebody else. I’m an auditory and a kinaesthetic learner. I recommend working out what learning style works for you. I’d also recommend two awesome books to read; Atomic Habits by James Clear and Ultralearning by Scott Young.)

Anyway, here’s what I did.

* Harvard CS50 (free)
   * This was awesome at nailing the fundamentals. David Malan is a great teacher and explains everything really well. I’d recommend doing this at the beginning of your journey if possible and do the projects. Warning though, it’s really hard. (It is “Harvard” remember) I say this so that you don’t get discouraged. It’s going to punish you. But try and push through the struggle.
* FreeCodeCamp (free)
   * I found FreeCodeCamp really enjoyable and the short, almost gamified lessons made it really easy to keep me motivated. I was having fun. I did find however that it was a little too hand-holdy for me and I found myself not retaining as much information as I would have liked. Many of the modules I had to do 2 or 3 times to fully grasp them.
* Tyler McGinnis’ React courses (now called [Ui.Dev](https://Ui.Dev))
   * He’s a great teacher but was a little advanced for me as a beginner. It’s more of an intermediate course. I’d probably be ready to do his courses again now.
* Grad Cert of Data Engineering (ANU)
   * I did this basically because it was being offered as a really cheap University short-course due to Covid. Although I did learn a lot of SQL, Python and Machine Learning, it was a pretty poor experience. (This is a whole different rant that I will spare you from) It also didn’t do much for me job wise, as it often confused hirers as to where I wanted my career trajectory to go. Not the best use of 9 months of my time.
* The Odin Project (free)
   * I found this to be really good. The perfect balance of guiding you to where you need to be without hand-holding. And it allows you to develop real world skills such as using an IDE, Git, Package Managers etc. If you're looking to get into web development, this is pretty much a one stop shop to get there.
* Random other things that I found such as CodeWars (for algorithm practice), Flexbox Froggy, Automate the Boring Stuff and an assortment of YouTube videos (Programming with Mosh, Tim Corey(C#)), PluralSight and other random things that I don’t remember any more.

**Getting a Job**

I feel like I made a fair few mistakes here. So rather than detail exactly what I did, I'll make it about what I recommend you do...

* Focus on what will move the dial in relation to getting an interview. This is:
   * Resume/CV
   * Projects (to put in your Resume/CV and to talk about in your interview)
   * LinkedIn
   * Networking/Meetups
   * Personal website

**Resume**

* Optimise your resume/CV. This is the most important part of getting to the interview stage by far. Obsess over it. Get multiple people to review it. Make sure the people who are reviewing it know what they’re talking about. Pay an expert to do it if necessary. This is your number 1 asset. Your entire journey comes down to someone looking at this thing for around 8-12 seconds. It’s your one shot, so, make sure it’s as perfect as it can be. (If you'd like me to look at your resume, send me a DM)
* I won't go to much into what your resume should look like, but *make sure it's easy for them*. Make your resume skimmable, with clear sections, headings, subheadings, bullet-points. If you live in the area of the job you're applying for, make it clear that you live in that area and that you have valid working rights.
* Also, tailor your resume to each job you apply for. You don’t have to change it a heap, but, if you’re applying for a JavaScript job for example, make sure your resume is JavaScript focused.
* If you don’t have much experience, do some interesting projects (or at least one comprehensive one) and either add links from your resume, or if you’re short of space, from your personal website (and include your personal website link in your resume instead). Make sure these projects are easily viewable to the hirer. If you’re not looking for Web-Dev jobs and you can’t link to them, at least provide links to screenshots of them. Make sure they look good, as many hirers are not coders, and will judge your stuff on the aesthetics.

**Other**

* Read job descriptions carefully. Read them 4 or 5 times if you need to. Someone most likely put a lot of effort into it and it lists exactly what the company you are applying for is looking for. Then you can basically parrot this job description back to them in your own words, both in your cover letter and when tailoring your resume and it will sound to them like you are the exact person that they had in mind.
* Use LinkedIn. Optimise your LinkedIn profile the same way you do your resume.  Just watch this YouTube video from [Danny Thompson](https://youtu.be/SG5Sb5WTV_g) for everything you need to know in this regard. And connect with everyone relevant in your area.
* Apply for jobs through websites, but also try non-traditional routes. If you see a job on a website, try and find the contact on LinkedIn and send them a DM. Ask a simple question such as salary expectations. Sometimes this will get you an interview without having to go through the process whereby your resume is shoved in a pile with hundreds of others. Even if you don’t get a reply to your message, they’ll probably remember your name when they’re going through the pile which won’t hurt.
* Get out there and talk to people. Find meetups to go to in your area. Break out of your comfort-zone. Talk to people. It turns out, the people who go to these things are generally cool, passionate people who just love to share their knowledge and are excited about anyone who shows passion as well. I know you probably feel awkward and uncomfortable. Most people do. Do it anyway.
* Can’t find a meetup in your area? Create one! I actually started a Junior Developer meetup group in my area (Adelaide, Australia) because there wasn’t one. Now I know what you’re thinking. ""But I'm not the type of person who organises a meetup group!"". *Neither am I.* I was scared shitless(I still am). But I pushed through and did it anyway. Not only did it end up helping me land my first job, but I’m helping to grow the local tech community, making friends and helping other junior developers find jobs. *And* I conquered one of my biggest fears. It feels good.

**Interview**

**Preparing for an Interview**

* Again, read the job description carefully before your interview. Think about any questions they could ask in relation to the job description and prepare answers for them in your head.
* Research the company before going in. Check out their website. Learn what they're about. Practice for the question of ""What do you know about us?"" and ""Why do you want to work for this company?"" Prepare something in particular about something they have done or are doing. A specific feature they have implemented. (if you can't think of one, question whether you actually want to work for them) Nothing impresses the pants off of someone more than saying ""I read your white paper on blahblah and I love your focus on blahblah"".
* Prepare answers for the following:
   * Tell me about yourself. Usually this is just an icebreaker or they haven’t had time to read your resume. So prepare a story about your journey and try and make it interesting. Give it a story-arc (which should be fairly easy if you're going through this journey because you're no doubt going to have struggles and conflicts).
   * What’s a difficult situation you’ve had at work (or university if you haven’t had any experience) and how did you handle it?
   * What are your strengths.
   * What are your weaknesses. (People often struggle with this one. For this question don’t say things like “I work too hard”. State an actual weakness but then talk about how you have mitigated this weakness. For example I usually go with (which is true), “I don't really like thinking of them as weaknesses. I like to think of them more as 'Challenges'. Because when I become aware of a weakness I take steps to mitigate it. For example I'm naturally a pretty unorganised person, so I'm obsessive about my use of trello, evernote and other project management tools to help keep me organised”.)

**In the interview (non-technical part)**

* More than anything, generally the interviewer just wants to find out if you’d be someone that they would like to have around in the office. So, try to be friendly and confident but humble. Show that you’re passionate about the work and the potential for working there.
* Keep your answers short and sweet. More words don’t equal better answers. Don't waffle. Keeping them succinct shows confidence. End confidently. Try to avoid ending with ""...and.... uh..yeh...""
* Ask at least one question at the end. My go to question is ""Pretend you hired me for this role and we're 12 months from now... what would the outcome be where you would say ""Man.... I’m really glad we hired standardweasel"". I like this question because not only does it show that you're in it to help them achieve their goals, but it’s also good from your perspective to see 1: whether they've thought about this before and 2: Whether you think the goals they have in mind are achievable. (Remember it's a 2-way interview. You're also working out if this company is a good fit for you)

**In the interview (Technical part)**

* If you don't know the answer to something, don’t try and make things up. You’ll appear unconfident and will most likely dig yourself into a hole. Just say you don't know (but are willing and excited to learn).
* If you have a whiteboard test, talk through the problem. Generally, they want to hear your thought process more than your answer. Ask for hints if you need to. The interviewer usually wants to help you to get to the answer. Read ""Cracking the Coding Interview"" for more help on this part.
* This isn’t my list, I believe I may have ripped it off another reddit poster a long time ago, but this is a checklist of things you should be prepared for if you’re going for one of these types of jobs. Note that many jobs (such as Front-end developer roles) will not require this. (For example for my job I was asked a simple FizzBuzz):

\- Data types

\- Basic Bitwise Operations

\- String Operations

\- Arrays

\- Linked Lists

\- Singly Linked

\- Doubly Linked

\- Circular Linked

\- Queues

\- Stacks

\- Heaps

\- Trees

\- Binary Trees

\- Binary Search Trees

\- Tries

\- Self Balancing Trees

\- Traversing Trees

\- Breadth First Search - BFS

\- Depth First Search - DFS

\- Preorder, Inorder, Postorder

\- Graphs

\- Dijkstra's Algorithm / A\* Search

\- Hash Maps

\- Handling Collisions

\- Sorting algorithms

\- Insertion

\- Selection

\- Merge

\- Quick

\- Time Complexities

\- Programming Paradigm

\- Dynamic Programming

\- Object Oriented Programming

\- Asynchronous Programming

\- Functional Programming

**Other Interview Tips**

* If you get nervous in interviews, practice actual live interviews where you don't care about the outcome. Nothing makes you better at interviews than doing a ton of them. If you're not getting that many interviews, apply for McDonalds or anywhere else that will give you an interview... anything to get practice. If you get the job you can always say no. The more interview you do, the more confident you'll get. It's the same as dating. And just like dating you should try to avoid 'One-itis’. Think of every interview as just a practice for the real thing. Opportunities (and interviews) are like buses, there's always another one around the corner.
* Don't take the interview process personally.
* I’m going to repeat this one because it’s really important and really hard to do. Don’t take the interview process personally. You’re going to get rejected. You’re going to get ghosted. It happens to everyone. *This isn’t a reflection on you*. Maybe they already had somebody in mind for the job and were required to interview due to regulations. Maybe they were looking for someone with less experience. Maybe they thought you were too smart and thought they'd steal your job. Maybe they hired their son. Maybe you just look like someone who stole their girlfriend/boyfriend in high-school. Just move on.

**Other**

* Don't let age stop you. From my experience I didn’t find there to be any age discrimination. Nobody looked twice at the fact that I am 39. In fact, the most common response was “That’s awesome”. If anything it was an advantage as it showed that I was passionate, determined and had soft skills that younger people wouldn’t have gained yet. My theory is that the age discrimination myth comes from 10-15 years ago, when the only people who were technological natives were young people and therefore you didn't really see many older people in tech. Whereas now anyone under 50 has pretty much grown up with technology in some form.
* Don't rush. You're probably going to want to churn through lessons and YouTube videos because you want to learn quicker. This only slows down the process. Make sure you understand what concept you are trying to learn. And then make sure you fully understand it before moving on to the next thing. Test yourself by trying to build something using the concept you're learning. Your brain is really good at tricking you into thinking you know something. There's a big difference between being able to follow along and understand something someone is doing on YouTube, compared to being able to actually implement it yourself.
* It's hard to realise how much you're learning. Kind of like how you don't realise a person that you see everyday is ageing until you look back at old photos. After 18 months I often feel like I haven't learnt much, until I remember when I started I didn't even know what a JavaScript was. So try and remember where you came from.
* And trust the process. You’re going to feel like quitting. You’re going to have moments where you spent 5 hours debugging code only to realise you forgot a semi-colon. You’re going to feel like an idiot. [You’re not stupid](https://www.reddit.com/r/learnprogramming/comments/n52d3g/youre_not_stupid_an_important_aha_moment_i_had/).",3355,144,Standardweasel,2021-07-12 00:36:27,https://www.reddit.com/r/learnprogramming/comments/oigbjn/i_got_a_job_at_39_years_old_and_exactly_18_months/,1,learnprogramming
hf246j,"After years of Bad grades, mental health issues and lack of motivation, I'm drowning in job offers for the first time in my life. THIS IS AWESOME!","Not sure if this is the right place to post this, but I need to share this with someone right now or I'm gonna explode :D

For the past few years, I had a lot of doubts. My grades in uni sucked and I didn't do anything besides gaming, really. Well time went by and due to Corona my current job as a working job might not be guaranteed for the foreseeable future.
I decided to start networking a little bit (writing applications and making use of my uni's carreer service) and before I even realized it I had to start turning down offers because I'm in the process of talking to a better employer every day.

Everyone who has some sort of doubts (most notably impostor syndrome), look back at what you have learnt. Think about what was the most fun thing you did and write it all down. Force yourself to remember what it was like.

Maybe my perspective is a little distorted because I'm on meds right now, but the last 2 weeks were some of the greatest in recent years. And that says a lot considering my gf of 2 years and I decided to break up last week.

Edit: I'm seeing a lot of people that are in a dark spot are replying. Feel free to DM me if you need to talk/vent!",3281,232,Encrux615,2020-06-24 14:37:02,https://www.reddit.com/r/learnprogramming/comments/hf246j/after_years_of_bad_grades_mental_health_issues/,0,learnprogramming
ilabvx,"Had my first programming interview, legs still shaking.","I can't even. The amount of times I said ""no, sorry idk what that means?"". Still got the job, you can do it guys. Keep grinding.

Edit: Wow! Thanks a lot for all your comments and the awards!!

Some FAQs

I am a male, 17 years old, HS senior. Completely self taught (utube, udemy, edx and a few books and articles). Have been learning for 3 years now. 

I live in a big city so there are a lot of local software houses here.

This wasn't actually my 'first' interview, have been applying since covid, actively and did get a couple interview offers but I declined. 

Interview was for a junior level backend developer. Php, laravel and sqlite and a little vue. 

Logical assessment was beginner level algorithms from leetcode and stuff. Like binary search, ordering arrays etc. How would u design the Twitter Api. Questions about my previous web dev projects

Techincal questions were programming related, mainly php. Questions like what features does oop have? Advantages of oop, oop vs functional? Generic oop concepts ( apparently useless stuff judging from the comments) , Facades, frameworks, web scraping, web sockets etc. 


There were questions related to version control, programming paradigms, test driven development and the likes which I completely flunked. Give that stuff a read before you take an interview. Also postman! 

Again, Thank you everyone!",3264,232,None,2020-09-02 16:41:42,https://www.reddit.com/r/learnprogramming/comments/ilabvx/had_my_first_programming_interview_legs_still/,0,learnprogramming
vtxl58,"After 8 months of self-learning, I landed my first job as a Software Developer!","Hello everyone,

I'm (26) beyond happy, and I wanted to share that after teaching myself Frontend Development for about 8 months I landed my first job in a start-up!

Prior to the self-teaching, I worked in casual / informal jobs. I saved enought money, dropped my previous job and dedicated myself to learning for at least 6 months.

It wasn't easy, there were a couple of times I doubted if I picked the correct path, I even was about to drop it half way. I got rejected a lot (I mean, **A LOT**) since companies were looking for devs with at least a few months of experience, not to mention the tech interviews in which (initially) I failed miserably, but I kept going forward and learned to rest instead of giving up (most of you have probably heard that sentence before).

To all of you who are still looking for your first job offer, those who are considering sealf-teaching yourself programming or those who are already learning: **be resilient, don't give up**.

That's a sentence I heard from a senior dev, and always kept it in mind the moments I were about to drop everything and give up.

**I know you can do it**.

*Edit*: Thank you so much for the kind words! Since some people are asking about the stack & resources I used, those are the following (will update if I miss one):

*Edit2*: Wow! Thanks for all the comments! After I finish adding the resources I used I'll be sure to answer as much as I can!

*Edit3*: I appreciate all the comments, kind words and DM's! Right now it's 3:00am in my time zone, I'll be sure to get back to you tomorrow! (since I'm falling sleep and my battery is running out).

*Edit4*: You people are amazing! Thanks for all the awards! Since I didn't developed too much on how much I applied to jobs, how many hours I studied per day and what helped me get more noticed by companies / recruiters, I will write more about it at the end of this post. Hope it helps! :)

**Resources I used**:

[freeCodeCamp](https://www.freecodecamp.org/) \~ HTML, CSS, JavaScript (I took the first 3 sections of the JS curriculum)

\**freeCodeCamp* is a great resource IMO, I watched some of their videos on YT (Data structures & algorithms, React, a bit of Bootstrap, etc).

[The Odin Project](https://www.theodinproject.com/) \~ More HTML, CSS, JavaScript, a bit of NodeJS. I finished the Foundations section and from here started learning from varied resources.

[Flexbox Froggy](https://flexboxfroggy.com/) & [Grid Garden](https://codepip.com/games/grid-garden/) \~ Both amazing tools to learn/practice CSS Flexbox and Grid. Knowing how to use Flex & Grid helped me a lot in my tech interviews!

[Bootstrap 5](https://getbootstrap.com/) & [Tailwind CSS](https://tailwindcss.com/) \~ I have heard mixed opinions about CSS frameworks; some people state they are not useful, some say they are fantastic, etc. In my experience, on tech interviews the developers stated that they expect a dev candidate to know both pure CSS **AND** at least X framework, since their clients were specifically working with Bootstrap/Tailwind. Feel free to check them out after practicing CSS. If you use a framework or not is up to you.

[freeCodeCamp's ES6](https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/) \~ It's essential to learn about the new syntax & features that ES6 bringed to JavaScript, specially if you want to learn a JS framework (like React) in the future. It may take you a lot of practice to get confortable with some concepts like arrow functions, promises and classes, but don't worry, take it step by step and be sure to practice since it helps a lot for you (it did for me) to retain what you learned. If you are more of a visual learner (like me) I recommend [Web Dev Simplified](https://www.youtube.com/watch?v=h33Srr5J9nY&pp=ugMICgJlcxABGAE%3D) YT channel for this kind of topics, since I consider him an amazing instructor.

[Scrimba's Learn React course](https://scrimba.com/learn/learnreact) \~ One of the greatest (IMHO) courses to learn React as a beginner. If you pick this course and get started, I recommend you to (as soon as you feel comfortable) use the IDE of your preference (Visual Studio Code my personal pick) and start programming outside of the course's IDE. I recommend this since you can forget where you code is among the many chapters of the course.

[Mastering React by Mosh](https://codewithmosh.com/p/mastering-react) \~ This is the only resource which isn't free, and being 100% honest I'm not sure if I can recommend it (I recommend Mosh **YT channel** tho!), since out there there are already great and free resources, but I was struggling a bit with React and saw a recommendation about Mosh's React course. I'm not saying it isn't worthy, just a bit outdated. I haven't finished it yet, but it is my general impression by far.

[Stanford's Code in Place](https://codeinplace.stanford.edu/course) \~ Great (and free) resource if you want to give programming a try but you are not sure where to start. I didn't take [Harvard's CS50](https://pll.harvard.edu/course/cs50-introduction-computer-science?delta=0) course but I have heard wonders of it. I'm sure both options are great for beginners/people who want to see if programming is for them.

[Learn with Leon's 100devs](https://leonnoel.com/100devs/) \~ If you want to be part of an amazing community and learn together, you can give Leon's FREE bootcamp a try. I started the first few months (but didn't finished it) and it was great, he is an amazing structor and the streams were really good. If you are confortable with that kind of format, feel free to give it a try! You can check [his YT channel](https://www.youtube.com/channel/UCGiRSHBdWuCgjgmPPz_13xw) if you want to have a grasp of what his bootcamp is like!

[FE Developer Roadmap](https://roadmap.sh/frontend) \~ Last but not least! This amazing roadmap created by [kamranahmedse](https://github.com/kamranahmedse) (and the respective associates) is great for giving you a great grasp of what you need to learn for becoming a FrontEnd Developer. Now, don't feel intimidated by all the content included in it, take your time to learn those topics at your own pace and remember, you don't need to know every single one. I for sure don't and I'm sure a lot of developers don't know everything as well. Use this resource as a guide if you feel unsure to learn a certain topic that catched you attention, or want to pick the resources the creator offers/recommends.

**Additional info about my journey**:

• *How many hours I studied per day*

At least 4-5 hrs. At the end of the day when I was having dinner, usually I would watch a video on YT about a topic that catched my attention or to reinforce what I studied during the day.

Since everyone's schedule is different and everyone have different responsabilities, feel free to study the amount of time you feel comfortable with. It can be 1\~2 hours a day, maybe 1 hour per day and 3\~4 hours on the weekends, just be sure to stay **consistent**. That is key :)

• *Where I applied to jobs*

LinkedIn, Glassdoor & Indeed. AngelList is not used that much here in my country.

• *How much I applied to those job posts*

A lot. I usually applied every chance I saw a job post that catched my attention. I kept a record (on an Excel file) of all the companies I applied to, and landed this offer after 185 attempts.

Don't feel discouraged by this. It was my personal experience and I'm sure people can get job offers sooner and without applying that much. When I applied to the first 50-70 companies I only knew HTML5 & CSS, so maybe we can reduce that number from 185 to 110-120.

• *When I started to get more reception / positive attention from recruiters & companies*

Back in March I already had a GitHub portfolio with some small projects in it, but it wasn't until maybe 1 month ago when I crafted a **website** portfolio that I started to get contacted more. IMO, a website portfolio is a HUGE plus, since you can showcase the projects you have in a more visual way, talk more about who you are, and capture a bit of **your personality** on it. As long as it looks professional and clean, you can craft your portfaolio **your own way**. If you don't know where to start, you can browse sites like [Dribbble](https://dribbble.com/) and get some ideas / inspiration to start. Don't forget to include your contact information so when you share it to recruiters / HR staff / companies, they can get to you!",3247,286,DontMessWithTaxs,2022-07-08 00:36:46,https://www.reddit.com/r/learnprogramming/comments/vtxl58/after_8_months_of_selflearning_i_landed_my_first/,1,learnprogramming
bs6466,Why study programming when you can just play an RPG?,"Had a noteworthy event a while back I thought many people in here would get a kick out of. This was originally posted in the python reddit, but it was suggested I repost it here, so here it is. I work as the IT tutor at my school and has part of that I  handle any Intro to Programming appointments that we get. The class isn't really intended to teach you how to program in a given language, though it does use python, but rather to introduce you to the basic programming concepts of variables, data types, loops, functions, classes, etc.

So I had a student come in, basically at her wit's end, border-line in tears. Short of the long: 5 weeks into class and she was not understanding the concepts and it was really frustrating her. Okay, so I hunker down and start working with her. In this case, focusing on loops (as that's chapter 6 in the book). He seems to kind of, sort of be getting it, if I hold her hand and lead her through it.

30 minutes in and we haven't really made any progress. I took a step back and started working with her on comparison operations. But she wasn't really getting that either. she is getting more frustrated. So I try to get her mind off the material for a moment.  Her phone flashes a reminder about ""D&D party"" tonight. So I ask if she plays D&D. She does, and we chat briefly about the campaign she's in (she plays a rogue, go figure). Then I hit on an idea.

""You know a lot of early programmers were RPG players and because of  that a lot of what developed into modern programming was influenced and  based on RPG mechanics?""

She looked at me like I'm making a really bad setup for an even worse joke.

""I'm serious. How do you determine if you pass or fail a stat-test?"" I ask.

 ""Well, you determine what you need to roll over to pass, roll a dice,  add any modifiers you have and compare that to the first number."" She explains, more energetically.

""So you perform a comparison operation?"" I asked leadingly.

 ""Well... no. I mean...  kind of... wait..."" She stammers out, her response was interspersed as she thought and talked at the same time. 

I go to write on the White board: 


    if Dice_roll+modifiers >= needed-roll:  
        you pass  
     else:  
         you fail

She looked at it for a long moment, you could see the gears turning in her head. 

 ""So the variable, Dice_Roll is added to the variable modifiers.. and that's compared to the needed roll. If the needed_roll is higher... you  fail... otherwise... you pass."" She parses out, once more thinking and speaking at the same time.

""Yeah... and what about this one?"" I ask as I write on the board:

     while enemy_attack == True:            
          player.cast(shield)

She looks at it for a minute. 

""So long as the enemy is attacking, cast the shield spell."" she says.

""Nice, how about this one?"" 

     for each enemy in hoard:  
          If player.hp > enemy.defense:  
               Target_enemy = True   
               while Target_enemy == True:  
                    player.attack(sword,enemy)

 ""For each enemy in the hoard... check to see if the player Hit Points are greater then the that enemy's defense. If it is, target that enemy.  As long as that enemy is targeted, attack them.""

""And you just worked through a while loop nested inside an if control statement that was inside a while loop."" I explain.

 ""What?"" She says aghast. She quickly turns back to the board and starts studying the examples intently. I can see her eyes traveling across what I wrote.

""So this on is just a comparison operator?"" She asks pointing to the dice roll I wrote out before.

""Yup."" I respond.

 ""And this is just a while loop that would tell the player character to  cast the shield spell.""  She asks sounding more confident.

""Yup."" I respond.

 Her entire face lights up in that unmistakable look of 'the light bulb turning on'. We start hammering through more examples of loops and control statements, fluctuating between the requirements of her assignments and using RPG examples. It's a fun day when you get to talk about Dragons and knights and actually have it be work related.

So I guess it all depends on what material you use to explain it, right?",3250,191,TorroesPrime,2019-05-23 17:58:08,https://www.reddit.com/r/learnprogramming/comments/bs6466/why_study_programming_when_you_can_just_play_an/,1,learnprogramming
git82j,How I learned programming in the early 1970’s," 

TL,DR:  I recently retired after 40+ years in the software development industry. I thought you guys and gals might like to hear how things were “back then”. I apologize if this is too far off topic for this subreddit. If it is, point me in the right direction, and I'll quietly go away.

Sorry for the wall of text. I put the TL,DR up front to save you from mental pain and suffering.

Let me set the stage. It’s my sophomore year of high school. I grew up and lived in a large metropolitan city in the western US. More specifically in an upper middle class neighborhood in an upscale school district. Computers were things of science fiction. They were large, room sized monstrosities requiring special accommodations, and cadres of specially trained operators to keep them running. They were made by the likes of IBM, Univac, and others. This was years before desktop microcomputers would become available. IBM PC’s, Microsoft, Apple, etc didn’t exist. Unix was still a closely held trade secret of Bell Labs, a subsidiary of the Bell Telephone system. Linux was decades away.

My school district owned an IBM 370 mainframe for doing scheduling, grading, payroll and other administrative tasks. They had just purchased for students and teaching purposes a new “mini-computer”. It was a Hewlett-Packard 2000C time-shared computer. It was capable of supporting 32 users dialed in over telephone lines via 110-300 baud modems. The operating system was a simple BASIC interpreter. The district installed one or more ASR 33 teletypes in each high school. My school had a small room off of the math department where 3 of these were housed.

My high school offered a one quarter class in programming in HP BASIC, a derivative of Dartmouth BASIC. The class was taught by the math department and focused on using the computer to solve math problems. Typical programs were less than 100 lines in length. On a whim, I signed up to take the class. The class was interesting, but what I really enjoyed was the open access to the computer room after hours. I spent many hours tinkering and playing, writing programs to do whatever struck my fancy. By the end of the one quarter programming class, I had far surpassed the teacher’s abilities, and he recruited me to teach the class the next quarter as “independent study”. This was when I wrote my first program on contract. It was a simple data analysis program to analyze and produce statistics pulled from surveys done by the local chamber of commerce.

By the next year, the district had made arrangements to allow classes in conjunction with the local community college. This was an early version of “concurrent enrollment”. I took a class in computer operations taught using the IBM 370 owned by the school district because the college did not yet own a computer. Here I wrote a few simple programs in COBOL, but mostly learned to hang mag tapes, mount disk packs, change the paper and the ribbon in the line printer, and to wire ""programming"" cards for the various peripherals such as the card reader, the card sorter, and the card punch. 

Fast forward a few years. I had graduated from high school, and spent a couple of years travelling out of the US in a third world country. When I came back, things had changed in the computer world. Computer stores were popping up all over the place selling desktop microcomputers. These were the likes of the Altair 8800, IMSAI 8080, Northstar Horizon, and Radio Shack TRS-80. I enrolled in an electrical engineering / business / computer science program at the university and was learning FORTRAN 4, COBOL, and PDP-8 assembly. None of these would be important to my future career. Stay tuned…

It was during this time that I walked into a local computer shop, and sat down at one of their computers to entertain myself. Within a few minutes I had written a short program to scroll a sine wave up the CRT screen. It looked something like this 

    10 LET X=0
    20 PRINT TAB(SIN(x)*40+40),”*”
    30 LET X=X+.3
    40 GOTO 20
    50 END

The proprietor walked in at this point, saw what I had done, and hired me on the spot. You see, while microcomputers brought computing within the price range of the masses, almost no software existed to make them useful. Likewise, programmers were extremely scarce. Over the next couple years, I wrote for them a complete accounting package for small business, including accounts receivable, accounts payable, payroll, inventory, and general ledger modules. This was quite an accomplishment on a system sporting 32K bytes of RAM and 360K bytes of floppy disk space.

Unfortunately, this job didn’t pay terribly well. I earned less than $3 per hour (about $10 in today's dollars). So I started a second job doing data entry on the graveyard shift at a local food processing plant. I was pretty good and soon was doing all the paperwork in about 2 hours.This gave me a lot of spare time, so I began writing programs to automate various office tasks.

About this time, the C programming language was released to the public from Bell Labs. I picked up the first edition of the Kernighan and Richie “The C Programming Language”” book. It still has a place of honor on my bookshelf in my office. Soon, BYTE magazine published the entire source code for a Small-C compiler, written in C. I typed the whole thing in, and using one of the university computers got it to compile and run, bootstrapping my way to having it run under the Digital Research CP/M operating system on an Intel 8080 based microcomputer.

By the mid 1980’s, microcomputers were definitely a thing. IBM had produced the PC, Bill Gates and crew had become successful with Microsoft MS-BASIC interpreter and MS-DOS, Compaq had successfully defended the first IBM PC clone, and we were off to the races.

Over the following decades, I worked for a variety of companies. Doing software for accounting, banking, computer based training, flight simulation, telephone infrastructure, classified stuff I still can’t talk about, and most recently, cryptocurrency.

I’ve learned and used a variety of languages and scripting tools including BASIC, FORTRAN 4, COBOL, Assembly, C, C++, dBase II, dBase III, Pascal, Perl, Bash, Go, Python, HTML, Scala, and probably a few others I’ve forgotten about. My specialty, and what I consider my best language, is plain old C, especially embedded application code under Linux.

As I said above, I’ve recently called it quits and retired. I miss the camaraderie of coworkers, the thrill of solving difficult problems, and the satisfaction of seeing your code used far and wide around the world. I do not miss impossible schedules, corporate bureaucracy, shrinking benefit packages, and unknowing and uncaring employers.

Don’t get me wrong, I will keep coding. Probably not huge systems. My latest are little embedded projects for Arduino and Raspberry Pi controllers.

It’s been a wild ride, and I’d do it again. It’s kept food on the table, a roof over my head, enabled me to travel the world, and be a part of something bigger than me. What more could a guy ask?

Edit:  Thanks for all the kind comments! It makes me feel warm and fuzzy about the next generation of coders. I’ll come back and read more comments in the morning, my wife just poked her head into my office and gave me that look that says “Get your butt off of Reddit, and into bed or I’m locking the door and you’re sleeping on the couch.”  G’nite ladies and gents!",3245,255,ElGringoMojado,2020-05-13 06:06:41,https://www.reddit.com/r/learnprogramming/comments/git82j/how_i_learned_programming_in_the_early_1970s/,2,learnprogramming
7cokyr,I have been rejected by over 100 jobs in my past 2 years as a developer from code bootcamp. My story. Never give up.,"I would like to preface and apologize if this is the wrong place to post. But I'd just like to share my experience since getting into code. 

I was working at an engineering job right after college and basically hated what I did. Very corporate america, my boss had 3 bosses, I had 2 managers, felt like cattle in a cubicle farm. I started looking at remote jobs because I couldn't figure out why I needed to be in a cubicle to write excel sheets and create power points all day. When I looked up remote jobs I realized they were all basically software development. I wondered why I went to school for mechanical engineering anyway since I spent all of my time playing video games, building my own computer, everything IT except for code.

After that feeling of regret wore off; I looked up boot camps in my area. I knew that if I tried to learn myself or online I would get stuck, become frustrated and probably quit. I wasn't comfortable with being uncomfortable yet. Unfortunately, most of the code boot camps designed to actually **get you a job** were from 9am-5pm for three months straight. I didn't have the finances to just quit my job and I wasn't going to take out a loan to go either. So I went to this 'after hours' part time(specifically noted that it was not preparing you for jobs) boot camp a few days a week at night and on the weekend. They refused to list the job statistics for students after the program but after harassing them about it they gave me a 'less than 28% of students get a job after this program'. I decided maybe if I bust my ass enough I can be part of that number. It started off pretty easy, I had taken an HTML class in high school, no big deal. Then came CSS - oh this is a thing I connect to the page and change how it looks. Then came Javascript - oh this is neat...wait..what, but I don't understand..so this works but this doesn't? Why? Oh that's just that way it is. okay.jpg. Rinse repeat that process of continually being baffled until I eventually accepted a continuous state of 'I'm not sure how to do that, and I've never done that before, but... I'll figure it out.'

This type of attitude has served me even beyond the local scope of programming into the global scope of my life. 

Toward the end of the bootcamp most students had dropped out. There were 4 left. Not many people my age(25 at the time) want to give up their Saturday morning to come into a classroom and learn to code. I wasn't the exception, especially when rocket league had just released and one 5 minute round warps space-time and 3 hours goes by. I managed to keep it under control and show up every class. 

I started shotgunning out resumes to almost every job posting I could find with the word development in it. I'd like to take a moment and apologize to the 67 HR people that stated 'Do not apply unless you have x experience’' and 'please stop applying to other positions at this company'. I would rather take a chance then not, it's not like I lose anything when they say no. I figured maybe if I could get their ear for only a minute then I might be able to convince them. Eventually a brand new startup messaged me back and brought me in for an interview. It was for ruby on rails. Nope -  0 experience but I'll learn whatever you want me to learn. They gave me a code test, maybe as a sick joke to get me to go away. I took it and spent about 8 hours trudging through it until I finished. I brought it back and to both our surprise it looked good. Then they told me no, sorry, not enough experience. We shook hands and I went about my day. I decided to call them up and ask if I could work part-time. Let me be an intern, don't make me the main man on your technology but let me work on something easier. 

I knew that they were a fresh startup on the block and that if they had interns it might let them look good. Gives that curb appeal of 'we are hiring the fresh minds in the tech space'. Anyway - they said 'We'll consider it, let me call you back'. They called me back and said 'Yeah can you work 20-25 hours a week? We'll pay you $18 an hour'. I was prepared to work for free so when I read that I was floored. Feeling like I was on top of the world I asked if I could also work from home a few days a week since I was going to keep my full-time engineering job. In retrospect I was probably pushing it. They agreed though, for whatever reason. I thought I had achieved the dream, and in a way I had. It was a startup environment, I could bring my dog, they had beer fridays at 1:00pm, a snack room, an xbox if you wanted to play during lunch. I thought I was hot shit. Yeah I'm a 'software developer' now throwing my title out like a left hook. Then I showed up for my first day at work to get my equipment and it hit me.

Now I actually have to produce for this company. None of this means anything if I can't code. I don't know ruby on rails, I've never used git in a professional environment. I merged my own pull request on the first day. That was bad. Luckily I didn't delete an entire repo like the other guy on here. Suddenly everyday felt like wait why did you hire me again? 

I struggle bussed my way through 6 months and kept my full time job as an engineer.  I started looking at other full time jobs in software because every day I showed up to my engineering cubicle I lost a piece of my soul. 

I found a full-time PHP junior software position and they brought me on. I maintained my intern job as well. I knew there were growing pains but it felt more like I was being torn from limb to limb. Under experienced and overconfident. I'm pretty sure Kendrick Lamar was directing his lyrics at me. Sit down, be humble. I now try to be a student in every aspect.

I worked there for about 5 more months and I was replaced by someone with more experience that was willing to take the same pay as me. The joys of being a junior developer.

I decided you know what, I've been doing this for a while - I'm going to try and get a fully remote job. I applied to a few places and actually received two job offers at the same time. For the first time I felt like it was starting to pay off. Two companies want me? I have a choice? What is life? I accepted a fully remote job doing react and PHP. Things started to come together. I started to think 'I have an idea about how to do that but it probably wont be optimized'. After a year the US election happened and I was working for a government contractor. Suddenly the budget was under review and there were no more contracts. No more work for us to do. The entire development team was let go. 15 people. 

Enter my most recent job. For whatever reason it was more difficult to find another fully remote job this time. I was declined by 90 jobs. Endless interviews, after interview #4 for company #63 it can get hard to stay 110%. I had a portfolio, decent resume, passed code tests, followed up even willing to take less money. I'm not sure why it was more difficult this time around. As my funds ran out I decided I'll work locally. I eventually accepted an office job and work remote partially. It's not my favorite thing but it's good for me. It keeps me on my hustle and networking with people is everything. I enjoy being in the office and enjoy the people I work with; they are flexible when I want it. When I was unemployed and constantly getting told 'NO' - knowing that I am approaching homelessness was difficult to process. Especially because I had received two offers at the same time just a year prior. One piece of advice I think about is 'Keep your head up when times are tough, and your head down when times are good'.

Even now I don't think I am 'the best' developer. I'm confused and stumped pretty regularly. I used to wonder if 'code was for me'. Now - I embrace the struggle and can look back and see all I've learned. At code camp I was always the last one to finish the in class projects or moved on with it incomplete. I've dropped out of college 2 times before finally finishing. Academically I was never amazing.

I now work two jobs. One full time as a front-end developer and a part-time where I teach code to students but this isn't intended to be a promo for that so I wont name it. I just like helping people learn since I know what it's like. 

If you're in one of my many situations never give up. 

Thanks for reading.

**TL;DR** Went to code bootcamp because hated corporate america job. Worked at a startup, remotely, and now partially. Has been a rough upward ride overall.

**Edit** If anyone has any questions - feel free to send me a message here and I'm happy to help. Oh boy someone found it. If anyone is interested I have a small [youtube](https://www.youtube.com/channel/UC-91UA-Xy2Cvb98deRXuggA) channel where I talk about these topics and more. Prepare^for^cringe. I'm still learning, but my goal is to help and motivate others with transparent information. 

**Edit** Thanks for the gold kind stranger.

**Edit** So I received a few questions about free resources and the bootcamp I teach at along with my thoughts on other bootcamps.

*This isn't intended to be a promotional and I'm not sponsored to write this*, but whatever - check these out if you want.

It's called **OpenClassrooms**. Weekly Mentor meetings.  **Price:** $300/month and has a job guarantee. I teach there so take that with a grain of salt. Do your research and find what works for you. If interested there's the discount code, OPENCLASSROOMS12 if you want to try it out. I don't know how many there are. First come first serve I guess.

I personally attended  **DevMountain** in 2015 in Salt Lake City, Utah. It has a pretty great rating and overall I thought the curriculum was modern but there just wasn't enough time in the evening courses to fully prepare for jobs. It also has no job guarantee. **Price: $4500**

**LambdaSchool** Completely free until you get a job that pays more than $50,000/yr, with a part-time option

**Thinkful** is also great. Weekly mentor meetings. They have a job guarantee. **Price:$8500**

**Bloc.io** - Basically just Thinkful that costs slightly more. Job guarantee.**Price:$8800**

**Free Resources I used to learn and still do:**

[Freecodecamp](https://www.freecodecamp.org/) - Huge awesome community. 

[Codecademy](https://www.codecademy.com/) - Pretty great for beginners. They're always updating it.

[Codeschool](https://www.codeschool.com/) - Follow along tutorials.

[Codecombat](https://codecombat.com/) - Make games and learn. Pretty interactive.

Udemy Courses. - Plenty of free content with project based learning. 

Keep on hacking. ",3238,333,Tychos1,2017-11-13 17:17:13,https://www.reddit.com/r/learnprogramming/comments/7cokyr/i_have_been_rejected_by_over_100_jobs_in_my_past/,1,learnprogramming
mve0i8,25 Programming YouTube channels you should consider following!,"1. freeCodeCamp.org - [https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ](https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ)
2. Telmo Sempaio -[ https://www.youtube.com/user/Telmo87](https://www.youtube.com/user/Telmo87)​
3. Traversy Media -[ ](https://www.youtube.com/user/TechGuyWeb)[https://www.youtube.com/user/TechGuyWeb​](https://www.youtube.com/user/TechGuyWeb%E2%80%8B)
4. Clever Programmer - [https://www.youtube.com/channel/UCqrILQNl5Ed9Dz6CGMyvMTQ](https://www.youtube.com/channel/UCqrILQNl5Ed9Dz6CGMyvMTQ)
5. Academind -[ https://www.youtube.com/channel/UCSJb...](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w)​
6. Codestackr -[ https://www.youtube.com/channel/UCDCH...](https://www.youtube.com/channel/UCDCHcqyeQgJ-jVSd6VJkbCw)​
7. WebDevSimplified -[ https://www.youtube.com/channel/UCFbN...](https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw)​
8. Programming With Mosh -[ ](https://www.youtube.com/user/programmingwithmosh)[https://www.youtube.com/user/programm...​](https://www.youtube.com/user/programm...%E2%80%8B)
9. DevEd - [https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q](https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q)
10. Net Ninja -[ https://www.youtube.com/channel/UCW5Y...](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg)​
11. Sexy Design Course -[ https://www.youtube.com/user/DesignCo...](https://www.youtube.com/user/DesignCourse)​
12. Florin Pop -[ https://www.youtube.com/channel/UCeU-...](https://www.youtube.com/channel/UCeU-1X402kT-JlLdAitxSMA)​
13. IHateTomatoes -[ https://www.youtube.com/user/ihatetom...](https://www.youtube.com/user/ihatetomatoesblog)​
14. Stephen Grider -[ https://www.youtube.com/channel/UCQCa...](https://www.youtube.com/channel/UCQCaS3atWyNHEy5PkDXdpNg)​
15. Colt Steele -[ https://www.youtube.com/channel/UCrqA...](https://www.youtube.com/channel/UCrqAGUPPMOdo0jfQ6grikZw)​
16. Wes Baws -[ https://www.youtube.com/user/wesbos](https://www.youtube.com/user/wesbos)​
17. Ex Tech Lead -[ https://www.youtube.com/channel/UC4xK...](https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw)​
18. MMTuts -[ https://www.youtube.com/user/TheCharm...](https://www.youtube.com/user/TheCharmefis)​
19. Derek Banas -[ https://www.youtube.com/user/derekbanas](https://www.youtube.com/user/derekbanas)​
20. Programming With Erik -[ ](https://www.youtube.com/channel/UCshZ3rdoCLjDYuTR_RBubzw)[https://www.youtube.com/channel/UCshZ…](https://www.youtube.com/channel/UCshZ%E2%80%A6)
21. Coder Coder - [https://www.youtube.com/thecodercoder](https://www.youtube.com/thecodercoder)
22. Faraday Academy - [https://www.youtube.com/channel/UCxA99Yr6P\_tZF9\_BgtMGAWA](https://www.youtube.com/channel/UCxA99Yr6P_tZF9_BgtMGAWA)
23. Mayuko - [https://www.youtube.com/c/hellomayuko](https://www.youtube.com/c/hellomayuko)
24. CodeBeauty - [https://www.youtube.com/c/CodeBeauty](https://www.youtube.com/c/CodeBeauty)
25. Ania Kubow - [https://www.youtube.com/aniakubow](https://www.youtube.com/aniakubow)

Honorable Mention:

JavaScript Mastery - [https://www.youtube.com/channel/UCmXmlB4-HJytD7wek0Uo97A](https://www.youtube.com/channel/UCmXmlB4-HJytD7wek0Uo97A)

Edit: Suggestions i got from comments-

1. Coding Addict - [https://www.youtube.com/channel/UCMZFwxv5l-XtKi693qMJptA](https://www.youtube.com/channel/UCMZFwxv5l-XtKi693qMJptA)
2. The Cherno - [https://www.youtube.com/c/TheChernoProject/videos](https://www.youtube.com/c/TheChernoProject/videos)
3. mCoding - [https://www.youtube.com/channel/UCaiL2GDNpLYH6Wokkk1VNcg](https://www.youtube.com/channel/UCaiL2GDNpLYH6Wokkk1VNcg)
4. Fireship - [https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA](https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA)
5. Corey Schafer - [https://www.youtube.com/c/Coreyms/featured](https://www.youtube.com/c/Coreyms/featured)
6. Alex Damiani( our fellow redditor on this sub u/pyyoutuber) - [https://www.youtube.com/channel/UCTebDgj-GzOh3zo9Xf1vO4A/featured](https://www.youtube.com/channel/UCTebDgj-GzOh3zo9Xf1vO4A/featured)
7. javidx9 - [https://www.youtube.com/c/javidx9/featured](https://www.youtube.com/c/javidx9/featured)
8. Kevin Powell - [https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw](https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw)
9. Computer Science - [https://youtube.com/channel/UCbmb5IoBtHZTpYZCDBOC1CA](https://youtube.com/channel/UCbmb5IoBtHZTpYZCDBOC1CA)
10. Bro Code - [https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ](https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ)
11. ForrestKnight - [https://www.youtube.com/channel/UC2WHjPDvbE6O328n17ZGcfg](https://www.youtube.com/channel/UC2WHjPDvbE6O328n17ZGcfg)
12. sentdex - [https://www.youtube.com/user/sentdex](https://www.youtube.com/user/sentdex)
13. Abdul Bari - [https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw](https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw)
14. The Coding Train  - [https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1\_aw](https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw)
15. Tech with Tim - [https://www.youtube.com/channel/UC4JX40jDee\_tINbkjycV4Sg](https://www.youtube.com/channel/UC4JX40jDee_tINbkjycV4Sg)
16. CS Dojo - [https://www.youtube.com/c/CSDojo/featured](https://www.youtube.com/c/CSDojo/featured)
17. Ben Awad - [https://www.youtube.com/user/99baddawg](https://www.youtube.com/user/99baddawg)
18. IAmTimCorey - [https://www.youtube.com/user/IAmTimCorey/featured](https://www.youtube.com/user/IAmTimCorey/featured)
19. Neso Academy - [https://www.youtube.com/user/nesoacademy](https://www.youtube.com/user/nesoacademy)
20. Simplilearn - [https://www.youtube.com/channel/UCsvqVGtbbyHaMoevxPAq9Fg](https://www.youtube.com/channel/UCsvqVGtbbyHaMoevxPAq9Fg)

Another list made by u/theguy2108 \- [https://www.notion.so/d87db336139a4ef5b989350334ce748d?v=1390026fe1944c5b832e95104dd07e52](https://www.notion.so/d87db336139a4ef5b989350334ce748d?v=1390026fe1944c5b832e95104dd07e52)",3217,304,ApolloNoxx,2021-04-21 11:53:39,https://www.reddit.com/r/learnprogramming/comments/mve0i8/25_programming_youtube_channels_you_should/,0,learnprogramming
isnp8u,"Being self taught, I just got hired as a junior web developer","Well finally my dream came true, I know it's cliche but hard-work really pays off, thanks to you  all those who supported me, your simple comments/posts meant a lot to me and helped me go through rough times. I can't wait to help guide others get their first job peace.

Edit:  WOOW didn't expect this to blow up, I wish I could answer every single one of you but I just couldn't keep up.Thank you all very much!  


Edit2: Since many of you have asked, my next post will be about my journey, the resources I used to learn and how exactly I broke into this industry.  
",3212,349,None,2020-09-14 16:00:17,https://www.reddit.com/r/learnprogramming/comments/isnp8u/being_self_taught_i_just_got_hired_as_a_junior/,0,learnprogramming
l2n67i,Spend 1 minute a day to improve your coding skills,"I have a youtube channel called [Python in 1 Minute](https://www.youtube.com/watch?v=_UR7iMOfLzA&list=UUjZ6DEtNXNIL1sgvuSE9gFg&index=1) where I publish a short Python tutorial every day. My goal is to teach a common pattern or technique in under 60 seconds.

I try to be respectful of the viewers time and make the videos terse and clear with as little unnecessary fluff as possible. The content is mostly aimed at beginners, I hope it can help some of you to get into the habit of learning something new every day.

As I'm just starting out with this youtube thing, I'd love to hear your feedback regarding the format, content, anything... (topic suggestions are highly appreciated as well).

(Sorry for the crosspost, I've already posted this in r/python a few days ago, but as the feedback was overwhelmingly positive I guess some people over here would find it useful as well.)",3205,218,jcsongor,2021-01-22 12:56:04,https://www.reddit.com/r/learnprogramming/comments/l2n67i/spend_1_minute_a_day_to_improve_your_coding_skills/,1,learnprogramming
mxa17l,I did it!! One year of self teaching and I just landed my first job as a software engineer!,"I am beyond happy! I somehow managed to land a job at the company I originally learned C# for! One year of study, I have no idea how many applications, and 6 interviews later I get to do what I love for a living! All I have to say is Wooooooo! And a big thank you to this sub, y'all are amazing!! I am off to drink this champagne guys!

update: My bad guys. I knew I would need to form a list of resources but I was way too giddy to get that done last night. So here we go, 

Started studying while I was still employed at the airport, First course I did was the 300 hour web development 101 on codecademy. By the time I finished that course I was actually furloughed and decided to study full time and remain unemployed. I'm just going to list them and all of the books I read in no particular order. I will say that I chose C# to focus on as my OOP and that's reflected in the courses I chose. 

UDEMY: 
The complete web developer course 2.0, 
C# for beginners- Coding from scratch, 
React - The complete guide (I still haven't finished this),
RPG Core Combat Creator: Learn intermediate Unity C# coding,
Learn C# by building applications,
CRUD application using C# and SQLite,
Build a real world app with asp.net core and angular 

TIM COREY:
The complete foundation in C# course (this one was a beast for me)

BOOKS:

Code: hidden language,
C# Player's guide **,
C# in depth (haven't finished this one),
Clean Code **

YOUTUBE:
Mostly Tim Corey, Mosh and anything I felt could make up for me not having a CS degree. Or any degree. And shout out to tech lead! His insanely dry humor helped keep my spirits up. 

I studied for 6 - 10 hours a day for four days a week. I would occasionally take days off to get some yard work done or do something physical. I doubted myself a lot, I still doubt myself but I think in the interviews with this company they knew that I was very passionate and want to learn as much as I can. I really believe my attitude is what got me this job because my portfolio is nothing to write home about. 

Github Link: https://github.com/JordanHay?tab=repositories",3176,143,nameisinigomontoya,2021-04-24 01:37:54,https://www.reddit.com/r/learnprogramming/comments/mxa17l/i_did_it_one_year_of_self_teaching_and_i_just/,0,learnprogramming
syyhu6,I made a list of FREE sites and apps to learn programming,"Hey everyone! I thought id share some of the sites i’ve been using to learn programming for FREE. Yes I really did download multiple free coding apps where there’s a will there’s a way no excuses :). Also pls note that some apps are only available on iOS 

**Sites and apps where u can learn coding for free.**

- **Grasshopper**
- **Code Avengers**
- **Mimo**
- **Geeksforgeeks**
- **Khan Academy**
- **Alison Online Courses**
- **Programming Hero (kid-friendly)**
- **Encode**
- **Coursera**
- **Tynker (kid-friendly)**
- **Codeliber**
- **W3schools**
- **Exercism**
- **MITOpenCourseWare**
- **Free Code Camp**
- **edX**
- **The Odin Project**


**Code learning gamified and kid-friendly**

- **Cyber Dojo**
- **imagiLabs AB (kid-friendly)**
- **CodeSpark Academy (kid-friendly)**
- **Hopscotch Programming (kid-friendly)**
- **Lightbot Code hour (kid-friendly)**
- **Kodable (kid-friendly)**
- **Flexbox Froggy**

**Learn coding on youtube**
- **The Coding Train**

And that’s it! Please comment below if i forgot any other sites and i’ll add them to the list asap!
———

**UPDATE: Recently added as per your suggestions:**

- **CS50 by Harvard University**

- **Sololearn**

- **Leetcode**

- **U of Helsinki Mooc**

- **College Compendium**

- **Kaggle**

- **TeachYourselfCS**

- **Codingame**

- **Hacker Rank**

- **LearnXInYMinutes**

- **App Academy**

- **Code Camp**

- **Code Wars**


**Youtube:** 

- **FreeCodeCamp**

- **Fireship**

- **CodingWithMosh**

- **IAmTimCorrey**

- **Grafikart.fr**

- **AnthonyWritesCode**

- **Corey Schafer**

- **100 Devs**

UPDATE:🤍 I’m so happy you all found this to be a helpful guide in your programming journey! Let’s do this!",3179,183,illuminativeee,2022-02-22 21:12:27,https://www.reddit.com/r/learnprogramming/comments/syyhu6/i_made_a_list_of_free_sites_and_apps_to_learn/,0,learnprogramming
8mdlb9,"What online courses are 100%, entirely worth it?",I've heard even prestigious universities sometimes produce boring or shallow content... What online course has been entirely worth the time required for you to take it?,3163,260,None,2018-05-26 22:26:08,https://www.reddit.com/r/learnprogramming/comments/8mdlb9/what_online_courses_are_100_entirely_worth_it/,0,learnprogramming
bdegub,"Not trying to be Rude ok! but i think this sub needs to be More accepting of the people who asks questions, if I’m asking a question it means I don’t know what I’m talking about and i need guidance, I don’t need you to make me feel like programming isn’t for me.","I love this sub, but at the same time I’m afraid sometimes to ask questions and receive answers like “lol, you clearly know nothing about coding “ or “Go learn before asking “ or “Why would you ask that!!!” Not trying to be mean, there are a lots of amazing people out here who helped me a lot, and I’m very grateful for your help!! ... Just saying we have to be a little more understanding and patient with each other. Thanks and sorry if i offended anyone.                                                                
Edit: some people here pointed out that i was highly disrespectful of others, because I included some disrespectful comments of other people in my post, so In order to not offend anyone i deleted them. I also would like to note that i added them in the first place just as an example of the comments that you can encounter when asking questions in this sub. Thanks.",3147,250,SoniaGorgeous,2019-04-15 10:37:14,https://www.reddit.com/r/learnprogramming/comments/bdegub/not_trying_to_be_rude_ok_but_i_think_this_sub/,0,learnprogramming
eia255,Second edition of Automate the Boring Stuff with Python is now free online.,"A list of the new sections is here: https://inventwithpython.com/blog/2019/12/31/reading-guide-to-automate-the-boring-stuff-second-edition-for-readers-of-the-first-edition/

The table of contents and full book for the second edition is here: https://automatetheboringstuff.com/2e/",3135,58,AlSweigart,2019-12-31 22:44:15,https://www.reddit.com/r/learnprogramming/comments/eia255/second_edition_of_automate_the_boring_stuff_with/,2,learnprogramming
ibiu5o,Took a bootcamp. More than doubled my salary. Not at all what was promised or how I thought the process would go. Here's what I learned.,"Hold up. **This won't be one of those posts that starts ""I took a bootcamp and some Udemy classes and in 8 weeks of programming, I got an offer for six figures"".**  I do see those posts and if you are one of the lucky ones, I'm super excited for you. That's not at all how it went down for me. I'm writing this to give my perspective for those people at the beginning of their coding journey and for those potentially thinking about a bootcamp.  


Let's rewind a few years ago. I got my degree in design. Took a job at a startup where after designing for a bit, the owner asked me to take more of a role in marketing because the company needed my efforts there. I sacrificed my skillset for the company and shelved my design skillset. The startup sputtered and long story short, I was out of a job with a design skillset that wasn't developed enough to get a job and an atypical marketing skillset that wasn't up to standards for corporate positions.  


**The decision to switch careers** \- After several failed interviews, I like many others, needed something. **As much as I didn't want a career change, I felt I had to take the plunge.** Programming seemed like a good option. I saw the quantity of job openings and the salaries attached to those positions. I knew I was a critical thinker and I knew I loved to tinker with puzzle-type situations. I also dabbled in solving and fixing minor problems with the Shopify-based website at my previous job and knew that programming was fun. I thought a bootcamp might be a good opportunity to learn a new skillset quickly and increase my market value and get me back producing for a company.  


I interviewed several bootcamps and heard all the stories: ""We have a 94% placement rate."" ""Our graduates walk out of here with companies banging down the door."" ""Just last cohort we got a kid who got a job at Google."" I heard it all. From what I gathered, bootcamps seemed to tout a high success rate of job placement and good networks in position to place their students. One bootcamp had two instructors that I found especially brilliant, so I pulled pretty much all my reserves of $15k from under my mattress and signed up.  


**Day 1 of bootcamp** \- **First thing I noticed was I was immediately put into a bait and switch.** Which really pissed me off because I already signed the contract and paid the cash. The instructor that I really liked, was pulled into another location and they replaced him with a kid that just graduated a bootcamp 3 months prior. If I was paying $15k, I expected industry professionals, not some kid with zero industry experience. And come to find out, hiring recent bootcamp grads to be bootcamp instructors is not an uncommon practice. I was considering leaving and potentially making a fuss, but after talking with the instructors, I found that they had plenty of resources to learn from, projects to build and the experience would be entirely dependent on me and how much I was willing to pull from it. **I recommitted to max effort regardless.**  


**The bootcamp** \- Of the 25 kids that started in my cohort, 10 finished the camp. The dreams of the students were big, but the work ethic was virtually nonexistent. Most kids treated the camp as a continuation of high school. They'd put their butts in the seat until class got over in the early afternoon, then they'd bounce. Many of the other students would play PC games during lecture or cruise social media. But when we'd talk about careers each student would ask questions like ""So I want to live just off the coast in Hawaii so I can just surf all the time, what's the likelihood my first job will be remote?"" or ""I was looking at going salaries for programmers, I was thinking about asking HR for around $150k for my first job. Is that too much or should I ask for something more along the lines of $120k?"" The point being, most people treated the bootcamp and programming as a life shortcut. They figured as soon as they had their certificate of completion, the job offers would rain from the skies. **Let me be very clear for those who are thinking about a bootcamp. A bootcamp certificate means jack shit.**  Not one company will be impressed with a completion of a bootcamp. Companies want to see what you've worked on and what knowledge you've picked up along the way. The network that the bootcamp touted was worthless. We had a couple industry devs come and talk with us, but none of which were hiring.  There were only 3 of us in our cohort that really pushed each other. I'd catch the earliest train at 5:30 AM and catch the latest train home at midnight. Many nights I'd pull an all nighter or I'd stay at the building and just nap on the couch for a couple hours. We'd pour over stack overflow. Every couple of days we'd ask the instructors for additional curriculum and projects to work on. We worked as hard as we could work in a hyper-focused setting. Even then, after 12 weeks we felt like we knew nothing. I was still bumbling through creating databases and my frontend React was only just slightly better.   


**Post bootcamp** \- Immediately I began applying for jobs upon completion. I had a couple contacts who worked at dev firms whom I reached out to and they tried my hand on small contracted jobs. I completed the tasks, but my code was shit. I didn't really know industry standard for code and I was still just learning to bumble through things just to make it work. I didn't know how to make things fast or correctly. I asked for a job at the firm after completing the contracted assignments. The firm denied me. **After that, my time was spent juggling filling out applications, doing interviews, completing interview code problems, building small projects, building my own site, finding interview prep questions, following tutorials on Udemy, Youtube and Pluralsight and then on tricky code problems on sites like Codewars and Hackerrank.** The process sucked. No matter what I was doing, I felt like I should be spending more time on other aspects of development. 

**Interviews** \- In this period I was getting plenty of interviews, but the results were usually the same. The initial interview with HR was always a breeze. I know how to talk about my work and I'm personable enough to be able to relate to people. The second interview with the manager was usually pretty easy as well. Generally they'd ask about my background and some basic coding stuff to see if I could hold my own. I'd try to be upfront about my experience while still sounding like I knew what I was talking about. Maybe about 2/3 of the time I'd get to the take home coding challenge or to where they'd call me in so I could get grilled in person. Most of the time if I was able to take the coding challenge home to where I could research things I knew nothing about, I'd crush it. They'd ask me to build small apps. Maybe I'd get asked to solve a tricky Javascript function. Explaining different terminology or how a certain technology was used was my biggest shortcoming. During the coding challenge, if it was timed or if they'd do a screen share and watch me or call me in and watch me code in front of a group, I was a mixed bag, sometimes I'd do well and other times I'd crash and burn miserably and completely embarrass myself. **Pretty soon I got very accustomed to the rejection process.** I'd make it to the end of the interviewing process, sometimes doing as many as 8 different interviews. I'd get passed the final interview and then the department managers would call me or I'd get a rejection letter so I'd reach out to them to find out how I could improve and they'd tell me identical stories. ""Look, we're incredibly impressed by your skills and we feel you'd fit right in with the team, we love your personality. We got hundreds of applications for this position and we narrowed it down to only a couple candidates, and basically what it boils down to is we really just need someone right now with 3-5 years experience that can really hold their own and we don't have to keep an eye on."" It's always 3-5 years experience.   


**Job 1** \- This job was kind of a fluke and I don't really know if it counts because I was hired on for such a short time. **It took six months of grinding out code after graduation to get my first job.** It was a very small start up that needed someone who could do several things. I had a background in marketing, design and development. They hired me to do all three. What they needed was three experts in all three fields. I could handle my own in all three fields but my no means was I an expert. They hired me with very little dev screening and just took me at face value thinking I was an expert front end dev, back end dev, IT department and security dev. There was definitely a misunderstanding of what they thought a dev was and me explaining where I was in the process. Upon being hired, I didn't do as much development as I'd hoped, but it was a job. My salary was slightly more than what I was making before all this started. But alas, money mismanagement was a pretty big problem in the company and within four months the company needed to lay off all their staff.  


**Interviews Part II -** This was the hardest part. **This wasn't logistical or tactical.** **This was 100% an emotional grind.** Firstly, I was incredibly fortunate to have a spouse making a good salary who could support me during this time and more importantly would build me up during the hard times. Without that, I'd have given up early and taken whatever low paying job I could find. During this time, it was a time of doubt, anxiety, depression, uncertainty, questioning my decision to go all in on programming to begin with. I went back to juggling my time between applying for jobs and working on projects. I'd work on small websites that some friends needed for pretty much zero pay just to get them in my resume. This time around, the interviewing process really sucked. I had around **120 phone interviews and about 40 companies do in-person interviews and coding challenges.** Always the same response ""You're super smart and a quick learner and we're incredibly impressed at how much you know. We think you'd be a great personality for the team. It just came down to you and someone with more experience so we opted to go with the person with more experience."" Rejection. Depression. Try to put on an excited face for the next set of interviews. Rejection. Deeper depression. Rinse. Repeat.  **This is the part I never read about from other people** on r/learnprogramming or bootcamp reviews. I thought it would be fairly quick. I thought that companies had a huge need and were willing to train raw talent to put butts in seats and fill positions. Suicidal thoughts began to creep in. Some especially hard days after a brutal rejection I'd just sit on the ground and cry with my dog laying next to me.  


**Job 2** \- **After 12 months since being let go of my first job, and** **nearly 2 years since completing bootcamp** I found another smaller company that again needed someone who was a bit more rounded and scrappy. They had a Shopify based website and needed some design and some development. I'd be pretty much on my own as a dev, but the tech stack wasn't too complicated and I could focus on some basic elements while slowly expanding my arsenal of skills. They weren't tech savvy and were again convinced that a dev just meant you knew all things about code without going into too much depth of my skill set. **I asked for 150% of my pre-programming salary and they complied.** This actually was the perfect position for me. I was able to fake it and they were incredibly impressed by very simple projects. I increased productivity on many fronts. The company grew. They were impressed by me, but much of it was due to the simple tech stack they were dealing with. Company was well run and we grew together. I was in a good position but the job just had a couple inconveniences (benefits weren't great, salary was good but not great, I wasn't doing as much code as I'd hoped, tech stack was dated, commute took about an hour one way).    


**Job 3** \- The dream position. A friend of mine who had initially helped convince me that programming was a good career change, just reached out one day and asked if I was looking for a change of position. I told him I was always listening. The new position was everything I had dreamed of: the latest tech stack, an incredibly gifted team to grow and learn from, the best company with all the perks and benefits. I had serious doubts I would be able to produce at that high of a level. They interviewed me. I crushed the personality interview. The take home challenge was to create a mini version of the app they were building with the tech stack they were using even though I knew nothing of their tech stack. I completed the task in 4 days with 2 all-nighters and just poured over tutorials and docs. The project ran great. I had 2 more rounds of interviews afterwards and did well on all of them. They asked my required salary **I told them 210% of my pre-programming salary.** I finished my interviews and landed the job. I've been working there for about a year and it's been a dream come true. Programming is everything I had hoped it'd be and more. I'm crushing the projects I work on and I've been growing at an incredibly rapid pace.   


**Post experience -** It took almost 3 years from the date I decided on a career change into programming to land my dream job. **During the process I got rejected a lot. I cried. I worked my ass off. I got knocked down. I got back up. Then I got knocked down again. And finally I made it.** At many times I questioned my decision and didn't know if it was the right career move. I had two major advantages many people don't have in getting my dream job: a friend willing to guide my career change and recommend me for my dream position, and a spouse willing to support me emotionally and financially during the career transition. Looking back I ask if I'd go through it all again with the knowledge that it would take years and a lot more work than I was originally anticipating to learn programming: **without a doubt yes, I'd do it again.** I mean, I wish I could have harnessed my expectations for just how much time I'd spend banging out code before I'd get the position. But the field is so rewarding.  


**TL;DR - Did a bootcamp. Changed Careers into programming. More than doubled my salary. It took much longer than I was anticipating, a hundred times more work than I was anticipating, and took me to the darkest place emotionally I'd ever been.  It wasn't rainbows and unicorns like most stories I've read on here. It's not the story that will blow sunshine up your ass. But it's my story.**",3089,185,LittleJohnsDingDong,2020-08-17 17:41:22,https://www.reddit.com/r/learnprogramming/comments/ibiu5o/took_a_bootcamp_more_than_doubled_my_salary_not/,0,learnprogramming
eyagda,The Missing Semester of Your CS Education (MIT course),"Over the years, we (/u/anishathalye, /u/josejg, and /u/jonhoo) have helped teach several classes at MIT, and over and over we have seen that many students have limited knowledge of the tools available to them. Computers were built to automate manual tasks, yet students often perform repetitive tasks by hand or fail to take full advantage of powerful tools such as version control and text editors. Common examples include holding the down arrow key for 30 seconds to scroll to the bottom of a large file in Vim, or using the nuclear approach to fix a Git repository (https://xkcd.com/1597/).

At least at MIT, these topics are not taught as part of the university curriculum: students are never shown how to use these tools, or at least not how to use them efficiently, and thus waste time and effort on tasks that should be simple. The standard CS curriculum is missing critical topics about the computing ecosystem that could make students’ lives significantly easier.

To help mitigate this, we ran a short lecture series during MIT’s Independent Activities Period (IAP) that covered all the topics we consider crucial to be an effective computer scientist and programmer. We’ve published lecture notes and videos in the hopes that people outside MIT find these resources useful. The course website is https://missing.csail.mit.edu

To offer a bit of historical perspective on the class: we taught this class for the first time last year, when we called it “Hacker Tools” (there was some great discussion about last year’s class here: [link](https://www.reddit.com/r/learnprogramming/comments/an42uu/mit_hacker_tools_a_lecture_series_on_programmer/)). We found the feedback from here and elsewhere incredibly helpful. Taking that into account, we changed the lecture topics a bit, spent more lecture time on some of the core topics, wrote better exercises, and recorded high-quality lecture videos using a fancy lecture capture system (and this hacky DSL for editing multi-track lecture videos, which we thought some of you would find amusing: https://github.com/missing-semester/videos).

We’d love to hear any insights or feedback you may have, so that we can run an even better class next year!

--Anish, Jose, and Jon",3059,84,josejg,2020-02-03 17:25:23,https://www.reddit.com/r/learnprogramming/comments/eyagda/the_missing_semester_of_your_cs_education_mit/,1,learnprogramming
u7cquw,"With no degree or prior experience, I got a job in programming after 8 weeks of studying off of the back of soft skills and a personal project.","Using a throwaway.. I hesitated on making this post, but I figured I'd throw it out there. I'm sure I'll get 1,000 people with ""ACTUALLY..."" kind of comments, but whatever.. this place encouraged me in my start so hopefully this can help someone else.

I had never typed a line of code in my life when January 2022 rolled around. I wanted to change careers, looked into data analysis, then ended up stumbling on software programming and saw that it was possible to teach yourself.

I immediately started looking for someone I possibly knew who was doing it, got their number, and offered to buy them lunch for an hour of their time. Over lunch, the guy (who has been a programmer for 15 years) told me 3 things...

1. You can teach someone to be a programmer easier than you can teach someone ""not to be a dick or be hard to work with"" (his words, not mine)
2. Personal projects that you commit to and can show off are worth more than any certificate or bootcamp.
3. If you're not going to be experienced, you'd better be humble and willing to learn, and you display that by asking good questions.

I started building an app from the ground up with no coding experience. I did TOP for 2 weeks to get a a handle on HTML/CSS basics, then used a guide to help me start building my own app. I started the app by mapping out all of the layers I'd want it to have, then just started taking it one step at a time.

I got comfortable enough after about 5 or 6 weeks that I was reading junior developer job descriptions that didn't sound outside of what I could figure out, so I started applying. I wrote in my journal in February ""Applied for jobs today that I'm way under-qualified for, but oh well, the worst that can happen is that I get told no"".

I got a call from HR from a company, then a meeting with the hiring manager (who is an expert in the language I'm working in), did good on those, then was given a project. I was told the project should take 2 to 4 hours. It took me 14 hours. I didn't anticipate getting the job, but it was a good learning experience. I got on a follow-up call with the hiring manager, and he offered me a job because he thought I was great in the interviews, asked good questions, and showed ""great enthusiasm to learn"". There were several people with CS degrees who didn't get hired who also applied.

I've been working full-time for 2 weeks and just had a call with my boss yesterday where he told me he's giving me a promotion to fill-in for another employee who's leaving. I'm way under-qualified, but they're being very patient with me and letting me learn on the job and they're pleased with my progress. Every task they gave me to complete in my first 3 weeks I finished with plenty of time to spare.

Here's how I'd boil down what I did...

1. Ask good questions in the interviews. Don't just ask about pay or try and talk yourself up. Even with the HR person, ask them about themselves, how long they've been there, what they love to do, what they love about where they work, how they got started in programming (if applicable), what a great teammate looks like to them, what big projects are they working on, what's something they've learned in the last 3 months at work, what do they want to get better at, etc, etc. etc. I don't know how else to say it other than take a genuine interest in them and be a normal person. You're not being interrogated, relax and just talk to them.
2. Be honest about where you are. No one is going to be willing to teach you if you're not honest about needing help. It's true that people hire juniors for potential. Hiring managers sit through a ton of interviews, they will see through the fronting and pretending. Be humble and teachable. You have to be honest about what you're not good at or you're going to have a hard time getting better. It's okay to not be amazing yet. A sign that someone is going to be a good learner is that they ask good questions and aren't afraid of being wrong or not knowing something. Have a good attitude about not knowing.
3. Have a personal project, it's the best way to learn for me and I imagine many of you. Nothing will test you more than having to be the product manager of your own app. Use databases, build out user infrastructure, make it look nice, etc.. nothing will make it stick more in your brain than just pouring over issues that are unique to you and your app.

This is just my experience. Feel free to ask me questions, or don't. Hopefully this helps someone identify where they need to get better.

edit: One more tip that I can't believe I forgot, maybe the most important one..

I asked the hiring manager ""What's been your experience hiring for this role? What's been the thing that separates candidates or been the most common thing that's been frustrating?"" He said that it's very hard to hire someone who doesn't have a good answer to the question ""why do you want to be a programmer?"" other than to say ""well, it just seems like a cool job"" or ""the money's good"". Those reasons are obvious, but if someone's going to put their neck on the line to hire you and vouch for you, it's important that you have good reasons for wanting that job. Reasons that are unique to you and what you bring to the table.

For example, mine was ""I want a job where everyday I know I'm going to be challenged and learning for the rest of my life. A job that will never be about doing the same thing, but will push me and allow me to learn."" He liked that answer",3043,474,NoSomewhere2165,2022-04-19 19:02:44,https://www.reddit.com/r/learnprogramming/comments/u7cquw/with_no_degree_or_prior_experience_i_got_a_job_in/,0,learnprogramming
zkchwi,"Made it as a full time game programmer, 100% self-taught!","So this is my little success story! I remember back when I started learning programming I was constantly doubting myself as well as the path of self learning, and reading those posts helped me a huge ton, so I figured I could post one in case it motivates anyone!

So I am now 32. I've been in the sound design field my whole career (from 21 to 29), and had a change of heart at 29 when I realized I had no financial / job security in this field. Decided to quit, got a QA job in a indie game company, and started learning programming in my free time. Bought some online courses on Udemy & Zenva, and went heads deep into tutorial hell. Worked on this almost every evening and weekend, even had a mobile app to practice C# basics while commuting to work, and had my boss' approval to continue my courses during work lunch hour.

The first year was hell. Don't get me wrong, it was exciting and I found out programming is actually a whole lot of fun, but I'd also wake up every morning wondering if I'd ever manage to get a programming job without having a degree, and if I'm even smart enough to get good enough to be employable. There was a LOT of self-doubting, but I pushed through anyway. I'd put everything I learned into personal projects (I even finished creating a full game that's available and fairly popular on itch.io) and eventually got out of tutorial hell after almost 2 years lol.

Then things drastically picked up when the company I work at decided to make a game jam for employees only. Production paused for a week, everyone formed into teams of 5-6, and we made games from scratch based on a specific theme during that week. I took that opportunity to ask my boss if I could be a programmer in my team for this game jam, so I could show off what I've learned a bit.

My team's game was a complete success, everyone loved it, and I was able to code everything myself, despite the project being fairly difficult (some mechanics were way harder than anything I've had seen in any tutorial / course). This was apparently enough for the lead programmer to see what my skill levels were, and a week later my boss asked me if I wanted some programming tasks here & there to get used to the work, and told me he had full intentions of making me a full time programmer when they will have a spot available. That was a few months ago, and that spot just opened up last month, which they gave to me right away!

We hired a new lead QA to replace me (I got bumped up to Lead pretty quickly), I did their training, and my transition has now been completed! I am now a full time game programmer, 100% selft-taught, and had absolutely 0 coding knowledge beforehand. This is a dream come true! Imposter Syndrome is of course kicking in quite a bit, but I know things will go smoothly seeing as they know my exact skill level and still decided to give me the position anyway.

So here you go! Hope it motivates anyone, and don't hesitate to ask any question!",3030,149,BasuKun,2022-12-12 21:43:21,https://www.reddit.com/r/learnprogramming/comments/zkchwi/made_it_as_a_full_time_game_programmer_100/,0,learnprogramming
gcqw3w,"To any of you confused by recursion, I found a really a good analogy","I was watching a video by Kevin Naughton Jr, and he gave the clearest analogy for recursion I have ever seen in my entire life.

Imagine you magically teleport into a movie theater and are placed in some arbitrary row. The seats in front of you are just high enough so that you cant see how many rows are in front of you.

How do you figure out what row you are in?

Tap the guy in front of you and ask him what row he is in and add 1 (1 row higher than the person in front). If he doesn't know, he will tap the person in front of him for his row. If the person in front of him doesn't know, he will ask the person in front of him... This will keep going on until you get to the person in the very first row of the theater and he will definitely know that he is in row 1, so he will tell the guy behind him that he is in row 1 and now the guy behind him knows he is in row 2. He tells the guy behind him that he is in row 2, so the guy behind knows that he is in row 3. As you keep going up the row starting from n, the guy above is in row n+1.

This is exactly how recursion works. You have a method that may not give an exact answer yet, so it will recursively call the method again (usually with the input size being a little smaller) until the input meets some condition in the base case where it will return its value, and the calls behind it will each bubble up with its respective value until you reach the initial method call.

I hope that helped guys :)",3025,181,BotterDor,2020-05-03 13:50:54,https://www.reddit.com/r/learnprogramming/comments/gcqw3w/to_any_of_you_confused_by_recursion_i_found_a/,2,learnprogramming
nca1v3,"[MIT] The Missing Semester of Your CS Education - Proficiency with tools YouTube series covering cli, shell, git, profiling, debugging, vim, data wrangling, security & more","Classes teach you all about advanced CS topics,  but they rarely teach you proficiency with programming tools. The video series will help you master the command-line, use a powerful text editor, use fancy features of version control systems, and much more! [Class homepage](https://missing.csail.mit.edu/)

All video recordings of the lectures are available [on YouTube](https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J).

* [Course overview + the shell](https://missing.csail.mit.edu/2020/course-shell/)
* [Shell Tools and Scripting](https://missing.csail.mit.edu/2020/shell-tools/)
* [Editors (Vim)](https://missing.csail.mit.edu/2020/editors/)
* [Data Wrangling](https://missing.csail.mit.edu/2020/data-wrangling/)
* [Command-line Environment](https://missing.csail.mit.edu/2020/command-line/)
* [Version Control (Git)](https://missing.csail.mit.edu/2020/version-control/)
* [Debugging and Profiling](https://missing.csail.mit.edu/2020/debugging-profiling/)
* [Metaprogramming](https://missing.csail.mit.edu/2020/metaprogramming/)
* [Security and Cryptography](https://missing.csail.mit.edu/2020/security/)
* [Potpourri](https://missing.csail.mit.edu/2020/potpourri/)
* [Q&A](https://missing.csail.mit.edu/2020/qa/)",3007,118,SwapApp,2021-05-14 14:34:17,https://www.reddit.com/r/learnprogramming/comments/nca1v3/mit_the_missing_semester_of_your_cs_education/,1,learnprogramming
j2po8k,"Techniques and tips to learn coding in a more efficient way. Some are backed by research in Neuroscience, Behavioral Psychology, and Years of experience.","Let's get to it.

# If you’re not struggling, you’re not learning.

What’s your idea of learning to code?

Whip out your computer, type out a couple of cool commands. And bam - beauty personified.

Sorry, nope.

The process is at least 50% struggling especially at the beginning. And that’s how it should be. I’ve seen people quit programming because they don’t want to struggle with bugs. That’s like hating the gym because you don’t want workouts to hurt.

**But the struggle is the way.**

You don’t run from bugs;

You train yourself to find them quicker.

>A proficient programmer is an efficient detective of bugs.

If you’re feeling frustrated that things are not smooth, remember that this is how learning actually works.

Neuroscience research confirms that practice doesn’t simply make you perfect; it is deliberate practice to improve in a specific task that makes you better. And deliberate practice involves struggling.

So your mantra should be:You code.

You debug.

You struggle.

You overcome.

And you repeat.

If you’ve not struggled at all, you’re simply playing around. If you struggle all the time, then the next section is for you.

# 

# You’re not dumb, you’re learning at the wrong level.

Let’s start with a little analogy.

Imagine learning the English language (the language of exceptions :)

You start with a tutorial motivating you to learn to spell big words like ELEPHANT.

But it’s not working. After beating yourself for so long you decide to go to a lower tutorial and learn to spell smaller words like ANT.

But you still struggle.

So you conclude that you’re dumb because you lowered your tutorial level and still didn’t grasp anything.

But when a new teacher investigates why you’re struggling, they find out that you’ve been struggling because you actually don’t know the English alphabets.

Let’s bring this home to our coding world.

Some people jump into beginner tutorials to learn a React framework (ELEPHANT). Then realize it makes no sense so they move on to learn JavaScript (ANT). But that still makes no sense to them, so they quit.

But they’re simply working with something that’s too advanced.

Even introduction courses can be advanced because your thinking is not wired yet to programming in general. There’s no shame in finding something lower than Intro courses and starting from there to build up to Intro courses.

I don’t see this recommended enough but if you’re struggling with intro courses, you should consider Intro to programming for kids.

Learn with tools like

\- Scratch,

\- Alice or

\- Codewars.

Since you’re older, you’ll go through them faster. But they’ll give you the much needed soft intro that makes sense and builds your appetite.

Again, this has nothing to do with ego.

It’s your learning journey.

**If you learn the alphabets first, you’ll gain the confidence needed to start spelling ANT, ELEPHANT, and later constructing long-winded sentences.**

It doesn’t matter what discipline or area of coding you jump into, this holds for Intro to Python as much as it holds for Intro to Machine Learning.

You’ll learn more efficiently if you learn at the right level.

# 

# Elevate how you learn with spaced repetition.

This technique is from research in Neuroscience. And I’ll summarize it short and quick.

**How it works:**

\- You learn.

\- Recall in 48 hours.

\- Then review in 72 hours.

**Doing this:**

\- You’ll forget less.

\- Connect new ideas to old; and

\- Retain more in long term memory.

I put 48 and 72 hours but you can expand that timeline to days and weeks. The most important takeaway is not to simply learn once. But to intentionally set aside time for you to come back and review.

The longer the delay between reviews, the more it gets buried in long-term memory.

\- Duolingo uses it.

\- Quizlet adopted it.

\- You can also apply it.

# 

# 1 project > 10 hello worlds

Don’t get caught up in \`hello worlds\` forever.

I understand the thrill of completing simple exercises: *print “I am awesome” // print “you’re cool”.*

But I have to be honest with you, this won’t cut it.

Going back to our ANT analogy, no matter how many ways you rearrange the words ANT, you’ll never arrive at ELEPHANT.

No matter how many Intro tutorials you learn, you’ll never really get past the basics unless you push yourself beyond that.

But I don’t know what projects to start as a beginner. No worries. Here are two examples:

* *Random Password Generator:* Creating a program that intakes some words from the user and then generates a random password using those words.
* *Currency converter:* Create a program that converts currencies from one unit to another, for example, converting Indian rupee into dollars, pound to euros, etc.
* If you find these boring, *here are 40 other python project ideas to choose from:* [https://www.upgrad.com/blog/python-projects-ideas-topics-beginners/](https://www.upgrad.com/blog/python-projects-ideas-topics-beginners/)
* And *17 javascript project ideas* for beginners: [https://mikkegoes.com/javascript-projects-for-beginners/](https://mikkegoes.com/javascript-projects-for-beginners/). I love these because you can start tweaking them immediately, play around, then write them on your own.
* And if all of them seem too difficult: DM me here or on Twitter. And I’ll create something that you can start with. Remember, this is not about ego; it’s about your learning level and growth.

&#x200B;

# Motivation is like taking a hot shower.

Taking a hot shower feels good – you should do it.

But if your hot water is out for 2 weeks, would you not shower?

**The question sounds ridiculous but in the same way, you really shouldn’t base your learning on only days when you’re motivated.**

There are lots of exciting days in coding; but there will also be dark, un-motivating days.

Honestly, this is not just with coding. It’s with life and embarking on any new adventure. But you have to train yourself to show up not only when you’re feeling hyper inspirational but also on low, boring days.

This doesn’t mean forget motivation.

**Far from it - on days when you feel super motivated, use your motivation to quickly commit yourself to something big that will keep you accountable when the motivation goes dry.**

How? Join an accountability movement like

* 30daysofcode
* \#100DaysOfCode
* \#30DaysOfCodingChallenge

Something. Anything. To keep you accountable on slow days.

In Behavioral Psychology, this is known as pre-commitment. You use moments when you’re optimistic to commit yourself in the future for when you have zero optimism.

# 

# The journey of learning is never-ending.

No one teaches you how to learn. But it’s crucial in going far.

You may have started with the idea of simply learning to code or to one day become a developer. But there’s more.

When you come out on the other side, you’ll come out not just a coder but a renewed person because you’ve picked up a new way of approaching things.

Don’t get me wrong. This isn’t easy peasy lemon squeezy – you’ll work like hell.

But in the end, it’ll be worth it not just because of coding but because of the joy of transforming yourself.

Remember, the ball’s always in your court…

## 

# Thanks for reading.

Not going to lie, this took a lot of hours.

If you enjoyed it and you’re on Twitter, [like and retweet this thread](https://twitter.com/LifeTechPsych/status/1311338563884257280?s=20) to help spread the word. I know it sounds trivial but it actually really helps reach other people who need help.

If you prefer a blog post format with images: [here you go](https://www.lifetechpsych.com/learn-code-efficiently/).

This post is part of a series. In each post, I provide answers to questions and DMs that came from [my 1st post](https://www.reddit.com/r/learnprogramming/comments/itbw45/lessons_for_beginners_and_junior_developers_after/). For now, I'm putting together resources and write-ups based on what people need the most help with. If you’re interested and have more questions, [let me know on Twitter](https://ctt.ac/I1f33). If you prefer sending a direct message, [my DM is open.](https://twitter.com/LifeTechPsych)

*Heads Up* \- I love research so I tend to back my advice and approach with concepts from Behavioral Psychology and Neuroscience.

&#x200B;

**Edit**: typos fixed.

**Edit 2:** added project ideas for Javascript/web development based on request.",3011,170,a-gentility,2020-09-30 16:40:49,https://www.reddit.com/r/learnprogramming/comments/j2po8k/techniques_and_tips_to_learn_coding_in_a_more/,2,learnprogramming
k2us9x,"I made a Notion page (You could call it a guide) that explains almost everything one needs to know about Git & GitHub in a beginner-friendly way. It covers all the basic features, commands, and concepts in one place (Everything is organized in this single page).","The Notion page: https://www.notion.so/fateen45/Git-GitHub-61bc81766b2e4c7d9a346db3078ce833

I tried to make everything in this Notion page as beginner-friendly and organized as possible. I hope it'll be easy to follow for anyone who's trying to learn Git and GitHub.

In my opinion, learning to code feels fun and more meaningful when one maintains a repository where they upload projects/programs/scripts as they learn newer things and undertake new projects to practice what they've learned. The idea itself of maintaining and completing projects on GitHub makes one feel motivated to keep on learning. It gives one a sense of working towards an objective or goal. And this is why I started to learn Git and GitHub in the middle of when I just started learning Python.

I had to struggle quite a bit in learning Git and GitHub, and I also see many people, especially people who just started to learn code and any programming syntax, who struggle a lot in grasping the different features, commands, and concepts of Git and GitHub.
I think learning about Git and GitHub can be a little difficult for absolute beginners primarily because of how scattered the relevant learning materials are on the internet, and almost everything is explained or written using jargon and concepts that normally a person with minimum programming knowledge would understand.


And so, this Notion page is just an attempt of mine to consolidate everything into one place. It took me some time to organize everything, but it'll be worthwhile if this Notion page can serve as a resource to anybody in any way.",2997,99,Fateen45,2020-11-28 20:17:01,https://www.reddit.com/r/learnprogramming/comments/k2us9x/i_made_a_notion_page_you_could_call_it_a_guide/,0,learnprogramming
onxqhn,Does anyone else feel guilty for not spending all their free time learning to program?,Especially when I see someone with a nice job. I always tell myself it could be me if only I put more time and effort into learning to program instead of making excuses for myself. Anyone else?,2993,340,LyvesNaouny,2021-07-20 08:07:23,https://www.reddit.com/r/learnprogramming/comments/onxqhn/does_anyone_else_feel_guilty_for_not_spending_all/,0,learnprogramming
w8lbs8,"I got HIRED! Self taught, no college CS degree.","Man this is all surreal!! From being an Electrician to getting my first tech job as a Software Engineer without having prior professional experience or internships. Uff still in shock.. Let's back up for a second..

Back in December 2020 took an introduction course with HTML, CSS and Python. I was still working a bit back then so I was only coding when I get home and not too tired. And of course I was still testing the waters as it was all gibberish lol But I fell in love with it, made me giggle like a baby whenever I do something visually with a line of code. Got my nanodegree, then took CS50x and CS50w which opened my eyes more and gave me a full understanding on what's going on under the hood(I recommend those to start to all beginners who just started learning). Don't get me wrong, it's been frustrating to stay consistent, motivated learning by myself. Also, my environment didn't help as there was always family drama, fights and loud atmosphere that held me a few times to concentrate so I've been somewhat inconsistent. But I always picked myself up, still refused to give myself excuses to stop learning. I was telling myself, people out there came from the ""dirt"" and made something from nothing, who am I to complain, I'm sure there's someone out there that had it worse than me and still succeeded. Plus, reading success stories on this sub really kept me going, asking ""stupid"" questions instead of googling(underrrated skill) and people still were nice to me and took their time to answer, connecting with people who made it and listening/reading about their experience and path gave me a boost and guidance.

Last 6 months I've been focusing on front-end learning React, my first time learning in bootcamp I found here with a nice group of people from all over the world, first time collaborating on a project. So when I applied for that backend job, I really didn't think I'd get a reply but a week later I got that call! I was shocked because I haven't touched python/django in months and they were still interested and they said they're intrigued by my unique path and my motivation to learn. Technical interview didn't really go well (my second interview ever uff)

A few things to keep in mind:

\-Don't ever compare your path to other people's paths, each person has their unique journey just focus and keep looking straight not sideways.

\-Learn the fundamentals of whatever language you wanna master and make projects with it, I only started getting better with practice.

\-There's no special course to get you a job.

\-Networking, hitting up other web developers and talk to them, setting up video calls and learn from their experience(introvert here and still did that so don't be afraid).

\-Apply to jobs even if you think that you don't qualify, that's their job to decide.

\*\*\* Update:

\-My youtube for my cs50 assignments: [https://www.youtube.com/channel/UCEA2cmmXXvB6Cx13k3LN8OQ](https://www.youtube.com/channel/UCEA2cmmXXvB6Cx13k3LN8OQ)

Bootcamp: A free bootcamp created by a React developer from this sub, I'm still in it and it's almost over but he's having another one for advanced level to redux and other things but this time for a fee because, one it's worth it and its taking a lot of his time and effort managing it and managing 100+ learners u/ \_\_god\_bless\_you\_",2980,222,kingmathers9,2022-07-26 14:32:36,https://www.reddit.com/r/learnprogramming/comments/w8lbs8/i_got_hired_self_taught_no_college_cs_degree/,0,learnprogramming
aujqdi,"Hello world. I started programming at age 30, which was about 8 years ago. Today I had my last exam for my computer science degree. I've been programming at work for about 3 years now. Never give up my good peoples!","As the title says, just keep at it and you'll get there. You'll have lots of highs and lows along the way, that is all a part of the journey! Happy to answer questions if any one has any. Happy coding!

EDIT: I got asked a number of repeating questions so I figure I'll post the answers here.

&#x200B;

My history

* I tried studying IT and programming after school at 17, I dropped out and partied.
* I was a laborer for around 10 years. Before I was 30 I decided to change careers because my body was breaking down and I couldn't work as a laborer for another 30-40 years.
* I started studying history and politics while I was a laborer. I stopped for surgery.
* After surgery I moved into a new laboring role that used computers to program coordinates of a cutter. I really enjoyed working with technology and that inspired me to change my study stream. I didn't change it yet as I hadn't gone back to university.
* I applied for any entry level IT jobs that I could, I was really lucky and won an entry level job as a business analyst in a software engineering team. They sent me off to do a diploma of IT, I was introduced to Java, Cobol (lol), and SQL. I did no programming at work besides some basic SQL. It took me a little over a year to finish my diploma. Once I finished I decided to do a degree in CS. I took a year off study before enrolling, because I had more surgery. In this year I tried studying Java again because I had no idea what I was doing. I studied for about 5 months until I realised my maths was terrible and stopped and focused on maths.
* Around 4 years after joining and no programming at work, I went to a data analytics team, relearnt SQL, and worked in an enterprise data warehouse doing basic data analytics. My knowledge of the business got me that job, not my technical skills. At this stage I was doing my non-IT minor subjects. I fucked up and did 4 more subjects then I had to, I wasted a year of study. Woops. I was scared of doing Java at university, because I still had no idea what was going on. During my non-IT minor subjects and my fuck up, I was studying Java myself at the same time. By the time I did Java 101 at university I had basically finished my first textbook from my diploma. I felt reasonably comfortable with the basics. The textbook was [Objects First With BlueJ](https://www.bluej.org/objects-first/) for Java 1.7
* Java 101 was when I finally felt comfortable programming. The textbook I got there was [Introduction to Java - Comprehensive Edition - 10th Edition](http://www.cs.armstrong.edu/liang/intro10e/) for Java 1.8. At this time I was able to start writing Java at work, writing Java programs and running them in a database.
* A couple of Java database programs later and I got a job as a database administrator. I starting learning and writing Bash and Python scripts to automate my job, doing some data processing / cleaning / loading, and web scraping.
* From there I went into my current role, a programmer in a data science team working on Apache Spark with Java, Python, and Scala.
* I am trying to learn functional programming with Scala. I feel like I am back to beginning again. I have no idea what I am doing or how to think about it :D It is so different from imperative C style programming.
* After Java 101 I did the next level Java class at uni, did web programming, Android programming, and some scripting.
* I now program mainly in Java, Python, SQL, and trying to add Scala.

&#x200B;

TLDR - I was studying part time while working full time.

&#x200B;

Resources that really helped me

&#x200B;

Java

* [Objects First With BlueJ](https://www.bluej.org/objects-first/)
* [Introduction to Java - Comprehensive Edition](http://www.cs.armstrong.edu/liang/intro10e/)
* [Think Java - How To Think Like A Computer Scientist](https://www.amazon.com/Think-Java-Like-Computer-Scientist/dp/1491929561)
* [Core Java 1 & 2](https://horstmann.com/corejava/index.html)

&#x200B;

Python

* [Automate The Boring Stuff](https://automatetheboringstuff.com/)

&#x200B;

Maths

* [Khan Academy](https://www.khanacademy.org/)
* [Maths Is Fun](https://www.mathsisfun.com/)
* [WolframAlpha](https://www.wolframalpha.com/)

&#x200B;

Bash / Linux

* [The Linux Command Line](http://www.linuxcommand.org/tlcl.php/)

&#x200B;

Regular Expressions

* [Regular Expressions Tutorial](https://www.regular-expressions.info/)

&#x200B;

Studying In General

* [10 Steps To Earning Awesome Grades (While Studying Less)](https://collegeinfogeek.com/get-better-grades/)
* [Anki Cards](https://apps.ankiweb.net/)",2970,221,blindcant,2019-02-25 10:19:09,https://www.reddit.com/r/learnprogramming/comments/aujqdi/hello_world_i_started_programming_at_age_30_which/,0,learnprogramming
vvsw0x,Most of you need to SLOW DOWN,"Long time lurker here and someone who self studied their way into becoming a software engineer. 

The single most common mistake I see on this board is that you guys often go WAY too fast. How do I know? Because after grinding tutorials and YouTube videos you are still unable to build things! Tutorial hell is literally the result of going too fast. I’ve been there. 

So take a deep breath, cut your pace in half, and spend the time you need to spend to properly learn the material. It’s okay to watch tutorials and do them, but make sure you’re actually learning from them. That means pausing the video and googling things you don’t know, and then using the tutorial as reference to make something original! 

Today I read a tutorial on how to implement a spinner for loading screens in Angular web apps. I had to Google: 

1. How to perform dependency injection
2. How to spin up a service and make it available globally 
3. How to use observables 
4. How to “listen” for changes in a service 
5. What rxjs, next, asObservable(), and subscribe() do
6. How observables differ from promises 

This took me about 6 hours. Six hours for a 20 minute tutorial. I solved it, and now I understand Angular a little more than last week. 

You guys got this. You just need to slow down, I guarantee it.",2968,230,SamePossession5,2022-07-10 14:40:36,https://www.reddit.com/r/learnprogramming/comments/vvsw0x/most_of_you_need_to_slow_down/,0,learnprogramming
764nft,I created a chrome plugin that automatically mutes youtube commercials,"This is a chrome plugin that automatically mutes youtube commercials. After the commercial finished, the volume goes back up. 

Thanks to this, casters can still be reworded by youtube, but you don't have to listen to crappy commercials.

https://chrome.google.com/webstore/detail/youmuter/hbhjkldledabllijjmnmfhhiejephibe

and you can checkout the source code here:

https://github.com/adamgajzlerowicz/muter",2963,230,nelf86,2017-10-13 13:07:37,https://www.reddit.com/r/learnprogramming/comments/764nft/i_created_a_chrome_plugin_that_automatically/,0,learnprogramming
o2ncru,I put together a list of ~650 university CS courses you can take!,"
https://collegecompendium.org

I’ve spent the last week compiling around ~675 publicly available CS courses from around 20ish colleges. Hopefully you can get some use out of it.

Hopefully you can get some use out of it. :)",2967,193,colxwhale123,2021-06-18 11:54:14,https://www.reddit.com/r/learnprogramming/comments/o2ncru/i_put_together_a_list_of_650_university_cs/,0,learnprogramming
qk9olh,"After 8 months of consistent self-learning and two rounds of interviews for a junior position, this morning I received my first rejection letter.","And you know what? What's done is done. Learning from it and moving on. 

To anyone out there also grinding, don't give up. Make sure to take care of yourself too, both mentally and physically.

Cheers 🍻",2961,202,Vaylx,2021-11-01 08:40:54,https://www.reddit.com/r/learnprogramming/comments/qk9olh/after_8_months_of_consistent_selflearning_and_two/,0,learnprogramming
lfd0ou,What your life will be like as a programmer,"I know a lot of folks are getting frustrated in their learning process, and in their life, so I wanted to talk a bit about what your life will be like once you've landed your career.

edit:  This is a pretty American-centric viewpoint and experience, and one born out of having experienced a decade of struggling financially in stressful jobs working 50-60 hours per week.

For reference, I'm self-taught, and before programming I was a line cook for 6 years, and IT help desk for 4.  I went to school for English, History, and Music. I got my first actual programming job at 29 and have been writing web apps for the state government in America for just under 5 years, but am now moving to Norway in two weeks to start a programming gig there.

**My Entry-Level Pay and Situation**

I started off in a very, very low-end pay structure.  About 43k USD per year.  But I did get full health benefits and some retirement contributions, which was great.  I was able to afford my own apartment at 1350 USD per month.

**The Big Shockers**

First, I didn't have to budget food anymore.  Somebody else mentioned this, but woah, this was amazing.  I went from strict meal planning around the cheapest meals I knew to basically having whatever I felt like.  Granted it's not steaks and lobster for every meal, but I could make whatever meals I wanted without worrying about how much they'd be.  I could also eat out at restaurants way more often too.  The amount of stress that was removed from not having to worry about how much food costs was enormous.

Second, I didn't have to worry about where I was at work at all times. Or hardly ever, for that matter.  No more ""hey can you cover the phones while I go to the bathroom?"" Saying ""hey can I get the Monday two weeks from now off for a doctor's appointment"" instead became ""oh I've got an appointment tomorrow at 2 so I'll be out for the rest of the day after that.""  Oh yeah, I got health insurance, finally. More on that later.  I mean I could literally just say ""hey I'm going for a walk around the block"" and nobody would bat an eye.  We would gather groups of folks up for a walk to the coffee shop just to take a breather.  Multiple times a day.  Your work becomes project-based and you become the person who decides if you've done contributed a good enough amount of work at any moment in order to take a break.  And lunch is whenever the hell you want it to be.  Meetings throw a wrench in the gears of your break plans but that's about it.

Third, and pretty closely related to the one above, paid time off is no longer something you have to fight others over.  I didn't have to worry about if I was the first one to request Christmas week off or not, because it doesn't fucking matter.  Everyone takes it off.  I also often took a week or two off in the middle of Spring just 'cause.  Same with sick days.  For one boss I kinda had to worry 'cause she would set ridiculous deadlines, but once she moved on my guilt over taking a sick day was gone.

With all of these things combined, life became just fucking *easy*.  I really didn't realize how goddamn caught up I was in survival mode until I was able to leave that lifestyle behind.  When I stepped outside of the building after a work day work just totally left my mind, and it was replaced with total excitement for the rest of my day.  Removing so much of that stress and end-of-day exhaustion left room for actual, real-life peace and excitement.  Holy fuck this was so, so, SO fucking amazing.

**Unexpected Side-effects**

One of the biggest side effects that I didn't really foresee was how much healthier I got.  Both physically and mentally.  Having struggled with anxiety my whole life, I had always been grossly underweight.  125lbs at 6 feet tall.  Couple that with worrying about how much it would cost to feed myself, and suddenly there's a recipe for awful health.  But now I could feed myself, which gave me more energy, which meant I could spend that energy on getting healthier.

Regarding my mental health, when I started my programming job I was 2 months fresh out of a divorce, so needless to say I wasn't doing super great mentally.  Luckily, I could now afford therapy!  Holy fucking shitballs, therapy was awesome, but I guarantee it would've sucked if I didn't have the extra mental energy I had from having a 40 hour week job that didn't beat my ass with tons of stress.  My free mental energy allowed me to confront all kinds of shit from my childhood that I realized had been contributing to making me miserable.  And since I was living alone I could work through the crazy physical and mental rollercoaster that comes with dealing with your shit.  I didn't have to worry about not crying in front of anybody, because it was just me.  I didn't have to worry about rage-punching pillows and screaming into them, 'cause it was just me.  My apartment became healing grounds for family shit that had been passed down to me from my parents by their parents and their parents' parents.

So, my life started to become amazing.  I gained 40 pounds, finally settling into a healthy weight.  I started making better friends.  I started getting back into the dating world.  Life became pretty goddamn good.

And the OPPORTUNITIES.  I mentioned I'm moving to Norway.  After you've got a good 3-5 years of programming experience under your belt, you can go pretty much wherever you want.  Literally wherever.  And your new job will be super grateful to have you.  And with the options you have, you really get to decide what you want in life.  I thought maybe I wanted lots of money so I applied for a job at 140k USD per year, but I ended up turning it down, showing the offer to my boss, who then raised my salary up to around 80k per year.  I took the 80k per year.  When I was struggling, I would've slapped future-me in the face for turning away 60k per year, but once you're out of the struggle, you get to choose the lifestyle you want.  I like a slow-paced gig, not tons of pressure, and I would've had to give up a couple of work-from-home days, which I didn't wanna do.  It's really hard to explain this decision to somebody struggling, but I hope that everyone here gets the opportunity to choose between the two.

**The Only Problem**

Soap box time.

After living the good life for 3 or 4 years I started to reflect on my life beforehand.  I had a lot, a LOT of gratitude for my situation having come from shit, shit jobs and a shit, shit life.  I became my own superhero for getting myself out of all of that.  I had these awesome connections with co-workers who had done the same.  People who got their families out of dangerous neighborhoods.  People who moved from secretary work at 45 and into programming, finally being able to exercise their creative, problem-solving minds.

The problem comes from realizing how goddamn hard we all had to work to get here.  Like, these are all people who were dealt a shit hand, and the only hope they had was to spend 1-4 years ruining their relationships and friendships and shirking all other aspects of their lives in order to get out of it?  How the fuck is that fair?  These brilliant, amazing people had to forgo meals so their kids could have a babysitter for 2 hours a day while they studied programming.  

You realize after a little while that these were just the people who made it.  Who were luckily enough to find the time, the money, or the mental effort.  We are all so grateful for where we are at, far more than anybody else could be, and you do have that to look forward to. But we look around at our close friends and family members who will never escape the rut they're in, and it's pretty soul-crushing.

A job should not be the thing you need to escape the Catch-22 of I-can't-get-better-because-my-life-sucks-because-I-can't-get-better.  But, if you're like me and it's the only option you have, for the love of GOD do it.  Put your own airbag on before you help the others around you.",2951,389,MeedleyMee,2021-02-08 14:34:08,https://www.reddit.com/r/learnprogramming/comments/lfd0ou/what_your_life_will_be_like_as_a_programmer/,1,learnprogramming
jp0fpu,I’ve just realised that a lot of people are really good programmers simply because they’ve had to work through so many problems and succeeded.,"I’ve been feeling down.


I started learning web dev about 4 months ago and have been kicking myself that I’m not fluent in JavaScript yet but I’ve finally started to realise that the people I look up to in the industry were at the same point as me at one stage, they just persisted after facing challenge after challenge. 


You literally become better every time you encounter a problem and you solve it. 


Now there’s no way I’m going to stop.",2939,159,None,2020-11-06 06:56:25,https://www.reddit.com/r/learnprogramming/comments/jp0fpu/ive_just_realised_that_a_lot_of_people_are_really/,0,learnprogramming
exuh5w,"If you're a student, you should be taking full advantage of the GitHub Student Developer Pack","The GitHub Student Developer Pack grants you access to tons of resources to learn programming for free. You will get free domain names (including .tech and .me domains, which are perfect for your portfolio), access to Microsoft Azure services, cloud hosting, lots of programming tutorials from several platforms, interview prep and more. Available for students who are 13 years old and above. So if you're in high school, you should start early for longer access. 

[https://education.github.com/pack/offers](https://education.github.com/pack/offers)",2914,203,PROTechThor,2020-02-02 20:20:01,https://www.reddit.com/r/learnprogramming/comments/exuh5w/if_youre_a_student_you_should_be_taking_full/,0,learnprogramming
ortnef,A super harsh guide to learning computer science basics and ultimately programming ...,"Hey all,
Here is probably my final take on this. I have been like many of us here, trying, failing, switching resources, starting over, giving up and so on... But after so many tries, these are, in my opinions the best the internet has to offer if you are ready to take the learning serious and not just wanting to be a code monkey. All of this is free, yes free, no need to buy a course from a random dude on the internet. For the books, well I'm sure you know, anything can be found on the internet if you dig enough. Just focus one these, no need for more projects, these have more than enough and they are really really challenging. If you manage to finish, you'll be in top 10% of the self-taught people. The textbook part is optional, but you should do it anyway, it will for sure improve your problem solving skills. Don't cheat, trying to find solutions online or such, take your time, it's doable, albeit harder cause you are alone. Finally good luck, well no it's not about luck, more about discipline ...

Start here:

[CS61A - Structure and Interpretation of Computer Programs](https://inst.eecs.berkeley.edu/~cs61a/sp20/) (introductory cs course at berkeley, hard af but you will learn a lot if you keep at it)

[CS61B - Data Structures](https://sp21.datastructur.es/) (data structure course at bekeley. Programs interact with data, you will learn how with this course. The MOST MOST MOST important course on this guide)

[CS61C - Great Ideas in Computer Architecture](https://inst.eecs.berkeley.edu/~cs61c/fa19/) (Teaches the inner working of a computer so that you can write optimized programs)

Then specialize for whatever you like, I suggest these:

[Full Stack Open](https://fullstackopen.com/en/) (web development)

[15-388 A - Practical Data Science](http://www.datasciencecourse.org/) [(Lectures)](https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22618ea253-ca45-4b14-9f1d-aab501543bd2%22&maxResults=50&sortColumn=1&sortAscending=true) (data science) 

[CS193p - Developing Applications for iOS using SwiftUI](https://cs193p.sites.stanford.edu/) (mobile dev)

Textbooks:

[Basic Mathematics - Serge Lang](https://www.amazon.com/Basic-Mathematics-Serge-Lang/dp/0387967877) (teaches basic mathematics as the title says, but is proof based)

[Discrete Mathematics with Applications - Susanna Epp](https://www.amazon.com/Discrete-Mathematics-Applications-Susanna-Epp/dp/1337694193/ref=sr_1_1?dchild=1&keywords=discrete+epp&qid=1627280503&s=books&sr=1-1) (basically the math of computer science)

Edit 1: There is a lot of questions/suggestions about CS50 so let me adress that. It's not a bad course, and if you have one and only course to take to learn basic cs and programming, it's the best at that. But if you have time the 3 Berkeley introduction course is CS50 on steroids, and every course on the spe part is more in depth. What you want when learning is to build good foundations so that you can learn more adavanced stuff later on.

Edit 2: CS61C now has a valid link thanks to /u/vZanga",2902,360,Lesabotsy,2021-07-26 07:13:53,https://www.reddit.com/r/learnprogramming/comments/ortnef/a_super_harsh_guide_to_learning_computer_science/,0,learnprogramming
sdbivd,It frikin’ happened!! I got a job!,"I got it guys! I got a job as a junior front-end developer in a very cool company where they are looking for people like me, to help them grow and become great engineers.

I’m so thrilled and relieved to be honest. I was so close to giving up. But never give up. Keep pushing. Keep learning. Keep building things (!!!). Small projects, clone projects, just follow someone coding something on youtube, anything, just keep building projects.

And step up your linkedin game. I can’t stress this enough. You basically don’t need portfolio website. Make your linkedin nice and tidy. Make your github profile look neat and you’re good.

Reach out to recruiters. To ceo’s. To lead developers. Reach out to people on linkedin, be open about your story. Don’t sugarcoat it too much. Eventually you will find a match. Someone who will see potential and enthusiasm in you.

Thank you, you wonderful community. I wouldn’t made it without you

Edit: more than happy to answer any questions you guys have

Edit2: I’m self-thaught developer. I mostly used TOP and Scrimba to learn JS and React.

Edit3: To clarify some things:

* I started full-time studying in October last year. I fully committed to this, spent all my free time and weekends and holidays firkin' learning and building projects.

* I got an offer after only 4 months. To be honest, I think I got lucky with that. I know it usually takes more time. Just keep going, and it will happen.

* I used [The Odin Project](https://www.theodinproject.com) and **free** courses on [Scrimba](https://scrimba.com). In particular [this](https://scrimba.com/learn/learnjavascript) and [this](https://scrimba.com/learn/learnreact) course. Other than that, just google things when you're stuck and watch specific yt tutorials on that topic.

* You need to **scan** your local job market really good, and see which technologies/frameworks are in demand. **Focus** on learning them. Could be React, could be Vue, could be Flutter, could be Ruby on Rails. Do the research.

* I did **network** like crazy on LinkedIn, and to be honest, I think that's the reason why I was successful with my job search. [This](https://www.youtube.com/watch?v=_HNbfOMLIO8&t=132s) video in particular helped me a lot with grasping how much networking is important and how to write a good 'cold message'.

* Focus on polishing your **LinkedIn** page and your **GitHub** page. They are more important than to have a good personal portfolio website. [This](https://github.com/abhisheknaiidu/awesome-github-profile-readme) repo on GitHub gave me a lot of inspiration and how-to with making an attractive homepage on GitHub.",2895,178,phila94,2022-01-26 17:37:05,https://www.reddit.com/r/learnprogramming/comments/sdbivd/it_frikin_happened_i_got_a_job/,1,learnprogramming
6f0l1j,"Dont be afraid of git, This video will teach you the basics in 20 minutes.","[Learn Git](https://www.youtube.com/watch?v=Y9XZQO1n_7c)

I like many others was afraid of git for so long. Totnight I finally decided to take the plunge and it is amazing. In 1 hour I had all my projects uploaded to github using git bash and now actually understand the basics of version control.

Give it a shot trust me.

This is not my video and I have no affiliation with the creator.",2883,118,up_to_bot,2017-06-03 10:42:01,https://www.reddit.com/r/learnprogramming/comments/6f0l1j/dont_be_afraid_of_git_this_video_will_teach_you/,0,learnprogramming
guu0km,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUN2020FREE","EDIT: Whoops, sorry, I've been... busy... the last few days. I just made the JUN2020FREE2 code, but it might take an hour or so to take effect. They'll show you the $16 ""discount"" using the link until then, just hold off a bit and check later. JUN2020FREE2 should work until 06/07/2020 around 2pm Pacific.

https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUN2020FREE (on Monday the code changes to JUN2020FREE2)

https://www.udemy.com/course/automate/?couponCode=JUN2020FREE2

This promo code works until June 7th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code MAY2020 or JUN2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",2868,136,AlSweigart,2020-06-01 21:56:53,https://www.reddit.com/r/learnprogramming/comments/guu0km/automate_the_boring_stuff_with_python_online/,2,learnprogramming
g5zvpa,PSA: Don't try to learn COBOL,"I get it. [New Jersey and the IRS can't send out unemployment checks](https://www.cnbc.com/2020/04/06/new-jersey-seeks-cobol-programmers-to-fix-unemployment-system.html). That's a big deal and a lot of us want to help because hey, we want to make a difference for the better.

Don't waste your time.

You've already heard that COBOL is a dead language, that nobody knows it any more, so on so on, so I won't reiterate that point. But here are a couple other things you should take into consideration -

1. You won't learn COBOL quickly enough to contribute to the solution. People didn't stop learning COBOL because it stopped trending, they stopped because it's a nightmare. Zero modularity. Probably every variable you cast will be global. Not fun, and it will take forever to grind through the class, not including untangling the spaghetti that's actually on these systems to the point that you could contribute. Meanwhile, the government will pay some retired engineer an enormous sum to fix this pile of garbage now because they need a solution quickly, not in 6 months when a handful of people have finally learned the language. Don't ruin his/her payday.
2. If the government (or businesses) catch word that there's a new wave of COBOL engineers entering the field, there will be zero incentive to modernize. Why pay for an overhaul in Java and risk a buggy, delayed deployment when you can just keep the same crap running for free? Who cares if it breaks during the next emergency, because ""I probably won't still be in office by then.""
3. If you're on this subreddit, then you're probably here because you want to learn skills that will benefit you in the future. It is *highly unlikely* that COBOL will be a commonly desired skill going forward, especially given all the current bad press. If you want to work on mainframes, great - but C, C++, and Java are probably going to be way more relevant to your future than COBOL.

For your own and our benefit, don't try to learn it.

Edit:

There's some valid conversation happening, so let me clarify -

If you want to learn COBOL just for the sake of learning, be my guest. As long as you realize that it likely won't be relevant to your career, and you aren't going to ""fix the government"" with it. It seems to me that if you really want to learn a ""hard"" language that badly, Assembly would be way better option. But that's just me.

Is there any guarantee that Java won't be around in 20 years? No. Is Java more likely to be around then than COBOL? Yes. Nothing is guaranteed - but hedge your bets accordingly.

This subreddit is filled with people who are just starting down the path of CS. We should be guiding them towards learning skills that will be both relevant to their futures and provide a meaningful learning experience that encourages them to go farther. Not letting them walk blindly into a labyrinth of demotivating self-torture that in the end will probably be pointless.",2866,464,another_seg_fault,2020-04-22 12:02:29,https://www.reddit.com/r/learnprogramming/comments/g5zvpa/psa_dont_try_to_learn_cobol/,0,learnprogramming
op0gwv,I DID IT!,"I Just got my first programming job with no degree and no coding camp, just learning at home over 1 year 7 months. Here is my experience and resources that I used.

I started with a Java for beginners course, then moved onto a more in depth Java course from Jetbrains (it was in beta and free at the time but it is paid for now) then a front end course from Mozilla.

After I made three personal protects that took around a month a piece. A Journal connecting to a database, a transport tracking app using a REST API to tell me when my trains are arriving and a to-do list / habit tracker. After I made a website that connected to a database for my girlfriends boss, I offered to do it for free in exchange for a work reference stating that I did some freelance work for her (I would highly recommend trying to get something like this on your resume).

I then paid a professional resume writing company £80 to write me a nice resume and cover letter, but you could probably do this yourself tbh. Once I felt it was time to start applying, I applied for every apprenticeship and every graduate job that mentioned at least 2 of the technologies I'm familiar with (in the UK it seems that the majority of companies would not consider ""junior"" as an entry level position, so I stopped applying for these).

I applied for maybe 200 positions, interviewed at 5 companies and then got lucky with an apprenticeship at a company that seemed to care more about the enthusiasm that people brought rather than their level of knowledge. If I didnt get this position I would have expected to be applying for 100's more jobs, so I could get technical interviews, inevitably fail them, and learn from my mistakes for next time, slowly improving. Apprenticeships should in theory be significantly easier to get but in my experience they are just as competitive as grad jobs and so the bar is set just as high (which isn't fair). Whilst I was applying I stayed sharp with Leetcode, Hackerrank and learning data structures inside out. Solving these ""leetcode"" type problems was unfortunately very important in my experience, alot of companies seem to like to see these problem solving skills live.

I tried many schedules but in the end programming for 3 hours a day 6 days a week was the sweet spot for me. My buddy who is a mid level developer would point me in the right direction whenever I was stuck, I'd recommend finding someone on the internet somewhere who's kind enough to help you out once or twice a week. In the end, I learned; Java, Spring Framework, HTML, CSS, Mysql, Thymeleaf, Maven, Git and TDD (I would go so far as to say that TDD/ unit testing is ESSENTIAL to learn and its something that I dont see many people mentioning).

No bullshit, this was the hardest thing I've ever done and it took a long time, and until you actually get that first job you'll often doubt yourself. Its probably not the smartest path, but its damn satisfying.

Any questions, ask below.

[https://java-programming.mooc.fi/](https://java-programming.mooc.fi/)

[https://www.jetbrains.com/academy/](https://www.jetbrains.com/academy/)

[https://developer.mozilla.org/en-US/docs/Learn/Front-end\_web\_developer](https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer)",2854,197,VeryJazzyMan,2021-07-21 22:19:21,https://www.reddit.com/r/learnprogramming/comments/op0gwv/i_did_it/,0,learnprogramming
i1veyy,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code COPSHOTMEINPORTLAND","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: COPSHOTMEINPORTLAND2

https://www.udemy.com/course/automate/?couponCode=COPSHOTMEINPORTLAND2

This promo code works until August 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to COPSHOTMEINPORTLAND2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code COPSHOTMEINPORTLAND2 or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",2855,208,AlSweigart,2020-08-01 16:55:10,https://www.reddit.com/r/learnprogramming/comments/i1veyy/automate_the_boring_stuff_with_python_online/,0,learnprogramming
9nij5h,"For all the people that think they are not smart enough, your brain is fine, you're probably learning the wrong way.","Do yourself a favour and do this course, [https://www.coursera.org/learn/learning-how-to-learn](https://www.coursera.org/learn/learning-how-to-learn), it takes a few hours. There are blessed people whose brains are ""blessed"". The are handicapped people whose brains are handicapped preventing them to think correctly. But that's like 1% of the world population. So you're fine, you're as smart as everyone else. What differs is our methods to learn, and whether we like what we learn or not. Passion is a big factor in learning though ... The brain is like a muscle it can be trained, if you don't train yours don't think you'll be at the same level as someone who does.",2851,214,Lesabotsy,2018-10-12 08:35:39,https://www.reddit.com/r/learnprogramming/comments/9nij5h/for_all_the_people_that_think_they_are_not_smart/,1,learnprogramming
gtcwn4,The misconceptions of a programmer's life,"I see frequent posts from beginning programmers wondering what programming is like, and I think it's useful to address those issues.

**You program 8 hours a day at work**

This is probably the least true of all the things.  Most programming jobs are maintenance jobs.  The programs have all mostly been written years ago, and you are doing support, minor enhancements, bug fixes.  Even if you get to do more than that, you are still not likely coding a large part of your day.  It's about meetings to decide what to do.

Also, from my experience, unless you have some reason to dig deep into code (esp. if the code base is large), most people don't bother.  Our codebase is old and rickety.  There aren't comments.  The business process isn't exactly documented.  I don't want to wade through 2000 lines of Java code (per Java file) and try to understand the business behind it.

Unless you're working in a brand new project that needs a lot of code written (which I've been in), you are probably not doing a lot of programming.

**A program is about programming**

I work at a university.  Students, esp. computer science students, complain about our old system that runs a ""batch style"" programming system.  That is, the system shuts down overnight, does a bunch of data processing, and opens again in the morning.  They wonder why the system can't be Facebook or Google or YouTube, and be up 24 hours a day.

First, I think many such people would be surprised how many people (or really, how few people) are supporting these systems.  You'd think there's a team of 20 developers doing the best they can to keep this stuff running, and it's like a well-oiled machine, but sometimes it's less than half a dozen people, and we barely know the software's purpose, but can do minor fixes and keep stuff running.

Most software out there isn't, as they say, rocket science.  Sure, a few exceptions (say, SpaceX software).  Most of the software encodes business practices, and most business practices are a weird arcane set of rules that have no basis in math or science, but is just how some company works.  You write that in code, no matter how illogical it is.  And often, the code, and a few old timers' memories are what holds the project together.

Comments?  Hah!  A written business process?  Hah!  Programmers had one purpose: get the program to work.  They didn't think about who would maintain the code after they retired.  The only saving grace was their background wasn't so sophisticated as to create true spaghetti code (let's use regular expressions and finite state machines and design patterns up the wazoo!).

It's often not the coding language (like Cobol) that prevents modernization (although it's partly that), it's that the business process was never formalized, and there are 100,000 lines of code no one wants to read (and only represents an *approximation* of what the people who wanted the code wanted---and they're retired too!).

I often point out the scene in the third Matrix movie where the councilman is talking to Neo about how these machines support their underground city, yet no one quite knows who built it or how it works.  That's a lot of software out there.

Writing from scratch is not such a common experience (at least, from my perspective), and even when you do, it's not always as organized as it could be.  We may call it software engineering, but most engineering involves others looking at your work, and having input into fix it.  Code reviews aren't the same thing as people inspecting a building and seeing it every day.

We often don't rewrite things because the rewrite would be huge, would require a bunch of new developers, and doesn't even have the support of the people we're writing it for.

**As a programmer, since I wrote the code, my opinion is the most important**

OK, so you may *know* programming, but do you know the business you're working in?  Many a programmer or startup guy thinks ""You guys do something dumb, and I'm smart, so I can easily create a system that's 10 times better than the crap you use.  And you know what?  I'm not even going to consult you about how the system *should* work.  I'll make up my own.  You are such *idiots*!"".

Well, that may be, but they're used to the system they are used to, and they've thought about their own (arcane) business process for a long time, and if you build something that is completely different from what they are used to, they won't say ""oh, we lack the intellect to understand your truly great software"", they'll just not use your software.

If your user base is a bit older, and possibly, even if they aren't, they will be used to doing things in a certain way.  Maybe you can convince them that way isn't smart, but if they questioned your lack of comments, your lack of coding structure, how what you wrote seems like gibberish, you might get defensive as well.

The point is that you're often writing software or maintaining software by those who use the software every day.  As a programmer, you might even have the luxury to walk away after you write a code, never having used the code as your users use them, and they may ultimately hire someone new who maybe pays attention to what they actually want, even if you think it makes no sense.

**The program matters**

Many of you are learning to program.  You think companies are willing to throw out a million line codebase because it's *written in an obsolete language*.  Who's going to write it?  You? (You, Mr. Wineburg?)

A million lines of code is something that could take a lifetime to rewrite.  Do you plan to read the code to understand what it does?  Could you even do that?

In any case, sometimes people think the program is king (or queen, or some elected position).  It's not.

It's the data.

Say you've run this legacy program for more than a decade.  It fills up tables and table of data.  You, being a person who hates legacy code, wants new DB tables, and new ways of storing information.

Here's the problem.  What do you do with all that old data?  Oh, you want to throw it out?  Start new?  *Brilliant!*

**Every software shop is the same**

If you look at the world of practicing doctors, they seem to fall (roughly) into two categories: those working in hospitals on patients that need somewhat urgent care (or are doing elective surgery), and doctors with private practices.

Both seem to follow a similar structure, so that if you went from one personal care doctor to another, their structure would be about the same (waiting room, receptionist, files, someone to check your insurance, collect your copay).  If you go get your car repaired at a mechanic, you expect a similar experience.  If you go to a grocery store, you expect a similar experience.

People in the software industry have nothing close to this.  Each company may have widely varying setups.  There are companies with just one programmer that does everything.  Could you run a grocery store with just one person?  (Well, maybe if it's a tiny one person operation selling very few items).  Or a doctor's office (probably not because of insurances, unless you're some kind of boutique doctor that makes home visits, and even then, I suspect you're hire someone to do the billing, etc).

The big companies can afford to have their own internal support structure that makes it easier for their average developer to deploy code.  That support structure is often an internal thing, not an off-the-shelf, any small company can do it.  If you were a car mechanic and wanted to open your own small shop, you'd probably know exactly what you need (at least, the very basics).  These things probably have been (roughly) the same for decades, and even the new things, people probably generally agree on what is needed.

But if you're a small software shop...there's no such standards.  Do you want to use Atlassian tools?  Or do you use a spreadsheet, or emails?  Do you use some kind of company email?  Or do you use personal email?  There are lots of decisions, and it's hardly standardized in the industry. 

You may think, say, version control is important.  I guarantee there's some software out there (maybe rare), that doesn't use standard version control, and it probably does something important.  And the people maintaining it may not even understand what version control is and why you need it.  I'm serious.

It's like going to a surgeon with a bottle of whiskey and a bowl of leeches and they say ""What's anaesthetic?""

**We'll rewrite everything!**

""I know engineers, they love to change things--Dr. McCoy, Star Trek: The Motion Picture""

Back in the 1990s, the skill most programmers needed?  The ability to read other people's programs.  Most early programmers could write code, but they really had a hard time *reading* code, so they were almost always complaining that you needed a complete code rewrite to write that code in a way they could understand, without realizing the irony that the next programmer would want to throw away their code, and write it from scratch.

Joel Spolsky, who used to blog many years ago (Joel on Software), used to say rewrites were basically evil.  A functioning codebase should have been tested many times and many bugs have been removed.  A new codebase will introduce new bugs and will be buggy.  Software engineers aren't that good about creating bug-free code (after all, what is a bug?  are there specs?).  He said it's better to refactor to improve the code than to rewrite, but most developers like the feeling of an albatross of code off their neck that they don't care about bugs they introducing.

New code is wonderful!

But realistically, you need to know what you're building, and knowledge of the ins and outs of a programming language doesn't help you figure out what it is you're building.  And sometimes your experts also want to control the kind of software you're writing (mostly from a usability standpoint).

**I only have to understand a programming language**

Many self-taught programmers think ""it's all about learning a programming language"".

Some complain: why do I need to know HTML?  Why do I need to know CSS?  Why do I need to know SQL?  Why do I need to know version control?  Why do I need to know Github?  Why do I need to know math?  Why do I need to know business?  Why do I need a deploy system?  Why can't someone else test my code?  Why do I need a bug tracking/task tracking software?  Why do I need to read my emails?  Why do I need to update my tickets?

It's hard enough for most of you to learn a programming language.  But it's often the tip of the iceberg.  To support web programming, many programming languages have a web framework, and sometimes those web frameworks do a lot of magic, to ""help you out"", and now, you thought you understood how a programming language works, but you don't.  (We used *annotations*, you'll love how it's not crufty like the rest of Java!)

**Conclusions**

* You don't program hours a day unless it's brand new software, and even then.
* You'll probably spend as much time in meetings (if you get to be important enough) than programming.
* There are generally two kinds of developers that survive in a company/organization that's been around a while: those with strong technical skills, and those that have been around long enough to understand how things work (business-wise) even if they lack the technical chops.  Sometimes (rarely), they are the same person.
* You don't need to know computer science that well to write software that basically works, esp. if you know the business well.  A lot of software may require only basic math skills and some understanding of how the web works.  It's sort of the equivalent of a doctor that learned how to doctor online, and only learned 10% of what they should.  They may still be able to heal most basic things, but not be able to do some other basic stuff.  We don't trust that in doctors, but in software, it might be OK.
* Knowing the business is often at least as knowing the software, possibly more important.
* Your customers likely don't want you to make ""improvements"" to their software, esp. those that you didn't bother to consult them with.
* Most people tend to do maintenance programming, not green field (brand new) coding.
* You often have to teach yourself newer technologies.  Your senior developers aren't usually willing to be teachers and teach you from scratch.
* Communication skills are useful, but most developers became developers because they prefer to work alone.  This doesn't always lead to good software, no matter how skilled the person is.
* You shouldn't think you're writing code for yourself, but for the next person that has to maintain it.  Don't be too clever.  Someone else will have to deal with your code (and it could be you, two years later).  Maybe write some comments or something.
* Software can be developed in all sorts of ways, many not approaching ""best practices"" (which seems to change all the time).  Not everyone is on the cutting edge (see New Jersey Cobol programs for filing unemployment).  Being on that edge requires chasing a moving target that most companies think is a waste of time (why does Spring keep coming out with new versions--haven't they figured it out by now?).  This means that there is no typical way software is developed.  Yes, many companies share similarities (they have a Wiki, they use Jira, they use Bitbucket, they have a deploy system, they do code reviews), but it's not universal.  
* Your code is often not reviewed as much as it should, and you might get defensive about the comments you get.
* Code consistency helps (if you can tell who wrote the code based on stylistic choices, that may not always be the best thing).",2840,226,CodeTinkerer,2020-05-30 11:38:55,https://www.reddit.com/r/learnprogramming/comments/gtcwn4/the_misconceptions_of_a_programmers_life/,1,learnprogramming
lwxy8p,"As a CS student, I'm tired of the way the programming world is and I feel overwhelmed. [RANT]","No matter what it's about, a course, a project, a hobby, whatever, everyone you talk to spews out new terminology left and right as if you are just magically supposed to know about it. It just seems impossible to learn because it feels like the entire online development world is built on a huge impossible spider web of stuff.

We have a course where we need to build a web app for a company, so we started learning javascript on our own time. Great, I did some basic codeacademy stuff, know the syntax, then someone mentions React. Alright, what's that? I guess I'll start learning it, but oh obiously without ever hearing about it, you need something called NodeJs, oh and what's JSX, oh btw ""NPM"" is something as well, and you need to download ""create-react-app"" whatever that is etc etc.

And nothing is ever explained in detailed step by step, everything is just ""ok let's learn how to draw an owl, you first draw the entire owl, done"". It's just a given that you should already know all the tools, all the processes, methods..

So tired of this, I love programming but as soon as you leave your comfortable IDE for creating simple Java stuff for fun assignments, it just turns into a huge mess where 50% of the words you hear are just new shit you've never heard about.

NodeJs with React, react-native to the moon and Redux library for the p19rejvxsk4 holy fuck how am I supposed to understand anything. And somehow EVERYBODY ELSE understands it?!

I just don't understand how you do ANYTHING outside of the stuff you do in courses in isolated environments. I actually pass all my classes with top marks and help others but only because it's an isolated thing, we have this database, in this class, where we just use a terminal to shoot SQL commands, easy as hell. Ok now we just code a fibonacci sequence in Java or Haskell or whatever, easy.

But as soon as it's something outside of these isolated envrionments you just get swarmed with a million new things that are all connected, but start nowhere, and end nowhere, and nothing is black and white, and you feel like an imbecile not knowing it, and yet everyone knows everything somehow.",2841,497,Friendofabook,2021-03-03 16:29:48,https://www.reddit.com/r/learnprogramming/comments/lwxy8p/as_a_cs_student_im_tired_of_the_way_the/,0,learnprogramming
wekzx4,I GOT MY FIRST SOFTWARE ENGINEER JOB OFFER,"I am SO HAPPY right now. The job starts at 80,000 a year and TONS of good benefits with the job. I haven't even graduated yet. I don't graduate until December with my bachelor's in Computer Science. I should graduate with high honors I have had a 4.0 GPA the whole time in this university. Although I dont think a high GPA matters much to companies it only really matters for internships. I think this is an amazing opportunity. I didn't try to negotiate. I just took it. It's actually a mid level Full Stack Software Engineer position. So I'm surprised I got it but I do know a lot even though my only work experience is a full stack engineer internship. They said that I seem to have the experience of someone who has been working as an engineer for awhile now. I do have the skills needed to do the job!! I am a 31 year old female and I finally have the dream career I've always wanted. I used to think this would never be possible for me. I always thought I was too stupid to become an engineer. Hard work, coding everyday and working on projects on my own has helped me get to where I am right now. This is the best day of my life. I have been in college for years and I've worked so hard to get where I am. I just wanted to share the good news. I want you to know your never to old to become a software engineer. Work hard and practice everyday and you will get there someday. I literally spend all of my free time learning even on the weekends. There is so much to learn and the more skills you have the more money you will make. If you are in school, internships help. I wouldn't have gotten this job without that internship on my resume. I could not get any interviews before this internship. The work experience matters the most. I am just so happy right now. I can't believe it!

I hope to inspire more women to join the field! And anyone who wants to become a software engineer! Also feel free to message me for tips. I have a lot of messages but I will try to get back to everyone.

Edit: I did not have to do Leetcode. Thank God because I suck at it. I would not have got the job if they asked me to do Leetcode. Tell me to build a fullstack project and I can do that but since I'm currently taking my data structures and algorithms class I don't yet know a lot about it. But I will get good eventually! Not all places require Leetcode. Also I live in the USA on the East Coast. I think my personality played a huge part in me getting this job. I was a bartender for many years and I have good social skills. I could tell they liked me right off the bat. I think if you are a candidate that has good soft skills that gives you an advantage over others. One more thing, FOCUS ON YOUR GOALS AND NEVER GIVE UP EVEN WHEN IT GETS TOUGH JUST KEEP PUSHING YOURSELF FORWARD. It is not an easy path to get here, it is hard. But it is well worth it!

Edit number 2: I went to community college for 5 years it took me that long just to get my associates degree in computer information systems. I did not know about programming back then. Also the reason it took me so long in school to graduate is because back then I was kind of partying too much and doing stupid stuff. I also have had to work full time the entire time I have been in school so that's another reason it took me longer. I have always had to pay my own bills and I did not have a college fund my parents are broke. I just had to take mostly online classes, some on campus and work at the same time. That is what I am currently doing right now as well. It has not been easy. Many sleepless nights lol. So anyways after that I went to an actual university and started studying computer information systems and security. It is an accelerated bachelors degree program. So takes about 2 years to graduate I started in January 2021 for my bachelors. Anyways after doing that for a year I took a python class and I fell in love with programming. Like I really fell in love with it lol. I found my passion finally. So I decided last year in November to switch my degree to Computer Science. So I really have been only coding for a little less than a year right now but I am a fast learner and I really spend every single day(when I am not working) coding or reading documentation, building my own projects. I have like 40 repos on GitHub. I REALLY went all in. I still am working just as hard because I just love it and I wish I had found my passion sooner in life but I am glad I finally found it! I graduate with a double bachelors degree in Computer Science and Computer Info Tech and Security in December of this year. Also I am getting a BA not a BS because that is all my school offers.

Edit number 3: Here is my work history. I started working at my dad's greenhouse when I was like 12 but I didn't really get paid for that. I ended up moving with my mother at 16 and I got a job at dunkin donuts made minimum wage. At age 18 I started bartending I made like 12 to 13 (whatever minimum wage was at the time) dollars an hour and barely made any tips because the bar was in a very rural area. I bartended for 9 or 10 years. So until I was like 27 years old. Then I worked at a grocery store for 2 years stocking shelves making 13 dollars an hour until I was 29. Then I worked as an office admin for a small business for 2 years making 18 an hour until I was 31. Then in May, I put in my notice and quit my job to take this internship (best thing I ever did) it was a huge risk because I knew I would be out of a job after the internship was over but I knew this experience was so important and I could not miss this opportunity. I have bills to pay so of course I was worried. You gotta take risks sometimes. So I made 23 dollars an hour at this internship. Now I'm 31 a couple months later and I've landed a job as a mid level software engineer making 80 grand a year. So that's like 40 dollars an hour. This is insane. I am beyond excited. I will keep working hard and learning as much as I can!

Edit number 4: I learned Python first, then I took a web programming class and learned HTML CSS and JS. After that I decided to learn C# on my own for like a month because I was starting an internship that required knowledge of .NET and C#. So during that internship I learned an insane amount in just a couple months. I believe I am the most skilled in C# and .NET now and I actually prefer it over other languages. I think it is more difficult to learn than Python. But well worth it to really know how to program. I feel I didn't learn enough with Python. I think a C language is more in depth or Java. Their similar. But yes it's more difficult but I think it's better to learn a more difficult language first. I also learned Angular and Bootstrap at my internship which also come in handy for lots of jobs that still use it. React is popular too. So I learned all this in 9 months which isn't the norm. I think it usually takes people like at least a year or 2 to learn as much as I have. But I really put my all into it everyday and that is what you have to do unless you dont mind learning at a slower pace. Consistency is key to learn in ths field. I believe it's important to code everyday and learn something new. There's just so much to learn in this vast field.",2830,284,techgirl8,2022-08-02 19:40:57,https://www.reddit.com/r/learnprogramming/comments/wekzx4/i_got_my_first_software_engineer_job_offer/,0,learnprogramming
a1jeoa,"What are the most significant knowledge gaps that ""self taught"" developers tend to have?",I'm teaching myself programming and I'm curious what someone like myself would tend to overlook.,2829,437,Seanp50,2018-11-29 17:30:56,https://www.reddit.com/r/learnprogramming/comments/a1jeoa/what_are_the_most_significant_knowledge_gaps_that/,0,learnprogramming
gsansp,My (5+5)-step self-taught CS curriculum [Updated],"**UPDATE - README FIRST!** This is by no means a ""one size fits all"" curriculum, nor am I an evil creature trying to misguide those new in this field! **This is my PERSONAL roadmap that I will use, adapted to reflect my background, situation, and preferences.** The main reason I posted this list and the original one is simply to get feedback and guidance from all of you, fantastic people! If anyone wants to change and use this list as their own study plan, feel free to do so. But remember there's a huge amount of such curated lists all over the internet (which I used myself to create this personal one!), as many have mentioned in the comments.

>I recently posted a list of resources I'm going to use as a self-taught CS ""curriculum"" and got some fantastic feedback! Thank you all for your kind and thoughtful suggestions! Here is the updated list based on the feedback you provided. **Any future updates will be applied here.**

A little bit of clarification (apparently needed!): I am a young physician and at the same time a big fan of CS since I was in high-school! **I don't want to learn computer science or programming just to get a job**, I already have one :) Also I don't care if it takes a few years to complete even the first 5 steps.

>**To read my full explanation and see the old list, please check out** [**my original post**](https://www.reddit.com/r/learnprogramming/comments/gry4el/my_10step_selftaught_cs_curriculum_any/)**.**

&#x200B;

*\[I'll study high-school math during steps 0 and 1, but to keep it simple, I've put it under step 2.\]*

# Step 0: ""Coding""

* **0.00** [Harvard CS50x: Introduction to Computer Science](https://cs50.harvard.edu/x/)
* **0.01** [MIT 6.0001: Introduction to CS and Programming in Python](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/) \- *OCW*
* **Book**: [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/)
* **Practice** ***(a lot!)***: [Codewars](https://www.codewars.com/) and [Project-Based Learning](https://github.com/tuvtran/project-based-learning#python)

&#x200B;

>*The following courses are optional for me:*

* **0.02** [The Missing Semester of Your CS Education](https://missing.csail.mit.edu/) \- *MIT CSAIL*
* **0.03** [CS50x Web Programming with Python and JavaScript](https://cs50.harvard.edu/web/2020/)
* **0.04** [Full stack open](https://fullstackopen.com/en) \- *University of Helsinki*

&#x200B;

# Step 1: ""Programming""

* **1.01** [MIT 6.0002: Introduction to Computational Thinking and Data Science](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/) \- *OCW*
* **1.02** [Berkeley CS 61A: Structure and Interpretation of Computer Programs](https://cs61a.org/)
* **Book**: [Composing Programs](https://composingprograms.com/)

&#x200B;

>O*ptional:*

* **1.03** [University of Washington CSE341: Programming Languages](https://courses.cs.washington.edu/courses/cse341/19sp/) \- ([Coursera](https://www.coursera.org/instructor/~873260))
* **Book**: [Modern C](https://modernc.gforge.inria.fr/)

&#x200B;

# Step 2: Mathematics

* **2.01** [High school math](https://www.khanacademy.org/math/high-school-math) \- *Khan Academy*
* **2.02** [Set Theory](https://www.youtube.com/playlist?list=PL5KkMZvBpo5AH_5GpxMiryJT6Dkj32H6N) \- *Eddie Woo's Youtube playlist*
* **2.03** [Introduction to Mathematical Thinking](https://www.coursera.org/learn/mathematical-thinking) \- *Coursera (Stanford)*
* **2.04**  [AP Calculus BC](https://www.khanacademy.org/math/ap-calculus-bc) \- *Khan Academy*
* **2.05** [MIT 6.042J: Mathematics for Computer Science](https://openlearninglibrary.mit.edu/courses/course-v1:OCW+6.042J+2T2019/about) \- *OLL*

&#x200B;

>*Additional, non-required courses (just in case, because I like math!):*

* **2.06** [Introduction to Logic](https://www.coursera.org/learn/logic-introduction) \- *Coursera (Stanford)*
* **2.07** [Essence of calculus](https://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr) \- *3Blue1Brown's Youtube playlist*
* **2.08** [Essence of linear algebra](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) \- *3Blue1Brown's Youtube playlist*
* **2.09** [Analytic Combinatorics](https://www.coursera.org/learn/analytic-combinatorics) \- *Coursera (Princeton)*
* **2.10** [MIT 18.01: Calculus I](https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/) *- OCW*
* **2.11** [MIT 18.02: Calculus II](https://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/) *- OCW*
* **2.12** [MIT 18.03: Differential Equations](https://ocw.mit.edu/courses/mathematics/18-03sc-differential-equations-fall-2011/) \- *OCW*
* **2.13** [MIT 18.06: Linear Algebra](https://openlearninglibrary.mit.edu/courses/course-v1:OCW+18.06SC+2T2019/about) \- *OLL*
* **2.14** [MIT 6.036: Introduction to Machine Learning](https://openlearninglibrary.mit.edu/courses/course-v1:MITx+6.036+1T2019/about) \- *OLL*

&#x200B;

# Step 3: Algorithms & Data Structures

* **3.01** [Algorithms](https://www.coursera.org/specializations/algorithms) \- *Coursera specialization by Stanford* **OR**
* **3.01** [MIT 6.006: Introduction to Algorithms](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/) *- OCW*
* **3.02** [MIT 6.046J: Design and Analysis of Algorithms](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/) \- *OCW*
* **Book**: [The Algorithm Design Manual](https://link.springer.com/book/10.1007/978-1-84800-070-4)
* **Practice**: [Techie Delight](https://www.techiedelight.com/list-of-problems/)

&#x200B;

>*Advanced (optional):*

* **3.03** [Stanford CS 224: Advanced Algorithms](http://people.seas.harvard.edu/~minilek/cs224/fall14/)
* **3.04** [Georgia Tech CS 6515: Intro to Graduate Algorithms](https://www.omscs.gatech.edu/cs-6515-intro-graduate-algorithms)

&#x200B;

# Step 4: Computer Architecture/Systems

* **4.01** Nand2Tetris [Part 1](https://www.coursera.org/learn/build-a-computer) and [Part 2](https://www.coursera.org/learn/nand2tetris2) \- *Coursera*
* **4.02** [CMU 15-213: Introduction to Computer Systems](http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/)
* **Book**: [Computer Systems: A Programmer's Perspective](http://csapp.cs.cmu.edu/3e/home.html)

&#x200B;

# Note: The following 5 steps are optional and not as ""required"" as the previous ones.

&#x200B;

# Extra Step 1: Operating Systems

* **5.01** [UC Berkeley CS 162: Operating Systems and Systems Programming](https://people.eecs.berkeley.edu/~kubitron/courses/cs162-S15/sp15.html)
* **Book**: [Operating Systems: Three Easy Pieces](http://pages.cs.wisc.edu/~remzi/OSTEP/)

&#x200B;

>*Even more advanced (optional):*

* **5.02** [Georgia Tech CS 6200: Introduction to Operating Systems](https://omscs.gatech.edu/cs-6200-introduction-operating-systems)
* **5.03** [Georgia Tech CS 6210: Advanced Operating Systems](https://omscs.gatech.edu/cs-6210-advanced-operating-systems)

&#x200B;

# Extra Step 2: Computer Networking

* **6.01** [Stanford CS144: Introduction to Computer Networking](https://www.youtube.com/playlist?list=PLEAYkSg4uSQ2dr0XO_Nwa5OcdEcaaELSG) \- *Youtube playlist*
* **Book**: [Computer Networking: a Top Down Approach](http://gaia.cs.umass.edu/kurose_ross/)

&#x200B;

# Extra Step 3: Databases

* **7.01** [Berkeley CS 186: Introduction to Database Systems](https://www.youtube.com/user/CS186Berkeley/playlists) \- *Youtube channel*
* **7.02** [Georgia Tech CS 6400: Database Systems Concepts and Design](https://omscs.gatech.edu/cs-6400-database-systems-concepts-and-design)
* **Book**: [Architecture of a Database System](https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf) *(Link to PDF file)*
* **Readings**: [Readings in Database Systems](http://www.redbook.io/) \- *the ""Redbook""*

&#x200B;

# Extra Step 4: Languages & Compilers

* **8.01** [Stanford CS 143: Compilers](http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=Compilers)
* **Book**: [Crafting Interpreters](https://craftinginterpreters.com/contents.html)

&#x200B;

>*Next-level:*

* **8.02** [Georgia Tech CS 8803 O08: Compilers - Theory and Practice](http://omscs.gatech.edu/cs-8803-o08-compilers-theory-and-practice)

&#x200B;

# Extra Step 5: Distributed Systems

* **9.01** [MIT 6.033: Computer System Engineering](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/) *- OCW*
* **9.02** [MIT 6.172: Performance Engineering of Software Systems](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/) \- *OCW*
* **9.03** [MIT 6.824: Distributed Systems](https://pdos.csail.mit.edu/6.824/schedule.html) *- MIT CSAIL*
* **Book**: [Designing Data-Intensive Applications](https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable-ebook/dp/B06XPJML5D/) *(Link to Amazon)*
* **Papers**: [Distributed Systems Reading Group](http://dsrg.pdos.csail.mit.edu/papers/)

&#x200B;

*That's it! Again, any feedback would be appreciated!*",2833,139,None,2020-05-28 17:32:34,https://www.reddit.com/r/learnprogramming/comments/gsansp/my_55step_selftaught_cs_curriculum_updated/,4,learnprogramming
14ebjsw,Stepping down as Moderator,"Hello all,

I've been moderating /r/learnprogramming for a few years now, and I feel that it's time to step down.

Normally I'd just exit quietly, as I don't think most users care who their mods are. But due to the current situation on Reddit, I did want to make sure to be clear about a few things up-front, so I decided to make this post before I move on.

**I am not departing due to any internal disagreements with the rest of the mod team**. They're great, and I wish them nothing but the best in their ongoing running of /r/learnprogramming. This has absolutely nothing to do with them.

Mainly, I just feel that it's time to move on. I've been moderating programming forums in some form or fashion for well over 10 years now, and I need an extended break from that.

But what truly catalyzed my decision is the noise coming from the Reddit admins. The ""landed gentry"" comment really struck me wrong, as if it's somehow the moderators' faults that the Admins created the subreddit system the way they did. So, if they have such little respect for us, then I have no desire to continue volunteering my time to maintain a corner of their site.

I'll still be around answering questions, as helping the next generation of programmers is something I truly enjoy. But I will no longer be part of the mod team.

Thanks for taking the time to read, and I hope you continue to enjoy using /r/learnprogramming.",2821,165,insertAlias,2023-06-20 13:44:22,https://www.reddit.com/r/learnprogramming/comments/14ebjsw/stepping_down_as_moderator/,0,learnprogramming
fla083,Codecademy is giving free pro membership to students for the rest of the school year,"Happy online learning\~  


 [https://pro.codecademy.com/learn-from-home/](https://pro.codecademy.com/learn-from-home/)",2815,223,AceEspy,2020-03-19 13:27:22,https://www.reddit.com/r/learnprogramming/comments/fla083/codecademy_is_giving_free_pro_membership_to/,0,learnprogramming
k2bjxx,I can teach you python.,"I have a lot of free time on my hands so why not make good from it. I can teach you the basics + fundamentals of programming in Python. Free of charge I just wanna help out 😊

I will stream tonight very basic stuff for people that might be interested:
https://discord.gg/BWvRQmqEex

I have compiled a little document with some helpful things:):
https://drive.google.com/file/d/1bR_Wo_-ZHZC5h0RqP5_Gu4qkrlsAj18M/view?usp=sharing

Edit: Just send me a PM or chat if you wanna link up. Doesn't matter if you have never touched code before.

Edit 2: Thank you for the kind words! 

Edit 3: Due to the lack of seriousness of people. Please if you aren't serious and just wanna muck about I am sure there are plenty of other options out there.

Edit 4: Since many of you asked I am a FrontEnd Developer 😊. HTML5, CSS3, JS, TS, React, React Hooks, Angular, Python, Django

Edit 5: How this works? The I want it to work is over discord voice. It's 1 on 1 since everyone is at a different pace. We will solve some problems together and I'll asnwer any questions you might have.

Edit 6: After 100s of replies I am not taking anymore people on at this time cause I do need to take time to respond to everyone. I had a lovely session with a very nice gentleman from the states hope to help out many more 😊. Good luck to the rest.

Edit 7: The reason I did this is because back when I was just starting out I had wished to have someone I can share my experience with. Someone who was on my level or a bit more experienced that could guide me and help me out with the logic of some problems. I am not making YouTube videos there are plenty of those out there. I am just here for the people who need a personal touch. I am sorry I can't help everyone at the end of the day at least I helped a few folks get up and running I hope they turn out to be better developers than me.

Edit 8: This is not about money. This is about being a decent human being who is just looking to help people work for a better future for their families.

Edit 9: Its 7:20AM right now I talked to 3 wonderful students that were absolutely lovely. I am tired but I am gratified that I helped at least someone become a better person today. God bless you all😊.

Edit 10: If any are still interested hit me up in a week or so to ask if I have any spare time 😊.",2812,172,mikaki97,2020-11-27 22:53:16,https://www.reddit.com/r/learnprogramming/comments/k2bjxx/i_can_teach_you_python/,1,learnprogramming
fgi8i7,"After a year and a half of programming, I just learned about double clicking to highlight a whole word and triple clicking to select a whole line and quadtruple clicking to select all. NEVER AGAIN. What are some must have tricks and shortcuts for programming.","Oh god, knowing these shortcuts would have saved me so much time. 

                                                 

On the other hand, this is a real life powerup.",2807,478,CockGoblinReturns,2020-03-10 18:14:09,https://www.reddit.com/r/learnprogramming/comments/fgi8i7/after_a_year_and_a_half_of_programming_i_just/,0,learnprogramming
kzrcl9,Some good advise I heard today: “Future You will never think Current You was too old to learn how to program”,"I had been in my normal click hole today too see if I’m too old to learn to become a software engineer. One person said something that made me feel a lot better: some people in their 30s would say to him “if I only became a software developer in my 20s I’d be set now” and then other people in their 40s would say “well if I only became a software engineer in my 30s then I’d be set right now.” (Video link: https://youtube.com/watch?v=vpKh-29u_EQ). 

So the moral is basically that the future version of yourself will never think the today version of yourself was too old to become a software developer. Cheers.",2812,155,bobby_vance,2021-01-18 09:26:03,https://www.reddit.com/r/learnprogramming/comments/kzrcl9/some_good_advise_i_heard_today_future_you_will/,0,learnprogramming
10tj5el,"I finally did it you guys!! I just became a Junior Dev!! No tech background, no connections!","I don't have much people to celebrate it with so I wanted to so share my story here as a way to celebrate.

My background is in business. Started learning how to code early last year. I did Codecademy basic html and javascript first then transitioned to Udemy courses. I finished Angela Yu's Web Dev course. I also tried Zero To Mastery's web dev but only did it about halfway. 

Then after a month, I joined a 12 week coding bootcamp. It wasn't the best and I knew that. But my intention wasn't to learn. Because I knew I could just learn from any resources online. My intention was to meet other developers in the area and get a chance to know what it's like to work in teams. 

The bootcamp was online but it was through a local school (not gonna say here for anonymity). 

After graduating, I didn't do any job searching yet. I felt I wasn't ready yet and needed to build a solid portfolio first that wasn't just all school projects because non of them were really impressive to me. 

I decided to take another Udemy course - MERN stack by John Smilga. This was a game changer for me. I learned more from this than the bootcamp I just went through.

After finishing the course, I built my own full stack project. It took me almost a month.

Then after that, I started slowly applying. And when I say slowly, I meant it. Some weeks I never sent in an application. The most applications I've sent in a week was probably 5. And I don't have a list of all applications sent but I'm certain I've sent less than 60 total.

Why so little? I was being super picky. The last few companies I worked for were both great. Amazing bosses, great coworkers. I didnt want to settle for just anything. And if you havent checked yet, most of the job listings out there suck. 

But even with my pickiness, I managed to get 5 interviews and one of those I made it to the final stage.

You're probably thinking that you cant afford to be picky because its hard enough to get your foot in the door. Thats true too. But it just depends on how long you're willing to keep grinding.

Keep in mind, while I was job searching, I kept working on building new projects. I wasnt just sitting around. So my portfolio started having better projects and my resume had more relevant technologies listed.

At about the 6 month mark after bootcamp. This is when I got to the final stage of one company. At this final interview, I learned more about the company and their policies and let me tell you, this company was just horrible. At this point, I was hoping I would not get a call back. (I didn't thank god)

But that last company was so traumatizing, It made me question if this was all worth it. If I should keep going forward or keep going at it. But I realized, the job search process wasnt going anywhere. Submitting my resume felt like throwing my resume in a blackhole never to be seen again.

Plus, the interviews I did have were all the same. Waste of time ""we like you but we need someone with more experience."" (Then why did you even setup this interview??) I even had one interview, where the CEO of a local.software company personally messaged me on LinkedIn and setup a meeting. Only to ask ""how did this meeting happen again?"" when he entered the video conference room. Frustrating to say the least.

Anyway, at this point, i just quit. Not quit learning or building. I still kept building. But I just quit the normal job search process.

I say normal because the next thing I did led to where I am now. Instead of waiting for a door to open up for me, I decided to make one.

I began googling smaller local software companies that I would want to work for and who would most likely be willing to take in fresh blood. There werent much in the area but I went through all of their websites (since you can tell a lot about a company just by looking at their websites) and weeded out the bad ones.

Then I ended up finding just one. And to my surprise, it was the perfect company. It reminded me so much of the last company I worked for - the values, the culture, everything. Almost too good to be true. I checked their socials and all I could find about them. It was all consistent. 

They werent hiring but I took a chance at sending in an email. I didnt use any templates. I knew that wouldnt work for this company. They werent looking for a set of skills, they were looking for a team member. Culture/values was more important than skills.

I studied their language, choice of words and constructed an email using that. (Later on during the final interview with them, I learned that my choice of words in that email actually impressed the CEO. It showed my attention to detail)

Just a day after sending that email, the CEO personally responded by saying he reviewed my projects and they could possibly have a spot for me.

1 behavioral and 1 technical interview later - i got the job!

Important lessons I learned:

- Coding skills are important but soft skills are more important. Most companies will start you out with a behavioral interview and if you cant pass that, you're never gonna get to that technical portion. I only made it this far because the person who initially interviewed me actually loved my personality and enthusiasm.

- Build a solid portfolio of projects that are your own, and that touch on problems in your life. I would say this is the other major factor that got me that job. The technical interview was just me demoing a project of my choice. I had to demo it to the CEO(also a dev), another senior dev, and HR. I chose to demo an unfinished project but I chose it because it had the most meaning and motivation. It was nothing too impressive but I took something from my life that I wanted to work on/improve and built an app that would help with that. 

And that was exactly what they were looking for - problem solvers - not superstar coders. And not the leetcode kind of problem solvers but the real world problems kind of problem solvers.

- Don't get too caught up on what to learn. Instead, keep building and build challenging enough projects. If your projects are challenging enough, you'll find yourself experimenting with and learning new technologies. 

And lastly, progress isn't linear and the road is bumpy. But you'll get there if you set a goal and keep learning.

This last one is the most important. From reading my story, you didn't read about the countless mental and emotional breakdowns I had. The long breaks I had to take for my mental health. The burnouts. The questioning myself. The almost going broke and running out of money. 

The road to becoming a developer is tough. But go easy on yourself. You're allowed to feel sh*tty. There will be days or weeks when you just dont feel like it. Dont force it. If you do, you'll just get frustrated. Take a break then come back.

When you feel like crap - remember the rule of thirds.
- a third of the time you'll feel good
- a third of the time you'll feel like crap
- a third of the time you'll feel okay

If the ratios are off. Reevaluate what you're doing. 

Good luck to everyone still going at it. You'll get there! And sorry if this was too long!

Edit: Hey all! I see your comments. I promise to get back with each one of you in a bit. I'm currently out and about. Thank you to all those who sent their congratulations!

Edit2: hey again! I'm trying to respond to as much as I can but I'm only human! Lol thanks again and sorry in advance if I miss your comment! It's a little overwhelming trying to answer each question!",2790,186,mainne1078,2023-02-04 15:33:45,https://www.reddit.com/r/learnprogramming/comments/10tj5el/i_finally_did_it_you_guys_i_just_became_a_junior/,0,learnprogramming
dr49iw,43 yrs old just got my app approved for the Apple App Store. It's never too late to start.,"I see lots of people on this sub asking where they can get resources from or what they should be learning or how to go about learning. I wanted to say to everyone on here, whatever stage you are at, stick with it. Just starting out is the first step, no matter how long it takes you can get there. 

I work full time, have two young kids, spend time in the gym and hanging with my wife anything else I consider spare time, its how you use this spare time which is key. 

You may find yourself at the end of a long day with only 30 minutes to spare, **use them**.  30 minutes learning is better than no minutes. If you get your head round some really basic principles its time well spent. And even if you don't and you find yourself frustrated at the end of it because you haven't got it, trust me and every programmer will attest to this, the solution can sometimes just appear to you later on and if it doesn't you'll at least be 30 minutes ahead the next time. 

Have a goal and stick to it. This is straight from Arnold Schwarzenegger's biography. The amount of 'ideas for apps' I've had is shocking. I'll start work on one app only to get distracted with an idea for another app. Either this is brought on by learning something new or seeing another app that gives me an idea. My machine is full of dozens of half baked potential apps that just go no where and while you do learn something you achieve nothing with that knowledge. Once you have your app idea and you start, unless it really really really is a bad idea, stick with it. The satisfaction you get from reaching development milestones is fantastic. I can't emphasise this enough. 

Don't be loyal to your learning resources. Everyone has their favourite sources whether they are from Udemy, Youtube or somewhere else. These can be great for start to end projects and tutorials, but really all you are doing is what you are told. I found the best thing they are all for is the basics. Storyboard (if you use them) button actions, loops etc. After this you're generally on your own as they never have examples that relate specifically to you. Find what you need to learn and then teach yourself by applying it to your project. 

Some stand out resources for me are: 

Jared Davidson -- Youtube. He covers almost everything that you may want. Some are out of date,  but this forces you to learn what's changed and how to apply it. 

Nick Walter -- Udemy. Great at the basics and some complicated principles. His teaching style is super engaging and fun to watch. 

**Stackoverflow -** Like a lighthouse in the dark. 

Discipline. Motivation is great, but its fleeting. Discipline, however, is not. A random person I met once said to me ""Its amazing what you tell yourself you don't have the time for"" and that's so true. The amount of days I'll think I don't have time when in truth I'm being lazy. Once I got the discipline of spending the time it becomes much easier then and the next and so on. Ask anyone who goes to the gym. Many days they will hate it but they have the discipline to keep at it and that's what gets results. 

I'm not here to promote my app because this post isn't about that, but if you do want to see it PM me and I'll send you a link. This is me saying I've crossed that milestone and today I'm a published app developer and this is just the start. 

peace.

Edit. 

I’m being asked for the link so rather than copy paste many PM’s. (I’m on mobile). Here’s the link and the back story to the app. 

I have tinnitus and work in a sometimes noisy office. I made this to go with noise cancelling headphones and I was encouraged to publish it. It’s not the greatest app but it’s a start. https://apps.apple.com/gb/app/calming-sounds/id1483074321",2786,129,mokadillion,2019-11-03 18:14:52,https://www.reddit.com/r/learnprogramming/comments/dr49iw/43_yrs_old_just_got_my_app_approved_for_the_apple/,1,learnprogramming
hjguyd,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUL2020FREE","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUL2020FREE (on Saturday the code changes to JUL2020FREE2)

https://www.udemy.com/course/automate/?couponCode=JUL2020FREE

This promo code works until July 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code JUL2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",2780,176,AlSweigart,2020-07-01 19:11:48,https://www.reddit.com/r/learnprogramming/comments/hjguyd/automate_the_boring_stuff_with_python_online/,1,learnprogramming
6ghvjo,"I am a self taught programmer developed my very own Jarvis, called Stephanie, an open source virtual assistant built to control and automate any task and so can you!","[Stephanie](https://slapbot.github.io) is an open-source platform built specifically for voice-controlled applications as well as to automate daily tasks and hence imitating much of an virtual/personal assistant's job. It is written in python and I call it more as a framework than an application.

There are lots of amazing things about Stephanie, and I'd be listing few of them.

- **Beginner Friendly** - The Ultimate goal of this project is to create a general awareness among all sorts of people irrespective of their career background to get them interested in 'building something cool', that's why installation is made quite simpler but not the simplest to help general public learn programming in a very different way where they could feel they are making something cool while learning the essence of programming.
- **Minimal Hardware Requirements**, seriously, you got a machine? windows or linux? a speaker of any sort? headphone, headset and a mic which could be anything like inbuilt, bluetooth or just connect a freaking phone.

- **Privacy**, Stephanie offers lots of engines to adjust your privacy as needed, in contrast to other commercial based applications which tracks all of your data (listening everything)

- **Difference**,  Now you must okay dude, but how is it different from siri, cortana or echo and other commercial softwares?  Well first of all Stephanie is completely open source, even the algorithm which is used to predict the intent (I've written a paper on it which I would highly recommend to anyone interested in this link :  https://slapbot.github.io/documentation/resources/algorithm ) is open-sourced so basically you are using a software which is community driven.

- **Modules**,  So since Stephanie is completely open-source, you can integrate it with lots of public/private API's to take the application to new level, don't believe me, check out some of it's functionality.

Let's take a brief look at social networks, shall we? How about twitter eh?

***You***: Hey Stephanie, Do I have any twitter Notifications?

***Stephanie***: Your latest tweet has been favorited by 20 people, whereas @rayhudon mentioned you stop swooning over real madrid, they ain't gonna win 3 CLs consecutively, that's nuts.

(You can tweet something with the help of stephanie too, similarly I won't be talking about each one, since there are too many functionalities but you are welcome to check it for yourself.)

Okay so How about facebook? Do you ever forget your friends birthdays? well fear not, Now Stephanie got your back.

***You***: Hey Stephanie, Do I have any birthday reminders?

***Stephanie***: Oh Yes! your friend Karan Sachdeva has a birthday today.

Wanna write something in facebook as a wall post to show off among your friends? Cmon be humble dude.

***You***: Hey Stephanie, I wanna do a status update on facebook.

***Stephanie***: So, What's on your mind?

***You***: How can mirrors be real if our eyes aren't real.

***Stephanie***: 'How can mirrors be real if our eyes aren't real.' has been put up as wall post.

Now again this is just social networks, there are many more modules to work with, for instance: Ever wanna note something on fly? no worries mate, your **Evernote** Account got your back with it's integration, or maybe you want your unread emails? **gmail** is there for you, **weather updates**? forecast? *latest news** information, forget to wish your mom on mother's day? sync your **google calendar** man. Are you a movie-freak? Jesus, **imdb** got you, **Restaurants suggestions**? **Wikipedia**? **Quick Answers** to general IQ questions? And My personal favorite **Football** Module which has alone more than 30 functions to let you daydream your favorite football team or league.

**DEVELOPER FRIENDLY**,  Now this is the real deal right here, The reason I call it Jarvis v2.0 is because  I believe Stephanie more as a framework than an application and with it's extensive documentation  and a really cool interface you can built one of the most complex and intricate programs with it, Honestly, I feel a person can even create an  enterprise based application from it. The Developer guide written is basically for programmers to guide them on the process of how to write their own modules and extend the functionality of Stephanie, wanna sync up your Quora account? Reddit? Some obscure internet forum? Control your Air Conditioner? Door handles? Wifi Routers? Cool just write your own module and integrate with  Stephanie using a really nice interface which gives you all the functionality needed to built it out of the box.
-

Or maybe you just wanna integrate some other guy's written module? Awesome with a community and easy integrate methods, do whatever with Stephanie, change it's name to Munni or stick with the current one, It's 100% customizable and the decision is in your hands.


Finally, this is a video where I kind of explain about Stephanie, with few demonstrations if anyone is interested and doesn't wanna read up this post.

https://youtu.be/Pp5dXbWZsrU?t=1m40s

And at the last, the link to main website to know more about it :-
https://slapbot.github.io/
As well as the link to algorithmic paper : https://slapbot.github.io/documentation/resources/algorithm/

Github repo of Stephanie: https://github.com/slapbot/stephanie-va
Github repo of Sounde: https://github.com/SlapBot/sounder",2762,154,Drazxie,2017-06-10 21:58:28,https://www.reddit.com/r/learnprogramming/comments/6ghvjo/i_am_a_self_taught_programmer_developed_my_very/,0,learnprogramming
nhs87h,"From not knowing what an object is is to my first software engineering job in 6 months, self taught, in the UK","I've just accepted an offer as a remote Junior Software Engineer. My head is spinning.

For some background, I'm a 29 year old insurance underwriter from the UK. I've had one job since graduating university in 2013 with an Economics degree and I realised after a couple of months of the pandemic that I only really loved the culture of my job, and there wasn't much of the role itself that I liked. The pandemic definitely made things worse, with angrier customers and higher workloads. I had no previous coding experience, but had built some complicated stuff in Excel and learned a tiny bit of SQL (mostly just Googling how to edit existing queries) for data analysis. 

After learning some Python basics on Codecademy, I wanted to test the waters with web dev before pursuing data science. I played around with some sandbox tutorials before I found [The Odin Project](https://www.theodinproject.com/) through here and after doing the HTML/CSS basics of the Foundations track, I never looked back. I did the JavaScript path and was halfway through the React section when I started applying. The way that the TOP program helps you set up a working environment was key to making me feel productive and I really looked forward to pushing my project updates to GitHub. Building up the green dots on my summary was a great bit of visual feedback to keep me motivated. I also became much better at breaking down a big problem into smaller, Googleable questions which is honestly half the battle with learning to program.

After six months of 15-20 hours of TOP a week on top of my full time job, I finally felt ready to start applying for positions on 24th April. The interviews actually were not that technical - the most I really did was go through my projects and explain what I did and why I made the choices I did. I had no idea about a couple of code questions, but wasn't afraid to say ""I don't know, but I would be very willing to learn and find out"". My main techs on my CV were HTML/CSS, SASS, JS, SQL (barely), git and React. I've been hired to learn Java on the back end, before contributing to some React Native apps in a few months.

A couple of insights I learned through the process of applying for a job;

* I actually had very little success with jobs that were being gatekept by recruiters, despite reaching out a few times before applying for a chat - I got a lot more traction with companies advertising directly. 6/8 companies I applied to directly interviewed me or gave me a code challenge, and 0/15 recruiter advertised positions moved my application forwards. I didn't even hear anything back except 2 generic rejection emails.

* Being a self taught developer is actually a really good thing in the eyes of a lot of hiring managers. It demonstrates passion (""I could never have done this on my own if I wasn't passionate about code"") and that you're used to not panicking when you're struggling to solve a bug.

I read somewhere on the Odin Project Discord that between their ""Welcome"" page and the page after the environment set up/first HTML/CSS code challenge, the traffic dies down by like 80% or something. It's wild. The most valuable skill you can learn is to get comfortable with being in that shit place where you don't know how to fix a problem and just keep hitting it from different angles until you hit gold. It will genuinely be weird to have someone to ask for help.

That's it! I'm currently finishing up my insurance job and doing a little bit of work on my first side project, and I can't wait to get started. If I can help anyone at all, please let me know. Here's my [GitHub](https://github.com/rgneville) for anyone interested.

edit: added a link to The Odin Project, it really is so awesome for a free resource",2751,255,docdaneeeka,2021-05-21 13:14:19,https://www.reddit.com/r/learnprogramming/comments/nhs87h/from_not_knowing_what_an_object_is_is_to_my_first/,0,learnprogramming
ixzfb6,Please tell me I'm not the only one here who reads the same documentation for almost 45 mins and still dont understand it,"It's like when I'm reading it, I'm just reading it. By the time I understood it, it already took more than an hour. I'm learning react-dnd and everything I read just goes outside my brain. Before that , I was learning how to use references in react and it took me a long time to learn it and realize how simple it can be used.

I'm at the state of creating projects to make my portfolio and right now, I feel worried that once I get a job and I dont know something, I might end up wasting my time learning something simple",2738,232,Fralalart,2020-09-23 00:04:10,https://www.reddit.com/r/learnprogramming/comments/ixzfb6/please_tell_me_im_not_the_only_one_here_who_reads/,0,learnprogramming
oedt9j,After 6 months of self teaching I finally got a job,"Sorry if not allowed but I'm so happy.

I've been learning JavaScript and front end since around February and I've finally landed my first job, it's full stack and a lot of PHP but it adds to my experience and I'm grateful for the chance.

For those of you wondering, I'm based the the UK and been studying practically full time, sat at home forcing udemy courses down my throat and giving myself projects.

Best of luck people still trying to switch careers, I've managed to do if and our senior developer did the same 5 years ago so it does happen, best of luck.",2739,282,ShuttJS,2021-07-05 18:57:40,https://www.reddit.com/r/learnprogramming/comments/oedt9j/after_6_months_of_self_teaching_i_finally_got_a/,1,learnprogramming
e4sm2o,"""Automate the Boring Stuff with Python"" Udemy course is free to sign up for the next 72 hours: DEC2019FREE","You can use this code to sign up for the Udemy ""Automate the Boring Stuff with Python"" course for free:

https://www.udemy.com/course/automate/?couponCode=DEC2019FREE

During the month of December, you can also use DEC2019 to sign up for $14 instead of the usual $50: https://www.udemy.com/course/automate/?couponCode=DEC2019

Due to the way Udemy now does promotions, I'm limited in how many discount codes I can make each month, so there's no way for me to make more after the 72 hour period, which ends roughly Wednesday night 7pm Pacific time.

I'll have the second edition of the book in HTML format online, uh, soon. I've had some delays getting it ready. The online course follows the 1st edition, and I won't be able to update it until probably mid-2020. I'll write up a blog post about what exactly is new in the 2nd edition soon too. Go ahead and get started: the Udemy course is still useful.

The 1st edition is free online under a Creative Commons license, but if you want to buy a print copy of the book, I recommend getting it directly from the publisher instead of Amazon; you get DRM-free ebook copies in PDF, Kindle, and epub formats for free with the print book: https://nostarch.com/automatestuff2",2733,209,AlSweigart,2019-12-02 03:03:41,https://www.reddit.com/r/learnprogramming/comments/e4sm2o/automate_the_boring_stuff_with_python_udemy/,0,learnprogramming
df7tll,"I attempted to learn JavaScript, Python, C#, and more from Codeacademy, Udemy, freeCodeCamp, and elsewhere. Here's what I found.","Context: I'm a tabletop game developer and digital marketer, and, having spent a long time around games and computers, decided I wanted to learn to code about 3 years ago.

I set off as many do by searching, at great length, for what language I should learn, and where from, returning to this topic several times over the course of my journey.  I came across several threads suggesting one language or learning platform over another, and thought to share my particular experience in case it's helpful for someone else in the same discernment process.

Disclaimer: I'm not a professional programmer, and although I am using my skills to benefit my work (you can read about my search for a prototype framework [here](https://www.reddit.com/r/gamedev/comments/dcfih6/ive_attempted_to_make_the_same_2d_game_prototype/)), coding continues to be a hobby for me rather than a source of income, whatever that tells you.

Also disclaimer: I'm not attempting to position one language or learning platform over another, and I quite obviously haven't tried to learn every language out there, on every platform.  The following is just my experience trying to figure out the most sensible way forward in an admittedly confusing environment.

You can also **skip to the bottom for the TL;DR**.

**Prologue: C++**

I'm not quite sure if I already knew that C++ was and continues to be a cornerstone in video game development, or if I saw it in one of those ""What Programming Language Should I Learn"" infographics that are about, but I wanted to know more about how games are made and how to talk to the computer.  I'm pretty tech-friendly and have built or tinkered with my own PCs, thinking that might lend itself to the experience of learning how to code.

Holy smokes was I way out of my depth.  I did a few tutorials online (I think through [learncpp](https://www.learncpp.com/) or similar) and soon realized that I would need more guidance to understand basic object oriented programming principles, in perhaps a more readily accessible language, than I was finding in learning C++.

**HTML, CSS, JavaScript, and Python: The Codecademy Experience**

Before embarking on this adventure, I already had a little HTML experience, and came across [Codecademy](https://www.codecademy.com). I very much liked the ability to do tutorials from within the browser and without having to set up an IDE (doing so for C++ had been a trying experience), and quickly consumed all of Codecademy's lessons on HTML and CSS.  The natural path from that point was to do the JavaScript course, which I enjoyed, and I soon found myself in ""tutorial purgatory"" (not my reference), working through the Python course and others.

I should also mention that I completed Codecademy's courses as a free user, not wanting to pay a subscription fee for what they were offering at the time, which included projects and mentor support.

I learned a lot of basics from Codecademy and general OOP principles, but didn't wind up applying much of it without a clear path forward.  I returned to my search (who am I kidding, I've spent a LOT of time concurrently researching other languages, learning platforms, and bootcamps throughout the whole process) and decided I wanted to learn more about game development through courses on Unity.

**C#: The Udemy Experience**

I found [Ben Tristem's Unity course](https://www.udemy.com/course/unitycourse/) on one of Udemy's  perennial 10000% off sales, and worked diligently through the tutorials to build clones of 2D brick breaking and other games, learning just enough C# to get by but not enough to feel confident in making anything myself.

Unity itself was probably more of a roadblock here than Tristrem and co.'s instruction, which was actually quite good.  The Unity editor is a beast of an engine, with a lot of good tools that are impenetrable to a novice user (again, you can read more about my experience with Unity [here](https://www.reddit.com/r/gamedev/comments/dcfih6/ive_attempted_to_make_the_same_2d_game_prototype/)).

I still feel like I learned a lot from the courses and the simple act of being exposed to C# and Unity's desired work flow, but wasn't getting enough out of the experience to continue.  A friend of mine tipped me to take a look at freeCodeCamp, which is where I went next.

**Back to JavaScript: The freeCodeCamp Experience**

On first blush, [freeCodeCamp](https://www.freecodecamp.org/) has the look of a less flashy Codecademy or [Treehouse](https://teamtreehouse.com), but I liked how straightforward the tutorials were and without feeling like I needed to get past a paywall to make progress.  I picked up where I left off with learning HTML and CSS, making good progress until I got to the Responsive Web Design projects that are required to finish the first section and receive a certification.

I can say with certainty that this was the moment (or series of moments) of my ejection from tutorial purgatory.  For a novice with no real professional web design experience, and a willingness to figure out my own solutions without Googling the answer, the projects were *hard*.  I eventually won out and made a couple of silly sites that satisfied the requirements, but the experience spurred me to work through several more freeCodeCamp tutorials on JavaScript front end libraries and back end frameworks.

More importantly, I started to work on my own web-related projects on [CodePen](https://codepen.io/) and game projects using a bunch of different engines.  I also started using Python to do some basic social analytics in my day job, and found it helpful.

**Post-Tutorial Purgatory: The Documentation & Googling Experience**

Fast forward much time later, and I'm now working on several game-related projects in [Phaser](http://phaser.io/) and Unity (most notably, a [digital prototype](https://sominator.github.io/hacker-battles/) for a [tabletop card game](https://www.kickstarter.com/projects/msfarzan/entromancy-hacker-battles) I'm developing).  I've spent a whole heck of a lot of time in framework documentation and Stack Overflow looking for answers and best practices for stuff (linking [this post](https://www.reddit.com/r/gamedev/comments/dcfih6/ive_attempted_to_make_the_same_2d_game_prototype/) one more time for good measure).  I also have developed friendships with a few colleagues who are themselves programmers, and it's been helpful to run code by them for advice and feedback.

One thing that's been helpful about working on my own projects is just the basic experience of setting up a workflow.  Learning to use the command line and Git in concert with setting up NPM and a code editor, for example, was eye opening (particularly coming from CodePen, which just does everything for you).  For better or worse, most tutorials don't expose you to the nit and grit of the tools that you'll need to get your work done, and there's a lot to be learned.

If you're reading this and looking for the ""and I just got my first job as a programmer!"" statement, I'm sorry to disappoint!  That hasn't been my objective (at least thus far), but I do have some basic TL;DR learnings to share that may be helpful for anyone who's also on the search for a programming language or a platform on which to learn it.

**TL;DR**

* **JavaScript:**
   * Pro: A very good entry point into learning object oriented programming, particularly if you're interested in any kind of web development (front or back end).  You can learn this through most platforms, but my experience was best served by freeCodeCamp.
   * Con: Many sites will tell you that it ""just runs in your browser"" so you ""don't have to set up an IDE"" and is thus easier to learn, but this mindset will only take you so far.  If you're going to do any meaningful development with popular JavaScript frameworks (React, Vue, Express, etc.), you'll wind up setting up something IDE-adjacent with a code editor, package manager, dependencies, etc., *without* the kind of support you'd get from, say, setting up .NET or similar.
* **Python:**
   * Pro: Super friendly for newcomers if the curly braces in other languages are intimidating at first, and a good point of entry if you're interest in getting into back end programming or data science.  I had a good initial onboarding experience through Codecademy.
   * Con: Your options are a little limited if you're looking to get into front end or game development.  There are frameworks, for example, that allow you to make games ([PyGame](https://www.pygame.org/), for instance), but if you're specifically looking into game development, you'd be better served elsewhere.
* **C#:**
   * Pro: A very pleasant language that's well-supported by Microsoft and the open source community.  With it, you can do back end development, make desktop apps, create games (mostly with Unity but there are other engines like [Monogame](http://www.monogame.net/) out there). It may be an unpopular opinion, but I'd recommend first learning C# through [Microsoft tutorials](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/) or elsewhere and *then* learning Unity to ease some of the cognitive load imposed by the editor's complexity.
   * Con: Not much to speak of here, unless you really *don't* like Microsoft or really *do* want to work on front end web development.  I could speak volumes about how Unity can improve its user experience, for example, but C# itself is great.
* **General Thoughts:**
   * One of my frustrations in my process of asking the question ""what programming language should I learn?"" was what I felt was the insufficient answer of ""well, what do you want to build?""  I encountered this answer a lot, and don't think it's the right way of approaching learning how to program.  A beginner doesn't have enough context to know what they *can* build, let alone the route to get there (unless they're the type of person that *just wants to make games* or *just wants to land a job as a web developer*).
   * A better answer would be to say, ""try a few tutorials on different sites and in different languages, and see if something strikes you as interesting.  If it does, stick with it; if it doesn't, pick one at random and see where it takes you.  The stuff you'll learn will help irrespective of what you actually wind up doing.""
   * Additionally, if you can force yourself to get out of the tutorial ecosystem and just *make anything* outside of the protected environment that's been set up for you, it'll help teach you things you'll need to eventually know, such as setting up an IDE, searching for answers to questions, and sharing your work.

I hope this post is helpful for others out there who are searching for a programming language or a place to learn it.  And I'd love to hear about your experiences, too!",2729,212,sominator,2019-10-08 22:51:31,https://www.reddit.com/r/learnprogramming/comments/df7tll/i_attempted_to_learn_javascript_python_c_and_more/,1,learnprogramming
ikocut,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code SEP2020FREE","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: SEP2020FREE

https://www.udemy.com/course/automate/?couponCode=SEP2020FREE

This promo code works until September 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to SEP2020FREE2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code SEP2020FREE or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",2720,192,AlSweigart,2020-09-01 17:11:31,https://www.reddit.com/r/learnprogramming/comments/ikocut/automate_the_boring_stuff_with_python_online/,1,learnprogramming
qdmwzz,"After a year of learning to code, I'm officially an engineer!","Very thankful for this board, I've been lurking here for about a year and it's always been a good resource for me.

Last November, I decided to start learning how to code. I started with a Python Udemy course and a HTML/CSS/JavaScript Udemy course. I got maybe like 20% through them, and then enrolled in a fullstack web dev bootcamp.

The bootcamp lasted 6 months, and I graduated in July. Since then, I've been working on personal portfolio projects and leetcode. I won't sugar coat it, I did A LOT of leetcode questions (256 problems according to my account, and many I went over multiple times), and spent A LOT of time on my personal projects.

I started applying for jobs in late-August through September. I was not very successful (even after sending like 80 cold applications and not really hearing back from anyone). So, I started reaching out to recruiters on LinkedIn. **Literally dm-ing them, going to company career days, doing anything I could to get a phone call slot on their calendar.** **This was KEY**, because after that I got in the door at places like Google, Amazon, Audible, Stripe, Atlassian, Peloton, Bloomberg, etc. After getting in the pipeline, it's all on your interview prep.

I ended up getting destroyed in some interviews, but at the end of the day I impressed somebody and I'm going to be a full stack software engineer! I promise you guys, the hard work is worth it. I literally tripled my salary and the team is super friendly.",2712,293,NeonSeal,2021-10-22 18:18:47,https://www.reddit.com/r/learnprogramming/comments/qdmwzz/after_a_year_of_learning_to_code_im_officially_an/,0,learnprogramming
4iewun,My Programming Notes (141 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets,"I am a self taught developer and these are my notes, taken over the course of several years and written in a ""human"" way. I constantly go back to them to revise certain concepts.

https://drive.google.com/drive/folders/1J2moH1fDBiJHLSmQqBADTbH9Qs05-FO0?usp=sharing

**I highly advise you watch the tutorials** because they are fucking amazing.

**Simon Allardice and [Mosh Hamedani](http://programmingwithmosh.com/)** are incredible teachers.

Included inside:  

- **Programming Basics** - [Foundations of Programming: Fundamentals - Simon Allardice](https://www.lynda.com/JavaScript-tutorials/Foundations-of-Programming-Fundamentals/83603-2.html)
- C# Basics - [Up and Running with C# - Gerry O'Brien](https://www.lynda.com/C-tutorials/Up-Running-C/164452-2.html)
- **Object Oriented Design** - [Foundations of Programming: Object-Oriented Design - Simon Allardice](https://www.lynda.com/Java-tutorials/Foundations-Programming-Object-Oriented-Design/96949-2.html)
- Data Structures - [Foundations of Programming: Data Structures - Simon Allardice](https://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Data-Structures/149042-2.html)
- **Databases** - [Foundations of Programming: Databases - Simon Allardice](https://www.lynda.com/Access-tutorials/Foundations-Programming-Databases/412845-2.html)
- C# WPF/XAML - [Enterprise WPF with XAML and C# from Scratch - Jesse Liberty](https://www.pluralsight.com/courses/enterprise-wpf-xaml-csharp-from-scratch)
- WPF MVVM - Some articles...
- Design Patterns - [Foundations of Programming: Design Patterns - Elisabeth Robson and Eric Freeman](https://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Design-Patterns/135365-2.html)
- Angular JS 1  
    - [Shaping up with Angular.js - Code School](https://www.codeschool.com/courses/shaping-up-with-angular-js)
    - [Building a Site with AngularJS and PHP - Christian Wenz](https://www.pluralsight.com/courses/angularjs-php-building-site)
- Angular JS 2 - [Angular 2 with TypeScript for Beginners: The Pragmatic Guide - Mosh Hamedani ](https://www.udemy.com/angular-2-tutorial-for-beginners/)
- PHP PDO - [Accessing Databases with Object-Oriented PHP - David Powers](https://www.lynda.com/PHP-tutorials/Accessing-Databases-Object-Oriented-PHP/169106-2.html)
- RESTful API - Some articles...

The cheat sheets are about:  

- C# getters and setters i.e. what does **{ get; set; }** replace.
- Strategy (Composition) and Observer Pattern.

The notes are a bit chaotic because they were intended only for my own reading. I do plan to tidy them up a bit, although the order does reflect my progression and interests.  

I hope they are of some help.

**EDIT:** I added another note file that I found. It's about Javascript and jQuery.",2703,232,8483,2016-05-08 15:17:49,https://www.reddit.com/r/learnprogramming/comments/4iewun/my_programming_notes_141_pages_summaries_of/,1,learnprogramming
c7lkf7,University of Helsinki are offering free course in AI. After finishing you'll receive certificate you can add to your linked in profile.,https://www.elementsofai.com/,2682,123,toshels,2019-07-01 00:09:08,https://www.reddit.com/r/learnprogramming/comments/c7lkf7/university_of_helsinki_are_offering_free_course/,0,learnprogramming
9rjhm0,How to actually stay motivated to learn how to code,"Hey Reddit,
Learning to code is a bitch.

It's never been easier to learn to code, with so many resources available to learn from. But getting your ass to actually *do* it is as hard as it's always been.

I'm not going to pretend like I'm any different. Back in the day I decided this would be the year I would get serious about learning to code. And the year after that, and the year after that . . . you know how it goes.

If you've ever committed to learning something big, you know how hard it is to keep yourself motivated through the long slog. How do you do it?

### Make something

Don't take so many tutorials. They're good for getting an overview of something new, but after that you have to get off your ass and *make* something.

You *could* make *another* to-do list app, but who wants to do that? You don't have to make any of the simple beginner projects that everyone says you have to make. (Making tic-tac-toe in JavaScript is pretty badass, though.)

Build something you *want* to make. I'm sure you're a creative person. Think of a small project or app that would help you out, or at least look cool. Put it online. Get some feedback from people. Fix some bugs. Just do something.

You can show it off as a cool project to potential future employers. Nobody cares if you made another to-do app. They will care if you make a website that shows your ability to turn a fuzzy idea into something tangible.

Or better yet, don't get a job. Make an app or website that you can charge people for and make some money off that. Be creative. Or maybe you'll make something cool, it'll go viral on Reddit, and you can position yourself as an expert in the space and get some new freelancing clients. Think outside of the box.

I recently launched [Unbokeh](https://unbokeh.com/), which is a bunch of blurry backgrounds you can use for designs and wallpaper. I made it because I like blurry wallpapers, they look cool, and I wanted to make a cool resource others could use. It's not a million-dollar-idea, but I'm proud of it. I learned a lot about Gatsby and GraphQL I didn't before. I put it on Twitter and a lot of people liked it.

Plus, putting something online that you worked hard it feels good, doesn't it?

### Get a job

One of the my favorite ways I learned to code was by having people pay me to learn. If you put some effort into it, you can get some small jobs on a platform like [UpWork](https://upwork.com/) and make some money while you're at it.

You don't have to be an expert—you just need to know enough to get the job done. If you know how to sell yourself a little, they're not going to care if you're a beginner. You just have to prove that you can get the job done. If you made a cool side project like I told you to, you have experience already.

I learned how to develop WordPress themes by cold emailing local businesses and redesigning their sites. I learned JavaScript from building a splash page for another small business. I got better at React by making some pages for a startup.

You don't want to do anything completely outside your skillset. But by pushing the boundaries a little and taking on a real project, you'll make big progress.

You're not trying to get rich here, but the extra experience from real-world projects is worth it.

### Get connected on Twitter

One thing that helped me was to join Twitter. It's where all the developers hang out. You can follow a bunch of developers making cool things and get inspired. Follow some industry leaders and learn about new tools and tech. Once you fill your feed with interesting articles and people talking about JavaScript, you'll be a lot more motivated to keep learning. Post some articles you learned from or a new code snippet you thought was cool. You're part of the community now.

Of course don't waste too much time on it. You're here to learn more and be part of the community, not get distracted.

One big motivator for me was to join the [\#100DaysOfCode](https://100daysofcode.com/) challenge. The premise is simple: You code for at least an hour 100 days straight and tweet about your progress every day. You won't want to break your streak. #CodeNewbie is another nice hashtag to get connected with people on Twitter.

It's great because you get access to a community of other people learning to code, same as you. Tweet interesting things you're working on. Get some people to follow you and follow them back. DM them and ask what they're working on. Make some friends. If you're part of a community, it's much easier to build the habit of coding. Soon, it'll be part of your identity—you're a developer now. It's just what you do.

### Just fucking do it

In the end, it's all up to you. You just have to commit to it and get it done.

Understand you're in it for the long haul. It's cool to see success stories on Twitter about how this dude landed a six-figure job after learning to code for 3 months. And he's 18. They're always 18, aren't they? But they're the exception, not the rule, and if you want to fix your life fast by learning to code, you're not going to.

If you want to get a job or build a killer product, you're going to have to work hard at it. All the success stories you see are just the results, not the long, boring hours before that. It's going to help you get through the rough spots when you feel dumb as shit and that you'll never get the hang of this. Trust me, there's going to be a lot of spots like that.

Don't do it halfway—if you're not really into it or passionate about it, it's probably not going to work out. But if you want to put in the time and effort, and a little bit of blood, sweat and tears, you can do it. Now get back to learning.

If you liked the post, you can check out my website here: https://ericnmurphy.com/motivation I post interesting things about JavaScript and learning to code, maybe you'll like it.",2680,220,None,2018-10-26 10:17:32,https://www.reddit.com/r/learnprogramming/comments/9rjhm0/how_to_actually_stay_motivated_to_learn_how_to/,0,learnprogramming
xijpj1,"Fresh off passing Google and Microsoft interviews, I put together some notes and advice for Leetcode interview prep that I hope can help you. Appreciate any thoughts!","I posted [A non-overwhelming list of resources to use for software development interview prep](https://www.reddit.com/r/learnprogramming/comments/xeicqt/a_nonoverwhelming_list_of_resources_to_use_for/) last week and you all liked it and seemed interested in more of my learnings from my last round of interviewing. So, I wrote up how I approach Leetcode-style interviews (coding challenges) in the same Github repository. [You can read it here](https://github.com/nas5w/interview-resources/blob/main/leetcode/README.md)! I really hope it's helpful for you all and appreciate any feedback you might have.

Edit: I should clarify, my goal of this isn't to be a one-size-fits-all resource but rather an opinionated, actionable resource that hopefully many others will be able to follow.

Edit 2: this ended up being popular so I turned it into a website! See it at https://interviewguide.dev",2671,86,coffee_kazoo,2022-09-19 17:59:56,https://www.reddit.com/r/learnprogramming/comments/xijpj1/fresh_off_passing_google_and_microsoft_interviews/,0,learnprogramming
wvamd2,"Is it just me or is the BIGGEST problem with online tutorials is they always give you the 'How?' but rarely give you the 'Why?' - For all the future tutorial creators out there, please include the why.","The reason I ask is because it makes difficult concepts much easier to grasp when you define their purpose.   
  
I'll give you a super simple example that I think everyone here will get regardless of programming language or level. 
  
In SQL, there are these concepts called 'JOINS', [here's a Venn diagram explaining the different kinds](https://i.stack.imgur.com/4zjxm.png)...basically, joins allow you to combine data from two or more tables based on values common to each. Here's how most tutorials will define something called a 'LEFT JOIN': 
  
>The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.

Okay cool, I get it...sorta....but you can imagine someone new to this asking why? Why not a right join? Why not an inner join? Why not a full join or a union? I mean okay, table A has stuff, table B has stuff, and you get table A's stuff with Table B based on a value or something?  
  
If you take the time to explain a real-world example, I really think your users will benefit, for instance, why not try this? 
  
>The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. Now, why would I ever use this? Well, I'm a BIG basketball fan...let's say I have a table called NBA_PLAYERS that has a list of every single person to have ever played in the NBA. I have another table called COLLEGE, which has a list of player ID's along with the college they went to. Well, if I used an INNER JOIN I would get a list of all the player names along with the college they went to (meaning players who did not go to college will NOT show up), but what if I wanted a list of EVERY SINGLE player and another column called 'school' which populates the name of the college they went to, or NULL if they did not attend? Well, here I would use a LEFT JOIN.  Then, if I wanted to build a site with this information, I could list every NBA player in existence and include include whether or not they went to college.  
  
Am I alone?",2664,179,razzrazz-,2022-08-23 00:55:12,https://www.reddit.com/r/learnprogramming/comments/wvamd2/is_it_just_me_or_is_the_biggest_problem_with/,0,learnprogramming
lvqysq,I did it. I finally got my first dev job!,"After nearly 3 years of on and off studying, browsing subreddits, watching tutorials, and building projects, I accepted my first job offer as an iOS Engineer. I'll be working on a platform that I myself have been using for 2 years, and this is pretty much my dream job. I don't have a CS degree (but do have an engineering degree and have been working a basic office job the past 3 years) and have read countless stories of people who get jobs without the degree or relevant background, and I never thought it would be me. I start in two weeks from today, and it doesn't feel real.

I can't thank this sub enough. I want to say that it took 100+ applications over the past year or so to get here (which isn't many compared to others I've seen, so don't feel if you’ve done more you’re not good enough). I recently started applying again at the beginning of 2021, and this was my 18th application (I've applied to about 30 since the year started). It took a phone screen, take home assessment, and two more interviews before receiving my offer, all over the course of a month. 

If you're still learning or trying to get a job, you can do it! Take it one day at a time, and improve a little bit each day.",2658,169,paopu_boy,2021-03-02 01:47:51,https://www.reddit.com/r/learnprogramming/comments/lvqysq/i_did_it_i_finally_got_my_first_dev_job/,0,learnprogramming
ytfizi,"I learned programming as a second career, and I am on my second job. Here are some pointers to save you some pain!","1. Not understanding git is like trying to run without kneecaps. Read the first 100-150 pages of Pro Git [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2) and save yourself horrific embarrassment.  

2. Attention to detail is too valuable. From the highest levels of design to the nitty gritty nit picks of spacing your brackets correctly. I fail at this daily.
3. Accuracy is better than speed. Find a method of double checking your work that works for you. You are not smart enough to not make mistakes. If you think you are among them, oh how wrong you are (speaking as one of those people, formerly, myself).
4. A degree opens doors, Leet Code will get you the high paying position in that door, really well made personal projects will give you expertise and confidence on the job, and building projects with others using git will save you from making horrible mistakes that everyone in your company can see. None of this is required to get a job, but each one offers its fair share of benefits.
5. Getting really good at one language and then learning a few others at a shallow level is helpful. I recommend getting a data structures and algorithms textbook and working through it (Data Structures and Algorithms in Python Version 2 is pretty awesome) [https://archive.org/details/data-structures-and-algorithms-in-python-pdfdrive](https://archive.org/details/data-structures-and-algorithms-in-python-pdfdrive) (I recommend buying a physical copy on Amazon)
6. Keeping a positive attitude is key in the early days. Seek to understand all the criticism, and have a can-do attitude, even if you feel like you're being berated. Most likely, that person is trying to help you, and they aren't taking it personally. They just want to help you to be better. Even if that isn't their motivation, you can decide to perceive it that way and use their critique to improve. One thing you can't do is get butt hurt and then let it affect your work.
7. PR = Pull Request, which is the code you have written and have pushed up to Github (or equivalent version control source). In many companies, PR's are the blocks of code that end up getting reviewed after you push it up to Github. If people like your code, they merge it in. That code needs to adhere to certain style standards, which are referenced in a style guide. You need to know those styles. (And this is only if there is documentation. Worst case, the style guide is whatever the senior dev decides in that moment, and you have to adjust to their standard or fight in a highly disadvantaged situation).
8. You should not think of your code submissions as ""Let me just try this and see if it flies"". That is stupidity speaking to you (it is quite loud in my own head). Instead, you should study your code and become a mini expert in these 40-50 lines of code. For perspective, consider this: when production goes down, and it's your code that caused it, will you be expert enough to fix it?
9. Don't be too worried about working long hours. I have found that long hours on occasion happens because I care a lot about what I am doing. Or for a future raise. But the time seems to fly as long as I have work to do. It usually only sucks me dry when I have to collaborate directly with others for long periods of time. But I'm an introvert, so take that into consideration.
10. I could be wrong on this, but I believe one of the best ways to measure your contribution is a balance of the quality (mostly) and quantity (assuming it's actually valuable) of your PR merges (your code is accepted and merged into the development code, which will then eventually, hopefully, get merged into the testing code, which will then, God-willing, get merged into the production code).
11. You have to balance self-learning and asking questions. You also have to balance that balance with the work culture. Some places get really peeved when you DON'T ask a question every hour or two as the new guy. They see it as you must be stuck and wasting time. Other places won't answer your question for days at a time. In the latter case, I viewed it as a race against time to get the answer before they responded.
12. First impressions matter. My first job, I got my first task in on time. It was hard but I got it. That set my professional bar for the rest of my time there. I missed deadlines and made mistakes, but it was all in the backdrop of that first task accomplishment, which gave me a baseline of competency in the eyes of the higher ups. So if you're going to put in long hours, do it on the first task. (NOTE: You obviously need to be proactive about this in terms of not setting a precedent for long hours. Your goal here is to demonstrate you are trustworthy to meet your deadlines, not that you are someone who can be abused,)
13. Version control and continue integration matters. It matters because you and I are too dumb as human beings to keep track of everything. So we have a playground on our local machines, and then we have playground that all the devs can use (dev repo/dev server), then we have a fake production environment that we can accidentally hurt without hurting customers (testing), and then we have production, where our customers are actually relying on the product. It is embarrassing to mess up any of these environments, but screwing up prod is far and away the worst feeling. I haven't done it yet (my green is showing here), but based on the stress I feel whenever I deploy to prod, I am guessing it feels absolutely dreadful.

Everything I have written should be interpreted as one of the suggested answers in stackoverflow that was not chosen as the correct answer. Take it all with a massive grain of salt, and God speed! The work is worth it in the end, unlike many other paths in life.",2662,128,Neat-Wolf,2022-11-12 19:03:56,https://www.reddit.com/r/learnprogramming/comments/ytfizi/i_learned_programming_as_a_second_career_and_i_am/,1,learnprogramming
naqwv7,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code MAY2021FREE","I'm a bit late with this month's free code, but it is now active.

https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: MAY2021FREE

https://www.udemy.com/course/automate/?couponCode=MAY2021FREE

This promo code works for three days (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to MAY2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",2654,141,AlSweigart,2021-05-12 15:06:52,https://www.reddit.com/r/learnprogramming/comments/naqwv7/automate_the_boring_stuff_with_python_online/,0,learnprogramming
raoj06,"Success Story: Pivoting into CS at 32 and going from never making over 45k to 120k as a new grad. After two great life failures, I finally found success in CS.","**Being up front**

Because I will be sharing many deidentifying pieces of information, I have chosen not to write on my real account. I believe this allows me to share much more detail while still preserving some sense of anonymity. I hope that not only will this additional level of detail, of which seems to be uncommon in success stories will more than make up for any missing credibility by posting on a new account. I do not believe my story is particularly exceptional, but in the end people will need to make up their own mind.

I have provided my background and where I came from because it may help inspire some people. I think success stories are often less impactful than they could be because there is always a sense of ""well you must have had x, or you were privileged in the following y,z ways."" I don't intend to complete resolve that by sharing my background but rather just to make it less ambiguous. Some people will always have some excuse as to why they weren't or can't be successful. My goal isn't to make it sound like a ""if I can do it, anyone can story.""

# About me

I grew up in a lower-middle class family in the US. My parents had a nasty divorce when I was young and there was constant custody battles, I attended many schools, had no friends, and was constantly bullied. The police were not uncommon visitors to my house. In high school, things settled and I gained some notion of stability. Up until then, I had no vision of a future, no idea of how I could possibly make it in the world and no confidence. This began to change after I became inspired by the Japanese Anime Dragon Ball Z (yeah I know). It awaken me to the fact that one could self-improve through discipline and perseverance. This initially took the form of physical conditioning and after a while my confidence grew and for the first time I a ""passion."" From this came my first vision of a future - I set out to join the military with the goal of becoming a Navy SEAL.

I graduated high school (with a 2.1 GPA) and attempted to enroll in the Navy. However, I soon discovered I am medically disqualified from service. I had an undiagnosed kidney issue that barred me from enlisting. However I remained hopeful that if I could get it treated I may still enlist. So I began a 2 year process of treating the disease in hopes that I could get the levels of proteinuria (the diagnostic) to an acceptable level. But after being strung along by recruiters, I eventually got a hold of the recruiting command who said that even if my condition was cured, I would never be elidable for service - in any military service. The mere history of having it was permanently disqualified. That didn't matter in the end because the kidney disease is IgA nephropathy and is incurable and progressive. So here I was back to square one with no hope of a future.

I worked for a time as a fitness instructor and I continued to work on myself, personally. I soon become inspired again. I had always been interested in science, but I never thought I had a future in it.  However, I had gained the confidence to pursue the academic route. I knew I wouldn't get into a decent university with the traditional route given my academic history (GPA 2.1, and ACT 18). So I went to a community college and did very well which allowed me to transfer to a good university from there. I took out student loans to cover tuition and expenses. By this time I was able to claim myself as an independent on the FAFSA and thus allowed me to get enough loans and grants to cover most expenses.

I had set graduate and pursue an MD/PhD. I wanted to practice medicine and I liked science. Most MD/PhD programs are completely funded and thus would allow me financially to pursue an MD. However, I failed in this pursuit. I had one particularly rough semester which sent me into a spiral of depression and self-doubt. I believed that since these programs were extremely competitive, there would be no way I could achieve success. In hindsight, I probably still could have been admitted. A big failure on my part was my failure to seek mental help. I had a certain sense of pride which prevented me from doing so. All my success until had been self-driven and I believed no one but me could help me, I didn't have the capacity to ask for help.

My depression spiraled and I was at risk of getting dropped from my program (biology). One semester I failed 3 out of the 5 classes I was enrolled in. I eventually completed my required courses by the skin of my teeth and graduated with a 2.7 GPA, but I found myself again (in my eyes) back to square one. Only now with a massive amount of student debt. I realized I could get some lab tech job, but I had no desire to pursue this route. The pay is poor and the work is not intellectually challenging. I was tired of being strapped for cash, living paycheck to paycheck and I thought if my life was worth living, I needed to have a decent income. So I went back to doing what I though could amount to a decent pay - fitness trainer.

I worked as a fitness trainer for a few years but I began to realize, this is a dead-end career for me. It was too intellectually unstimulated and I did not have the personality required for a long and successful career. I hated approaching people and I hated pressuring people to buy training. Eventually I heard about machine learning/deep learning. Up until then, I had no interest in CS or programming. But learning about deep neural networks greatly intrigued me. The level of empiricism involved reminded me of the natural sciences - experimentation, observation, etc. So that's when I started reading about the CS field as whole and I became even more fascinated - not to mention the pay is good.

# My pivot into CS

Until then, I had presuppositions about what it meant to be a programmer/SWE. One of the big ones I had was that you had to be really good at typing in order to be a successful programmer, which was unappealing to me because I've always sucked at typing and had no confidence I could be proficient to a high level. I have large muscular hands with little finger dexterity. Obviously, I eventually realized this was ridiculous. So now I had my third inspiration for the future - become a software engineer. But with a BS in biology and a 2.7 GPA, I had to find a way to find a way.

After researching what the best approach was for me I decided that pursing a masters degree in CS would be best. That way I could feel like my bachelors was not a complete failure and I could theoretically graduate and have a job in just 2 years. I was ineligible for most graduate programs because of my undergrad (most need 3.0 at a minimum). However, I landed on DePaul University's Master of Science in Computer Science which had a 2.5 GPA minimum. Just as important, they allowed you the option to test out of the introductory CS coursework if you can pass the proficiency exams. This was huge for me because it meant I could save over $20000 and graduate a year sooner. The FAFSA direct grad loans were just enough to cover full-time tuition. I applied and was accepted to the program, to begin the following Autumn quarter. This gave me about 5 months to self-study and attempt to pass the proficiency exams (you only get one chance).

# My CS journey

To do this, I discovered the ample amount of study resources available online. This included, reddit, edx, coursera, and youtube. However, the most valuable resources I discovered came from the open-sourced materials and lectures from elite universities like Berkeley, Stanford, and MIT. I ""audited"" several courses in preparation. Here are the audited courses and the corresponding DePaul courses I used to prepare for.

[DePaul MSCS](https://www.cdm.depaul.edu/academics/Pages/Current/Requirements-MS-in-Computer-Science.aspx)

[https://cs61a.org/](https://cs61a.org/) (DeNero version)- CSC 401, Intro to CS

[https://inst.eecs.berkeley.edu/\~cs61b/fa21/](https://inst.eecs.berkeley.edu/~cs61b/fa21/) (Hug version) - CSC 402, CSC 403, Data structures

[https://www.eecs70.org/](https://www.eecs70.org/) and [http://imt-decal.org/](http://imt-decal.org/) \- CSC 400, Discrete math

[CMU Video lectures](https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22) and [CMU 15-213](https://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html) \- CSC 405, 406, Systems

I also realized that gaining some experience ASAP was crucial, so I began sending out applications for internships anywhere and everywhere. I was lucky enough to encounter a programming internship at a university research center which specialized in biomedical research. I think my bachelors in biology helped me land this even know I had no formal experience in programming. I started the summer before my first quarter began and I worked as an intern there the entire time I was in graduate school.

During my studies, I continually supplemented with additional material, auditing other courses. I wanted to land a good job after graduation and while I was glad to be admitted to DePaul's MSCS, the program was weak and I knew if I wanted a good job I would have to go above and beyond the coursework. I graduated with a 3.9 GPA and landed a new grad role at a F100 making 120k in a med CoL area at 34 years old.

I prepared for new grad roles through all the ways you frequently read about on here. Grinding leetcode (about 30 easy, 80 med, 10 hard over 2 months), doing mock interviews on platforms like Pramp, and applying to lots of places. I couldn't grind any more than that because I was working (20 hours/week) and going to school fulltime. I failed several interviews. However, all you need is one success and eventually I found it.",2628,146,realthrowaway12349,2021-12-07 02:35:52,https://www.reddit.com/r/learnprogramming/comments/raoj06/success_story_pivoting_into_cs_at_32_and_going/,1,learnprogramming
m5z3qu,I made a chrome extension that lets you copy text directly from Youtube videos,"I was frustrated having to type out code and links from coding tutorials on Youtube, so I made a chrome extension that lets you copy text directly from the video!

Thought it could be useful to some of you, so am sharing it here. It's totally free.

[https://chrome.google.com/webstore/detail/selectext-copy-text-from/gkkdmjjodidppndkbkhhknakbeflbomf?hl=en](https://chrome.google.com/webstore/detail/selectext-copy-text-from/gkkdmjjodidppndkbkhhknakbeflbomf?hl=en)

EDIT: Thank you so much for all of the support! I'm blown away by how nice you all are!

EDIT 2: A Firefox version is now available after many requests: https://addons.mozilla.org/en-CA/firefox/addon/selectext/",2629,185,vtypical,2021-03-16 02:40:48,https://www.reddit.com/r/learnprogramming/comments/m5z3qu/i_made_a_chrome_extension_that_lets_you_copy_text/,1,learnprogramming
wclf3z,"I'm a senior(ish) dev, I just talked to 12 of you, here's the TLDR(ish).","by ""talked to 12 of you"" i meant 12 beginners in this subreddit. I've excluded the situation-specific programming questions for now.

**Lesson 1: It's not about languages**

A common question in any beginner group is what language to learn. The answer is learn any and focus in until you can write functions and loops without thinking about it too much (not whole algorithms, just the syntax). Then find a ~~web~~ framework for your language and make useful ~~web~~ apps.

**Lesson 2: How to get hired**

I've run my own dev shop, hired and fired people. The worst kind of junior is one who doesn't improve fast enough. I'm not sure where you start from is really that important. Keep in mind, smaller companies have time to actually meet you as a person.

It's not so much about what you can do (I'll contradict myself in the next question), but how fast you're going to be useful to me and how much attention you need until then.

It's all about how fast you learn new stuff. Because it never stops. In fact I consider the ability to study code and documentation a more important skill than writing it. It's like a got beat in Go (the boardgame) by someone who had never played, but read about it. Not specific moves, just philosophy.  He was a junior and consider him a better coder than me.

**Lesson 3: What is needed to land a job? Degree? A hundred projects? Experience??!!**

You know the answer to this already. It's one well made project that demonstrates what you can do. Note that it's very easy to tell which project is made by following a tutorial (it's too clean) and which you made yourself. I want the person with actual problem solving **experience**, but personal project experience is totally good enough as long as it goes deep enough in the weeds. Your first work experience is probably bug fixing anyway so better get used to it.

There are questions about ""what to make"" - I think if you want to make it in this industry you better be passionate about building stuff. ""Just figure it out"" is a phrase I use on myself when I get lazy expecting ready made personal answers from the internet. Build anything. Clone an app you use, make the ever popular idea ""task list"", make a game. What did you think you would build before you realized coding is hard?

""How big of a project"" is another popular one. This is a legit question, but without a direct answer. The only way I can tell you if the project is enough is if I look at your code and decide if you're bleeding enough from the work. But I can tell you that you should feel like you've made something useful or you're proud of a certain piece of code or perhaps you just feel like you've fixed enough bugs.

**Lesson 4: You need someone who keeps you on track, but you have to keep pushing.**

Not in a ""check up on me"" way, because as a mentor, I don't have such resources. But I will answer every question that lands in my chat (please, no messages, why does that UI still exist). About code or business or life.

I'm still figuring out what a mentor is, but overall I'm getting the vibe that my main job is to keep you motivated and moving until you get to your very personal ""heureka"" moment after which you don't need me anymore.

Anyway you need one. Some of the questions are so fundamental that any programmer can give you, but the internet just won't. Please ask about your confusions. I was just as much of an idiot as any of you at one point. And I honestly feel so sorry for anyone having to go through the pain of learning programming. But there is light on the other side of the tunnel! And once it's over you'll be happy you went through it. I've never seen someone unhappy about putting in the time.

And nobody is going to push you more than yourself. A mentor will help you over so many bumps, but you've got to keep moving yourself. Also you can't stop moving because the mentor hasn't checked up on you. When you have fallen off the schedule, let me know and I'll see if I can help you fix what's demotivating you.

And no, not everything is available on Google. Not me and my experience, not you and your specific context and questions.

P.S. Every time I mention ""me"" I mean a mentor in general. Someone you know is best!

**Lesson 5: I don't know what language/course/framework to go with!**

One comment that I've hear that hits home is ""people keep saying mixed things about X"". Choosing a language, course, even just a tutorial can be tough, but remember two things:

1. if there are mixed reviews it means each one has their plusses and minuses. You can choose from many, that's a good thing. Most of the time I would choose to try out 3 different ones and then choose. Then after a while, change. Please don't feel obligated to finish a course. I've never finished one, because I always got what I needed half-way through.
2. Whatever rabbit hole you get yourself into you can always restart and all of the mistakes you've done are ones that will keep serving you for the rest of the career. I'm serious, each bug you fix tells you a little bit about the system you're using and each language you don't end up using gives you a comparison point so you know what good/bad software is (a language is just software btw).

Btw my default language to suggest is JavaScript, because it's the only language that works in the browser and is the most popular language currently and is web native so JSON is easy and HTML/CSS allows to create visual UI's from the start and you still need more reasons?

And my favorite language is Elixir.. one day you'll learn about ""functional languages"" (but don't take Haskell \_too\_ seriously\*).

\* if that triggered you you're an experienced programmer and shouldn't be reading this.

**Lesson 6: Trust yourself with decisions, even if they may be wrong.**

When I started self-learning 8 years ago, I actually gave up after a month. I decided I wasn't understanding anything and my brain must just be too stupid to get it. For about 4 months I returned to my old failing career. One day I decided to just go see what was so complicated, because I've forgotten. And I couldn't find the complicated part of coding anymore.. I suddenly understood. Then I realized I wasn't confused by programming but by CodeCademy wanting me to do things their way and that way didn't make any sense to me.

I should have trusted myself and quit the course earlier. So I switched to making my app ideas come to life and with heavy help from the amazing Kivy forum, I got on my own two feet pretty fast. After a year total I was hired.

More specific to code: it's better to have a theory how the code is working. Trust yourself that you are smart and you understand the code. And if the code doesn't make sense, perhaps it's badly written? Maybe the tutorial is trying to teach in some academic way that isn't practical? Maybe this learning style just doesn't fit you?

Try stuff until you feel like it's working out for you. Then commit and commit hard.

**Closing words**

It was fun talking to all of you. I'd love to make a Discord server with a small personal bunch, to ask questions in a safer space. But i know the server would die after a few weeks from not having enough questions.

&#x200B;

edit: this blew up, i love it. i've now spent even more time in the comments than writing this thing. along with some great people and their input. so if you enjoyed this post read the comments too, it's useful all the way down.

**edit: Lesson 7: Documentation is your source of truth, not tutorials, not stackoverflow.**

Tutorials and SO are great, but go read documentation for your language or framework. That is the only way you'll really understand how something works. It's the only place where the creators of the language wrote down how their thing works and why they made some design choices.

Also this may be a way out of tutorial hell.

Development speed isn't measured in terms of how long it took to write a piece of code. it's measured in how much time you saved someone else in the future.",2626,215,kristerv,2022-07-31 10:12:39,https://www.reddit.com/r/learnprogramming/comments/wclf3z/im_a_seniorish_dev_i_just_talked_to_12_of_you/,0,learnprogramming
npw87d,How on EARTH are you guys finding jobs 'from like nothing' in 6 months,"Meanwhile, I can show a multiplayer webgame I made from scratch to companies claiming to look for html game developers and not even get a phone call

Its all bullshit

/rant",2615,453,JonFrost,2021-06-01 15:10:55,https://www.reddit.com/r/learnprogramming/comments/npw87d/how_on_earth_are_you_guys_finding_jobs_from_like/,0,learnprogramming
li927n,It's okay to suck...,"It's honestly fine.

I have over 11 years of professional web development experience and a Computer Engineer degree and when I started a new position at a big company about 2 months ago, I sucked.

Like, it took me 2 weeks to build a single screen in their React Native app. But you know what? I accepted that it's impossible for me to just slot in a completely new code base and team and just hit the ground running. So I asked questions and scheduled calls with the engineers that actually built all that stuff to better understand everything.

And I did my best to code up to their standards. And my PR review still needed a bunch of minor changes.

But nobody minded. In fact, my engineering manager commended my communication skills and proactive attitude.

I know that my experience is not gonna be the same for everyone but for a lot of people, they accept that new hires take a while to get going.

Don't know who needs to hear this but it's better to ask questions and risk looking like a fool than struggle with something for days that someone else could help resolve in minutes.",2608,123,Link_GR,2021-02-12 11:15:48,https://www.reddit.com/r/learnprogramming/comments/li927n/its_okay_to_suck/,0,learnprogramming
o3iq1l,"Learning coding is hard, but staying in a job you don't like is harder",Never give up,2607,202,None,2021-06-19 15:36:47,https://www.reddit.com/r/learnprogramming/comments/o3iq1l/learning_coding_is_hard_but_staying_in_a_job_you/,0,learnprogramming
sicap3,"After 9 months of learning and 1 month of applying, I got my dream job!","Today I accepted an offer for my dream job, at my dream company with a salary that exceeds even my dreams. Through my learning journey I came to this reddit a lot and loved reading these kind of posts and peoples advice so I’ll tell you what I think helped me the most. A little about me, I’m about to graduate in may with a bachelors degree in Psychology from a highly ranked Canadian university, I’m an American citizen but I live in canada so I could apply to jobs in both countries.

# Learning

* I started learning how to code with Harvard’s CS50. It’s so so so hard but it’s also super fun and I think it was a great way to get the fundamentals of programming down early.
* From there I wanted to learn web development so I sat down and came up with an idea for a web application that I would find useful and interesting. That’s my number one advice to other self taught developers, learn by doing!!! Don’t just follow along with YouTube tutorial projects and think because you could do that that you know how to code. Invest some time into thinking about what you would enjoy seeing in the world and try not to limit your ideas for features because “they’re too hard” or “I don’t know how to do them”. List out the features/different aspects of the project and then rank them by what you absolutely need first and put the more impossible looking features lower on your list. Your next step is to pick the tools you want to build it with. After CS50 I felt most comfortable with Python so I decided to use the Django framework. Use whatever you feel most intrigued or comfortable with. Then, create a Github account and learn how to use it. It’s not only gonna be helpful for you while you build your project but it’s also gonna be helpful later when you’re applying to jobs. Now is the fun part, start building! You will feel like you have absolutely no idea what you’re doing but as long as you have a tiny bit of a clue, that’s enough to make progress on it. Work your way through that checklist and if you get stuck, trust that someone else has had the same issue you have and the internet has the key to that lock. To learn how to do something I liked watching a YouTube tutorial of someone else building another project with the same tools and then try to apply that same logic to my different use case. When I needed something specific then I looked at blogs or stackoverflow. It’s also important to get used to reading documentation, but I understand at the beginning it’s scary. While building your first project you’ll eventually realize that part of a developers job is research. Knowing what words to use and what sites or resources to use is such an important skill for any developer. I saw someone else give the advice that even if you read or watch about something that won’t solve help your problem, you didn’t lose much because you still learned something new that could end up helping another time. Keep this in mind when you’re googling the wrong thing and aren’t finding anything helpful. The hard part about building unique projects is that you don’t have the answer to any of your issues or problems right there in front of you. It’s up to you to make architecture and design decisions, it’s up to you to find solutions to your problems and it’s up to you to apply what you found to actually fix your issue. In my opinion this is the quickest and deepest way to learn.
* After building that project all summer I returned to university in the fall for my last year. At this point I felt like my passion for developing overtook my passion for psychology and I decided to change my plans of going to grad school to be a psychology researcher to becoming a full stack developer. From then on whatever I wanted to learn next I would start by taking a Udemy course and building my own unique full stack personal project to solidify whatever I learned in the course. I would recommend avoiding language hopping and sticking to one stack that you really want to get good with. For me it was the MERN stack because there are a lot of resources on it and it felt like a good investment of time because it’s the same language on the backend and frontend. I also took any and every opportunity to build projects for other people, because then you can say you’re a freelance developer. It’s also valuable because you learn how to work with other peoples visions. After doing that for a few months, I felt ready to apply for jobs.

# Job search

* First step is creating a **resume** ([mine as example](https://docs.google.com/document/d/1WV3qhe_aC2-JZPVW3DKucIyvBXYsxrp0T3xg5E-GXUw/edit?usp=sharing)). There’s a lot of conflicting advice going around about how to do a resume but here are some things that I think worked for me. My resume isn’t flashy or designed with cool colors and blocks but it’s important to have consistent formatting and make it easy for someone to quickly scan. I also put my unrelated job experience on it because it shows I’m employable. Just try to word the description in a techy way. Then you can list your freelance experience above that. I also put two projects on my resume, but this is where I decided to create two different resumes. The first one is for jobs that want python and JavaScript or are just language non specific, so I list my best project with python and my best project with MERN stack. The second resume is for jobs that specially want MERN stack, so I show two projects that use that.
* If you haven’t already created a portfolio site, do that now. If you feel like you don’t have good design skills then use a template or copy something that you think looks nice. List out all of your projects and have a link to the GitHub repo and a link to the live site for each of them.
* Last step before you apply for jobs is to create a linkedIn profile. I put every project I’ve ever done on there, I put all of my skills and a nice professional photo. LinkedIn will tell you how to complete your profile and you should definitely do everything they say to get it fully complete. Linkedin is a great platform for developer job hunting (at least in North America) because you can set up alerts for new jobs for whatever title, category or place you want. You can also find employees and recruiters at your targeted companies. I also used AngelList to apply for jobs and had a good experience.
* So now you’re ready to start applying, go for it! My approach was to apply to as many places that fit my skill set or were under 5 years of experience. This was a good approach for me because I had hundreds of new jobs a day that I could get because I was looking across all of North America, but if you’re in a place that jobs are limited I would say you should put more effort into each job you apply for (cover letter, cold email, networking etc). If you’re using the same wide net approach as me, keep track of each job you apply for on a spreadsheet (template attached to this post). Everyday I would apply for at least 5 jobs and add them to my sheet. If I got rejected I would mark that row with a red background, and if I got an “I’m interested let’s talk more” I would color it yellow.
* Now for the interviews! My first piece of advice is to become comfortable with telling your story. Really think about how you got into programming and what you love about it, maybe even write it down, so as soon as an interviewer asks you “so tell me about yourself” you have it ready to go. Anyone who is self taught has an interesting story, so make it your own. After each interview even if it’s just a recruiter or HR, send a quick thank you email. In one of my offer meetings the HR person said that I was the only candidate to do that and it left a such a good impression on her that she told the hiring manager. As for technical interviews, I didn’t do any Leetcode type of practice, I just studied the commonly asked JavaScript/React/web dev interview questions. I also read Eloquent JavaScript while I was in the process of interviewing just so I have the language fresh in my mind. My best advice when it comes to interviews on how to not be so nervous is first recognize that it’s normal and acceptable to feel that in a situation like this, but treat it like practice. It didn’t matter if I got a question wrong or didn’t know the answer because this is just an experience to practice and I’ll get the answer right next time. Keep that in your head no matter what interview you go to and you should be fine. Remember you can’t always know the answer but you can always be friendly and cheerful which gives you some points.
* **Negotiate**!! When I got an offer I had final tech interviews coming up with two other companies the same day and day after. Knowing this I felt like I had some leverage to get more than what I originally asked for. When the recruiters asked how much I want I originally told them $50,000 but in that offer meeting I told them I’m in late stages with other companies so my number went up to $55,000. They said they’ll have to talk to the hiring manager but it seems doable. Next, I emailed the two other companies about my other offer. The company that I wanted to work for the most replied and asked if I could meet with the CEO before my final tech interview to speed up the hiring process. It seemed like she was really interested in bringing me into the company. After my final tech interview with the VP of engineering, she asked me what salary I’m looking for. The company is based in New York so their average junior developer salary is higher, so I said 65 to 70k and asked if that’s in the scope of the position. When I received the offer it was for 80k!! What’s crazy is that my goal salary when I started job hunting was 40k, so the lesson is SHOOT YOUR SHOT!! It’s so easy to undervalue yourself especially as a developer with no degree. I’m also a black woman and it can be hard to feel like you belong in a space dominated by people who don’t look like you. Feel free to message me if you feel the same and want someone to talk to about it.",2603,215,mandela_me,2022-02-02 01:58:39,https://www.reddit.com/r/learnprogramming/comments/sicap3/after_9_months_of_learning_and_1_month_of/,0,learnprogramming
tk52sc,Don't be that guy.,"I just took over a project for a guy who left.  Don't be this guy:

* ZERO comments in your codebase.
* One and two character variable names with no discernable pattern.
* Comment characters used to comment out big chunks of code for no discernable reason.
* No error checking.
* Reliance on data files that you forgot to include or explain, going in to meaningless data frame names.
* Making outrageous claims about how much your code improves things with zero baseline performance.

People like this think you're an idiot because you can't make their code work, and get to be all smug.   We will track you down and find you.   You will need references someday....oh my.",2597,428,BullCityPicker,2022-03-22 15:07:01,https://www.reddit.com/r/learnprogramming/comments/tk52sc/dont_be_that_guy/,0,learnprogramming
o16f5a,From Depressed College Student to Data Engineer,"Two years ago, I didn’t have much to brag about. I had spent six years in undergrad bouncing around between humanities majors before settling on international relations. I know you’re probably saying international relations is useless. I knew that, but I was also struggling with crippling depression and anxiety. Anything remotely technical or career-oriented would send me into a state of panic. I found that out the hard way when I failed freshman year and nearly got kicked out of school. I had always been interested in programming ever since I booted up my dad’s old Macintosh II as a kid and played around with True Basic. The idea of actually doing it for a living though, or even in an academic setting terrified me. Obviously everyone else would be so far ahead of me there would be no way I could compete. 

Well, after graduating and immediately going back to school for a one-year masters in marketing (turns out it’s very difficult to get hired with an international relations degree), I found myself frequently looking up coding tutorials in class. After randomly selecting python because some Reddit thread suggested it, I spent most of my downtime between lectures doing basic courses on Udemy and eventually graduated to some random connect four tutorial. For some reason, I was actually absorbing and retaining information. 

When I graduated and eventually got my first shitty agency job, I tried to use python for every single thing I could. There were so many tedious reports that needed to be put together every day that required visiting dozens of media sites, copying data between spreadsheets and so on. It was the perfect opportunity to learn web-scraping and data manipulation with pandas. I ended up saving the office about two hours of work a day. Needless to say, my boss was very impressed. It was great until he got laid off, and his replacement quit. Then I got laid off too. 

I spent the next year and a half working at a media agency. While my official job title didn’t reflect it, I ended up being able to shift my responsibilities away from simple ad placement to finding ways to automate  campaign budget allocation and media upload / allocation as well as reporting. I even got a chance to create some data infrastructure as the company had none before my arrival.  

After failing to get any sort of raise, I decided to start applying to junior developer and data analyst jobs in my area. I would highlight all the technical aspects of my previous jobs in my applications and include my GitHub portfolio. After 50 something applications, I finally got a lead with a multi national logistics company for a data analyst position. The interview went well and they gave me a python and sql assessment which I went overboard on completing. 

It’s been four months since I put in my notice at my last job and I just passed my probation period as a data analyst / engineer with a 60% salary increase. Instead of rushing to meet deadlines for campaigns and mindlessly scrolling excel files I get to spend the work day building data pipelines and automating reports without someone breathing down my neck. 

TLDR Thanks to stack overflow, reddit, and a resume that only highlighted my technical achievements, I managed to go from a depressed college student to someone with a good job, a fiancé and a house (albeit rented). So that’s pretty cool I guess.",2595,95,cellularcone,2021-06-16 14:38:59,https://www.reddit.com/r/learnprogramming/comments/o16f5a/from_depressed_college_student_to_data_engineer/,0,learnprogramming
aej6bj,"One year ago I wrote my first line of code. I now have 5 games available on Google Play, Here's what I've learned!","Hi, everyone! 

After reading through some posts here I thought I’d share some of my thoughts after one year of learning. 

Exactly one year ago I wrote my first line of code, today I have 5 games and 1 app on the Google Play Store and 3 games on the App Store. I haven’t necessarily been active posting here but i’ve been an avid reader, especially in my first months of learning. Here’s some things that I’ve found to be of high importance:

* Start small, dream big.

I don’t know if any of you reading this play any instruments, but I think this is a good analogy. When learning to play the guitar it’s easy to give up while trying to play your favourite solo. The same goes for programming and anything really. Start small and create simple projects, then learn from that and build something greater, rinse and repeat. The first project I made was a simple console application where the player rolled dice against the cpu.

* Use the internet.

I learned most of the basics during my initial course at university but I learned much more using all the great resources available online. Would I have been able to make the games I wanted to do without using tutorials and other material online? Absolutely not. But that being said it’s easy to get lost in all of these seemingly infinite resources. I would say it’s important to stick with only a few resources at a time. Try to focus on one tutorial at a time. It’s not necceasary to completely understand or even finish the tutorial at hand, but focus on it before moving to the next one. If you get stuck, use Google or Bing or Ecosia or DuckDuckGo. If you can’t find the answer (which would be highly unlikely) don’t be afraid to ask, people can be surprisingly helpful. 

Here are some tutorials and classes that I’d recommend:

Basics of programming using Java

[https://mooc.fi/en/](https://mooc.fi/en/)

Various tutorials on gamedev

[https://www.gamefromscratch.com](https://www.gamefromscratch.com/) 

Various tutorials if you want to use Löve

[https://love2d.org/wiki/Category:Tutorials](https://love2d.org/wiki/Category:Tutorials) 

&#x200B;

* Have a goal in mind.

Why are you doing this? Are you looking to get a job in the future? Is this just a hobby? Is there a specific project you want to complete? With a goal in mind it’s much easier to find a way. If you’re motivated it’s easier to push through during those hard days. My goal was and still is to hopefully be able to independently support myself developing games and applications. Seeing as this is rather difficult to achieve I’m also hoping to be able to get a job in this field once I’m done with my education. Find out why you are doing this and the motivation will be easier to find.

&#x200B;

* Work hard. 

There’s no secret to learning. It’s difficult, it takes time and it’s often frustrating. But it’s also immensely rewarding. It’ll take many hours and you need to do those hours. That being said don’t be afraid to take a break. Sitting at the computer all day working is not very productive. If possible get out some, even if it’s just for 15 minutes. Exercise, it really does do wonders. I found myself stuck, time and time again and often after a short walk the seemingly impossible task at hand wasn’t really that impossible.

&#x200B;

* Set up milestones

Something that helped me put in the hard work was setting up milestones. Every evening I will write down on my phone what I'll try to achieve during the next day. It's not big things but just small milestones such as: 

1. Complete this function
2. Read about this subject for 30 minutes
3. Take a walk
4. Design 2 levels

This way you get a sense of achievement when you tick off one milestone and you get more motivated to keep going.

&#x200B;

* What did I make?

I made a few different games and one app. I’ll present my latest project here since I think it’s the best one so far. It’s a game called Retro Pixel. Retro Pixel is a retro inspired 2d platformer with over 80 levels and some extra unlockables. It features a very high difficulty and CRT emulation. For this game I used Corona SDK and it took about two months to complete.

The game is actually paid but I’ll change the price to free on the app store for the day. If anyone would rather try it on android let me know in the comments and I’ll provide you with a promo code. It’s also available for PC but I can’t guarantee that it’s working properly since it was made primarily for mobile. 

App store link

[https://itunes.apple.com/us/app/retro-pixel/id1446210488?mt=8](https://itunes.apple.com/us/app/retro-pixel/id1446210488?mt=8)

Play store link

[https://play.google.com/store/apps/details?id=com.squiden.retropixel](https://play.google.com/store/apps/details?id=com.squiden.retropixel)

PC/Mac

[https://squiden.itch.io/retro-pixel](https://squiden.itch.io/retro-pixel) 

&#x200B;

* I would also like to add

When you’re just starting out don’t worry too much about what language or what software you should use or learn. Learn the basics in any language and you can choose a different language later on if it suits your needs better. 

&#x200B;

Thanks a lot for reading through this! If there’s any questions I’d be happy to answer them!",2589,324,JSRF17,2019-01-10 13:33:52,https://www.reddit.com/r/learnprogramming/comments/aej6bj/one_year_ago_i_wrote_my_first_line_of_code_i_now/,1,learnprogramming
urdxxs,How I became a software developer after prison,"Im formerly incarcerated and programming saved me by giving me a career I probably couldn't have in any other industry. I had no real prior experience and no formal education. I eventually attained the experience (and some education in an AS degree) but it was inconsequential. I tried everything but it all came down to two things.  I had to code enough to get the skills and I needed to develop a network that would vouch for me. Its almost too simple to believe, but I just programed and met people. I tried to follow trusted quality learning sources (like Stanford online, Ray Wenderlich, Big Nerd Ranch, Sean Allen videos...all iOS but you get the idea) and write programs over and over. And I made friends with developers at meetups and through online interaction. These friends led to job interviews where I could show that I had skills.

To sum it up, to get into the industry focus on two things, your skills and your network. Thats it.

First thing is obvious, code.  Hands on keyboard over googling for a year before you ever get started. Build things through tutorials, then switch things in the tutorials, then build your own thing. Practice problem solving with things like leet code to build problem solving and interview skills. Hands on the keyboard and code. Develop your skills!

Secondly build your network. Start now. Get around developers. Put yourself in a place where you'll interact with working developers. And dont join 99 communities where you cant meaningfully interact. Join however many that you can actually engage consistently and develop relationships.

Thats it. It definitely takes a serious commitment and grit, but if you consistently pursue those two things, skills and a network, youll get an opportunity.

If any of you come from lower socioeconomic backgrounds or are formerly incarcerated and would like extra support check out [UnderdogDevs.org](https://UnderdogDevs.org). On twitter we are  @ UnderdogDevs. Its a passion project turned non-profit my friends and I started to help people from similar backgrounds get into tech. Its free and offers a ton of support from software engineers from all over the industry. We also have a program called project underdog where we pay your bills for 3-4 months and super charge your learning with pair programing sessions every single day from Monday - Friday for an hour. You'll be guided through our in-house problem set bank by experienced mentors allowing for real time feedback. Overall the community is amazing and a great place to develop your network.  


also if youre a developer and would like to do some meaningful work with us reach out. We would love for you to join us.",2582,198,swiftlyRising,2022-05-17 03:59:34,https://www.reddit.com/r/learnprogramming/comments/urdxxs/how_i_became_a_software_developer_after_prison/,3,learnprogramming
55npda,Here's a list of 520+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2016),"Unfortunately I couldn't fit all the courses here because of Reddit's 40,000 character limit. So I removed older self-paced courses from the list. These courses are always open for registration.

They can be found here:

**[~300 Self Paced Programming and Computer Science courses](https://www.class-central.com/courses/selfpaced?subject=cs%2Cprogramming-and-software-development)**

I have also started categorizing the courses listed here by the programming language they are taught in. You can find the list here:

**[~250 MOOCs categorized by Programming Language](https://www.class-central.com/programming-online-courses)**


This is not the complete list of MOOCs starting in October 2016, just the ones relevant to this community. The complete list of courses starting in October 2016 can be found over at [Class Central (1800+ courses)](https://www.class-central.com/report/mooc-course-report-octobober-2016/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

NOTE: Unfortunately Coursera has converted many of its courses to 'Premium Grading'. Which basically means that you need to pay if you want to access graded assignments :(. You can also apply for Financial Aid - https://learner.coursera.help/hc/en-us/articles/209819033-Apply-for-Financial-Aid

**BEGINNER(28)**

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [AP® Computer Science Principles](http://bit.ly/2cLHpHm) via **edX**|Self paced|NA|NA
 [Introduction to CSS3](http://bit.ly/2doprIK) via **Coursera**|3rd Oct|4|[4.6★ (7)](https://www.class-central.com/r/4294)
[NEW] [Introduction to Web Development](http://bit.ly/2cLIiPU) via **Coursera**|3rd Oct|NA|NA
 [Internet History, Technology, and Security](http://bit.ly/2doqJTS) via **Coursera**|3rd Oct|10|[4.6★ (28)](https://www.class-central.com/r/335)
 [Data to Insight: an Introduction to Data Analysis](http://bit.ly/2cLI8YW) via **FutureLearn**|3rd Oct|8|[4★ (2)](https://www.class-central.com/r/2129)
 [Programming Foundations with JavaScript, HTML and CSS](http://bit.ly/2doobVS) via **Coursera**|3rd Oct|4|[3.8★ (9)](https://www.class-central.com/r/4256)
 [Introduction to Cyber Security](http://bit.ly/2cLI4Z8) via **FutureLearn**|3rd Oct|8|[4.2★ (18)](https://www.class-central.com/r/2448)
 [Introduction to Programming with Java, Part 1: Starting to Code with Java](http://bit.ly/2dooS1E) via **edX**|4th Oct|NA|[3★ (2)](https://www.class-central.com/r/2813)
 [How To Create a Website in a Weekend! (Project-Centered Course)](http://bit.ly/2cLJrHl) via **Coursera**|10th Oct|3|[5★ (1)](https://www.class-central.com/r/5815)
 [Ruby on Rails: An Introduction](http://bit.ly/2dopdS1) via **Coursera**|10th Oct|3|[3.1★ (48)](https://www.class-central.com/r/4258)
 [Learn to Code for Data Analysis](http://bit.ly/2cLIrTM) via **FutureLearn**|10th Oct|4|[3★ (1)](https://www.class-central.com/r/3997)
 [Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course)](http://bit.ly/2dop299) via **Coursera**|10th Oct|6|[4.8★ (12)](https://www.class-central.com/r/3234)
 [Code Yourself! An Introduction to Programming](http://bit.ly/2cLHpqP) via **Coursera**|10th Oct|5|[4.3★ (6)](https://www.class-central.com/r/2938)
 [CODAPPS: Coding mobile apps for entrepreneurs](http://bit.ly/2donfRB) via **Coursera**|10th Oct|8|[5★ (1)](https://www.class-central.com/r/4333)
[NEW] [Python Programming: A Concise Introduction](http://bit.ly/2cLIMWf) via **Coursera**|10th Oct|NA|NA
 [HTML, CSS, and Javascript for Web Developers](http://bit.ly/2dooy2J) via **Coursera**|10th Oct|5|[5★ (4)](https://www.class-central.com/r/4270)
 [HTML, CSS and JavaScript](http://bit.ly/2cLHeM0) via **Coursera**|10th Oct|3|[4.1★ (13)](https://www.class-central.com/r/4239)
 [Introduction to HTML5](http://bit.ly/2dooBf3) via **Coursera**|10th Oct|3|[4.1★ (30)](https://www.class-central.com/r/4307)
 [Introduction to the Internet of Things and Embedded Systems](http://bit.ly/2cLHMSd) via **Coursera**|10th Oct|4|[3.7★ (6)](https://www.class-central.com/r/4338)
 [An Introduction to Interactive Programming in Python (Part 2)](http://bit.ly/2donhJd) via **Coursera**|17th Oct|4|[4.8★ (40)](https://www.class-central.com/r/3196)
 [Usable Security](http://bit.ly/2cLITBo) via **Coursera**|17th Oct|7|[2.9★ (8)](https://www.class-central.com/r/1727)
 [Introduction to Programming with MATLAB](http://bit.ly/2doono1) via **Coursera**|17th Oct|9|[4.9★ (141)](https://www.class-central.com/r/3396)
 [An Introduction to Interactive Programming in Python (Part 1)](http://bit.ly/2cLIbnA) via **Coursera**|17th Oct|5|[4.9★ (2816)](https://www.class-central.com/r/408)
 [Creative Programming for Digital Media & Mobile Apps](http://bit.ly/2dong87) via **Coursera**|24th Oct|NA|[4★ (10)](https://www.class-central.com/r/529)
[NEW] [AP Computer Science A: Java Programming Data Structures and Loops](http://bit.ly/2cLISNQ) via **edX**|24th Oct|NA|NA
 [Learn to Program: The Fundamentals](http://bit.ly/2doooZu) via **Coursera**|24th Oct|10|[4.8★ (81)](https://www.class-central.com/r/385)
 [Introduction à la programmation orientée objet (en Java)](http://bit.ly/2cLHqeo) via **Coursera**|24th Oct|7|[5★ (1)](https://www.class-central.com/r/441)
 [Begin Programming: Build Your First Mobile Game](http://bit.ly/2doo3pu) via **FutureLearn**|31st Oct|7|[3.9★ (7)](https://www.class-central.com/r/1243)

**INTERMEDIATE(154)**

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [M233: Getting Started with Spark and MongoDB](http://bit.ly/2cLHg6Q) via **MongoDB University**|Self paced|NA|NA
 [Android Basics: Data Storage](http://bit.ly/2cLHOJP) via **Udacity**|Self paced|NA|NA
[NEW] [Essential Design Principles for Tableau](http://bit.ly/2doqMz2) via **Coursera**|1st Oct|NA|NA
 [Software Defined Networking](http://bit.ly/2cLIyhV) via **Coursera**|1st Oct|NA|[4★ (5)](https://www.class-central.com/r/489)
 [Client Needs and Software Requirements ](http://bit.ly/2dooeB2) via **Coursera**|1st Oct|4|[4.3★ (6)](https://www.class-central.com/r/4302)
 [Client Needs and Software Requirements ](http://bit.ly/2dooeB2) via **Coursera**|1st Oct|4|[4.3★ (6)](https://www.class-central.com/r/4302)
 [Agile Planning for Software Products](http://bit.ly/2dopuEq) via **Coursera**|1st Oct|4|[3★ (2)](https://www.class-central.com/r/4235)
 [VLSI CAD Part I: Logic](http://bit.ly/2cLIM8S) via **Coursera**|1st Oct|10|[5★ (3)](https://www.class-central.com/r/428)
 [Software Processes and Agile Practices](http://bit.ly/2doom3G) via **Coursera**|1st Oct|4|[4.3★ (9)](https://www.class-central.com/r/4187)
 [Introduction to Software Product Management](http://bit.ly/2cLIkHw) via **Coursera**|1st Oct|2|[4.2★ (10)](https://www.class-central.com/r/4196)
 [Reviews & Metrics for Software Improvements](http://bit.ly/2dop7ts) via **Coursera**|1st Oct|4|NA
 [Discrete Optimization](http://bit.ly/2cLI37v) via **Coursera**|2nd Oct|9|[4.3★ (11)](https://www.class-central.com/r/487)
 [Internet Emerging Technologies](http://bit.ly/2dooCj7) via **Coursera**|3rd Oct|3|[3★ (2)](https://www.class-central.com/r/3933)
 [Java Programming: Arrays, Lists, and Structured Data](http://bit.ly/2cLHQ4p) via **Coursera**|3rd Oct|4|[4.3★ (3)](https://www.class-central.com/r/4362)
 [Multiplatform Mobile App Development with Web Technologies](http://bit.ly/2dop4Oj) via **Coursera**|3rd Oct|4|[5★ (1)](https://www.class-central.com/r/4224)
 [Responsive Web Design](http://bit.ly/2cLHv1B) via **Coursera**|3rd Oct|4|[3.3★ (10)](https://www.class-central.com/r/4200)
 [Big Data Integration and Processing](http://bit.ly/2dopeW5) via **Coursera**|3rd Oct|NA|NA
 [Robotic Vision](http://bit.ly/2cLIqzb) via **EdCast**|3rd Oct|9|[4.8★ (4)](https://www.class-central.com/r/3152)
 [Algorithms on Strings](http://bit.ly/2dop5ll) via **Coursera**|3rd Oct|NA|[3★ (1)](https://www.class-central.com/r/5470)
 [Introduction To Swift Programming](http://bit.ly/2cLHhaI) via **Coursera**|3rd Oct|5|[1.2★ (5)](https://www.class-central.com/r/4248)
 [Fundamentals of Visualization with Tableau](http://bit.ly/2dooosk) via **Coursera**|3rd Oct|NA|NA
 [Mastering the Software Engineering Interview](http://bit.ly/2cLIzT1) via **Coursera**|3rd Oct|4|[5★ (1)](https://www.class-central.com/r/4261)
 [Cloud Computing Applications, Part 1: Cloud Systems and Infrastructure](http://bit.ly/2dootMM) via **Coursera**|3rd Oct|5|[3.4★ (7)](https://www.class-central.com/r/2738)
 [Data Management and Visualization](http://bit.ly/2cLHtqt) via **Coursera**|3rd Oct|4|[2.4★ (5)](https://www.class-central.com/r/4184)
 [Cryptography](http://bit.ly/2doofF6) via **Coursera**|3rd Oct|7|[4.2★ (6)](https://www.class-central.com/r/1730)
 [Managing Data Analysis](http://bit.ly/2cLHQkV) via **Coursera**|3rd Oct|1|[1.8★ (6)](https://www.class-central.com/r/4388)
 [iOS App Development Basics](http://bit.ly/2dop94z) via **Coursera**|3rd Oct|5|[4★ (2)](https://www.class-central.com/r/4348)
 [Data Analysis Tools](http://bit.ly/2cLIley) via **Coursera**|3rd Oct|4|[3★ (3)](https://www.class-central.com/r/4169)
 [Principles of Machine Learning](http://bit.ly/2dopzYS) via **edX**|3rd Oct|NA|NA
 [Testing with Agile](http://bit.ly/2cLJuTx) via **Coursera**|3rd Oct|NA|NA
 [Internet of Things: How did we get here?](http://bit.ly/2dopa8C) via **Coursera**|3rd Oct|2|[2★ (5)](https://www.class-central.com/r/4276)
 [Cloud Computing Concepts: Part 2](http://bit.ly/2cLGZjX) via **Coursera**|3rd Oct|5|[4.8★ (4)](https://www.class-central.com/r/2942)
 [Cybersecurity and Mobility](http://bit.ly/2dooX5z) via **Coursera**|3rd Oct|NA|NA
 [Data Science in Real Life](http://bit.ly/2cLImiC) via **Coursera**|3rd Oct|1|[3★ (8)](https://www.class-central.com/r/4389)
 [Introduction to Meteor.js Development  ](http://bit.ly/2dooBvr) via **Coursera**|3rd Oct|4|[5★ (3)](https://www.class-central.com/r/4328)
[NEW] [The R Programming Environment](http://bit.ly/2cLKE1a) via **Coursera**|3rd Oct|NA|NA
 [Big Data: Mathematical Modelling](http://bit.ly/2doolww) via **FutureLearn**|3rd Oct|2|NA
 [Process Mining: Data science in Action](http://bit.ly/2cLI4IB) via **Coursera**|3rd Oct|6|[4.3★ (12)](https://www.class-central.com/r/2445)
[NEW] [Programming Languages, Part C](http://bit.ly/2dopvZ0) via **Coursera**|3rd Oct|NA|NA
 [Big Data, Cloud Computing, & CDN Emerging Technologies](http://bit.ly/2cLJva3) via **Coursera**|3rd Oct|3|[3.3★ (4)](https://www.class-central.com/r/3931)
 [Wireless Communication Emerging Technologies](http://bit.ly/2dooVKS) via **Coursera**|3rd Oct|5|[3.7★ (3)](https://www.class-central.com/r/3936)
 [Algorithms, Part I](http://bit.ly/2cLHmLq) via **Coursera**|3rd Oct|6|[4.4★ (37)](https://www.class-central.com/r/339)
 [Running Product Design Sprints](http://bit.ly/2door7f) via **Coursera**|3rd Oct|5|NA
 [Internet of Things & Augmented Reality Emerging Technologies](http://bit.ly/2cLJumv) via **Coursera**|3rd Oct|2|[2.5★ (2)](https://www.class-central.com/r/3934)
 [R Programming](http://bit.ly/2dooAaR) via **Coursera**|3rd Oct|4|[2.7★ (210)](https://www.class-central.com/r/1713)
 [The Data Scientist’s Toolbox](http://bit.ly/2cLIuyW) via **Coursera**|3rd Oct|4|[3.2★ (141)](https://www.class-central.com/r/1712)
 [Getting and Cleaning Data](http://bit.ly/2dope8t) via **Coursera**|3rd Oct|4|[3.4★ (47)](https://www.class-central.com/r/1714)
 [Practical Machine Learning](http://bit.ly/2cLJvqz) via **Coursera**|3rd Oct|4|[3.4★ (20)](https://www.class-central.com/r/1719)
 [Exploratory Data Analysis](http://bit.ly/2donTi3) via **Coursera**|3rd Oct|4|[3.8★ (32)](https://www.class-central.com/r/1715)
 [Cybersecurity and the X-Factor](http://bit.ly/2cLHhYg) via **Coursera**|3rd Oct|NA|NA
 [Regression Models](http://bit.ly/2donlIX) via **Coursera**|3rd Oct|4|[2.6★ (27)](https://www.class-central.com/r/1718)
 [Statistical Inference](http://bit.ly/2cLIQVZ) via **Coursera**|3rd Oct|4|[2.7★ (26)](https://www.class-central.com/r/1717)
 [Dealing With Missing Data](http://bit.ly/2dop2Wy) via **Coursera**|3rd Oct|NA|NA
 [Reproducible Research](http://bit.ly/2cLIBKD) via **Coursera**|3rd Oct|4|[3.7★ (22)](https://www.class-central.com/r/1716)
 [Machine Learning](http://bit.ly/2dopaWa) via **Coursera**|3rd Oct|11|[4.8★ (204)](https://www.class-central.com/r/835)
 [Internet of Things: Setting Up Your DragonBoard™ Development Platform](http://bit.ly/2cLIXB8) via **Coursera**|3rd Oct|10|[3★ (3)](https://www.class-central.com/r/4260)
 [Introduction to Big Data](http://bit.ly/2doorEh) via **Coursera**|3rd Oct|3|[2.6★ (27)](https://www.class-central.com/r/4164)
 [Algorithms: Design and Analysis, Part 1](http://bit.ly/2cLIWx4) via **Coursera**|3rd Oct|6|[4.7★ (52)](https://www.class-central.com/r/374)
 [Algorithmic Toolbox](http://bit.ly/2dopa8D) via **Coursera**|3rd Oct|5|[4.7★ (6)](https://www.class-central.com/r/5471)
 [Cryptography I](http://bit.ly/2cLIvTw) via **Coursera**|3rd Oct|7|[4.7★ (38)](https://www.class-central.com/r/616)
 [A Crash Course in Data Science](http://bit.ly/2dopgNH) via **Coursera**|3rd Oct|1|[3.3★ (14)](https://www.class-central.com/r/4392)
 [Data Visualization and Communication with Tableau](http://bit.ly/2cLIsHj) via **Coursera**|3rd Oct|5|[4★ (7)](https://www.class-central.com/r/4297)
 [Java Programming: Solving Problems with Software](http://bit.ly/2dopDYC) via **Coursera**|3rd Oct|4|[3.3★ (8)](https://www.class-central.com/r/4305)
 [Database Management Essentials](http://bit.ly/2cLHpqA) via **Coursera**|3rd Oct|7|[3.8★ (4)](https://www.class-central.com/r/4337)
 [Hadoop Platform and Application Framework](http://bit.ly/2dop8xx) via **Coursera**|3rd Oct|5|[1.9★ (19)](https://www.class-central.com/r/4269)
 [Front-End Web UI Frameworks and Tools](http://bit.ly/2cLI5w9) via **Coursera**|3rd Oct|4|[4.3★ (6)](https://www.class-central.com/r/4240)
 [Algorithms: Design and Analysis, Part 2](http://bit.ly/2dooFLP) via **Coursera**|3rd Oct|6|[4.8★ (16)](https://www.class-central.com/r/426)
 [A developer's guide to the Internet of Things (IoT)](http://bit.ly/2cLHISl) via **Coursera**|3rd Oct|NA|[4★ (1)](https://www.class-central.com/r/6040)
 [Java for Android](http://bit.ly/2dopEvE) via **Coursera**|4th Oct|4|NA
 [Data Visualization](http://bit.ly/2cLID5d) via **Coursera**|10th Oct|4|[3.2★ (15)](https://www.class-central.com/r/2737)
 [Framework for Data Collection and Analysis](http://bit.ly/2dootMp) via **Coursera**|10th Oct|NA|[3.5★ (2)](https://www.class-central.com/r/6085)
 [Interactivity with JavaScript](http://bit.ly/2cLHDhC) via **Coursera**|10th Oct|4|[4.3★ (6)](https://www.class-central.com/r/4295)
 [Responsive Website Basics: Code with HTML, CSS, and JavaScript ](http://bit.ly/2dopaWb) via **Coursera**|10th Oct|4|[3.9★ (20)](https://www.class-central.com/r/4191)
 [Introduction to Spreadsheets and Models](http://bit.ly/2cLH1s5) via **Coursera**|10th Oct|4|[4.7★ (3)](https://www.class-central.com/r/5451)
 [Functional Program Design in Scala](http://bit.ly/2doogJq) via **Coursera**|10th Oct|NA|NA
 [The Raspberry Pi Platform and Python Programming for the Raspberry Pi](http://bit.ly/2cLHmvd) via **Coursera**|10th Oct|4|[3.5★ (2)](https://www.class-central.com/r/4334)
 [Biology Meets Programming: Bioinformatics for Beginners](http://bit.ly/2dopF2G) via **Coursera**|10th Oct|4|[5★ (5)](https://www.class-central.com/r/745)
 [Best Practices for iOS User Interface Design](http://bit.ly/2cLI5MF) via **Coursera**|10th Oct|4|[5★ (1)](https://www.class-central.com/r/4251)
 [Algorithms on Graphs](http://bit.ly/2dopkNc) via **Coursera**|10th Oct|NA|[4★ (1)](https://www.class-central.com/r/5479)
 [Big Data Modeling and Management Systems](http://bit.ly/2cLIX46) via **Coursera**|10th Oct|NA|NA
 [Advanced Algorithms and Complexity](http://bit.ly/2dooj7O) via **Coursera**|10th Oct|NA|NA
 [Java Programming: Principles of Software Design](http://bit.ly/2cLIRt1) via **Coursera**|10th Oct|4|[4.7★ (3)](https://www.class-central.com/r/4323)
 [Programming Mobile Applications for Android Handheld Systems: Part 2](http://bit.ly/2dopl3X) via **Coursera**|10th Oct|5|[4.5★ (12)](https://www.class-central.com/r/3076)
 [Interfacing with the Arduino](http://bit.ly/2cLHiLO) via **Coursera**|10th Oct|4|[4★ (4)](https://www.class-central.com/r/4325)
 [Toward the Future of iOS Development with Swift](http://bit.ly/2doogZW) via **Coursera**|10th Oct|4|NA
 [Advanced Data Structures in Java](http://bit.ly/2cLHmeI) via **Coursera**|10th Oct|5|NA
 [Interfacing with the Raspberry Pi](http://bit.ly/2doptAb) via **Coursera**|10th Oct|4|[1★ (1)](https://www.class-central.com/r/4265)
 [Web Application Development with JavaScript and MongoDB](http://bit.ly/2cLIQFt) via **Coursera**|10th Oct|4|[4.2★ (5)](https://www.class-central.com/r/4288)
 [Data Manipulation at Scale: Systems and Algorithms](http://bit.ly/2dopd4j) via **Coursera**|10th Oct|4|[2.5★ (4)](https://www.class-central.com/r/4473)
 [Data Structures and Performance](http://bit.ly/2cLHjiM) via **Coursera**|10th Oct|5|[5★ (3)](https://www.class-central.com/r/4203)
 [Approximation Algorithms Part I](http://bit.ly/2dooIqZ) via **Coursera**|10th Oct|5|[5★ (2)](https://www.class-central.com/r/5026)
 [Getting Started: Agile Meets Design Thinking](http://bit.ly/2cLI9Mq) via **Coursera**|10th Oct|5|[5★ (1)](https://www.class-central.com/r/5502)
 [Text Retrieval and Search Engines](http://bit.ly/2doqRCQ) via **Coursera**|10th Oct|4|[3.2★ (5)](https://www.class-central.com/r/2734)
 [Games, Sensors and Media](http://bit.ly/2cLHive) via **Coursera**|10th Oct|4|NA
 [Advanced Styling with Responsive Design](http://bit.ly/2donYlR) via **Coursera**|10th Oct|4|[4.7★ (3)](https://www.class-central.com/r/4190)
 [Beginning Game Programming with C#](http://bit.ly/2cLIvmt) via **Coursera**|10th Oct|12|[3.4★ (14)](https://www.class-central.com/r/1031)
 [Programming Mobile Applications for Android Handheld Systems: Part 1](http://bit.ly/2dope8m) via **Coursera**|10th Oct|5|[4.1★ (35)](https://www.class-central.com/r/1178)
 [Managing an Agile Team](http://bit.ly/2cLKHtS) via **Coursera**|10th Oct|NA|[2★ (1)](https://www.class-central.com/r/5564)
 [Cybersecurity and the Internet of Things](http://bit.ly/2dopsfB) via **Coursera**|10th Oct|NA|NA
 [Data Warehouse Concepts, Design, and Data Integration](http://bit.ly/2cLI8bj) via **Coursera**|10th Oct|5|[5★ (1)](https://www.class-central.com/r/4230)
 [Responsive Website Tutorial and Examples](http://bit.ly/2dopBzQ) via **Coursera**|10th Oct|4|[5★ (1)](https://www.class-central.com/r/4356)
 [App Design and Development for iOS](http://bit.ly/2cLHnPN) via **Coursera**|10th Oct|5|[3★ (2)](https://www.class-central.com/r/4175)
 [Foundations of Objective-C App Development](http://bit.ly/2dooY9w) via **Coursera**|10th Oct|4|[3★ (2)](https://www.class-central.com/r/4268)
 [Functional Programming Principles in Scala](http://bit.ly/2cLIjDP) via **Coursera**|10th Oct|7|[4.8★ (45)](https://www.class-central.com/r/422)
 [Ruby on Rails Web Services and Integration with MongoDB](http://bit.ly/2dooHDj) via **Coursera**|10th Oct|4|[4.8★ (4)](https://www.class-central.com/r/4321)
 [Object Oriented Programming in Java](http://bit.ly/2cLIheW) via **Coursera**|10th Oct|6|[4.8★ (10)](https://www.class-central.com/r/4212)
 [Build Your First Android App (Project-Centered Course)](http://bit.ly/2dooHmV) via **Coursera**|10th Oct|5|[3★ (1)](https://www.class-central.com/r/5719)
 [Managing Big Data with MySQL](http://bit.ly/2cLJymf) via **Coursera**|10th Oct|5|[3.8★ (5)](https://www.class-central.com/r/4181)
 [Rails with Active Record and Action Pack](http://bit.ly/2dop1Cl) via **Coursera**|10th Oct|4|[4★ (1)](https://www.class-central.com/r/4197)
 [Data Structures](http://bit.ly/2cLHxXh) via **Coursera**|10th Oct|4|[2★ (2)](https://www.class-central.com/r/5475)
 [Single Page Web Applications with AngularJS](http://bit.ly/2doplRg) via **Coursera**|10th Oct|NA|NA
 [Software Architecture for the Internet of Things](http://bit.ly/2cLHvib) via **Coursera**|10th Oct|NA|NA
 [The Arduino Platform and C Programming](http://bit.ly/2dooYGy) via **Coursera**|10th Oct|4|[3.3★ (7)](https://www.class-central.com/r/4206)
 [Cloud Computing Concepts, Part 1](http://bit.ly/2cLHLO1) via **Coursera**|10th Oct|5|[2.6★ (17)](https://www.class-central.com/r/2717)
 [Server-side Development with NodeJS](http://bit.ly/2dopnsm) via **Coursera**|10th Oct|4|[5★ (1)](https://www.class-central.com/r/4229)
 [Mining Massive Datasets](http://stanford.io/2cLIhLY) via **Stanford OpenEdx**|11th Oct|7|[4.6★ (17)](https://www.class-central.com/r/2406)
 [M101J: MongoDB for Java Developers](http://bit.ly/2dopjZP) via **MongoDB University**|11th Oct|7|[4.5★ (15)](https://www.class-central.com/r/599)
 [M101JS: MongoDB for Node.js Developers](http://bit.ly/2cLHE5a) via **MongoDB University**|11th Oct|7|[4.4★ (8)](https://www.class-central.com/r/1188)
 [M101N: MongoDB for .NET Developers](http://bit.ly/2doovUx) via **MongoDB University**|11th Oct|NA|[4★ (3)](https://www.class-central.com/r/3273)
 [M101P: MongoDB for Developers](http://bit.ly/2cLJB1p) via **MongoDB University**|11th Oct|7|[4.8★ (8)](https://www.class-central.com/r/600)
 [M102: MongoDB for DBAs](http://bit.ly/2doptjF) via **MongoDB University**|11th Oct|7|[4.5★ (8)](https://www.class-central.com/r/475)
 [M202: MongoDB Advanced Deployment and Operations](http://bit.ly/2cLHomP) via **MongoDB University**|11th Oct|7|[5★ (4)](https://www.class-central.com/r/1777)
 [Software Security ](http://bit.ly/2dooGPL) via **Coursera**|17th Oct|6|[4.7★ (20)](https://www.class-central.com/r/1728)
 [Global Warming II: Create Your Own Models in Python](http://bit.ly/2cLH3Ad) via **Coursera**|17th Oct|5|[2★ (1)](https://www.class-central.com/r/5704)
 [Programming Languages, Part A](http://bit.ly/2dopzI7) via **Coursera**|17th Oct|NA|[4.9★ (16)](https://www.class-central.com/r/452)
 [Algorithmic Thinking (Part 1)](http://bit.ly/2cLIFtR) via **Coursera**|17th Oct|4|[4.1★ (13)](https://www.class-central.com/r/1725)
 [C++ For C Programmers, Part B](http://bit.ly/2dooNLf) via **Coursera**|17th Oct|NA|NA
 [Interactive Computer Graphics](http://bit.ly/2cLH3QJ) via **Coursera**|17th Oct|8|[3.5★ (2)](https://www.class-central.com/r/2067)
[NEW] [Advanced R Programming](http://bit.ly/2dopCDU) via **Coursera**|17th Oct|NA|NA
 [Principles of Computing (Part 1)](http://bit.ly/2cLIbE2) via **Coursera**|17th Oct|5|[4.6★ (25)](https://www.class-central.com/r/1724)
[NEW] [How to Win Coding Competitions: Secrets of Champions](http://bit.ly/2dopvIj) via **edX**|17th Oct|NA|NA
 [Front-End JavaScript Frameworks: AngularJS](http://bit.ly/2cLJzXl) via **Coursera**|17th Oct|4|[3.8★ (4)](https://www.class-central.com/r/4292)
 [Internet of Things: Communication Technologies](http://bit.ly/2donZGr) via **Coursera**|17th Oct|4|[3★ (2)](https://www.class-central.com/r/4173)
 [Algorithmic Thinking (Part 2)](http://bit.ly/2cLI9fn) via **Coursera**|17th Oct|NA|[4.4★ (8)](https://www.class-central.com/r/3200)
 [Introduction to Neurohacking In R](http://bit.ly/2doowrO) via **Coursera**|17th Oct|NA|NA
 [Cloud Networking](http://bit.ly/2cLIzTg) via **Coursera**|17th Oct|5|[4.3★ (3)](https://www.class-central.com/r/2732)
 [Introduction to Architecting Smart IoT Devices](http://bit.ly/2dopCUq) via **Coursera**|17th Oct|NA|NA
 [Principles of Computing (Part 2)](http://bit.ly/2cLHmuY) via **Coursera**|17th Oct|NA|[4.3★ (14)](https://www.class-central.com/r/3198)
 [Programming Languages, Part B](http://bit.ly/2dop8gS) via **Coursera**|17th Oct|NA|NA
[NEW] [Internet of Things for Active Aging](http://bit.ly/2cLHA5n) via **FutureLearn**|17th Oct|NA|NA
[NEW] [Cyber Security Economics](http://bit.ly/2donqwf) via **edX**|19th Oct|NA|NA
 [Introduction to Computational Thinking and Data Science](http://bit.ly/2cLIAGO) via **edX**|19th Oct|9|[4.4★ (20)](https://www.class-central.com/r/1779)
 [Genomic Data Science with Galaxy](http://bit.ly/2donZWX) via **Coursera**|24th Oct|4|[1.8★ (11)](https://www.class-central.com/r/3473)
 [Bioinformatics: Introduction and Methods 生物信息学: 导论与方法](http://bit.ly/2cLIkYa) via **Coursera**|24th Oct|14|NA
 [Web Application Development: Basic Concepts](http://bit.ly/2dopp3H) via **Coursera**|24th Oct|NA|NA
 [Python for Genomic Data Science](http://bit.ly/2cLHlXW) via **Coursera**|24th Oct|4|[2.4★ (11)](https://www.class-central.com/r/3476)
 [Introduction to Genomic Technologies](http://bit.ly/2dopCnh) via **Coursera**|24th Oct|4|[2.7★ (10)](https://www.class-central.com/r/3472)
[NEW] [Julia Scientific Programming](http://bit.ly/2cLIUVJ) via **Coursera**|24th Oct|NA|NA
 [Introduction to Data Science in Python](http://bit.ly/2dopqEy) via **Coursera**|24th Oct|NA|NA
 [Computer Architecture](http://bit.ly/2cLH4nL) via **Coursera**|24th Oct|11|[4.5★ (4)](https://www.class-central.com/r/342)
 [Statistics for Genomic Data Science](http://bit.ly/2donWdB) via **Coursera**|24th Oct|4|[2★ (2)](https://www.class-central.com/r/3478)
 [C++ For C Programmers, Part A](http://bit.ly/2cLHxGP) via **Coursera**|24th Oct|NA|[3.2★ (9)](https://www.class-central.com/r/671)
 [Документы и презентации в LaTeX (Introduction to LaTeX)](http://bit.ly/2dooyjq) via **Coursera**|31st Oct|5|NA
 [Big Data: Data Visualisation](http://bit.ly/2cLHyun) via **FutureLearn**|31st Oct|2|NA

**ADVANCED(42)**

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [Bitcoin and Cryptocurrency Technologies](http://bit.ly/2dooeBa) via **Coursera**|1st Oct|7|[4.6★ (9)](https://www.class-central.com/r/3655)
[NEW] [Nature, in Code: Biology in JavaScript](http://bit.ly/2cLHtqk) via **edX**|1st Oct|NA|NA
[NEW] [Recommender Systems:  Evaluation and Metrics](http://bit.ly/2dop40S) via **Coursera**|1st Oct|NA|NA
 [Nearest Neighbor Collaborative Filtering](http://bit.ly/2cLIazX) via **Coursera**|1st Oct|NA|NA
 [Machine Learning: Clustering & Retrieval](http://bit.ly/2dop6G9) via **Coursera**|3rd Oct|NA|[4.5★ (2)](https://www.class-central.com/r/4313)
 [Big Data Science with the BD2K-LINCS Data Coordination and Integration Center](http://bit.ly/2cLHACr) via **Coursera**|3rd Oct|7|[4★ (1)](https://www.class-central.com/r/3024)
 [Text Mining and Analytics](http://bit.ly/2doozUh) via **Coursera**|3rd Oct|4|[3.7★ (6)](https://www.class-central.com/r/2736)
 [Embedded Hardware and Operating Systems](http://bit.ly/2cLHyuo) via **Coursera**|3rd Oct|NA|NA
 [System Validation: Automata and behavioural equivalences](http://bit.ly/2dooobC) via **Coursera**|3rd Oct|NA|NA
 [Machine Learning for Data Analysis](http://bit.ly/2cLIrCW) via **Coursera**|3rd Oct|4|[3★ (3)](https://www.class-central.com/r/4354)
 [Neural Networks for Machine Learning](http://bit.ly/2dootw0) via **Coursera**|3rd Oct|8|[4.5★ (11)](https://www.class-central.com/r/398)
 [Quantitative Formal Modeling and Worst-Case Performance Analysis](http://bit.ly/2cLHnz6) via **Coursera**|3rd Oct|4|[4★ (2)](https://www.class-central.com/r/4864)
 [Advanced Linear Models for Data Science 1: Least Squares](http://bit.ly/2dophkz) via **Coursera**|3rd Oct|NA|NA
 [Developing Data Products](http://bit.ly/2cLHA5t) via **Coursera**|3rd Oct|4|[3.9★ (16)](https://www.class-central.com/r/1720)
 [Cluster Analysis in Data Mining](http://bit.ly/2doon7O) via **Coursera**|3rd Oct|4|[2.6★ (5)](https://www.class-central.com/r/2735)
 [Machine Learning: Regression](http://bit.ly/2cLKK92) via **Coursera**|3rd Oct|6|[4.7★ (13)](https://www.class-central.com/r/4289)
 [Introduction to Natural Language Processing](http://bit.ly/2donWKD) via **Coursera**|3rd Oct|NA|[3.8★ (6)](https://www.class-central.com/r/3332)
 [Regression Modeling in Practice](http://bit.ly/2cLIoHD) via **Coursera**|7th Oct|4|[5★ (2)](https://www.class-central.com/r/4351)
 [Parallel programming](http://bit.ly/2doo2C7) via **Coursera**|10th Oct|NA|[5★ (1)](https://www.class-central.com/r/5960)
 [Pattern Discovery in Data Mining](http://bit.ly/2cLHv1q) via **Coursera**|10th Oct|4|[2.2★ (19)](https://www.class-central.com/r/2733)
 [Finding Hidden Messages in DNA (Bioinformatics I)](http://bit.ly/2dopy6X) via **Coursera**|10th Oct|4|[4.5★ (16)](https://www.class-central.com/r/3289)
 [Graph Analytics for Big Data](http://bit.ly/2cLHoD6) via **Coursera**|10th Oct|4|[2.4★ (5)](https://www.class-central.com/r/4249)
 [Introduction to Recommender Systems:  Non-Personalized and Content-Based](http://bit.ly/2doppR0) via **Coursera**|10th Oct|NA|NA
 [Nearest Neighbor Collaborative Filtering](http://bit.ly/2cLIazX) via **Coursera**|10th Oct|NA|NA
 [Practical Predictive Analytics: Models and Methods](http://bit.ly/2dopEvp) via **Coursera**|10th Oct|4|[2.5★ (2)](https://www.class-central.com/r/4341)
 [Hardware Security](http://bit.ly/2cLHD15) via **Coursera**|10th Oct|6|[3★ (9)](https://www.class-central.com/r/1729)
 [Approximation Algorithms Part II](http://bit.ly/2dopmot) via **Coursera**|10th Oct|4|NA
 [Cloud Computing Applications, Part 2: Big Data and Applications in the Cloud](http://bit.ly/2cLJ3su) via **Coursera**|10th Oct|NA|NA
 [Genomic Data Science and Clustering (Bioinformatics V)](http://bit.ly/2dopLY6) via **Coursera**|10th Oct|2|[3.5★ (2)](https://www.class-central.com/r/3556)
[NEW] [Big Data, Genes, and Medicine](http://bit.ly/2cLHpac) via **Coursera**|10th Oct|NA|NA
 [Genome Sequencing (Bioinformatics II)](http://bit.ly/2doo1y3) via **Coursera**|10th Oct|4|[5★ (3)](https://www.class-central.com/r/3290)
 [Machine Learning Foundations: A Case Study Approach](http://bit.ly/2cLIzCJ) via **Coursera**|10th Oct|6|[4.2★ (30)](https://www.class-central.com/r/4352)
 [Relational Database Support for Data Warehouses](http://bit.ly/2dooCQk) via **Coursera**|10th Oct|5|[2★ (1)](https://www.class-central.com/r/4199)
[NEW] [Quantum Cryptography](http://bit.ly/2cLHriw) via **edX**|10th Oct|NA|NA
[NEW] [Introduction to OpenStack](http://bit.ly/2doogJi) via **edX**|12th Oct|NA|NA
 [Machine Learning: Classification](http://bit.ly/2dopS5X) via **Coursera**|17th Oct|7|[4.8★ (6)](https://www.class-central.com/r/4219)
 [Bioconductor for Genomic Data Science](http://bit.ly/2cLK1Vx) via **Coursera**|24th Oct|4|[3.3★ (3)](https://www.class-central.com/r/3475)
 [Advanced Java Concurrency](http://bit.ly/2dooX5i) via **Coursera**|24th Oct|NA|NA
 [Computational Neuroscience](http://bit.ly/2cLIDCd) via **Coursera**|24th Oct|8|[3.8★ (6)](https://www.class-central.com/r/449)
 [Algorithms for DNA Sequencing](http://bit.ly/2dopxjE) via **Coursera**|24th Oct|4|[4.5★ (16)](https://www.class-central.com/r/3433)
 [Probabilistic Graphical Models 1: Representation](http://bit.ly/2cLI1N3) via **Coursera**|31st Oct|11|[4.4★ (10)](https://www.class-central.com/r/309)",2568,59,dhawal,2016-10-03 13:45:02,https://www.reddit.com/r/learnprogramming/comments/55npda/heres_a_list_of_520_free_online_programmingcs/,2,learnprogramming
o7jq75,"At 39, I just got an offer for my first software dev job!","I did it!!! After two years of coding obsession, I got my first programming job! I’m in freaking heaven! So many days working at 4 am, banging my head against the wall feeling stuck and hopeless and daydreaming about code, I got my offer!!!! I think this is the second happiest day of my life (getting my Aussie visa at Jun,11 2020 being the first).

This is a big post, so if you don't want to go through the whole thing, the key take-away is: I'm ok at Maths, but waaay I'm far from a wizard. I literally knew a bit of HTML two years ago and I was teaching Salsa for a living. So If I got there, hell yeah most people who are willing to put in the work can too.

**The Journey**

I can say I’m lucky that I found something I love so much. That made it easy for me to get out of bed straight to my computer (actually after a cold shower) almost every day to get my coding hours early in the morning before life throws things at me. My passion was the fuel to code in any spare time I had. And change my habits and routines to carve out as much time as possible to code. I always knew that the only way to get to where I wanted was to have my butt on the chair and put in the time. 

During this time I had a couple of relationships that were pretty much ruined because I didn’t want to dedicate much time to them. Lovely, valuable, incredible women. But for the most part I just wanted to code. I’m lucky that I could quit my dancing job and drive an Uber (with all the flexibility it allows), otherwise I would probably have problems keeping my current girlfriend. And she’s THE ONE. I want to spend the rest of my life with her. 

Quitting was the best thing I could have possibly done. It wasn’t hard work per se, but the nature of the job requires a lot of preparation, training, researching and just good old thinking about it. In Uber I do long hours, but there’s none of the extra stuff. And even when I’m driving I can do coding exercises, think about programming, listen to podcasts about it and so on. 

**Getting the Job**

Another crucial realisation was that in order to get a job I’d need to focus [on a portfolio](https://cappuccinocoding.com/). That was super important because it made me focus on completing projects. And all it took was ONE SINGLE full stack application for my recruiters to shortlist me for the job. I honestly didn't think it would be possible to get a job with at least half a dozen decent apps, but I was wrong. 

I had tons of accumulated knowledge from my previous semi-publishable jobs. The projects that were portfolio ready were only WordPress websites and a page for a small accounting company using HTML, CSS and Vanilla JS that doesn’t even look that good but that made me proud because it was a first.

So with the help of Ionic Academy and my previous C# knowledge I created a [Shift Tracker ](http://cappuccinoshifts.azurewebsites.net/)that has the whole full-stack lot: Ionic in the front end, C# in the back end, Azure for hosting and database and Firebase for authentication.

When that was done I applied for eight jobs and only one responded. I wasn’t expecting it at all. I thought I would need way more work on my portfolio. Everything happened very quickly. I was sent a coding exercise, that was quite complex to me. I had to look up a few things to solve it. I thought for sure I wasn’t going to pass. But I did and got an interview. Again I thought I had no chance but I guess my enthusiasm and the fact that I communicate reasonably well due to being a teacher were enough to get me through the door.

**Advice**

Some people might be on the same journey as I am, so if I could give advice on how to get there, here are a few:

* **Build stuff**. This is important on so many levels! We’re training to be engineers, so building stuff is the ultimate goal. The feeling of completing a working application is just incredible. And it will provide the confidence boost that self-taught folks out there need so much not to quit. Oh, and of course, completed apps will populate your portfolio, which is absolutely essential to get even considered for a job. 
* **Find the time**. If you work full time as I do, you’ll either have to wake up early or code after work. I would choose doing it early. I remember listening to a podcast about someone that studied every day from 4 to 8 for 9 months and got a Ruby job. That stuck with me. If you study every single day (or close) for 4 hours there’s just no way you won’t have some solid knowledge by the end of that time. Of course you’ll need some course corrections, but there’s nothing like putting in the time.
* **Stick with stuff:** For each problem you’ll need to solve there are dozens of options on how to do it and which tool to use. The first couple of questions will be: Which language to learn and which front-end framework to use. It really doesn’t matter. Pick one and stick to it. The principles are the same and once you’ll learn one you’ll be able to pick others up when needed. I’ll have to learn React from scratch for my new job and I’m confident that my knowledge with ASP.NET MVC and Angular will help. After all, it’s just moving data around!
* **Read, read and read**. Even though you’ll stick with a few technologies, don’t ever stop reading. I read literally thousands of articles about all the hundreds of questions that came up during my journey. Dive into Reddit, make it your poop time read. Read it every single day, there’s amazing advice over there. I promise 100% of your questions for your 10 first years as a developer have already been answered online. 
* **Get a mentor**: Find someone that knows more than you and can help you. I had the luck to have a close friend that’s a C# and Angular Developer that got me unstuck a few times. I’ve also learned a lot just watching him code and observing his thought process. And of course I spent countless hours on [stack overflow](https://stackoverflow.com/users/11659311/pablo-aguirre-de-souza). Those are my indirect mentors along with the teachers I mention in the resources below.
* **Don’t think you can’t fix a problem**: I got stuck for weeks with a few problems, but I knew for sure: It has been done before, I’m not building the most complex application in the world. Mankind can control a god damn robot in Mars FROM EARTH, why wouldn’t I be able to do implement some stupid feature in a simple app? Stick to it and YOU WILL SOLVE IT.

**The Resources**

I’ll try to enumerate all resources I used throughout these two years. They were all valuable in their own capacity and some were absolutely essential.

[Codeacademy:](https://www.codecademy.com/) My first online resource ever. I took a front end course, very well organised and explained. Super beginner friendly. I breezed through the html part because I had learned it years ago. Then I learned the CSS part but I finished the AJAX and JS parts without understanding them too well. I didn’t continue with them because everything they did was in an embedded IDE so I wasn’t actually building anything, but just rendering code in their IDE. It probably suits most people to learn that way, but I missed actually building something, so I only learned from them for a month or so. 

[Traversy Media](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA): This absolute legend of a guy taught me so much! His laid-back, no-fluff, to the point style was exactly what I needed. I learned the basics of many technologies with him. Bootstrap, Javascript, NodeJS, Angular. He’s got excellent material for beginners, building stuff from scratch. He was the one responsible for my first few websites. It’s not a coincidence he has such a massive audience on Youtube.

[Maximilian Schwarzmuler:](https://www.udemy.com/user/maximilian-schwarzmuller/) Not long after learning basic JS I realised there was this thing called “framework”, and that’s what everyone uses professionally. My coding mentor uses Angular so that was a natural choice for me, but he warned the learning curve would be steep. And it is, I’m still learning to this day, but I absolutely love Angular. There’s something about how its code is organised and it’s aesthetics that deeply resonates with me.  

Learning it was so much easier with the help of this fantastic teacher. His courses are incredible, explaining every little component in detail. I love that not only he teaches aspects of Angular in the context of a project, but also isolates these subjects and teaches them separately, which makes them so much easier to learn! I’ve also taken his Ionic and Angular Material courses and they’re equally great. 

[CodeGym](https://codegym.cc/): I also learned pretty quickly that to build the stuff I wanted to build I would need a back-end language. Also influenced by a couple of friends I picked Java and bought a CodeGym subscription. It has the same pros and cons as CoderAcademy. The way the course is put together is super friendly, progressive and with TONS (I mean ridiculous amounts) of exercises, which I love. 

But I disconnected a bit from the course after a few months because I was learning advanced topics of programming without building stuff, which was frustrating to me. I remember spending weeks learning about multithreading, and don’t get me wrong, it was super valuable, but I need to build stuff to really understand something. 

I think I’m way better at learning isolated from building now, but that’s because having built a few applications I can actually visualise where the new knowledge will be useful. Back then, it just didn’t do it for me.

[Neil Cummings:](https://www.udemy.com/user/neil-cummings-2/)

When I finally pivoted to C#, due to it being the language my mentor uses in the back end of his free-lance projects, I started learning from Neil Cummings. It was probably not a good idea to start with him because I thought I would understand C# easily after learning basic Java, but I still needed to lay down some foundations. His course is heavy in design patterns and libraries and it isn’t beneficial to learn this stuff without learning the basics first. 

Having said that, after building more solid C# skills, his course on Angular + Asp.NET C# was great. Through him I was first exposed to: Entity Framework, Repository Pattern, Specification Patterns, Swagger, DTOs, Automapper and much more. Oh, and it’s impossible not to like his thick British accent.

[Musavi Abdullah](https://www.udemy.com/user/abdullah-almusawi-3/)

After realising I need to learn proper C# I got a beginner course from Musavi. Super funny teacher and very enthusiastic about coding. He organises his course building several little applications, using windows forms, from a super simple clock to a data table. I loved working with Forms but too bad those days are over. I’d have loved to be a programmer in the 2000s working with desktop applications. 

[Ionic Academy](http://ionicacademy.com/)

Loving Angular of course I would love Ionic too and Simon Grimm does a fantastic job covering all topics in both with super interesting projects, updating his Ionic Academy every week. Along with Pluralsight it’s the other subscription resource I pay for and I don’t plan to stop anytime soon. I’ll still learn so much from him. Oh, and funny guy too.

[Code Affection](https://www.youtube.com/channel/UCvzlnZbePin9kH-1JCKBt8Q)

Absolutely to the point Youtuber teaching full stack webdev with Angular and Material + Asp.NET. I built my first few full stack CRUD applications due to this great teacher. No fluff, just code. And code that works. Oh, and all free!

[Tim Corey](https://www.youtube.com/user/IAmTimCorey)

Everyone who learns ASP.NET probably knows Tim Corey, but if you don’t, check him out, NOW. Fantastic teacher, helps you figure out what’s actually important in this vast ocean that is ASP.NET. He was my latest finding and I owe him a big thanks for preparing me for the coding challenge I was given in the selection for this job. 

[Pluralsight](https://www.pluralsight.com/)

By far the most valuable resource. I pay around 40AUD a month for their content and I can say I owe them my salary, so if you haven’t started paying for something as cheap and as valuable as Pluralsight, don’t think again. You don’t know what you’re missing. They have everything you need. Front-end, back-end, SQL, Cloud, Unit testing, CI/CD, tons of theory about OOP, design patterns and general computer science stuff. It’s just amazing. 

I honestly love all teachers at Plural sight, but some deserve special mention: 

* [Scott Allen](https://www.pluralsight.com/authors/scott-allen?aid=701j0000001heIrAAI&promo=&utm_source=non_branded&utm_medium=digital_paid_search_google&utm_campaign=APAC_Dynamic&utm_content=&cq_cmp=179446758&gclid=Cj0KCQjw2tCGBhCLARIsABJGmZ6q1m8SP6NRoieDE6MYVdycttG2nICUlIqS2CTT5nfhQxqITl0Dx8MaAiO2EALw_wcB) (RIP). I’ll never forget his powerful voice and teaching style. I can’t thank him enough for his contribution with basic C# and Linq.
* [Kevin Dockx](https://app.pluralsight.com/profile/author/kevin-dockx). This is the API master. I’ve done four of his courses on Restful APIs. I promise you’ll learn everything you know about building APIs if you’re a beginner.
* [Deborah Kuratah](https://app.pluralsight.com/profile/author/deborah-kurata). I could listen to her voice for hours. It’s like listening to a children’s book. Absolute natural teacher. I did her Object Oriented courses and I’m not sure I can convey how well she explains things. 
* Alex Wolf, Gill Cleeren, Shawn Wildermuth, Julie Lerman, Filip Ekberg, Jason Roberts, Paul Sheriff, Thomas Claudius Huber, each contributing with a fundamental piece of this immense puzzle.

**Books**

To finalize this huge post, I can’t forget to mention a few other resources that have helped me so much since 2018 when I first listened to a podcast.

[**Jocko Willink’s Podcast**](https://jockopodcast.com/) – Probably saved my life on many levels. I listened to about 200 of his episodes about war and darkness. Listen to his stuff from episode one and you’ll never complain about anything ever again. You’ll get all the grit you need to accomplish anything you want. DO IT.

[**Tim Ferriss**](https://tim.blog/podcast/) – Due to Jocko I got in touch with Tim Ferriss Podcast. I can say he’s the person that influenced my life the most. The way he talks, the way he thinks and his obsession with growing have had a deep impact in my life. Amazing guy, he has interviews with people from all backgrounds, masters of the universe kind of people. Tony Robbins, Schwarzenegger, Richard Branson, Hugh Jackman, Jamie Foxx, Brene Brown, Ray Dalio, Lebron James just to name the most famous.

**Books** – I know some people have trouble reading and I don’t even have time myself but with Audible, there are just no excuses anymore. Just play it on your headphones as you go about your business, don’t find an excuse. If your excuse is just: “I don’t like books”, so fucking start liking it! Why wouldn’t you want to have cheap condensed knowledge from years of other people’s experiences? Do you know it all? Books are ACTUALLY impactful and have the power to change the trajectory of your life.

I’ll just name the ones related to my coding journey: 

[**Mastery**](https://www.goodreads.com/book/show/13589182-mastery) – Amazing stories about folks that became masters in their field. Learn what it was like in their humble beginning.

[**So Good They Can’t Ignore You** ](https://www.amazon.com/Good-They-Cant-Ignore-You/dp/1455509124)– Pretty self-explanatory title. 

[**Steve Jobs**](https://www.goodreads.com/book/show/11084145-steve-jobs) – If Steve Job’s passion doesn’t inspire you (in despite of the way he treated people), I’ll give you a dollar. Read it, now!

**The Future**

I've heard multiple times that getting in is the easy part, the hard work actually starts now. But I can't wait to face all the challenges of working for a big company! Feel free to contact me! I’ll be happy to help those who are on the same journey, however I can. 😁",2571,135,CappuccinoCodes,2021-06-25 08:44:07,https://www.reddit.com/r/learnprogramming/comments/o7jq75/at_39_i_just_got_an_offer_for_my_first_software/,0,learnprogramming
ipml27,Been accepted onto a software development apprenticeship today!,"I'm just so unbelievably chuffed with myself. I grew up in the weird years where IT in school was learning how to use PowerPoint and no one spoke about the dark arts behind it! 

I'm a 26 yr old female, and just feel like this could be the start of a whole new career direction for me.

I would expect I'll start posting here a lot soon!",2560,150,leighrchristie,2020-09-09 18:59:14,https://www.reddit.com/r/learnprogramming/comments/ipml27/been_accepted_onto_a_software_development/,1,learnprogramming
rszcv8,Dont! Never give up!,"Are you coding right now? Great! Let me tell you my story.

2017 - I was cleaning hotel rooms for a living.

2018 - I was a kitchen hand washing dishes.

2019 - I was working at a pick and pack warehouse.

2020 - I was unemployed due to Covid-19.

Rock bottom right? but a wise man told me when you are at the bottom there is nowhere else to go but up.

Right before Christmas 2020 I got work from home job as a call center agent. First week in, I know that this is not going to work out and I made a decision to learn web development in 2021.

January 1 2021 I woke up at 6am to study for a bit then go to work. In between calls I would open up VSCode. After work I still study until 9pm. After 6 months I have a portfolio ready.

June 2021 I started applying for web dev jobs. A month passed by and no one was responding. At this point I started to personally message CEO's to give me a chance. July 2021 I got a response from a CEO and would like to schedule an interview.

I was horrible at the interview, most of the questions I answered I don't know, still after that they gave me a paid take home exercise. Told myself this is it, this will be my best take home exercise. After I submitted, they told me they would get back to me in a week or two. A week passed by and they asked for my bank details. I blew it. The next day I got my compensation for the exercise and moved on. I got a couple of interviews and take home exercises lined up.

End of July 2021, I received a full time offer from same company, it turns out I did enough to impress the CTO. I started August 2021 and now 5months in as a junior developer.

Dont! Never give up!

Edit: To all aspiring web devs the online resources I used was freecodecamp, fullstackopen and official documentations. I didn't finish both but used them as a path to follow. For yt videos there is alot but coding addict helped me get the foundation.

Since I don't have a CS degree or bootcamp certificate I had to compensate and did a lot of projects. There were 100+ repo on my github from very small to medium size project when I applied. All the code I wrote I put it in github and static ones are deployed in gh-pages.

Below was my tech stack when I got the job. And on my resume I didn't say ""technologies I know"" rather ""technologies I have experiece with"" backed up by a project using those technologies.

HTML5, CSS, JS(ES6+), React, Redux, Node/Express, MongoDB, Firebase, Next, GraphQL, SASS/SCSS, Styled Components, Tailwind, Material UI, Git

If I could do it over again this will be my stack before applying to a job.

HTML5, CSS, SASS/SCSS, JS(ES6+), React, Redux, Node/Express, MongoDB/MySQL/PostgreSQL, Git, TypeScript and React Testing Library

A little bit more on the take home exercise it was full stack blog app. React Node/Express. I needed to fetch the backend and display it on the frontend with the ability to sort by author and date. The catch was I needed to debug the backend first. 

The only thing that separated me from the group was I included unit and snapshot testing with 100% coverage because during the interview I asked them what skill or experience they wish I know to get the job. So during the take home exercise I learned on the spot how to do unit testing using React Testing Library.",2551,157,foreverajunior,2021-12-31 17:52:54,https://www.reddit.com/r/learnprogramming/comments/rszcv8/dont_never_give_up/,0,learnprogramming
nrgdjq,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUN2021FREE","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUN2021FREE

https://www.udemy.com/course/automate/?couponCode=JUN2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to JUN2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021 or late-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",2546,146,AlSweigart,2021-06-03 15:37:04,https://www.reddit.com/r/learnprogramming/comments/nrgdjq/automate_the_boring_stuff_with_python_online/,2,learnprogramming
bakpll,"I was 41 years old when I learned how to code...I started with learned how to type, and these 2 languages...","I was 41 years old when I learned how to code...I started with learned how to type...

2 years ago I learned how to code. It was difficult since I was behind in the lab due to my typing speed (12wpm). It was too slow, but that was the best I could reach at that moment.

The other exiting thing. English is not my first language. So at the same time I need to learn two languages at the same time: English and Python.

Now this is my last term. I am a better programmer now. If you are in the same age with me. Don't give up!

&#x200B;",2550,261,code6code6code6,2019-04-07 20:27:02,https://www.reddit.com/r/learnprogramming/comments/bakpll/i_was_41_years_old_when_i_learned_how_to_codei/,0,learnprogramming
k3lady,"My video lectures on c++ (self promotion, disclosure I am university professor)","Hi everyone, I stumbled here and thought I'd share this. I am a university asst. professor at the University of Nevada, Las Vegas. Here is a link to my profile there: [https://www.unlv.edu/people/jorge-fonseca-cacho](https://www.unlv.edu/people/jorge-fonseca-cacho)

Anyway with remote learning I have been streaming my lectures on twitch but also saving the recordings to Youtube. I have a few classes from the Summer sessions there: Specifically CS 135 and CS 202 which are our first 2 classes for CS majors (C++ basics and then OOP and Linked Lists). For the CS 202 I now have summer and then this semester fall which I have 2 more  classes to record. I also have CS 302 (have second half in spring, but I am also teaching it in fall so full class will be there after next week) which is our data structure course but that is mostly conceptual and not programming,  


Here is the playlist link: [https://www.youtube.com/c/LeSniperJF1/playlists?view=50&sort=dd&shelf\_id=4](https://www.youtube.com/c/LeSniperJF1/playlists?view=50&sort=dd&shelf_id=4)  


I will be humble and say if you're trying to learn C++  there are probably better and more compressed resources out there ( I personally like Derek Banas: [https://www.youtube.com/watch?v=Rub-JsjMhWY](https://www.youtube.com/watch?v=Rub-JsjMhWY&feature=youtu.be) ) but at the same time there is some merit if you want to go at a slower pace I guess or see what a university course is like. Also I probably will be teaching the OOP course again in spring 2021 so you could in theory watch along on twitch since it's public and that I think may be cool for those who are unmotivated to watch something that isn't live.

Anyway I am not really looking for anything but am honestly just sharing in case I can help anyone.   


I read the self promotion rules and hope that this is okay, anyway I wish you all a great day :)",2516,138,JorgeFonseca,2020-11-30 00:49:55,https://www.reddit.com/r/learnprogramming/comments/k3lady/my_video_lectures_on_c_self_promotion_disclosure/,0,learnprogramming
he43wj,Programming is AWESOME! Just reduced a 10 day job for 2 people to few hours work!,"Hello everyone!  


Had to share, i´m extremely happy and excited about this, i´ve been learning web development , mostly javascript so far for about 4 months now.  


Just came back to work(nothing related to programming at all) today to help on a new project as i am still not working officially and basically we have to fill in a 10k lines excel sheet with data in 4 different columns for each row.  


Using an if else statement i reduced this to 3 rows but we still took about 8 hrs to do 1k lines between us 2.  


Came home and start to think how I could use my skills learned in javascript and apply this into excel.  


I knew very little about excel, i can do a VLOOKUP but only if i have something to reference it back and forth and copy paste etc.  


So by googling ""how to get a row index in excel"", ""how to filter things to excel"", ""how to do if else statments in excel"" etc, and having some help as well from a guy in reddit helping me put all the pieces together I was able to come up with this working formula which reduces a huge part of the workload we had in our hands:   

=IFNA(index($I$1:$I$8000,(ARRAYFORMULA(MATCH(1,(F11=$F$1:$F$8000)\*(H11=$H$1:H$8000)\*(""MATCH"" = $J$1:$J$8000),0)))),"""").

It´s nothing fancy at all for someone who is OK in excel, but for me who used 2 or 3 formulas until now it´s a great improvement, and all of this done by applying the general concepts i learned trying to learn a new language like javascript.  


I know how people say once you know your first programming language the others ones come much easier, I understand excel is not a programming language, but it has some of the logic like programming languages and a different syntax that needs to learned before applying, but actually seeing this in practice specially after doubting if i am good enough to be a programmer or not is a really big encouragement that i´m actually not that dumb and might actually be able to one day become a professional programmer!  


Now I am going to do another formula and reduce the workload to just one(sometimes two)single cell that needs to be changed in these 10000 lines and get the work finished in another single days work!  


Again, I just had to share this i´m very excited about this as it´s one of the reasons that pushed me into learning programming, improving a way of doing something to make it much quicker and accurate!  


Have a great day everyone and do NOT GIVE UP!",2516,178,Nunoc11,2020-06-23 00:15:51,https://www.reddit.com/r/learnprogramming/comments/he43wj/programming_is_awesome_just_reduced_a_10_day_job/,0,learnprogramming
mj5aag,Stanford University now offering a free course on Python,"https://codeinplace.stanford.edu/

Hey guys,

If you're interested Stanford University opened applications to their attempt at online learning of the CS 106A “Programming Methodology"" course they offer. Applications are open from the 2nd of April to the 8th of April. It's a 5 week course. You can check out more here: https://news.stanford.edu/2021/03/22/famous-stanford-coding-course-free-online/",2503,140,Devious_Beast,2021-04-03 09:33:16,https://www.reddit.com/r/learnprogramming/comments/mj5aag/stanford_university_now_offering_a_free_course_on/,0,learnprogramming
n0vm6e,I’m just now understanding Git/GitHub and I feel like I’ve wasted the last 7 months,"Word to those just starting: LEARN GIT

I’ve been slowly teaching myself web design and web development for the last 7 months, and when I first got started I read that using GitHub was important. It showed your progress for future employers and how active you are in your code. So of course I made a profile and did a quick look on how to make repos and upload stuff, but I did not understand at all what I was doing. 

I started going through several casual classes and working on my own projects and I learned so much about basic html css and vanilla js. A lot of the projects demonstrated that, but I wasn’t tracking them correctly in GitHub. The last two days I sat down and REALLY learned Git and GitHub; I was horrified. I realized all my hard work didn’t reflect on my page. I realized all the times I completely restarted a site from scratch was unnecessary. It almost feels like starting from scratch. 

The good part about this is that I know how to use Git effectively in all my future projects, and I think it’s the coolest tool in my arsenal. Plus, I can share my failure with others who might fall into the same trap. So yeah, if you’re just starting out, PLEASE LEARN GIT AND GITHUB. 

Here’s a few links to some awesome tutorials and pages!! 

[Learn Git in 15 Minutes Video](https://youtu.be/USjZcfj8yxE)

[Intro to Git](https://www.notion.so/Introduction-to-Git-ac396a0697704709a12b6a0e545db049)

[Learn GitHub in 20 Minutes Video](https://youtu.be/nhNq2kIvi9s)

[Intro to GitHub](https://www.notion.so/Introduction-to-GitHub-202af6f64bbd4299b15f238dcd09d2a7)


Edit: thank you all so much for the positive feedback!! Something else I should clarify and help breakdown confusion: Git and GitHub are two totally separate things! If you’re just starting definitely begin with Git, and then transition to GitHub. This is probably a duh for most of the seasoned programmers here, but for me as a beginner it was the greatest source of confusion!!",2498,124,35boi,2021-04-29 03:14:40,https://www.reddit.com/r/learnprogramming/comments/n0vm6e/im_just_now_understanding_gitgithub_and_i_feel/,1,learnprogramming
6hlnsg,"I really hope you newbies read this. That game idea you have knocking around in your head? That's actually achievable these day, I really hope you make it. Details inside [Unity]","So I finally downloaded unity.  I'm in a big ass rut and hadn't programmed in a while, and got sick of my holding pattern.

Unity is simply lovely.  If you're not a pro C# programmer, then you can make a real, functional game with the tools set out before you with unity.  It cuts nearly all the bullshit.  You'll need a bit of programmer cred/ google skills to peace together something ""good"" but man does it cut the BS that XNA and the like threw in.

But what has *SERIOUSLY* impressed me is the depth that it allows.  You don't *have* to be an ace programmer to make something, but if you are, Unity just makes your whole life easier.

I followed along with an ""advanced"" tutorial and made a better game, with better animations, with better feel than I did in a couple months with XNA, 2D vs 3D so take from that what you will, but going from variable change to test build in 10 seconds to test shit blew me completely away.

Yeah, the download is like 5GB, yeah it's initially confusing as shit, hell I stared at my screen for 30 minutes trying to figure out wtf an ""assembly/CSharp.dll"" error was trying to tell me (hint, that error only existed in Visual Studio and the Unity compile cleared it completely) 

But I have a ""functional game"" an hour in, with proper animations, and a play tested one at that.

But what I really want to say is, I want to play your game.  

TL:DR You're scared of making a game, make one, use unity,  if something doesn't make sense, learn about it.

EDIT:  So I just woke up and holy shit I did not expect to get this much response, I'll try to answer as many questions as I can that haven't been answered",2499,169,CactaurJack,2017-06-16 10:17:52,https://www.reddit.com/r/learnprogramming/comments/6hlnsg/i_really_hope_you_newbies_read_this_that_game/,0,learnprogramming
wryuil,I wrote a guide on how to get a career as a programmer without a degree (or bootcamp),"Hey [r/learnprogramming](https://www.reddit.com/r/learnprogramming/), I wrote this as a guide for people who want to be career programmers but maybe feel isolated in their journey. Stuck between not wanting to get a degree and wanting to make it in the industry. I hope you enjoy it and can utilize the tips. I myself went down this path and thought i'd give back. No paywalls just straight up info.

Original post [https://medium.com/@Jawerty/the-guide-to-becoming-a-career-programmer-without-a-degree-e77484d2e7d6](https://medium.com/@Jawerty/the-guide-to-becoming-a-career-programmer-without-a-degree-e77484d2e7d6)

\---

Learning how to code is simple. You watch a couple coding tutorials, download a compiler, write some code, and run your program. There! You did it, you’re a programmer. Sadly, if you’re reading this article, you probably know the transition from learning to code to actually making money off of code is not that simple. Hello, my name is Jared Wright. I went from being a middle school kid with no knowledge of coding or software engineering to a Software Developer making 6 figures in a major city as a teenager. I’ve been working as a software developer, consultant, career coach since then and while I can’t teach you how to build a car or how to fly a plane and how to tie your shoes may be a bit of a struggle, I am 100% confident I can get you a career in tech within 3–6 months.

# The Guide

I’m going to outline 10 major tips to point you in the right direction to getting your first programmer gig

## 1. Code for an hour a day (at least)

## 2. Build a project every week

## 3. Post your projects on Hacker News, Reddit and Forums

## 4. Network

## 5. Go to Hackathons

## 6. Offer help (the cold email)

## 7. Find a Focus

## 8. Try Freelancing

## 9. Develop a Portfolio/Resume

## 10. Build Momentum

Each point deserves it’s own article but here I will do an overview of each.

# Code for an hour a day

This one seems obvious and simple but it’s the main point I drive to anyone starting from zero, especially a post schooling age individual who has other responsibilities. You **must** code everyday, and by code I also mean learning and practicing from tutorials. From now on, as a programmer, self-education and work are one and the same. You will never stop google searching for “what does this error mean?”. This process of learning and coding at the same time is something you need to be comfortable and consistent with. One hour a day is the bare minimum time necessary to gain the momentum you need to get to building your own projects. Eventually you will be compelled to push one hour to many but always do at least one hour.

Some days will be slow and some days will feel like you are now God and can build Facebook in a day. The day to day feelings don’t matter in the long run. If you can stick to at least one hour a day, you will find what groove works best for you. The consistency is what will give you an edge over the frantically inspired geniuses you’re competing with. Also, understand that you are competing with programmers in educational programs that require them to be consistent. Consistency is key.

# Build a project every week

This is one that may seem aggressive but will show as you continue with the process. Let me first break it down and explain, a project does not need to be large. It can be a piece of a greater project (creating a deploy service) or it can be standalone. Either way if you do this every week you will not only have direction in your learning but something to show for it. As you will see further in the guide, without a degree, you are constantly working to overcome your lack of accreditation. Projects are the best way to do this. When I first started out almost every lead I had from recruiters, cold emailing, networking was energized from “we were impressed by your Github!”. Learn how to iterate quickly and create value from pen and paper. This creative exercise will benefit you in problem solving where others lack.

# Post your projects on Hacker News, Reddit, Forums

>*Always be pushing.*

A phrase a friend and I would reiterate as teenagers gaining our frame in the tech world. Do not hide, if there’s any lesson I want you to learn from this point is if no one knows about you or what you’ve done, **no opportunities** will come your way. Hacker News is a great place to start. It is a link sharing website similar to Reddit where engineers from across the world congregate. Comment, post articles you like, get to know the community and most importantly post your completed weekly project there to get feedback. There is a Show HN tag you can set on your submissions that will highlight it as a user submitted project. Not only will you get engagement to your Github which looks good in the interview process but you will get critical feedback.

Critical feedback will be the launch that propels you into more advanced thinking and problem solving methodologies. As someone who is likely isolated in your career journey this space for learning and feedback is a blessing. No matter if you’re a frontend web developer, a systems engineer or a dev ops junkie, always have people to share your work with.

# Network

This is a point that many engineers overlook. And if you’re interested in programming you likely won’t like this **BUT** **you have to network**. To put it bluntly, opportunity wise, you are at a disadvantage not being in school. However, in exchange, you likely have financial freedom and free time. Take advantage of it by learning to create opportunities for yourself. Go to the closest city near you and look for networking events. Happy hours, startup pitch events, Javascript meetups, anything where people are going out to socialize and hopefully where there are tech minded people. If you do not live near any city this will be more difficult but now with virtual events gaining popularity you can take advantage of those.

My tips for networking is to find events from Google events (search for startup, tech, happy hour, etc.), dress well and introduce yourself to people. Don’t be afraid to look someone in the eye and hold a conversation. Do not go with a set intention of finding a mentor/job/group to go to, be aware of these outcomes but it’s better to be open to whatever the scene is…and take advantage of the free food.

# Go to Hackathons

This one is mostly optional but if you have access to hackathons near you or a virtual hackathon I highly suggest you take advantage of the opportunity. Here the networking and project points take care of themselves. You will competing in a cohort of people doing exactly what you’re doing. Building stuff and trying to get paid. If you don’t know where to start go to [https://devpost.com/](https://devpost.com/) to find Hackathons near you. This is how I got to meet many of the people I call friends and colleagues today.

# Offer help (the cold email)

This point is a requirement. You must learn how to reach out.

>*In isolation we suffer.*

You have to learn how to sell your skillsets to potential customers/clients/companies you wish to work with. It may seem futile with your lack of experience and training but you will be surprised how many companies are open to help from a newbie programmer.

After, you get a good coding knowledge base, develop some projects and possibly do some odd coding jobs (not a requirement to start reaching out) scour Indeed/Linkedin/Angel List (my favorite)/Craigslist/Twitter dms/lists of early stage startups in your area/etc. and **cold** **email.** It may seem old fashioned but it goes a long way. When I was a teenager looking for my first internship, everyday I would go to dozens of startup websites, find an email and send a cover letter (specific to the company). At the time I had no resume but would link my Github and delve into projects I was building. You may think it sounds silly, since you may have little to show but trust me, giving a damn goes a long way in this world.

# Find a Focus

Now we get into the weeds of what you’re actually doing. I suggest after you spent a month or so learning the trade and exploring various disciplines to find your focus. This can be Machine Learning, Web Development, Mobile App Development, maybe you really really like Python — doesn’t matter, either way focus on something you enjoy (or have a knack for). This will make the process go by easier and you will set yourself up becoming an expert on your focus in 2–3 years. When you start to actually get jobs and build a resume the focus you pick will be the catalyst that flips the script from you seeking jobs to becoming sought after.

More importantly, choose a focus that has long term potential. It’s nice to pick the framework of the day because there’s a lot of energy around it. However, this energy is fleeting. It’s ok to choose to be the best Flutter developer in the world that’s not a terrible focus. **However,** keep in mind this focus would in turn make you a frontend developer in the long term. I suggest looking at software trends, cultural, socioeconomic trends and most of all talk to mentors to get a gauge on what focus you should invest in.

# Try Freelancing

This is not a requirement, although it will make the process easier if you learn the game. Freelancing is a pain. You are competing with everyone in the world to do the lowest technical work. I do not suggest it as a long term career path. However, in the short term it’s a solid way to gain experience and learn the trade. You will be able to build your resume and possibly grow your network depending on how your contracts go.

My biggest warning with freelancing is do not get **too** wrapped up into selling yourself and optimizing for undercutting competition. Remember that freelancing websites like Fiverr and Upwork are not the end game to becoming a career programmer or the only path to getting work. It’s a quick way to get to coding in the real world which has it’s advantages and disadvantages. My best advice for your first freelance contract is to set a time constraint from the beginning. 2 weeks, 3 months, 6 months, doesn’t matter as long as you do not get roped into a forever contract without a plan.

# Develop a Portfolio/Resume

I know this is obvious but it’s also something almost everyone does wrong. Highlight your projects. Do not downplay what you’ve struggled to learn and build by the time you’re ready to start seeking jobs. Write readmes, blog posts documentation, whatever you need to start putting to paper what you’ve built. The best places to put your writings are Github, a personal website (also an opportunity to show your skills) and a medium. This portfolio will be just as important as your resume if not more. You have no dev experience or traditional training. This company needs to trust you as if you did. The best way to do this is to overcompensate with projects you’ve built, maintained and are proud of.

# Build Momentum

The final point you should keep in mind throughout this whole process. Always be building momentum. Eventually as you keep putting yourself out there and learning, you will get something. Something may be a lead on a contract, a mentor, a colleague to learn with, a Github project that sparks a Hacker News debate, no matter what it is run with it. Use that energy to push yourself even further. If you meet someone who is in the industry ask them to have a weekly 1 on 1. If you compete at a hackathon add that project to your portfolio and show off your work. Always have one thing lead to another. Luck isn’t random it’s a phenomenon you experience after already putting in the work and building off of your wins (and losses).

# Thank you for reading

In conclusion, I hope you learned a lot from reading this.",2492,151,Expert-Principle1347,2022-08-18 23:56:43,https://www.reddit.com/r/learnprogramming/comments/wryuil/i_wrote_a_guide_on_how_to_get_a_career_as_a/,0,learnprogramming
uce70x,Some healthy advice for those of you learning to code,"This isn't really about programming but it's something I wish someone would have warned me about. I've always been a naturally skinny guy and I thought I had a fast metabolism but once I became obsessed with learning to code, I was spending nearly 12 hours every day sitting in a computer chair slamming Red Bull and eating junk food. 

About 6 months ago it hit me... ""I'm actually overweight to a point that I'm not sure if I can rebound from"". I thought that exercise was the most boring thing in the world and I had no interest in learning about nutrition. Especially when all I wanted to do was code. 

Over the past 6 months I've gotten fit and healthy but it's required some significant lifestyle changes. So let this be a reminder if you're spending several hours every day taking online classes or working on portfolio projects - not only will your physical health suffer but there's no way to avoid the fact that your relationships will also suffer.

Programming is addictive, it changed my life for the better and I love everything about it but I'm urging everyone to be mindful about spending 45 minutes walking everyday, maybe 20 minutes lifting some light weights in the morning, picking up some vegetables on your next grocery run, and setting some hard limits for yourself so that you don't neglect your friends and family. 

Once you have that software engineer salary, you'll be in a better economic position but you don't want to be less attractive to future partners and need to learn on your income for the ability to be desirable. 

This is just a reminder to audit your habits and be mindful that you aren't getting stuck in some bad patterns. 

On a side note, if anyone is having any trouble understanding any concepts in JavaScript or any of the JavaScript Frameworks - reach out to me, I always love to help people who are just getting started.",2494,228,716green,2022-04-26 14:45:36,https://www.reddit.com/r/learnprogramming/comments/uce70x/some_healthy_advice_for_those_of_you_learning_to/,0,learnprogramming
of55jp,I got my first job as a software engineer!,"This is super exciting. I almost gave up, but then it happened! I got an offer signed it sealed it and SENT IT! I started a few days ago and it's awesome. Guys, for everyone still grinding... LASER FOCUS TUNNELL VISION, trust the process, pray if that's what you do, and keep going.

Huge thanks to this community and to a very special member here who talked me out of giving up and used his own time to explain so many things to me, thank you Lerke for helping a stranger out, it made a big difference.

If this post gets traction I'll be sure to come back and add more details about my background, learning timeline and material, cv, projects,... you name it.

&#x200B;

EDIT 1

So my background is in engineering and architecture. and yes I am over 30! I'm self-taught, no bootcamp, shoutout to DEVED on youtube this dude is nuts and awesome, mainly it's DOCUMENTATION pages and pages of documentation, stackoverflow and the occasional youtube video here and there, that was my style.

I'll edit more and provide a structured timeline and process to all of this when I got a few minutes. thanks a bil for the support guys, means a lot.

# THE EDIT

# TimeLine:

Thank you guys for the enormous support. The entire process took 8 months of full-time laser focus studying and many projects. 3 months searching for a role. the rest of the time was non-coding work.

The first step, I started with Python, believe it or not, on my mobile phone, reading docs and following tutorial apps on the underground on my way to work every morning and in the evening. the progress was really slow, but it helped a lot and made me familiar with the terminology and main concepts.

In April something happened! the lockdown! I suddenly had so much time to do whatever I wanted. I followed The Modern Python 3 Bootcamp by Colt Steele. this course was great because it is very well structured and delivered by a seasoned developer who knows what he's doing (or so I think :D).

I practiced with small-scale projects, just functions and classes to do all types of operations and computations.

My aim was to build enough competence to be able to handle Django, but (this is very important in the entire journey) way before I felt ready I decided to jump into it and I started learning Django.

Django was challenging, I had to learn so much, I learned about requests responses databases hosting APIs and so much more. I also dived deeper into python. learning Django was amazing, I used the DOCUMENTATION, I grinded day and night reading through every page of their docs, taking notes, and coding away. good times lol

All of that was mixed with HTML and CSS of course. After 4 months of backend work, I had to learn JavaScript (remember very important... way before I felt ready I decided to jump into it) because it opens so many doors and makes you capable of doing so many things in the browser, the web today wouldn't be possible without JavaScript.

By December I had simple full-stack projects running on my machine. I started looking into hosting and learning AWS various services, and I was able to host my apps on EC2 instances Lambda and even used Oauth and API Gateway. AWS is so much fun.

Between January and April 2021, I mainly did projects and React, (AGAIN very important... way before I felt ready I decided to jump into it) you'd be surprised how fast you can pick up React if you know JS well. I went with DevEd's course on his own website, you get SO MUCH value from his courses, Ed is always up to date with the most recent and tested tools and best practices, he will teach you the best of the industry. I'm not affiliated with him in any way, his courses were very helpful, and I liked his comedic style, check him out you might agree.

April until a couple of weeks ago, I was looking for work and doing more projects.

&#x200B;

# Resources:

In addition to the resources listed above I also used:

Abdul Bari's channel:  youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw

Jetbrains Academy for many projects: hyperskill.org

I'll talk about the CV later thanks so much for the support!",2491,120,JCcrunch,2021-07-06 22:00:56,https://www.reddit.com/r/learnprogramming/comments/of55jp/i_got_my_first_job_as_a_software_engineer/,0,learnprogramming
jvlc9p,First programming job at 43,"It is 5 years ago, 48 now. Still programming, in my second job doing it full time.

Basic thing I will anyone to extract from this post, it is never to late.

However my circumstances are mine, not yours. I knew the basics, had even studied Programming for two years at University before dropping out to do do Lights and Rock'n'Roll.

Did that for 20 years, and had a giant flight-case (big box of stuff on wheels) land on my foot, and put me out of action for a prolonged time.

Rather than sit on my hands as it were, I decided to refresh on my programming skills. Everything was different, the C++ I learned at Uni, is not todays C++. So... something 'easy'.

And fun. And that was Arduino. So restrictive. You can't do fancy stuff. Perfect. I can't say how helpful learning Arduino MCU programming is! It forces you to do tight programming. I still dabble with the platform, making game-controllers and stuff.

More important, it made me look further, do more complex stuff. I knew C and C++, but neither language was really suitable to get a job. Around here, that is Java (because that is what all grads know) and C# (because that is almost Java, but from MS).

I thought fuck it. Both those languages are basically legacy. I played around, and Go caught my interest. For me it was perfect. It was C modernized.

Not long after I got a very low-paying job (based upon an android app I made) to do a bit of everything in a startup.

As that project evolved, we got to an impasse as to what I should get out of it. Essentially employer said none, I said a fair share of the company, as I created the product.

So I left. And now got a very good paying job doing only Go (and Firebase and SQL) backend work.

Is it easy? No. Every other day, I need learn something new. Not with Go as such, that is simple(-ish), but with all the APIs and services we depend upon.

When I started doing programming full time some 5 years ago, I can not say I was that experienced. The trick is figuring stuff out as you go. Now I got recruiters flooding my LinkedIn :)

(not that I'll consider changing job at the moment, but you know, it is nice)

Hang in there, especially if a bit older!",2483,164,Zy14rk,2020-11-17 03:05:40,https://www.reddit.com/r/learnprogramming/comments/jvlc9p/first_programming_job_at_43/,0,learnprogramming
ms9rbx,"You should learn git ASAP, and here's why.","Do you ever have to comment out a whole bunch of code to try something different? 
Or perhaps you changed some things and your code does not run anymore?
Or maybe you want to work on your project from many devices? 
Or do you want to use free static website hosting for your CV/projects? 

If answer is yes to any of these questions, you most certainly need to learn how to use git/github. 

To anyone who doesn't know what git is: It is a 100% free tool aimed to version control your code. It has a lot of use cases but most importantly it is used to work on different branches of a project. Let's say you want to add a feature to your project, so you create a new branch which copies all the code from the main one. Then you work on that branch, consequently implementing your feature, meanwhile your code on main branch remains intact. Once the feature is ready, that new branch is merged with the main one adding the feature. No commeting things out to try something different. No lurking and searching for bug caused by changing your code. The working main branch is always there to go back to.

It seems very intimidating at first but once you understand fundaments it is actually easy to grasp and you only need to know a couple of commands to solve issues I mentioned above.

Github is an online service where you can store your code, not only it's present state but it's history and all the branches. It also provides free hosting service for static websites and much more.

Using git really makes working on projects easier and can save a lot of headache, so start using it asap.

Edit: Some IDEs have implemented UI for handling git, so if you find yourself very not fond of command line this might be the way to go. Although you still need to understand basic concepts.",2475,280,Szahu,2021-04-16 18:48:23,https://www.reddit.com/r/learnprogramming/comments/ms9rbx/you_should_learn_git_asap_and_heres_why/,0,learnprogramming
stb51t,[RANT] No you should not quit programming,"I've seen more than one post that boils down to ""I'm bad at x should I quit programming?""

No. You should come to this sub and articulate what you need help with and let people help you to get better.

That's all.

Have a good day.",2476,182,hat_tr1ck25,2022-02-15 19:30:17,https://www.reddit.com/r/learnprogramming/comments/stb51t/rant_no_you_should_not_quit_programming/,0,learnprogramming
708ub7,"If you are new to programming and want a better understanding of computer science fundamentals, programming and the different things you can do in this field, you should definitely consider taking CS50, Harvard's (free) Intro to CS course.","Link: [CS50 on EdX](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)  
  
David Malan is a great professor and instructor and makes CS fun and enjoyable. Even if you're not new to CS and have some experience his explanations, examples and the problem sets each week will give you a new perspective. Hands down, best free course for intro to CS.",2471,131,IAmAmbitious,2017-09-15 09:52:40,https://www.reddit.com/r/learnprogramming/comments/708ub7/if_you_are_new_to_programming_and_want_a_better/,0,learnprogramming
c37o7k,A list of all problem solving websites.,"


Competitive Programming Test Sites
1. HackerRank (http://hackerrank.com/)
2. CodeChef (http://codechef.com/)
3. HackerEarth(http://hackerearth.com/)
4. LeetCode (http://leetcode.com/)
5. Topcoder (http://topcoder.com/)
6. Kaggle (http://kaggle.com/)
7. ChallengePost (http://challengepost.com/)
8. CodeForces (http://codeforces.com/)
9. Brilliant (http://brilliant.org/)
10. SPOJ (http://www.spoj.com/)
11. Project Euler (https://projecteuler.net/)
12. CodingBat (http://codingbat.com/)
13. Codewars (http://www.codewars.com/)
14. Codility (https://codility.com/)
15. Codingame (https://www.codingame.com/)
16. CoderByte (https://coderbyte.com/)
17. CodeEval (https://www.codeeval.com/)
18. UVA Online Judge (https://uva.onlinejudge.org/)
19. CodeFights (https://codefights.com/)
20. CheckiO (http://www.checkio.org/)
21. Talentbuddy (http://talentbuddy.co/)
22. PythonChallenge (http://pythonchallenge.com/)
23. LintCode (http://www.lintcode.com/en/)
24. Rosalind (http://rosalind.info/problems/locations/)
25. CrowdANALYTIX (https://www.crowdanalytix.com/)
26. SQL-EX.RU (http://sql-ex.ru/)
27. Kattis (http://www.kattis.com/)
28. CodeKata (http://codekata.com/)
29. CodeAbbey (http://codeabbey.com/)
30. FightCode (http://fightcodegame.com/)
31. BeatMyCode (http://www.beatmycode.com/)
32. TunedIT (http://tunedit.org/)
33. MLComp (http://mlcomp.org/)
34. HPC University (http://hpcuniversity.org/students/weeklyChallenge/)


For complete beginners : (https://practiceit.cs.washington.edu/)


Edit: I have got  tonne of more additions. I am going to update it here and put a copy on Google drive tomo.",2473,121,Neu_Ron,2019-06-21 07:38:24,https://www.reddit.com/r/learnprogramming/comments/c37o7k/a_list_of_all_problem_solving_websites/,1,learnprogramming
rj5zgz,A list of 6000+ programming resources,"Edit: I changed the UI and added 2500 more resources.

This list has helped me a lot,  
It will probably help you too.

This is a list of learning resources in Go, Python, Machine Learning, Web Design etc.   
Also it is searchable.

Please leave some feedback in the comments.

Goto : [https://resorcery.pages.dev/](https://resorcery.pages.dev/)",2466,139,omkarjc,2021-12-18 11:53:19,https://www.reddit.com/r/learnprogramming/comments/rj5zgz/a_list_of_6000_programming_resources/,0,learnprogramming
k797y4,"Pro Tip: Once you get a basic idea of a new library/framework/topic, look at the highest voted answers on SO for that tag. Believe me, you will not regret it","Just something really cool I have been doing for a few months which I have not seen most people do. Basically, the top-voted questions on Stack Overflow are questions that are common with many people or are really interesting. The answers are usually super detailed, by top developers for that library and a lot of helpful diagrams and examples. So once you have an understanding of the basic concepts, do check those out.

Plus there are usually 20-30 answers so even if you don't understand the first one, there are a lot more.

For example, [this](https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array) is the top question for JavaScript. If you just understood the basics of JS, like what are arrays, variables, loops, if statements, etc, this is a really cool question and each answer is really in-depth. I had been coding in JS for some time when I came across this but still found it helpful.

And [this](https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array) is the topmost question on SO that I know of. It has absolutely amazing answers whether you are a beginner or an expert. Amazing concept, great diagrams, and on-point answers.


Edit: wow, this blew up a bit. Thanks a lot for the awards. If any of you found this helpful, carry it forward!


Edit 2: as u/PinkFrojd pointed out, another good idea could be to check out issues of the library on Github",2470,58,theguy2108,2020-12-05 15:19:39,https://www.reddit.com/r/learnprogramming/comments/k797y4/pro_tip_once_you_get_a_basic_idea_of_a_new/,0,learnprogramming
9zt961,Would you be interested in a animated series explaining programming languages in 15 minutes?,"The title says it all,  i thought about doing something like that for a while and i would like to know if anyone would find that interesting so that i have a motivation to spend the time to write a good enough script and make the animations. I want to try and make a video comprehensive enough so that someone could understand how to make a program from the complete basics to more complicated things in 15 minutes for each language, and after that do like a part 2 for every language where i make a game using the concepts that i thought in the first part. I wanted to start with the harder, older stuff so something like Assembly and continue with more and more modern languages. If everything goes to plan and i find someone interested until February i think i'll have something decent enough up on youtube :), but i was wondering what you guys think?

Update #1: Thanks for all the interest, now i feel way more motivated to do a really good job, i actually didn't expect so many people to upvote this post, i want to keep all of you updated in some form or another, so i'll write here for as long as i can, updates, but if you want i was thinking about using my twitter for that, my handle is  [@Unkept7](https://twitter.com/Unkept7). Tomorrow i'll start making a logo and a banner for my youtube channel, because i don't have a channel at the moment. I really do hope this turns out great, if you have any ideas, suggestions, or you want to share something with me, i would be more than happy to check them out.  


Update #2: Hello, as you can see i've kept my promise and made a logo and a banner :), by the way here is the youtube channel: [https://www.youtube.com/channel/UCg27G10fWaLZlw15GBjdddg?view\_as=subscriber](https://www.youtube.com/channel/UCg27G10fWaLZlw15GBjdddg?view_as=subscriber)",2458,145,UnKeptPort,2018-11-23 23:27:39,https://www.reddit.com/r/learnprogramming/comments/9zt961/would_you_be_interested_in_a_animated_series/,0,learnprogramming
54emyj,"Why doesn't this guy get more views? Really good teacher, proffesional video quality. Learning programming is fun again!","https://www.youtube.com/user/shiffman/

Check out the playlists section. If you're a complete beginner, you can start with Foundations of Programming in Javascript. If you know the very basics like I did, check out Coding Challenges or something else that sounds fun, like Algorithmic Botany which I found very interesting. Btw, I'm not affiliated in any way.",2464,70,pythonsonaplane,2016-09-25 10:48:54,https://www.reddit.com/r/learnprogramming/comments/54emyj/why_doesnt_this_guy_get_more_views_really_good/,0,learnprogramming
vwg0nu,I became a dev after learning from Udemy as my main resource. I outlined my structured path into a syllabus in case others want to follow my same learning path.," **Syllabus:** [here](https://www.udemytracks.com)

As a visual learner, I really benefited from Udemy’s courses as the main learning resource, which let me to get my first job as a software developer. As most beginners experience, at one point I was really trapped in tutorial hell and I ended up pulling myself out of it by getting a google spreadsheet and charting out a roadmap of courses that I felt built off each other. During and after each course, I would create a small to medium sized project using the skills I learned from the prior course — project-based learning (if you don’t do this, the syllabus will not work). 

I was constantly revising my course roadmap after understanding more and more about the skills needed to become a junior developer. Since I just got my first developer job this year, I want to share my course roadmap with others in case it could be helpful to any other visual learners out there. Especially if you need a structured syllabus that will build off skills learned in previous courses or if you are currently directionless / trapped in tutorial hell. Udemy courses are cheap (\~10 dollars) so it’s easy to buy a lot of them and spin your wheels on information overload and basically get nowhere if you don’t have a solid plan. 

If you don’t end up using this roadmap, but are in tutorial hell, consider charting out your own path and create a structured path for yourself. I know Udemy is not for everyone, but I know it worked really well for me so If I can help at least one person, then I’ll be happy. 

**TLDR;** Used Udemy to get a job as a developer so I created a roadmap that charts my learning path to help others. Syllabus/roadmap found [here](https://www.udemytracks.com).",2452,206,None,2022-07-11 11:22:58,https://www.reddit.com/r/learnprogramming/comments/vwg0nu/i_became_a_dev_after_learning_from_udemy_as_my/,0,learnprogramming
6ekb7k,I'm in prison & trying to learn to code.,"I'm currently in prison n I been interested in programming/coding for years. Now that I have the free time n I'm ardent, I'm reading HTML &CSS by Ducket n I have a list of beginners books ima order. Is this futile since my resources are limited? I basically have a 3G Android smartphone, I'm a TA in the edu Dept for the computer class here so I have access to a comp but no internet access other than when I'm in my cell on my phone. Appreciate all suggestions n advice.

Thanks to all of you that had an input as well as the funny comments. That was over 2 years ago, since then I was moved around to a few prisons. I landed at one where they had a famous coding program for inmates, was accepted and excelled in the class. I'm proficient but nowhere near where I could be or will be in Python and JS, Python being my favorite. I'm extremely close to going home and can't wait to continue my education. I did finish both degrees in science and math as well as social behavioral science (both AAs). Now I hole to transfer to a four year school upon my release with help from some great orgs,  I have been in contact.",2451,529,Clydeazy,2017-06-01 03:59:39,https://www.reddit.com/r/learnprogramming/comments/6ekb7k/im_in_prison_trying_to_learn_to_code/,1,learnprogramming
gydwir,"Are there any tutorials for a blind person to learn programming basics (java preferably, php, html any)?","My cousin brother is blind and recently he has expressed interest in learning programming. He specifically wants to so android development. Which I know would be very difficult for him. 

Still I think he should atleast start with Java and see if we wants to go further and get into android. He does not really have knowledge of programming basics. 

So that's why I was wondering if there exist and tutorials for visually impaired people. It would be nice if its programming basics in Java. Else just programming basics. Or even a java getting started tutorial will do.

Thanks a lot for the help.

Edit: I have asked the same question over at /r/AskProgramming",2443,116,mistermask2421,2020-06-07 14:58:34,https://www.reddit.com/r/learnprogramming/comments/gydwir/are_there_any_tutorials_for_a_blind_person_to/,0,learnprogramming
8lbd16,Google publishes lots of free coding courses on Udacity,"A great resource for those learning about programming on a budget: [Google courses on Udacity](https://www.udacity.com/google)

NOTE: Nanodegree classes are not free.",2438,123,Darkglow666,2018-05-22 16:34:16,https://www.reddit.com/r/learnprogramming/comments/8lbd16/google_publishes_lots_of_free_coding_courses_on/,0,learnprogramming
hvd7of,Laid off or affected by the pandemic? I'm running a free 5 week live Web Development Bootcamp to help folks discover if a career in tech could be their next move. I would love to have you join!,"Hey, folks!

Starting Aug. 4th, I will be running a live 5 week intensive web development bootcamp covering the basics of HTML, CSS, and Javascript. We’ll meet every Tuesday and Thursday from 6:30pm EST to 9:30pm EST with office hours on Saturdays from 12pm EST to 3pm EST. The goal is to give folks who have been laid off or affected by the pandemic the chance to see if web development (coding, programming, software engineering, ect...) is fit for them. I’m looking for a group of 20 to 30 individuals and will give priority to those affected by the pandemic and/or under represented in tech. If you would like to join, please fill out this form: https://forms.gle/9XPpU1F8bbvFomBx9

A little about me:

I’m Managing Director of Engineering for [Resilient Coders](http://resilientcoders.org/). My job is to get black and brown folks into high paying careers as software engineers. We’re pretty damn good at it too. 85% of our graduates, most of whom do not have degrees or prior experience, go on to get full time offers at an average starting salary of $98,000. All free and stipended. No bullshit or funny business. I’m also a Distinguished Faculty Member at General Assembly were I’ve been helping folks learn to code for the past 8 years. You can see a sampling of my classes taught at Harvard, MIT, and elsewhere [here](https://leonnoel.com/teach/) and reviews from my past students [here](https://leonnoel.com/students/).

What to expect:

We’ll have class two nights a week with the expectation that you come prepared and have done the assigned reading ahead of time. I like to use lecture as a means of exploration and not dictation, but that only works if you come prepared. The first half of class will be exploring new topics and the second half will be lab. During lab, you will tackle what we just covered by building. You’ll never just listen to me and then sign off. Myself and TA’s will be available throughout the lab. You’ll have real time guidance / feedback and a chance to have all your questions answered.

This course will not help you get a job! It will be a great introduction to web development (HTML, CSS, and a little JS), but if you are looking to make a career change this won’t be the golden ticket. For anyone who completes the course, I’ll build them a custom learning plan and help them figure out the best next steps. For a lot of folks, that may mean joining a bootcamp like the ones General Assembly offers.

Why am I doing this:

My activism is teaching. I want to help folks affected by the pandemic and those under represented in tech. The bootcamps I run are either very selective or expensive, so I am hoping to help in the best way I know how by offering an introductory course for free.

Disclaimer:

I like to joke, curse, and have fun. I do the same thing in my classroom. I value learning over nit picky correctness. If any of these things bother you, this course might not be the best fit. If you would like to learn more, please visit my blog post about the class [here](https://leonnoel.com/blog/free-coding-bootcamp/). I’ll include a sample from one of my recent classes and you can find more links to my past work. Happy to answer any questions here on reddit. 

Peace!

**EDIT: I woke up to over 1500 folks that have registered for the class. I'm trying to figure out the best way to respond to everyone and will reach out soon. I'm game to run this as many times as needed until all the folks affected by the pandemic get a shot at the class with personalized attention. Thanks for all the love and will share more soon.**

**EDIT2: Everyone that signed up should have received an email**

Here is what the email said:

I had over 2000+ people apply and I chose a cohort of 60 that were affected by the pandemic for this first run. Sadly, I was not able to accept you this round, **but I want to help you learn how to code and see if a career in tech might be for you.**

Here is how I can help:

* I will be live streaming the class here: [leonnoel.com/twitch](https://leonnoel.com/twitch) and the edited down recordings will be found here: [leonnoel.com/youtube](https://leonnoel.com/youtube) 

*I’ll be fielding questions from the current cohort, but if you join the Discord ([leonnoel.com/discord](https://leonnoel.com/discord)) there will be a voice chat for you to join to ask questions in real time during the live stream!* 

* I’m keeping my Monday’s open for you. If you want to chat about how to get started, or have any specific questions about a career in tech, please grab a 15 minute meeting with me here: [leonnoel.com/book-time](https://leonnoel.com/book-time). I have 100+ slots open through August and will add more for September. 

* If Mondays don’t work or you have a whole lot of questions, please join my Discord here: [leonnoel.com/discord](https://leonnoel.com/discord). 

*I’m going to be super active here and try my best to answer all your questions. Better yet I have 20+ mentors already in the channel that want to help you learn how to code too. Many of them are [Resilient Coders](https://resilientcoders.org) Alumni (graduates of where I teach during the day) who have gone through our free bootcamp and landed amazing software engineering roles. Please consider joining us in the Discord channel!* 

* I am going to run this course multiple times and would love to have you join the next run. I’ll announce all the additional courses first here: [leonnoel.com/twitter](https://leonnoel.com/twitter)

*The beautiful thing is that the course will get better with each iteration and we’ll build a community of folks willing to help the next few along. I really hope you’ll follow and consider joining a future cohort.* 

Finally, learning to code changed my life. It has put money in my pocket and food on the table. It opened doors I didn’t even know were there. I’ve seen it transform the lives of hundreds of my students for the better. For so many of you that applied, I could feel the uncertainty and worry in your words. These are extraordinarily difficult times and I think that for some software engineering could be a stable, prosperous, and enjoyable career. If I can help you explore that career in any way, please let me know.

Wishing you peace,
Leon",2439,260,leonnoel,2020-07-21 18:47:12,https://www.reddit.com/r/learnprogramming/comments/hvd7of/laid_off_or_affected_by_the_pandemic_im_running_a/,1,learnprogramming
b0cm22,Probably just found the best website for learning a programming language,"[LearnCS.org](https://www.learncs.org/)

* The website has courses for Python, Java, HTML & CSS, Go, C, C++, Javascript, PHP, Shell, C#, Perl, Ruby, and Jobs.
* It's completely for free.

**DISCLAIMER: This is not an ad/propagation/self-promotion. I am not affiliated with the website nor the owner(s) in any way and I was not paid or promised anything for posting this.**

&#x200B;

So I am pretty efficient in Javascript (can use some frameworks and libraries too) and I wanted to get into another programming language, C#. I was searching for a good tutorial/website/course to learn the language because the website I used to learn JS (freeCodeCamp) is only for web development. It took a while but then I stumbled upon [this](https://www.learncs.org/) website.

What I find extremely useful and somewhat unique about that website is the pace. This website teached me the same stuff in 25 minutes that would take hours if not days to learn using other sources. I feel like here they just get all the useless crap out of the way and go straight to the actual stuff you need. And they do actually explain it well, plus every piece of code on the website can be executed in an interactive compiler where you can change every piece of the code which really helps you understand many concepts. Also, at the end of each page, it gives you a small excercise.

&#x200B;

I'm not sure if this website would be the right choice for someone who is entirely new to programming, but **for me, a person who already knows a programming language quite well and is looking to learn a new one quickly, this is the perfect resource**.",2438,93,merkur0,2019-03-12 20:25:50,https://www.reddit.com/r/learnprogramming/comments/b0cm22/probably_just_found_the_best_website_for_learning/,0,learnprogramming
hbe68n,15 Free Udemy Courses (100% off Coupons) on Programming [Limited Time],"Good Evening everyone,

Love Learning, Just found some of the top courses to learn programming on Udemy . Some of the instructors are giving 100% off coupons due to the quarantine. Grabbed most of them from r/FreeUdemyCoupons and some from Facebook group. Might help some of you out. Let's learn together

Once you enroll this course you can get lifetime updates

ps: will try adding more courses here (by updating the thread) as i find them.

# Update : 20 - jun - 2020

# 

1. [C Programming for Beginners - Master the C Fundamentals](https://www.udemy.com/course/c-programming-for-beginners-programming-in-c/?couponCode=ALPHATECH)
2. [C Programming for Beginners - Master the C Fundamentals](https://www.udemy.com/course/c-programming-for-beginners-programming-in-c/?couponCode=ALPHATECH)
3.  [HTML, JavaScript, & Bootstrap - Certification Cours](https://www.udemy.com/course/html-javascript-bootstrap-certification-course/?couponCode=YOUACCELJUNEFIN)e
4. [HTML & CSS - Certification Course for Beginners](https://www.udemy.com/course/html-css-certification-course-for-beginners/?couponCode=YOUACCELJUNEFIN)
5. [CSS & JavaScript - Certification Course for Beginners](https://www.udemy.com/course/css-javascript-certification-course-for-beginners/?couponCode=YOUACCELJUNEFIN)
6. [JavaScript & jQuery - Certification Course for Beginners](https://www.udemy.com/course/javascript-jquery-certification-course-for-beginners/?couponCode=YOUACCELJUNEFIN)
7. [Bootstrap & jQuery - Certification Course for Beginners](https://www.udemy.com/course/bootstrap-jquery-certification-course-for-beginners/?couponCode=YOUACCELJUNEFIN)
8.  [Create a Members Only Blog using PHP, MySQL, & AJAX](https://www.udemy.com/course/create-a-members-only-blog-using-php-mysql-ajax/?couponCode=YOUACCELJUNEFIN)
9. [The complete gRPC course \[Protobuf + Go + Java\]](https://www.udemy.com/course/the-complete-grpc-course/?couponCode=478A2D7072D1CE38E626)
10. [CSS3 and Bootstrap for Absolute Beginners : 4 courses in 1](https://www.udemy.com/course/learn-css-and-bootstrap-from-scratch/?couponCode=CSS32020DISCOUNT)
11. [Decision Trees, Random Forests, Bagging & XGBoost: R Studio](https://www.udemy.com/course/machine-learning-advanced-decision-trees-in-r/?couponCode=JUNESEC2020)
12. [Deep Learning for Beginners: Neural Networks in R Studio](https://www.udemy.com/course/neural-network-understanding-and-building-an-ann-in-r/?couponCode=JUNESEC20)

&#x200B;

Stay safe, Keep learning",2428,177,abjinternational,2020-06-18 13:02:29,https://www.reddit.com/r/learnprogramming/comments/hbe68n/15_free_udemy_courses_100_off_coupons_on/,1,learnprogramming
vxkhzi,I posted my project on Reddit and received 9 job offers,"originally posted to /r/cscareerquestions...

&#x200B;

About a month ago I posted about [my project](https://puter.com/app/editor?c=1) on /r/programming ([the post](https://www.reddit.com/r/programming/comments/v45rb6/i_spent_a_year_building_a_desktop_environment/)). This was a passion project that I'd been working on for a year and the community was extremely kind and gracious with their feedback and comments.

I received many messages afterward about development decisions, bugs, future plans, ... but what stood out for me was the sheer number of direct job offers I received (9 offers, pending finalization of course). This was VERY SURPRISING for me and even though I'm not looking for a job, I thought my experience might be helpful for others looking for a job in the software field, so ask me any questions you might have about the experience :)",2418,141,mitousa,2022-07-12 20:16:05,https://www.reddit.com/r/learnprogramming/comments/vxkhzi/i_posted_my_project_on_reddit_and_received_9_job/,0,learnprogramming
i8tzms,3 important tips for anyone who wants to learn programming,"Hi all, I have taught computer science and programming courses since 2003 and since schools are about to re-start, I wanted to share these 3 important tips/reminder with anyone who wants to learn programming:

1- Focus on learning the concepts of how to program rather than programming languages. Once you learn the logic, design and the concepts of programming fundamentals, learning different languages becomes easier since its just a syntax.

2- If you are using an IDE, make sure to learn the basic functionality of the IDE you'll be using first before starting to code in it, to eliminate the added frustration of not knowing where things are. (example: how to start a new project, how to open an existing project, where does your projects get saved at, how to retrieve it, where is your output console, how to run and debug and .etc)

3- Give yourself a break and know that there will be a learning curve. Don't get disappointed if you don't understand something or many things. It's very normal! You'll need patience, perseverance, and lots of practice.

Best of luck!

Update to this post: Many in the comments are asking for a university grade resources and since I can't reply to everyone I am posting it here.

I just created a new channel for my students who are looking for advising, mentoring, and tutoring on computer science and programming and I will be making videos and live streams on all of these topics and more. You are welcome to subscribe to it to get notified.

[https://www.youtube.com/channel/UCaVQ-95JEUI9VvYMWNw9Sow](https://www.youtube.com/channel/UCaVQ-95JEUI9VvYMWNw9Sow)

&#x200B;",2415,191,WSTEMadvocate,2020-08-13 05:16:53,https://www.reddit.com/r/learnprogramming/comments/i8tzms/3_important_tips_for_anyone_who_wants_to_learn/,0,learnprogramming
evpxcm,An Introduction to Git and GitHub,"**What Is Git?**

Git is what is known as an open-source version control system which means that it records files over a period of time and these changes can be recalled at a later date. You can do a lot with Git whether it can be branching (creating something that is different from the master branch (the one you would most likely be working on)) or just committing to a repository (programming jargon simply calls it a repo).

[What Is Git Article](https://www.atlassian.com/git/tutorials/what-is-git) \- A more in-depth article concerning Git (Do not be alarmed at the fact it uses BitBucket)

&#x200B;

**What Is GitHub?**

While there are multiple different cloud-based version control systems on the web, GitHub remains to be one of the most popular and it is free too! It can be found here: [GitHub](https://github.com/)

&#x200B;

**Basic Setup**

Depending on what OS (operating system) you have the setup might be slightly different.

*Linux (Will specifically be on a Debian system ie Ubuntu)*

Go to your terminal and type these commands (keep in mind these will be using the root preference)

`sudo apt update` This will essentially update your system.

`sudo apt install git` This will install Git on the system.

`git --version` This is used to verify its downloaded.

*Mac*

Will also be in the terminal

`ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""`

`brew doctor` Will installs an application known as Homebrew which helps simplifies the installation of software on Mac systems.

`brew install git` Will install Git on your system

*Windows*

Navigate to Git-SCM: [Git SCM Download](https://git-scm.com/download/win)

Git SCM will download protocol but also a BASH, a command line

(Sidenote: I would personally recommend learning the command line as it is a lot more powerful and if you understand the command line you would also understand the GUI. One GUI based version control systems is GitKraken)

&#x200B;

**Basic/ Most Used Bash Commands (Keep in mind there are several modifiers for each command)**

`ls` \- lists the folders and files in the working directory (the current directory you are in)

`cd` \- changes directory

`pwd`\- used to find the path for the current directory

mkdir- make a directory

`touch` \- update the access and or modification date of a file or directory without opening, saving or closing the file.

`cat` \-  print files to stdout

`mv` \- moves files and folders

`cp` \- copies files or folders

`rm` \- remove files and folder (look into modifiers for this one)

`chmod` \- Change mode so you can set permissions for read, write and execute for the user, members of your group and others. (Binary can be used for this)

`man` \- can be used to look up any commands ie `man cd`

&#x200B;

**Using GitBash/Terminal to Access GitHub**

1. Configure Git via `git config --global` `user.name` `""[name]""` and `git config --global` [`user.email`](https://user.email) `""[email address]""`
2. Navigate to your working directory (Keep in mind you cannot just cd to the directory, you have to work your way to it, so I personally keep a folder called Programming in my home directory)
3. Initialize a Git Repo via `git init`

Now, this is where you can branch-of, you have two options, pushing a new repo or pushing a preexistent repo.

*Pushing a New Repo*

1. Commit your repo via `git commit -m ""first commit""`
2. Remote add your repo via `git remote add origin <url>`
3. Push to your repo via `git push -u origin master`

*For Pushing an Existing Repo*

1. Remote add your repo via `git remote add origin <url>`
2. Push to your repo via `git push -u origin master`

Now that you have your repo set up, these are some helpful commands:

`git status` Used to check what has changed ie additions and deletions

`git add <file>` Used to add files to commit if used with a period (.) it adds all of the files

`git commit -m ""message""` Use to commit changed, but it is on the local system, the -m can be changed to things such as -u which is an update but it is recommended to keep with an -m

`git push` Used to push changes to GitHub

`git reset` Can be used after commit to reset the commits (Good if you accidentally add a file you did not want)

`git pull <url>` Can be used to pull from any git repo, leave the URL out if your updating your current repo

&#x200B;

**.gitignore**

The .gitignore file is useful for stopping certain files from committing automatically. It should automatically be in a repo when you create a project. To use it just `cd` to the directory where the file you want to exclude is and use `pwd` to find the directory pathing. Then copy the path into the file, it should look like a text file, and then add the name of the file you want to exclude. 

Example: User/Jun/Programming/src/something.java

&#x200B;

**Branching in Git (For advanced user)**

Branching is useful when many people are working on the same project or when you have multiple versions of the same project. The major advantage of branching is when you want to add a feature without compromising the integrity of the master branch. 

*Branching Commands*

`git branch [branch-name]` Used to create a new branch

`git checkout [branch-name]` Used to switch branches

`git merge [branch]` Used to merge branch commits (usually people use this with a branch and the master)

`git branch -d [branch-name]` Used to delete a branch

&#x200B;

For more information consult the Git Documentation [here](https://git-scm.com/doc). Feel free to message me.",2411,94,chen_jun07,2020-01-29 17:24:58,https://www.reddit.com/r/learnprogramming/comments/evpxcm/an_introduction_to_git_and_github/,1,learnprogramming
mrchco,Just a thank you,"I'm 34 years old with a wife and a 4 year old child, and I work at least 40 hours in construction every week. I consistently try to learn and code even if I can't keep to a regular schedule, and have been making it a priority lately to wake up even earlier so I can guarantee at least an hour a day. I just wanted to say thank you for all the motivation I soak up from this subreddit like a sponge, it's hard to stay motivated when you barely have time for anything extra.

I'm currently learning web development and have been serious about it since November 2020, I already have a pretty good understanding of HTML and CSS and am now trying to learn JavaScript. I've been putting off creating anything, not really sure why, but I hope to start building a portfolio soon. Thanks again for the motivation to keep going, and I hope to contribute someday soon to people learning.

Edit: Whoah! Thanks for the responses, this community rocks. Being at work and seeing all these positive comments really gave me a boost. We’re all in this together, but remember it is important to make time for yourself and your hobbies or you will burn out.",2404,101,6GumyBearsNSumScotch,2021-04-15 11:15:28,https://www.reddit.com/r/learnprogramming/comments/mrchco/just_a_thank_you/,1,learnprogramming
npdq6m,How to become a programmer. My 2 cents,"Hello, folks!
I will give my 2 cents on how you can become a programmer. 

Disclaimer: This is how I see the world and this is my PERSONAL OPINION. 



EDIT: let me elaborate a bit on the learning part, because some of you misinterpreted it. If you work full time as a programmer you are most likely learning a few hours a day already. Also here I'm talking if you want to go high grow to senior/team lead/tech lead/software architect. You don't have to learn non stop in order to keep your job, however you need to learn non stop if you want to be one of the best in your company. Keep in mind just working as programmer you are forced to learn something new every so often, if you just push a bit harder you will go much further and faster in your career. 

1. I see a lot of people trying to become programmers. There are few types of people wanting to become programmers. Some like it because it's ""cool and trendy"", others because it's well ""well paid"" and small group of people like it because they are interested in it genuinely.  No matter which type you are, you must understand that programming is never ending learning process. It's not like some other professions where once you learn it it never changes. To be a good programmer you havr to spend hours learning new stuff EVERY SINGLE DAY, every day you have to read and develop yourself if you want to be good. I know some of you will say: ""I learned X language and Y framework and it's all good i get paid it's fine, you don't have to keep learning "".  Those people don't last long, if you don't progress and learn every day after a year or two you will become useless. Younger people with less years of experience, but more knowledge will replace you. Nobody is going to hire someone who's not progressing, keep that in mind, you have to constantly learn and keep pushing forward. 
  

2. A lot of people wonder if they are good enough to be a programmer. All it takes to be a good programmer is to practice and learn. Only few people have the talent to be a great programmers, however almost anyone can be a decent or a good programmer. What I'm trying to say is, even if you aren't the sharpest tool you can keep up with others or even surpass them, just by practicing more than them. I believe you can become good, if you just push hard enough. 
  

3. Practice and consistency is the key to success. You have to practice every day, even if it's just for half an hour. It's better to practice 7 days a week 30 minutes each day than to spend 8h every sunday. You need consistency and practice in order to understand and remember things. 
  

4. Make sure when you are not getting distracted by anything while studying. Try to spend at least 30 minutes a day focusing only on studying, no phone, no social media, no music, just reading and practicing programming. 30 minutes focused studying is better than 4 hours studying while getting distracted. 
  

5. Don't watch video tutorials. Most of tutorials are just someone following the documentation and making a video. Read and follow the documentation yourself. I know, I know someone will say: ""Yes, but in the video X person Y mentioned something that wasn't in the documentation and it was very useful"". True, there are some useful moments videos, but they are so few its not worth wasting your time with it. Instead of wasting 30-60 minutes watching a video and blindly coping the code from the video, read the doc in 15 min and practice the next 45 minutes. You will learn a lot more just by reading documentation and tinkering around, watch some conference instead of stupid getting started tutorial. 
  

6. Don't switch languages all the time, focus on only one. A lot of people think by learning basic syntax of language X that they know it. Understanding some programming language isn't about the syntax, you can code in Java and switch to PHP in matter of minutes/hours. However that doesn't mean you understand php, it means you know the syntax enough to write few loops and if statements. Understanding a programming language is so much more than knowing the syntax. It takes years of practice to deeply understand a programming language. 
  

7. Read code on github. After grasping the syntax of some programming language, pick a simple problem you want to solve. Write the code, then search for solution online and read up how other people solved the same problem. You will learn a lot by reading other people's code. 
  

8. Don't get discouraged. If you don't understand something instantly don't bash yourself, sometimes it takes a little bit of time to understand. Try getting a rest and continuing on the next day if you get frustrated. Don't give up, failing means you are learning. 
  

9. The most important skill is to know how to Google stuff the right way. What i mean by that is: You should learn to Google your problem in such way, that the solution to be first or second link, not the 5th result or on second page. 
  

10.  First things that you need to do is to decide what you want to code


Web - PHP, Python, Java, C#, Ruby on Rails, Javascript

Embedded and System Programing - C, C++, Rust

Automation - Python, Golang

Command Line Tools - Python, C, Golang, Rust

Games - C#, C++

Desktop Applications - Java, C#

Android - Java, Kotlin.

iOS: - Swift, Objective C.

Front End - Javascript + HTML + CSS 
  
11. The language doesn't matter that much, all languages can do almost anything. Some are just better for mobile apps other for games.

12. DON'T START WITH A FRAMEWORK!!!
 learn the basics I can't stress this enough!!!
Everything is based on same basic things: variables, data types, data structures, loops, conditions, functions. Learn them and you will be able to understand the material further.


 You should aim for is learning the fundamentals... how everything works in programming. 

Imagine you want to teach someone how to multiply 3 by 3. 
You will tell him that 3x3 = 3 + 3 + 3 = 9 right?
You bring the multiplication to addition right?
Now imagine, if that person doesn't know how addition works. 
if he doesn't know that 3 + 3 + 3= 9 you won't be able to make him understand how 3x3 works.
You might be able to make him remember that 3*3=9, but he won't know why and how. 
It's the same thing in programming, if you understand the truly basic things you will be able to use and understand any programming language fast.

Same thing learning OOP in programming is based on functions methods in oop are basically functions.

13. Finding a job, here comes the hard part...
One way to find a job is: 
 a. Create Linkedin profile add as many HR and technical people from your country, city as possible.
 b.Create some good looking project on Github, write proper documentation for that project in the repo as well. Documentation is very important it shows that you are responsible person.
 c. Create CV/Resume, put your Github repo inside.
 d. Post on LinkedIn that you are looking for internships, in the post include your resume and your github profile.
 e. people will start contacting you about interviews.

14. When it comes to interviewing those are my 2 cents:

 15. Self esteem and confidence is needed, but don't be cocky, be humble and honest. 

 16. You will always be asked something you can't answer, just ask the interviewer to explain it to you. That way you learn something new for free, also you make good impression as a guy who wants to learn and develop himself further. This boost your chance of getting hired. 
 You make new friends, they might not hire you now.but they can help you later you never know. I've been hired by people that rejected me years ago. 

 17. Human interaction itself is pretty good, soft skills are very important important, sometimes even more than the hard skills (coding skills). 

 18. Always ask for a feedback, you will learn what your bad sides are. 

 19. You will learn how much you cost when you get many different offers. 

 20. You will get to know what technologies different companies use and for what reason.


 21. For your first job the best impression you have to make is, that you are able to learn fast and learn from your mistakes. 
 22.  Most internship/junior people are hired  based on intelligence and soft skills, not hard skills (coding skills).  At my company we can hire you even if you started learning programming 1 week ago as long as you show good potential for development. 
 
23. Most juniors out there can't even do enough work to deserve their salary the first year. 
 
24. You should show them that you can think the right way, will give you example:

We ask people to find a way to tell me how many leafs are on the tree outside our office. 

The good answers sound like this:

I don't know, but we can get approximate number by counting leafs on a branch. Then counting branches and multiply it by leafs per branch, however not all branches have equal number of leafs, but that way we can get approximate number. This shows that you can come up with some solution and you have the right mindset and enough potential. 


Bad answers sound like this:

I don't know, how can i know they are too many, I can't count them. 
So anyone who doesn't show a good way of thinking and common sense gets rejected. 

 25. Also very important thing is to think out loud. 
 If they ask you question and you stay silent for 2 minutes. 
You are thinking in meantime, but other side just see you silent and think. 'this dude is an idiot he can't even speak is he even thinking about giving an answer'. 

So just think out loud, if you don't know the answer. Say you don't know, but you assume the answer might be....  and here express some of your own logic based on your knowledge about the question.
It's okay to say you never heard of something and you have no idea. After all you are applying for an internship, not a senior position.
 Keep calm and good luck. 

Sorry for bad English, I know I have a lot of grammar and punctuation mistakes, please help me fix them.",2398,216,toorhax,2021-05-31 21:22:40,https://www.reddit.com/r/learnprogramming/comments/npdq6m/how_to_become_a_programmer_my_2_cents/,2,learnprogramming
3mtvlk,Learn to make a game in C++!,"Hello developers!

I am currently in the process of creating a video tutorial series of me remaking the very famous indie game **Cavestory** in C++ with SDL2. 

My main goal for this series is to share my game development knowledge with you. Watching this will not only teach you how to make a game from scratch in C++, but it will also more than likely teach you a thing or two about programming in general. You should be able to walk away from this tutorial with enough knowledge to create your own game in C++ and SDL2.

These tutorials are very beginner-friendly because in each video, you will see me write every single line of code from scratch. I also explain all of the classes, functions, and algorithms that I implement throughout the series.

Also, all of the updated source code can be found on Github by following the link at the bottom of this post!

This is an **on-going** series, so please contact me with feedback so I can make this an even better and enjoyable learning experience for you!

This is what we have finished so far:

* [Episode 1 - Introduction](https://www.youtube.com/watch?v=ETvApbD5xRo)
* [Episode 2 - Creating the game window](https://www.youtube.com/watch?v=cD3-NZzO2Ao)
* [Episode 3 - The game class and input](https://www.youtube.com/watch?v=TX3ovZgIrbo)
* [Episode 4 - Drawing our character](https://www.youtube.com/watch?v=yq_00MAp0Xw)
* [Episode 5 - Animating our sprites](https://www.youtube.com/watch?v=NirBu24-U8w)
* [Episode 6 - The player class](https://www.youtube.com/watch?v=7wIXNdOBVeQ)
* [Episode 7 - The level class - Part 1](https://www.youtube.com/watch?v=CA0wIfvLs1Y)
* [Episode 8 - The level class - Part 2](https://www.youtube.com/watch?v=nI_LjBDMVEA)

And here are some other important links:

* [Twitter](http://twitter.com/limeoats)
* [/r/limeoats](http://reddit.com/r/limeoats)
* [My website](http://www.limeoats.com)
* [Github](http://www.github.com/limeoats/cavestory-development)


Thanks for checking it out and I hope you enjoy. Make sure to contact me with any questions or suggestions!
",2399,265,Limeoats,2015-09-29 13:11:19,https://www.reddit.com/r/learnprogramming/comments/3mtvlk/learn_to_make_a_game_in_c/,2,learnprogramming
lrvbb6,Stop trying to memorize stuff,"Professional engineer here who started out self-studying years ago for a career change. I just want to share a tip about something I see beginners do a lot that's actually counterproductive. And that's trying to memorize programming.

Stop it. Stop doing it. You're wasting your time.

Programming isn't that time sensitive. It doesn't matter if you need to look up syntax. It doesn't matter if you need to look up how to write a loop or use some API method. As long as you know what to look up, that's all that matters.

It's also a much better way to learn. When you memorize, everything is devoid of context. You learn facts, not skills. It's also devoid of motivation. You don't know why you *need* to know something, so by design your brain doesn't much effort into remembering it.

But when you have to look something up you have all the context. You know why you need to know it. You know what details are particularly important. And the harder it is to figure out, the better you learn it. You better believe you're never going to forget the lessons you learned during a 5 hour rage binge on a stubborn bug. And for the easier stuff, like syntax, don't worry. You may have to look it up more than once, but after enough times you'll have memorized it just from repetition.

You don't even need to know everything to get a good job. If you want to become a software engineer, you're going to be hired to figure out problems, not code from memory. I work at FAANG and I look things up constantly. Sometimes I even come across syntax I've never seen before. I'm hardly alone. The trick to being a good engineer is knowing how to research effectively.

EDIT: I'm seeing a lot of ""that's not true for interview"" posts. Yes it is. You learn by doing. I never studied the syntax for my interview languages, I just picked one to do all my interview prep in and in the course of grinding out hundreds of leetcode problems I knew all the library methods I needed. Same for algorithms, data structures, and the fancy little tricks those problems often require.

This post isn't saying ""don't learn"", it's saying ""you'll learn everything faster by just doing it"".",2397,249,iprocrastina,2021-02-25 02:26:50,https://www.reddit.com/r/learnprogramming/comments/lrvbb6/stop_trying_to_memorize_stuff/,0,learnprogramming
125p92s,Please for the love of god can we ban the “should I bother learning because AI is stealing our jobs” posts?,I joined this sub to help people learn programming but I’m just about ready to leave. I’m literally going to stop trying to help because of these posts. Why can’t we just ban them? Does anyone find them useful?,2395,382,_PC__LOAD__LETTER_,2023-03-29 14:11:26,https://www.reddit.com/r/learnprogramming/comments/125p92s/please_for_the_love_of_god_can_we_ban_the_should/,0,learnprogramming
etso4q,"Five years later, and my career is taking off!","Hi everyone! Five years ago, almost to the day, I quit my job and started learning Java and Android. I spent the next three years basically unemployed (with a little money coming in for one year as a part time tutor and some money coming in through renting out space in my apartment), but I basically burned through my savings and lived on nothing.

Two years ago I got my first job as a programmer - an internship actually. They didn't want to hire me at first, and I could tell, so I asked them if they'd give me an internship instead. It felt weird to ask for an internship at the age of 30, but I'm really glad I did - I was able to prove my abilities, and got hired on, albeit at a pretty low salary for a programmer in the Midwest (50k a year). Still, I was thrilled!

Two years later, and I am moving on to another company, and they're hiring me as a lead developer - two job titles above my current one, skipping right over Sr developer! I'm so happy about it. I'll be making between 115-125k a year in an area with a low cost of living, working 9-5, with good benefits. It's better than I could have even hoped for.

Overall, learning to code was the second best thing I've ever done, (besides marrying my wife). It was really hard, and it took a long time (three hard years!) and along the way I had so many doubts and struggles. I gave up often, sometimes for months at a time, and I often felt bad that I didn't learn when I was younger (I was about 26 or 27 when I started learning). I felt like I had wasted so much time, and that I was continuing to waste my time, and it would never work. I had people tell me it would never work. But it did, and it can for you too.

Things I learned along the way, if you're interested:

When I started, I saw a lot of red on the screen. A lot of errors. A more experienced developer told me ""don't worry about it - debugging is basically the job! Most of your time as a programmer is spent fixing broken stuff you've written, just get used to it.""

Making my first app - it really helped to just make something, no matter how crappy. My first app was just one button, and I'd track how many times you pressed it in a minute and if you beat the high score. It was crappy, but it was fun to hand it to my friends, to compete and laugh at this crappy game I made. The second app was just a button that played a song by Nirvana. The third was similar, but it was actually good looking, and played David Bowie songs and music videos. Each time, I got better.

Find a mentor if you can! My brother didn't know Android, but he knew Java, and was there to teach me a lot. I know not everyone has that. If you don't have someone like that, consider your options - sometimes community colleges can help, or you can find someone to help you online, or perhaps you can find someone in some other way.

I also thought that I needed to make a big splash by making a big app that impresses people by getting like a million downloads. I spent nearly a year on and off working on one app, and it wasn't a big success. Then I realized that it might be a better idea to just make a bunch of small apps that don't take as much work. That actually worked for me - when I got my first internship, I heard them saying something like ""he has 5 apps on the play store, so he's done this before."" Of course, they were decent efforts, I spent time on them, but sometimes quantity matters and making things quickly is a more fun way to learn than trying to make one perfect thing.

Don't worry about how old you are.

Don't beat yourself up. 

If you're totally new, consider mobile apps, or making websites in JavaScript (I personally suggest the app route). One reason to focus on those two is that they both involve visual displays of your abilities. If you're looking for your first job, you can just pull your phone put of your pocket, and someone can quickly see if you've made something good or not. You can easily prove your abilities. However, if your focus is more on back end, server side code with no UI, people have no idea if what you made is good or not, and if you don't have the credentials or resume, it might be hard to get credibility. Your code (unfortunately) is often judged on how it looks, so pick something where you can make an impressive UI. Also, companies will be more willing to hire you in those kinds of roles - they're comfortable having an unproven person change a button's size or color, but they're probably uncomfortable with letting an unproven rookie mess around with their servers.

Also, it took me three years to get a job, but I wasn't exactly working 8 hours a day - honestly I think I probably spent no more than 20 hours a week studying, and took months off at a time. Sometimes I'd work 10 hours a week. I admittedly could have gone faster, but I just found the process of learning to be absolutely exhausting. And it was! That's ok, the process is difficult. I don't think it is even possible to spend 8 hours in a row learning to code, I was and am still incapable of doing that. And that's ok, you can still be successful despite that, just keep at it.

Don't be afraid to ask for an internship! It was a little embarrassing to ask for one at 30, but it might have changed my life. I learned more in the three months as an intern than I had in the entire year previously. Once you get in a company, your learning can really take off, so study up and try to get in a company that is willing to train you. I would have been happy to do it for minimum wage if it meant getting trained, and I'm sure a lot of you understand that.

Good luck!",2396,248,Throwawaycs134,2020-01-25 16:15:29,https://www.reddit.com/r/learnprogramming/comments/etso4q/five_years_later_and_my_career_is_taking_off/,1,learnprogramming
ii2odu,"If you lack practice, try Codewars","It's easy when you begin to read lots of tutorials and learn a lot of notions but to be blocked when you have to actually write code.
Well Codewars is great to solve this issue.
You have exercises, and when you solve them or give up, you see other peoples solutions ranked by good practice.
Give it a try and tell me if it helped to kickstart you :)

Edit to clarify a few things :
- I don't know if it's better or worst than most other training site. I'm not an american and I live somewhere where the workplace, job interview and all doesn't have the same go-to references ; I thus thrust the other users to answer this kind of things. Thank you btw.
- As people said, this is only a step ; you'll have to work on actual projects sooner or later. As you were trapped in ""theory hell"", don't let yourself be trapped in a ""exercises hell"" of your own.
- For the ""sites like that only give fancy one line answers"", this is partially true : You can see all the other users answer, ranked by Clever and Good Pratice. Find which suits you best, and scroll while the things are too fancy for you to understand, or comment on a fancy one to ask adequate questions (like ""what is the name of this thing, so I can educate myself with documentation"" and not ""please explain all of this in three simples words k thx bye"". People that have a similar level to you will probably have an easy to read and understand answer if you look for it.
- I see a lot of people saying ""meh, it's not that good because it doesn't teach you this kind of thing you need in a work place"". I said it's cool when you begin and have theory but lacks practice. If you're in a CS related work, you don't need the basics.
- At each person it's process : Codewars might not be for you, so don't force it if you find it confusing or not quite right
- If you don't have theoric basis, also try SoloLearn on mobile.
- It is free",2387,118,Jaune9,2020-08-28 07:23:14,https://www.reddit.com/r/learnprogramming/comments/ii2odu/if_you_lack_practice_try_codewars/,0,learnprogramming
kkp6k8,"With a simple and steady programming routine, in a little more than a year, I've gone from not being about to do anything to building web applications. The way I look at technology has changed dramatically. There is no going back now and I regret nothing.","I got into programming because I used to be an avid gamer. To minimize the time I spent on non-essential tasks, I learned shell scripting in order to automate repetitive tasks. This gave me more time to spend on video games. Sometimes, I even enjoyed this all this problem-solving. Sometimes, I enjoyed it much more than video games. 

Somewhere along the way, I started feeling less and less fulfilled with my video game consumption. Even my all-time-favorites, Factorio, Satisfactory, and Rimworld didn't feel as good as they did to stick my days into just a few years ago. I decided to just quit and focus on increasing the breadth of my programming knowledge.

I took up basic tutorials on youtube - [Mosh](https://www.youtube.com/user/programmingwithmosh), [liveoverflow](https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w), [networkchuck](https://www.youtube.com/user/NetworkChuck). I finished the introductory courses on javascript, kotlin, git, sql, etc. on Codecademy. I read about programming paradigms, data structures, time and space complexity - believe it or not, I really had no clue about what I was learning at the time. I pretty much just bashed my head against these concepts until I finally understood them. It took a whole lot of persistence and effort but I think it's finally starting to pay off.

Last year I built my first [bot](https://t.me/BlarneyBot). It was a simple piece of code that used a text processing library called Tracery.js and constructed an 'insult'. There was nothing fancy about it, but a few people told me it was hilarious and that tiny amount of feedback really kept me going.

This year, I built several websites including a much more complex application that uses Node.js and PostgreSQL. The need for this application was quite genuine. It wasn't a simple hobby app. It was built with a necessity. You see, I am a big music lover and long story short, I had a few thousand text urls to music that was hosted on certain music distribution platforms such as YouTube and Spotify. I decided to do something about these links because I thought it was really silly to copy-paste a link manually into the browser each time I wanted to listen to something interesting. 

I decided to build a small program that fetched metadata for each url from its service. I then stored that data in a PostgreSQL database. I then connected that database to a front end. The result is something I call [Need Music](https://www.needmusic.app). It's basically something I use everyday now and I prefer it over YouTube and Spotify algorithms since the collection of music I listen to is handcrafted by friends who listen to a lot of great music. While that is an incredibly subjective term, a lot of the contributors to the collection are professionals in the music industry with a diverse taste in music. I think anyone might enjoy listening to a lot of that stuff.

Point being, you can do a lot of things with technology, especially when you know how the pieces fit. The more you know, the more you can leverage your knowledge into solving increasingly complex problems, the solutions of which may have eluded you just a year prior. I can't imagine the things I may be able to do a few years down the line and it's absolutely exciting to think of the possibilities. I want to get into machine learning, develop generative art, design better user interfaces (the mouse and keyboard are so 20th century), and so on. It's a never-ending quest and it really keeps me up at night.

If you're struggling to code right now, just remember that all these obstacles are temporary. Sooner or later, you are going to solve that problem, then look back and realize how stupidly simple it was. You *will* grow as a programmer, thinker, problem-solver by sheer dedication alone. Just remember to keep at it!

P.S. Big shout out to the community here and on r/learnjavascript for the constant help. I've probably posted dozens of questions on these subs and they've never failed at showing me the right way out of a complicated situation.

EDIT: Since I failed to make this a little more clear, I used to be a full-time writer before learning how to program. I wouldn’t call myself a complete beginner because I knew the basics of computers enough to have made the switch from Windows to Ubuntu in 2017. I had also taken some programming lessons in C++ in high school (roughly 15 years ago) but it was just skimming the surface. I had never built anymore than a simple Hello World program until 2019.

My routine for the past year has been an even spilt between working as a writer and learning programming. I’d say the core of my learnings have taken shape in the last 2-3 months where I’ve had the time to dedicate roughly 12 hours a day to personal projects. These projects were the easiest and best way to put everything I’d been learning into something concrete.

Currently, I try to spend atleast an hour a day with stuff that makes me absolutely uncomfortable - math, new languages (been learning Russian recently), public speaking, etc. While this may seem tangential to programming, I think these are very solid life skills for anyone regardless of profession. The more you push yourself deeper into unfamiliar territory, the easier it gets further down the line. I can say with confidence that you can make a ton of difference in your life with just twenty minutes of daily effort. 

The key is persistence, in anything you take up. :)",2376,110,LorestForest,2020-12-26 20:22:03,https://www.reddit.com/r/learnprogramming/comments/kkp6k8/with_a_simple_and_steady_programming_routine_in_a/,0,learnprogramming
gx6ted,What one tip changed your coding skills forever?,Mine was to first solve the problem then code it.,2380,486,Dayumnanon,2020-06-05 15:35:16,https://www.reddit.com/r/learnprogramming/comments/gx6ted/what_one_tip_changed_your_coding_skills_forever/,1,learnprogramming
ww2ixs,"In response to the guy asking for tutorial videos to show WHY and not just how, I’ve been watching this guy for the last few months who records himself building his clients websites and actually explains how and why he does certain things and how to apply everything I’ve learned.","I’m really more of a lurker, but I figured I might have something useful I can contribute today. 

Here’s the latest video I’m watching. I’m About halfway through it and it’s been really helpful. 

https://youtube.com/playlist?list=PLMPdeA59PPg0Lb0NG6rug-DijxyzRXvMr

I’ve been learning for the past 8 months myself after making a post on here about web dev and I see this guy a lot in the r/webdev sub and came across his videos from his posts and it’s been a breath of fresh air compared to the dozens of tutorials and courses I sat through. I got annoyed when other Tutorials just “did” things and never explained why, like it’s assumed I’m supposed to just know all these basic things beforehand and makes me feel stupid for not. It’s bullshit if you ask me. 

So when I found these videos I really enjoyed them as he talks through his thinking process on how to tackle a certain design, all the options he has to make it, and why he chooses the option he ends up coding and why it’s the best route compared to the others. I like it. It feels more like teaching than explaining. So I wanted to share this with everyone in response to that post about shitty tutorial creators only scratching the surface. It helps to know some html and css beforehand so you can grasp what he does better, but overall I’m really happy with his series. If anyone knows any more YouTubers like this one, link them! I’d love to see what they do too. 

Cheers,
Yogi",2372,32,yogiman6000,2022-08-23 22:46:44,https://www.reddit.com/r/learnprogramming/comments/ww2ixs/in_response_to_the_guy_asking_for_tutorial_videos/,0,learnprogramming
ud1tk3,Do you want to simulate a real software engineering job?,"Hi everyone! I was thinking over the week of an idea, and wanted to share it to see what you all think.

I know that lots of devs in here don’t know what it is like to work in a full time job yet (obviously). Instead of waiting for your first job, what if you could simulate having a job in the real world to show you what it is like? This way you could easily see how the software skills translate to an actual job.

I am a senior web dev, and I believe there are some core skills required for software engineers that majority of courses generally don't dig into. Things like reading other people's code, reading documentation on libraries/frameworks, debugging. This simulation of a real software job could help teach you these things.

I was thinking of creating a simple front-end software project, adding some bugs to it, putting the bugs on a task management board (like github issues), and share it with you on github. We could do all the things that a traditional tech job entails: daily stand ups via slack, issue tracking via Jira, Pull Request Reviews, etc, just like a real job. 

I'm curious to know as well, what sort of front-end tech stack you'd prefer? I'm thinking of trying this in vanilla HTML/CSS/JS. If you'd prefer other frontend libraries (React, MaterialUI, etc.), please let me know in the comments below.

TLDR - if there was a way to simulate having a tech job, would you be down to try it?",2374,307,dima_dev,2022-04-27 11:57:17,https://www.reddit.com/r/learnprogramming/comments/ud1tk3/do_you_want_to_simulate_a_real_software/,0,learnprogramming
1004pev,200 Universities Just Launched 850+ Free Online Courses. Here’s the Full List.,"Don't know if this has been posted yet, but I thought I would post it as it looks like a decent list.

&#x200B;

[https://www.freecodecamp.org/news/new-online-courses/](https://www.freecodecamp.org/news/new-online-courses/)",2367,72,Figueroa_Chill,2022-12-31 21:56:19,https://www.reddit.com/r/learnprogramming/comments/1004pev/200_universities_just_launched_850_free_online/,0,learnprogramming
ldcjm7,"I know this is generic, but I just got my first job offer and i'm beyond excited.","After all the hard work, I've finally landed my first role as a Junior Software Developer. Don't give up! I don't have a degree, I didn't go to bootcamp, nor did I start with an internship. All that matters is that you genuinely learn the skills, work hard and never give up. 

I know people like to think studying for an hour or two a day will cut it, but my one reality was that I studied a lot more than that. I worked full time, so many days I couldn't touch my computer at all-- so that meant on any days off, I was coding 12-14 hours. On work days I still aimed for 2-3 hours when possible. 

The last thing I can say is BUILD BUILD BUILD! Learned CSS/JS? Build a tic tac toe game. Make a pretty website. Learned React or Angular? Build \*another\* tic tac toe game, then build an even prettier website. Learned Express/Node? Build a Password Saver or an I.T. Logger.

If you can't stay motivated, build a project that appeals to you. One of my first bigger projects was an online rpg game that I built using random anime pictures off the web. I never published it or anything, but I sure learned a lot about programming.",2357,111,At-LowDeSu,2021-02-05 17:40:12,https://www.reddit.com/r/learnprogramming/comments/ldcjm7/i_know_this_is_generic_but_i_just_got_my_first/,0,learnprogramming
fu52z8,[MEGATHREAD] Free Courses,"In order to coordinate the current offers for free courses *during the COVID-19 crisis*, I've created this megathread.

Please, post all your findings in *top level* comments (directly under this thread).

**No indirect links** and check the validity of the coupons before posting, and, if possible, mention the expiry date.

From now on, all other ""Free Courses"" threads will be removed. This thread is the **only place** where listings of free courses are allowed.

Don't post *always free* courses.

----

Don't fall for *Udemy sales*. Udemy is the furniture store of e-learning, there are always discounts.

Also, don't fall for the *stacksocial*, etc. bundles currently advertised everywhere. They list exaggerated prices for the individual courses and out of the bundle commonly only one or two courses are necessary. 

*Humble Book Bundles* are generally worth it (with the exception of *Packt* books as they are known for low quality).

----

**No requests**",2357,618,desrtfx,2020-04-03 09:10:30,https://www.reddit.com/r/learnprogramming/comments/fu52z8/megathread_free_courses/,1,learnprogramming
mesrud,Wow github is actually pretty addicting,"I recently made a github to see what all the fuss was about, I also installed WSL and got used to git. I pushed one project onto github and it just felt so satisfying that I went through all my past projects, cleaned them up, and added them. It makes me want to learn more languages and create more ambitious projects just so I can push them and so I can stare at all my repositories lmao.",2348,140,Wonder_Momoa,2021-03-28 02:39:59,https://www.reddit.com/r/learnprogramming/comments/mesrud/wow_github_is_actually_pretty_addicting/,0,learnprogramming
86seey,I would like to share 500 Data Structure and Algorithms problems,"You can find around 500+ data structure and algorithms problems [here](http://www.techiedelight.com/list-of-problems/) that are helpful to improve your algorithmic skills and also to crack coding interview of top tech companies.

Here's another [link](http://www.techiedelight.com/data-structures-and-algorithms-interview-questions-stl/) that filters problems that are solved using STL.

Hope this helps.",2347,96,munro9443,2018-03-24 11:12:17,https://www.reddit.com/r/learnprogramming/comments/86seey/i_would_like_to_share_500_data_structure_and/,0,learnprogramming
s0zxkp,I taught a friend how to code part time for 6 months and he was able to land a job in tech!,"Hey Reddit!

Back in 2020 I had a lot of friends that got laid off due to covid19. Since, we're all stuck at home, I recommended that they should learn how to code so that they can get a remote job in tech that pays fairly decent for entry level roles. I found it kind of silly that even with all of the free resources out there, they still struggled to get started.

After binging a lot of animes, and getting tired of video games due to lockdown, I wanted to do something meaningful with my life. Hence, I offered to tutor my friends 1 on 1 starting in Nov 2020. It was a fun and interesting experience because I've always wanted to be a teacher, but I never had many opportunities to teach. So I took this very seriously, and I was amazed that I was able to help 1 friend starting in March 2021, land a full time gig at a fintech company after 6 months of hard work.

I was amazed because at the beginning, my friend was thinking of joining a bootcamp, which would have costed him around $10,000\~. However, I told him: ""let me try to teach you this, and let's see how far we can go."" He was hesitant at first, but I guess since the bootcamp didn't start until July 2021, he gave me a chance!

I started teaching this friend on March 2021, where we spent roughly 1-2 hours a week going over concepts, practice problems, and building out projects. One interesting trait about my friend was that he was very determined to get a job in tech, and he would be the one that asks me when we can do another lesson. This helped motivate me to continue to teach him, and before we knew it, 6 months went by and he was able to land a job in tech (as a PM, where the programming knowledge helped with technical discussions).

**What I learned from this experience:**

I learned that people can learn a lot and at a super fast pace, if they have a mentor to guide them through each step. I literally reviewed each piece of code he wrote to ensure that he was writing clean and concise code from day one. In addition, I made sure that he time boxed each practice problem so that way he doesn't spend more than an hour trying to figure out simple things like syntax / errors, which I think helped us move fast!

There were moments where my friend was doubtful, but as a mentor I made sure to give him pep talks to help motivate him to continue.

For example, there was this one time where he felt like giving up because he couldn't understand the concepts that I taught him. So clearly, maybe I wasn't explaining concepts clear enough, but I was super thankful for his feedback which helped me learn how to simplify concepts even further.

Obviously, learning something new like programming isn't an easy task. But, I'm grateful that he was able to stick through with the lessons and continued to want to learn more!

**A little bit about me:**

I have completed a Computer Science degree, and I am currently working full time as an iOS engineer. At first, I wasn't sure if what I taught was good enough, and I had imposter syndrome from day one. However, thanks to this friend, I guess I can confirm what I taught was useful as I was able to help him land a gig.

I have created a lot of course material, and I thought that it would be wasteful if it just collected dust in a corner. So now, I am opening the floor up and I would like to share the same resources that I taught my friend with the world :)

If you would like to learn with me, feel free to join me on YouTube. Here is a link to the playlist: [https://www.youtube.com/watch?v=GJ0p1uQVHzA&list=PLEcHbCIBlyJryQxxElze2C\_xMHLAJW94C](https://www.youtube.com/watch?v=GJ0p1uQVHzA&list=PLEcHbCIBlyJryQxxElze2C_xMHLAJW94C)

The way I structure the course is very straightforward. My goal isn't to teach every little detail of programming. Rather, I want to focus on the key stuff that I believe is important to land a job ASAP. In addition, I want to make this super accessible where people don't need to scatter the internet to piece knowledge together.

This is how the course is currently structured:

1. Learn the basics of programming in python
2. Learn web development / full stack
3. Start building projects / portfolio :)

I am currently recording the lessons, and I have completed up to lesson 15, and we are almost finished with part 1, which is the basics of programming in python :)

&#x200B;

Anyways, if you read this far. I hope you the best of luck on your programming journey!

&#x200B;

Note: What worked for my friend might not work for everyone else. In the end it's up to the individual. You can find a perfect book with all the steps, but if you don't put in the work and the hours, it's not going to work out. I know I mentioned that we spent 1-2 hours a week together, but I don't know how much time he spent on his own. So he could have been grinding hard on his own time. Also the stuff I teach in my videos is based on my opinions of what I think is needed at a job based on my personal experiences working in the industry.

&#x200B;

Edit based on Mod comment:

My friend studied Business in university, and got a role as a Data System Analyst afterwards doing mostly SQL. For more context, he had 0 programming knowledge before, we started this mentorship. If you've asked anyone if they programmed before, you'd hear the typical answer ""Yes, I know HTML, CSS"", which was what he told me. So I gave him a simple assessment, where he struggled to answer. So we started from square one learning the basics.

He initially wanted to do a bootcamp to get into a PM role, but he had 0 luck, and then decided maybe SWE was the route to go. We had a chat beforehand when I started mentoring others. At first he wasn't interested, but I guess 3 months went by and he made 0 progress in his career. Hence, why we started looking into SWE bootcamps, and finally deciding to get mentored by me.

Again, this is just 1 success story out of the 10 people I've mentored. A lot of people gave up after the first few lessons with excuses saying:

\- ""I'm not that interested in coding""

\- ""I'm getting called back to work""

\- ""It's too hard...""

or they blatantly just didn't have the motivation. So even with a mentor / teacher who is willing to help, in the end it's up to the individual whether they want it or not. So if you have the right mindset, and the right attitude, you can definitely learn to code, and if you can find a mentor you will learn at a faster pace. Hence why bootcamps work really well and can state that people can get a job in 4-6 months.

&#x200B;

Also 1 more thing to point out. This is a snowball effect, where if you stay consistent and put in time each week, you will grow and learn. However, once you take a break, the momentum will slow down and it will be really hard to get back into it. (This is what happened with a few of my friends that I mentored. Where a 1 week break, turned into 2 weeks... 4 weeks etc).

&#x200B;

Edit 3:

For people saying I'm trying to sell a dream of 1-2 hours a week. I just want to note that this is 1-2 hours of structured learning from a mentor which is different compared to 1-2 hours reading a book / figuring things out on your own. In addition, this whole thing worked because we were both motivated. I fed on his energy and he fed off mine. I checked in on him everyday and asked how are things going? any questions? So literally, we weren't wasting time figuring out why line 10 wasn't working, or why code shouldn't be written in X way.

&#x200B;",2344,272,humannumber1337,2022-01-11 00:59:27,https://www.reddit.com/r/learnprogramming/comments/s0zxkp/i_taught_a_friend_how_to_code_part_time_for_6/,0,learnprogramming
yh6xn8,my friends put me down for learning how to code,"My friends are all into programming so I started to learn to be more involved in our friend group. I told them I'm learning about loops and functions and they told me that was easy stuff and I'm a noob and that it will get way more complicated from here and they don't think I'm cut out for coding because I ask them too many questions.

I understand coding is really hard and I'm not the best coder but I showed them my webpage I made that I was really proud of but they all made fun of it and told me CSS will obviously never me my strong suit.

They think Javascript is too hard for me and they told me if I'm interested in IT I should work helpdesk instead. I have been learning for 8 months and honestly I'm starting to believe them, I lost motivation to code because I feel like a failure. They tell me I shouldn't have learned HTML and CSS first because they aren't real programming languages but noob languages and I should have learned C but when I asked if they could help me learn it they all laughed and said if I'm struggling with javascript ill never stand a chance. Am I just not cut out to learn code?",2329,971,Conscious_Ad8712,2022-10-30 06:45:30,https://www.reddit.com/r/learnprogramming/comments/yh6xn8/my_friends_put_me_down_for_learning_how_to_code/,0,learnprogramming
8wr9xv,What I would do differently if I was learning to program again,"Hi Reddit, I am a software engineer that taught myself. Recently I had a chance to interview and mentor some interns at my workplace and doing so made me think about what I did when I was in their shoes many years ago.

I would like to share what I would do if I went back in time and were learning to program again.

# Do not expect yourself to know it all

I noticed that learners of programming set a very high bar for themselves. While aspiring to the higher standard can be motivating, it often backfires because such mentality often punishes you for not knowing, or puts you in a self-denial in order to appear smarter than you really are in the eyes of others.

For instance, during the interview process, many candidates were constantly name dropping complicated terms or concepts that they did not really understand and had very little to do with the question asked. When asked to write a pseudocode using a for-lop, ""I have been watching C videos and wonder if I can use pointer reference for that"" does not really demonstrate your skills.

It is important to recognize that nobody expects you to know everything. Even experienced engineers often do not know shit, if you talked to them for a while, and they are okay with that. In my beginner years I was also conscious of what I did not know and I could clearly sense the same vibe from the interns. If I went back in time, I would start by being absolutely non-apologetic about things I did not know and just saying ""I don't know.""

# Do not go to bootcamps

Many of the intern candidates were graduating from so-called coding bootcamps often costing thousands of dollars, and that was absolutely crazy to me. First of all, knowledge is free and you do not need to pay hefty sums of money to so-called mentors to learn to program. You can go to GitHub, clone a repository that interests you, and study how it works and imitate other experienced programmer's style and it's all free.

At least that is how I learned, and it's effective because copying is the best way to learn. For example I copied famous guitarists for seven years straight before I could write a shitty original and coding is no different; I think many of us expect to get better ASAP by throwing money at the problem and such instant gratification does not pay off.

Secondly, most bootcamp attendees I interviewed all sounded exactly the same. When asked to describe a project they were proud of working on, 9 out of 10 the answers were something along the lines of ""this market place app we built in class using Rails"" or ""this book review app we built in class with React.""

The thing is, you do not need to pay thousands of dollars to build those shitty apps. You can build shitty apps yourself for free. I am speaking from personal experience because I learned by building shitty stuff that mostly made zero sense (you can still see some of them in my github [https://github.com/sungwoncho](https://github.com/sungwoncho)). At least doing so gives you some originality and saves you money.

# Write down what you learn

This is the biggest mistake I made that I would change if I can go back in time. A lot of people will tell you to ""get your hands dirty"" to improve. But in my opinion the more important thing is to remember what you learn. How many tutorials and articles have you consumed recently, and how many lines of code have you churned out? And from those endeavors, how much knowledge did you actually retain? Unless you keep a note or a journal, give it some months and you will forget the most, like I did time and again.

When you learn a concept (language feature, algorithm, data structure, ...), write it down in your own words. Regularly go back to your journal and refresh your memory. I am not a beginner anymore, but I still do it and even wrote an article about it (LINK UNAVAILABLE).

The thing is it's a good habit to have because you will be learning forever if you choose to code professionally. And those that can learn more effectively can really set themselves apart from the flock.

# Build shitty stuff that works

Some interns that we ended up hiring stood out in that they actually shipped working software on their own. I know a plenty of experienced engineers with academic background that have never shipped a program that does something by themselves. Therefore when you go through such journey as beginner you can immediately set yourself ahead of most engineers. And by continually putting in hours, you will come to a better understanding of how software works.

The part I struggled when I was trying to ship as a beginner was the fact that my code was shit. I just could not come to terms with it especially when hosting my code publicly. If I could go back, I would tell myself that nobody really cares about your code because everyone's busy with their own stuff, and that I need not be self-conscious about how bad or good my code might be.

Remember that most master artists such as Picasso or Warhol were insanely prolific. A large portion of their works are not neither well-known or critically acclaimed. I'd like to think that, by producing more and more, they were able to develop their own style and programming is no different.

# Hope it helped

I decided to share this opinion at the risk of sounding self-aggrandizing or too pedagogical. After all, these are some things that I'd like to tell myself in the past.

There are more to be said, but I am hesitant to write more because the best advice beginners can get is the advice they did not get because they were too busy shipping. But there were some things to be said. Sadly these cannot help my past self, but I'd be happy if they helped someone here and now.",2325,205,stokkid,2018-07-07 06:37:27,https://www.reddit.com/r/learnprogramming/comments/8wr9xv/what_i_would_do_differently_if_i_was_learning_to/,0,learnprogramming
pideco,Programming has changed my perspective on life and I am eternally grateful for it.,"I haven't made a lot of smart choices. Nearing 30, I am nowhere near the standing I wanted to be when I was young. A raging introvert who was content with where life was just taking me. I had no real drive, purpose or motivation to plan out my path.

I was a straight A student in school and everything that was placed in front me, I put in the effort to succeed at it just cause I was inherently capable of doing it. I was the valedictorian equivalent in my school (not from the States), the person everyone thought would come on top and I realize I expected everything to just fall in place. I believed that life would be an on rails video game.

Speaking of video games, I got hooked on World of Warcraft. Fuck that game. Chasing virtual dragons in my early 20's while I assumed my father would use his status in the prestigious company to get me in. Nepotism isn't shunned in our country, it welcomed. But changing times meant that he couldn't, instead I joined a sister company that sapped the soul out of me by making me work my ass off 72 hours a week for barely any pay. I hated it. In most jobs you only needed to work a few hours. In this, I had no time eat and the pressure of finishing whatever task you were handed can seriously break you. I had seen people - grown men - cry in lavatories or just drink themselves to a stupor once their reach their lodging. The only reason I pushed myself to show up to work everyday was I believed it that in time, I would get enough experience to join the parent company, where the pay was much higher, and hours less gruesome. No luck there either. Hiring froze and I either had to stay in the current position or quit.

I said fuck it, used whatever I saved and started pursuing a degree in IT at 26. Another mistake. The 'college' I went to was nothing but a diploma mill that gave away free A's to students so they can up their chances to transfer to the States or to Canada. I tried my luck at transferring too. Found a good college in the Midwest with a great scholarship program, but failed the visa process. They never gave me the reason but I believe I was too old to be an undergrad, and they used that against me. More failures.

That's when I sat my ass down, opened r/learnprogramming, watched as many free YouTube tutorials on programming and learned whatever I found so I can at least make a career for myself. I got an internship at a startup and continued to improve myself. Got promoted to a full time position with praise from my superiors, and now I am looking at starting an MSc to further my knowledge.

What made me realized how impactful this career choice was losing someone I loved and cared so deeply for. It made me realize that the one solid choice I've ever made in my life that could actually help me redefine myself and give me a purpose was my decision to sit down, open up a playlist for JavaScript tutorials suggested somewhere here and start taking notes. For that, I owe my life and my sanity.

I want to thank each and every person here who has taken, and continue to take the time to answer every annoying question us scrubs ask repeatedly... everyone who knows the struggle and the fear of failing and keeps supporting those who are struggling and afraid. I am eternally grateful for all of you guys.",2322,140,Produnce,2021-09-05 13:47:44,https://www.reddit.com/r/learnprogramming/comments/pideco/programming_has_changed_my_perspective_on_life/,0,learnprogramming
5pp3l0,"For those that keep posting: ""I am new to coding and not sure where to start?"", ""I am overwhelmed by the options!"", ""Which language should I learn first?"" - You can try and start here >> An easy to follow 5 part tutorial on how to build a simple website and deploy it, aimed at complete beginners.","Once again this an old workshop that made it's way online as a tutorial post, this one was created with complete beginners in mind to help someone start somewhere and achieve something that they can show off and hopefully repeat again in the future without any help. 

In this 4 part tutorial, you will learn:

1. Intro to HTML
2. Intro to CSS
3. Creating a page using both
4. Deploying the page to Amazon S3
5. Automating the deployment using Grunt.

While it is simple and bare it covers a lot of the things you need in order to build a bigger, more feature rich website. This will server you well while making small side projects and as you get more familiar with coding you will start to see the limitations of this approach and then move n to learning something more suitable for your project later on.

- Here is Part 1: http://blog.lilianakastilio.co.uk/blog/2015/12/03/create-a-simple-website-in-css-and-html-and-deploy-to-amazon-s3/

- Here is Part 2: http://blog.lilianakastilio.co.uk/blog/2015/12/30/create-a-simple-website-in-css-and-html-2/

- Here is Part 3: http://blog.lilianakastilio.co.uk/blog/2016/01/01/Create-a-bucket-and-deploy-a-website-to-amazon-s3/

- Here is Part 4: http://blog.lilianakastilio.co.uk/blog/2016/03/05/create-new-iam-users-and-permissions-in-aws/

- Here is Part 5: http://blog.lilianakastilio.co.uk/blog/2016/03/05/frontend-automation-with-grunt/

And once you get this far and fancy introducing some interactivity, then you can try to create a simple HTML form http://blog.lilianakastilio.co.uk/blog/2014/02/18/Simple-HTML-Form-Example/ that does something once the user clicks Submit.

It hasn't been updated with windows specific alterations everywhere just yet, so if you get stuck please post in here and I can try to help out.


**EDIT:**

After playing around with CSS & HTML, you can move on to trying out JavaScript & Sass to get properly stuck into coding. Both CSS & HTML provide a good base for you to have a page or component to start adding interactivity to.
If you want to play around with JavaScript try out these:
http://blog.lilianakastilio.co.uk/blog/2014/02/18/Simple-HTML-Form-Example/
http://blog.lilianakastilio.co.uk/blog/2014/10/04/Fixed-On-Scroll-Animated-Header/",2322,86,noodle-cats,2017-01-23 14:42:13,https://www.reddit.com/r/learnprogramming/comments/5pp3l0/for_those_that_keep_posting_i_am_new_to_coding/,0,learnprogramming
ek79dv,You don't need to spend money to get good learning material,"I see a lot of posts here about Udemy courses, subscription services, etc, (and a lot of people that don’t check the sidebar) but you don't need to spend money on anything. The best resources out there also happen to be completely free

&#x200B;

* [Harvard CS50 should be what all new programmers go through first](https://cs50.harvard.edu/college/2019/fall/) (It teaches you some fundamental concepts you need to learn to be a good programmer)
* [Harvard CS50web teaches you web development in Python and Javascript and builds on the normal CS50](https://cs50.harvard.edu/web/)
* [The Odin Project teaches you full stakc Node.JS and Ruby. It's a tough course but very worth it](https://www.theodinproject.com/)
* [App Academy Open is another great (and tough) course that teaches you full stack Ruby.](https://open.appacademy.io/)
* [Automate the Boring Stuff is one of the best resources for learning Python. The entire book is free on their website](https://automatetheboringstuff.com/)
* [University of Helsinki has a free online course that teaches you OOP and Java](http://moocfi.github.io/courses/2013/programming-part-1/)
* [FullStack Open, another free course that teaches you full stack Javascript](https://fullstackopen.com/en/)
* [This site teaches you C# by having you build an RPG!](https://scottlilly.com/build-a-cwpf-rpg/) (not using Unity)",2321,206,mcbacon123,2020-01-05 03:20:59,https://www.reddit.com/r/learnprogramming/comments/ek79dv/you_dont_need_to_spend_money_to_get_good_learning/,0,learnprogramming
we2fjz,Whole team appreciated me at Work (First Job).,"Hey Everyone,

  
So it's been 2 weeks since I have joined a company (start-up) as a front-end developer. The company is very small though there is lots of learning opportunity. I joined with the knowledge of just HTML/CSS, JavaScript, Basics of React JS while I was interviewed by their tech lead they asked me that am I willing to learn Angular because that's what they use. I am always open to learning so I said yes and boom I got the offer within few days. I was super excited and nervous as well because after actually getting the offer and everything I realized Angular is nothing like React-JS. I went through Docs and articles and everything and till now I just knew the theoretical difference between a Framework and a Library though now I know the practical difference as well. I found that Angular is really very In-depth Framework and I was scared that my company would definitely fire me because I am not able to learn it as fast as they expect.

Initially for a few days they just gave me 2-3 days to go through the Angular Docs once and explained me their codebase and everything. Looking at codebase I was scared again. Well then after 2-3 days they realized that it will take a lot of time for me to learn Angular from scratch so they decided to just assign bugs to me for their Hybrid mobile application which is made using Ionic and Angular. Now again I have never even heard about Ionic or even What exactly is Hybrid apps. I took some time and learned as much as I can about it and then cloned the Git-hub repo ---> Created a branch --->  and started going through the codebase. It was really hard to understand but somehow I was able to understand the underlying JavaScript functionality. On my day one of bug solving I solved one bug and I was really very happy and proud of myself. 

They kept assigning bugs to me and literally my mentor is so good that she created a excel sheet for me so I don't get confused in JIRA and she was constantly updating the sheet so I can directly access it from there. 

So yesterday was 15th Day at my job and at the end of the day we had a meeting for the new sprint and after every discussion and all, the tech lead asked me what I have been doing and my mentor asked me to share screen and show them the excel sheet. There were in total 25 bugs assigned for me and 23 of them were already resolved and released in the mobile app on Play Store and App store. They all clapped and appreciated my work. I was literally crying because I never thought this could happen. I have no friends to share this with so I thought just give reddit a try.",2317,126,kbamborde,2022-08-02 04:41:19,https://www.reddit.com/r/learnprogramming/comments/we2fjz/whole_team_appreciated_me_at_work_first_job/,0,learnprogramming
j53c65,I completed 4 freecodecamp certifications for front end development in 3 months,"Today I completed the below 4 certificates on freecodecamp.com, I was able to do them( about 650 lessons ) in about 3 months ( by giving 1 hr each on weekday and 2-3 hrs on weekends, though I wasn't regular always )

&#x200B;

[Link to my profile in case wanna see my heat map, I have tried to be as regular as I can](https://www.freecodecamp.org/ashish2199)

\- [Responsive Web Design](https://www.freecodecamp.org/certification/ashish2199/responsive-web-design)

\- [JavaScript Algorithms and Data Structures Certification](https://www.freecodecamp.org/certification/ashish2199/javascript-algorithms-and-data-structures)

\- [Front End Libraries Certification](https://www.freecodecamp.org/certification/ashish2199/front-end-libraries)

\- [APIs and Microservices Certification](https://www.freecodecamp.org/certification/ashish2199/apis-and-microservices)

&#x200B;

**Below is my experience and things I learnt**

Even though I am not a beginner, I have worked in Java ecosystem creating web applications.

But I was quite new to JS, in past I had only used simple JS statements like document.getElementById('').value to get values of fields in form and making a AJAX call to some API using them. Before this, I had worked on my company's own JS framework where we had all scaffolding and everything laid out to us so that developer didn't need to interact with low level stuff themselves.

In short I didn't know how to build things from scratch myself.

&#x200B;

**Responsive Web Design**

>Topics learnt - Basic HTML, CSS, CSS grid, CSS flexbox, Applied Visual Design and Applied Accessibility courses

I knew lot of stuff from this learning path(basic HTML and CSS).

What I found helpful was Applied Visual Design and Applied Accessibility courses. They are important for making sites that is accessible by everyone. Being a good programmer is not just about making stuff for ideal condition. Things we make should be resilient enough so that they work in non ideal conditions and user still able to use our application.
I also liked learning about color theory, how to choose colors for your website, how much contrast you should have between your text and background for readability. 

I learnt CSS Grid and CSS Flexbox.
Firstly I did a course on [Scrimba.com Learn Flexbox](https://scrimba.com/learn/flexbox) This helped me understand basic syntax. Its easier to start with someone explaining the concept to you than you just reading a bunch of text. Next thing I did was I went through [CSS-Tricks.com A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) I went through each CSS property and filled in the missing gaps which the above tutorial didn't cover.

I followed similar approach for CSS grid i.e. first watched videos on [Learn CSS Grid](https://scrimba.com/learn/R8PTE) and then read [A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)

The projects at the end of the path were fun to do.

&#x200B;

**JavaScript Algorithms and Data Structures**

>Topics Learnt - Basic JavaScript, ES6 syntax, Regular Expression, Object Oriented Programming, Functional Programming and debugging

I was really looking forward to this topics as it had all the real world programming stuff. I knew basic JS with few gaps here and there. I didn't knew much about object oriented programming in JS other than creating basic objects through object literal and assigning values to their properties and using them as place to store things.

Even though ES6 was released almost 5 years back, still all these syntax were new to me. I learnt many things like arrow functions, default parameters, let vs const vs var,  Destructuring Assignment , rest and spread operators, class syntax.

Functional programming especially the array methods taught me how to do things concisely and without changing the array we are working on. It feels good to accomplish things with so less code after using them.It taught me how Functional programming taught me to reduce bugs by making predictable pure functions by avoiding the change of input arguments and making functions that don't have side effect(don't change other variables/properties that are outside your function).

The problem solving challenges were not too tough and I was able to solve most of them without any difficulty. These lessons wouldn't teach you Data Structures and Algorithms required for cracking interviews(better use [leetcode](https://leetcode.com/problemset/all/) or [hackerrank](https://www.hackerrank.com) for that) but the everyday problem solving skills.( These tutorials are meant for beginners to start building things and not to do bog them down by teaching theoretical stuff first )

I didn't use any other tutorial for this path as it itself was so big. Though I would like to go through [JS MDN guides](https://developer.mozilla.org/en-US/docs/Web/JavaScript) in future to cover my knowledge gaps.

Things I would want to study more - Asynchronous Programming ( promise, async, await ), learn more about the tricky stuff like closure and JavaScript idiosyncrasies.

&#x200B;

**Front End Libraries**

>Topics learnt - Bootstrap, jQuery, Sass, React, Redux

I had completed the courses for Bootstrap and jQuery in 2018. I just went through my notes once in order to review them.

I was excited to learn React and was amazed by how some of the things are so simple to do. I learnt about JSX, two types of components - stateless functional components and class components, how to use props, how to communicate between child and parent component.

I feel I have gaps in my knowledge, these tutorials are good to give you a introduction but if you wanna build real world stuff you need to dig deeper by [going through React official documentation](https://reactjs.org/docs/hello-world.html).

Still they have provided me enough knowledge for me to know where to look for what things and be able to understand official docs. Its about learning how to learn :D instead of learning that specific thing.

I built all my projects in React in order to improve my react knowledge. Some of the projects like 25 + 5 clock timer were really tough to get their tests right as there always off by 1 error. ( But we learn only from the tough things :p )

I would like to share few projects that we were required to make in order to get this certification(all of them were very interesting functionality wise as well).

* [Pomodoro Timer](https://codepen.io/freeCodeCamp/full/XpKrrW)
* [JS Calculator](https://codepen.io/freeCodeCamp/full/wgGVVX)
* [Drum music playing machine](https://codepen.io/freeCodeCamp/full/MJyNMd)
* [Random Quote Machine](https://codepen.io/freeCodeCamp/full/qRZeGZ)

&#x200B;

**APIs and Microservices**

>Topics learnt - NPM, Basic Node and Express, Mongoose

I was finally was able to create my much hyped REST APIs :P

I discovered that I do not need to install anything on my laptop and I could code everything online. I was using [repl.it](http://repl.it/) as my online IDE and used [MongoDB cloud atlas](https://www.mongodb.com/cloud/atlas) for my database. I really enjoyed being able to host my projects online without much effort.

This didn't cover much about Node.js and I am planning to learn it own through their [official documentation](https://nodejs.dev/learn).

I went through [ExpressJS Tutorial](https://www.tutorialspoint.com/expressjs/index.htm) to get better understanding of Express.

The tutorials didn't cover a lot of things which is kind of expected if you have reached so far, you should be able to [Read, Search, (Don’t Be Afraid to) Ask](https://www.freecodecamp.org/news/read-search-dont-be-afraid-to-ask-743a23c411b4/) on your own.

I enjoyed doing the projects especially the URL shortner( it feels good to bieng able to make something that could be useful in real life).

&#x200B;

I also plan to do Quality Assurance Certification to learn more about unit testing and some more Node.js

&#x200B;

[I would like to share my notes which I created while going through the courses on below topics.](https://drive.google.com/drive/folders/16U2sWNtjb8n4xKnyRssThWBNEtsRC4aH?usp=sharing)

    Responsive Web Design Certification:
    - HTML5.txt
    - CSS.txt
    - Responsive Web Design Principles.txt
    - Applied Accessibility.txt   
    - Applied Visual Design.txt   
    - CSS Grid.txt   
    
    Javascript Alogrithms and Data Structures Certification:
    - Baisc Javascript FreeCodeCamp.txt
    - ES6.txt
    - Object Oriented Programming.txt
    - Regular Expressions.txt
    - Debugging.txt
    - Functional Programming.txt
    - Basic Data Structures.txt
    - Basic Algorithm Scripting.txt
    
    Forent End Libraries Certification:
    - Bootstrap.txt
    - jQuerry.txt 
    - Sass.txt
    - React.txt              
    - Redux.txt     
    - React and Redux.txt   
     
    API and Microservices Certification:
    - Managing Packaged with NPM.txt
    - Basic Node and Express.txt
    - MongoDB and Mongoose Challenges.txt     

&#x200B;

Things that are important in real world but are not covered:

* How to write clean code - how to divide your code into small logical functions , how to write good variable names and functions names that convey what they are doing
* How to debug using chrome dev tools : [Google Chrome Developer Tools Crash Course Video](https://www.youtube.com/watch?v=x4q86IjJFag)
* How to navigate and perform basic file operations in Linux
* Version Control : Git
* How to document your code, how to follow syntax and other common practices
* How to create models/solutions for real world/abstract problem domains

&#x200B;

I am planning to go through the things mentioned in below sites and fill my knowledge gaps. They provide a good checklist of things we should know as a front end developer.

\- JS Interview Checklist ([https://js-interview.com/javascript-interview-preparation-checklist/](https://js-interview.com/javascript-interview-preparation-checklist/))

\- Front End developer Roadmap ([https://roadmap.sh/frontend](https://roadmap.sh/frontend))

\- React Roadmap ([https://roadmap.sh/react](https://roadmap.sh/react))

I would want to dig deeper into react by going through the official documentation, go through Node.js official documentation and probable learn GraphQL (an alternative to REST API)

**Though all this seems to be an ambitious plan :)**",2308,112,ashish2199,2020-10-04 18:01:13,https://www.reddit.com/r/learnprogramming/comments/j53c65/i_completed_4_freecodecamp_certifications_for/,1,learnprogramming
eps41j,Wrote my first code today at work and it worked - I am VERY pleased,"I’m doing an internship at a large car company and I wrote a switch statement in C that is being committed to the master source code for the entire company. Small steps, but I figured out the solution all by myself and I am extremely excited.",2303,104,mostler,2020-01-17 00:03:17,https://www.reddit.com/r/learnprogramming/comments/eps41j/wrote_my_first_code_today_at_work_and_it_worked_i/,1,learnprogramming
590v8l,"Last year I was unemployed and miserable. Using this sub and resources, I've been full time employed for a year. I did it with all free resources. I wanna share with you how I did it.","Background: Environmental Engineering degree from a University of California. But it doesn't matter. None of my coworkers have engineering degrees.  
Position: I'm a mobile developer. I primarily work in iOS with Swift and Objective-C but I also know JavaScript, finished Android boot camp through CodePath.  
Ask me questions, I'll write a summary of resources I used.  
  
> Why are you writing this?  
  
I recently celebrated one year since my official full time offer after I worked as an apprentice last year. So in total I have about one year and three months of experience. I've also seen a lot of posts from people struggling and I'd like to provide guidance.  
I will not post any links to a YouTube account to get views out of you, I won't try to get you to pay me money. part of the reason I love this community is because software engineers are obsessed with teaching people for free. And I'm all about that life.  
As promised, here you are:  
**Sonny's Roadmap from 0 to iOS Hero for FREE**  
[CS50x on EdX](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x) - You can audit the course for free. Take this and finish it. This will change the way you think of programming and David Malan is one of the greatest and most inspirational people I've seen talk about computers. Everything else you take, will teach you how to build things like a software engineer. David Malan teaches you how to *think* like a software engineer.  
[iTunes Developing iOS 9 Courses with Stanford University](https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961) - The course and all materials are free on iTunes. While it's outdated from iOS 10, the concepts and fundamentals are crucial to understanding how to write and develop applications in iOS.  
[Paul Hegarty](https://www.quora.com/Who-is-Paul-Hegarty-from-Stanford-CS193), like Professor Malan, is a huge inspiration to me.  
[Hacking with Swift](https://www.hackingwithswift.com/read) - You can do the entire Hacking with Swift course free, just disable your ad-block because that's how Paul Hudson makes money off of people who don't buy the books. I bought HwS and Pro Swift, so my ad-blocker is on, sorry [Paul](/u/twostraws). Paul knows the industry, so he's not going to sit around and scold you about using a UITextView instead of a UILabel when you want your text to run on additional lines. He's going to teach you how to build iOS applications. He updated his resources for Swift 3.  
  
**Graduate School** | **Further down the rabbit hole** | **The Red Pill**  
At this point, you're honestly ready to start building applications and apply to apprenticeships or jobs, but there's still a lot you don't know. The question is, do you go further down the rabbit hole or just let work experience dictate you from here?  
Beyond this point, my recommendations are more specialized. If you have a full time job and a technical background, I highly recommend [CodePath iOS Courses hosted at Facebook](https://codepath.com/courses/facebook/ios) or [Hosted at AirBNB](https://codepath.com/courses/airbnb/ios). The only conflict with this is that you HAVE to commit 8 weeks of your time. You can't just give up halfway because you'll be given a team and if you bail on them, you're a dick. And to be honest, they could've given a spot to someone who would've finished.  
Another recommendation is [Udacity's Intro to iOS Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585) or [their iOS networking course](https://www.udacity.com/course/ios-networking-with-swift--ud421). You can audit Udacity's courses for free, just make sure to constantly add what you work on to GitHub. They also have a [Grand Central Dispatch course](https://www.udacity.com/course/grand-central-dispatch-gcd--ud576) which is pretty important to know.  
Another really solid resource is [Ray Wenderlich's iOS Tutorials](https://www.raywenderlich.com). A good majority of them are accessible free and they are very solid iOS developers.  
**Resources to Avoid**  
I hate to say things like this, but there's a resource I have to call out because it will make you a *bad* developer but give you a very false sense of security about knowing what you're doing and that's **""Rob Percival's iOS Course on Udemy""**. You'll see it on sale, for $7.99 or $9.99 and suspicious accounts recommending it here, but let me save you the trouble:  
As a full time iOS developer, if you use Udemy from start to finish to learn iOS from Rob Percival, you will almost assuredly fail a technical interview and have your code quality seriously questioned. He doesn't teach proper unwrapping of optionals early onward. He copies and pastes code without explaining fundamental MVC or MVVM structure. He says a lot of ""just write it, and you can figure it out later"". He doesn't have a verifiable work experience with actual clients or companies and more or less just built his reputation on having the most sold iOS course on Udemy. Almost every ""review"" you find that is on Google has a ""referral link, get 50% off with my link here"" which makes it hugely suspect.  
I got the course for $4.99 last year, just to add to my resources and now when I look at it, I find myself putting my hand on my forehead a LOT.  
If you insist on going with Udemy, I recommend Mark Price.  
But even then, you shouldn't touch any of these until you finish CS50X. ",2304,183,sonnytron,2016-10-23 21:27:28,https://www.reddit.com/r/learnprogramming/comments/590v8l/last_year_i_was_unemployed_and_miserable_using/,0,learnprogramming
ot644n,"I got my first job as a developer, after 2 years of learning! (MOTIVATIONAL POST)",">TL;DR: I'm just an average guy with no special understanding skills who didn't even know some basics today but with hard work: You can do it too!

Yeah I finally got it! A job in a big agency in my hometown! They only have big clients and a huge and super professional team of developers. The company is build like a google headquarter. With everything you can imagine for free time, work time and so on. Think of any cool stuff a company could do for his employees and they have it for pretty sure.

And NO: I'm not a professional super quick learner. I'm quite the opposite.

But why I'm saying this to you?

Because I read A LOT OF ""lack of motivation"" ... ""don't know where to start"" ... ""how much time I need to invest"" and so on.

I will give you some motivation and overview how everything worked out from my point of view. A guy who never had a direction of learning, comes from a quite low social circle and just did stuff without any aim.

In summer 2019 (I was 33 years old) we had an idea for an app, made some research and couldn't find anything like this. There were only 2 apps which pretend to be like our idea, but they were slow, ugly and absolutely bad in UX.

So we made a plan. 4 people. 2 for marketing and research and 2 for development.Long story short: Nothing worked out in the future.One of the developer broke up the contact, the 2 marketing guys were just lazy and didn't saw the work.Only me was learning the development stuff from day to day, even with the knowledge ""This is nothing we will ever release, because nobody is pulling the same rope.""

I started to teach myself with freeCodeCamp, which is a good resource, but nothing you can really go further with in a practical way. I will talk about this in a second.

Than I found Udemy courses, which is more like a real world scenario. You code something and get something out of it. In worstcase, you just change some colors and the name of the website and can use it as your own landing page.

That was cool, but everything you learn on courses like this are just ""get your head into the syntax"". That wasn't enough because everytime I thought ""I can do this and that with this knowledge"" and started over I was like ""I don't know how to do this, even not the first line of code.""

So I started my own challange. I was my own client and my client was talking to me ""Write a website with a single div in your HTML and everything else write down in JavaScript, even the styling.

And it was a struggle like no other. The page was ugly, the code was ugly, everything was a mess and nothing worked. I was frustrated because I saw the time I lost in the past, nothing was left in my brain I could use for it.

But I just kept going. Saw the code every day after my fulltime job, every evening. Even with the biggest motivational lacks I sat infront of it and was like ""Okay, let's just fix line by line. Even if I just fix 1 line in 1 evening, I could get something out of it."" and yeah, it was like this. I asked myself ""How can I change the color of the button in JavaScript"" typed it in google and found out something like document.getElementById(""button"").styles.backgroundColor = ""black""; With this knowledge, I could change every color of everything and went further. ""How can I change the context, when I click on a button"". And I found something about it, used it and put it on everything which could handle a click operation"". You get the idea.

I searched and read more than I fixed, but the weight here was 5 / 95 and becomes more and more to 50 / 50.

The trick? No trick! Just keep doing. Even when you fixed NOTHING, you train your brain to think more as a developer.

And yeah believe me when I am saying I was VERY often in a hole of no motivation. Not at least why I thought ""I will never learn anything .... this is so complex .... this is so overwhelming .... this is just for super intelligent people .... I am not like the most developers and will never be."" Even the simplest things I need to repeat several times to understand it and sometimes I never got it. And yeah I cried a lot because it seems to much for me.

I ran through a lot of self doubt but there was something inside me who just said ""You will never leave you shitty lifestyle with your shitty low paid job when you are not learning the impossible.""

So I changed my learning style in general.

All this courses and resources where people take you by your hand and show you how to develop a website, a shop, an app, or whatever are nothing more than a snippet of her real work. To make a course like this means struggle all the way up and showing only the parts which are working out because they found many ways to make it work.

So my changed learning style was like: ""When I must to teach someone programming, how would I do it with no knowledge and which questions could the student ask me?""

And I asked myself all these questions and found everything on the internet to it, till the time I explained it myself on a piece of paper and when it sounded reasonable, I went further. ""What is a function?"", ""Why do I need events?"", ""What are events?"", ""Why is this line of code calling before the other?"" ""What means HTML?"", ""Why browser engines are different?"", ""Why do I need to write in with a capitalized letter and the next time with a lower case letter?"", ""What does syntax mean?"", ""What is this?"", ""Why do I need to know what a global scope is?"", ""Why can't I get the information from the last function, I need to run the next one?"", ""Why is it called 'callback'""? and so on. You get the point here. I asked EVERYTHING! Even the simplest and most stupid stuff.

I build up a lot of projects, never finished one but this is not a shame at all, because I tried every time new stuff and found the answers on the internet ""How can I draw something in the browser"". ""How can I trigger something with a keystroke?"" Whatever, there is ALWAYS someone who asked what you have in mind and there is ALWAYS someone who answered this exact question. You just need to do it.

If not: Go to Stackoverflow and ask your question there. No answer? Search for Slackchannels and ask it there! No answers? Search for Discordchannels and ask there! And so on! Even the simplest question and the most obvious answer will get answered by someone! Why? Because EVERYONE started, just like you and me and had the same question.

You don't know what to do? Surf the web, ask yourself ""If I need to code this website, what would I do to make it better than it is now?"" and if you love everything on it: Copy it! Try to make everything what you see there and copy it. Found out what they use, what they possibly did there and try to copy every single button, effect, function, whatever.

Because there is NOTHING better than doing real world stuff without a holding hand, than any other tutorial out there.

You stuck? Get back to Stackoverflow, Discord, Slack and ask there! Show your code and get through it with other developers to find better ways to do it! You don't need to be ashamed of your code, because NOBODY has the ""perfect code"", and NOBODY learned good coding skills from the beginning. Every developer you talk to started somewhere and all of them struggled and wrote shitty code.

After a project folder bigger than the video pool of YouTube :D and connections to other people (designer, developer, artists) in on- & offline communities someone asked me if I could do a website for an 100 artist collective ... of course for free.

I just said yes without knowing what to do and without thinking about it at all.

I didn't had a clue how to write profiles for 100 artists, without repetitive coding. Writing down 100 artists details would cost me more time than I got and doing this for every single art piece they send me over would break my neck.

So I just started and started over and over again, because it was shitty code and didn't worked out, but there were 100 artists waiting for something they want to see, this was so motivational, I forgot to sleep, to eat, nearly forgot to go to work and even in the breaktimes on my fulltime job I worked on it till I got something to show up.

A real life scenario where people rely on my work. It was fantastic to see and I developed my first baby. Made my first React Website, run the build command the first time and touched a database the first time. I never ever learned how to fill a database or get something out of it. I just googled everything and copied and pasted it, changed it try to optimized it for this particular use case. Broke it and started over again.

After this I started to applied for jobs. Just because my motivation was high and it was clear I want to do this every day!

I applied for around 70 jobs in 2 month. Mostly I never heard anything of them and when I heard something it was like ""Your knowledge is to low, try it again in several years.""

Then the agency, I talked about in the beginning, called me and was like ""Let's talked in a virtual meeting with the developers and see how this could going."" I attended to the meeting and was like ""Sorry guys, I am not the professional one, I am quite the opposite, I can show you only one project ... but I can say you something which never changed in the last years: I want to become a developer and I don't care who is helping me with this and how long it takes, I just care that I WILL become a developer!"".

So they invited me to a trainee day which I need to resolve 3 tasks.

It was horrible. The code was the most ugliest I've ever wrote and believe me ... I mean it, even a few weeks started programming learner would cry about how bad this code was.

I played with open cards and said ""The stuff which is working here was 90% copy paste from my old, mostly never finished projects on my project folder on Github which I opened up especially for this trainee day. Like I said 'I'm not good at this at all and without the access to my old code (which is mostly from some YouTube videos), I couldn't finish a single line of any task from your sheet.'"".

In the end I need to represent the code in front of 12 people (10 of them are developers) and what I was thinking to resolve the tasks in that specific way. I was nervous as hell and they said ""We need to talk about this in private and will tell you after that what we are thinking.""

I waited outside for 15 or 20 minutes ... I don't know ... because it felt like hours.

They called me back inside and said ""Your code was shitty as hell but we would love to show you, how you can do it better, because your motivation to become a developer was totally clear and shows us you COULD do better, if you had the right guys, tools and the right training. Here is the contract!""

And they told me something in the end of the day: ""From now on, you will never stop learning anymore, for your whole life!""

Again: Why I am saying this to you?

Because I am a super average guy (35 years old) without any super special understanding of weird stuff. I can not read code and concepts and get the ""Ah ... okay, that's easy!"" moment. I need to repeat to learn OVER and OVER again and even now, at this point, I didn't get my head in some basics.

If I can get a job as a developer, every single one of you can get a job as a developer! You just need to go further, even on the shittiest days. Do just 10 minutes, or just watch a tutorial without doing anything but watching, if you don't feel like it, but just keep doing!

Head up! Go further, because nobody will gift you with something when you are not working hard for it! You can only gift yourself!

You don't need to be super intelligent or nerdy or have special abilities, you just need to keep doing it! Repeat everything 10 times or more, there is no clock running to finish something in a specific time span - take YOUR time, gain YOUR knowledge and always work on real life scenarios even when you don't know anything. Start copying, go to their code and use it. Just do it! Keep going!

YOU! CAN! DO! IT! TOO!

\--

*Edit (24 hours later):*

*Thank you for all your lovely messages. I never thought my post would have THIS kind of a big impact for you and I am super happy to see people get back on track and motivated again. I recieved a lot of comments, personal messages and awards and I want to THANK ALL of your response! This community is so kind and lovely! Thank you* 🙏",2306,197,KlarDuCK,2021-07-28 08:59:30,https://www.reddit.com/r/learnprogramming/comments/ot644n/i_got_my_first_job_as_a_developer_after_2_years/,2,learnprogramming
ibcq42,I made a site that randomly generates python practice programs to teach reading fluency,"I've been a programming tutor for about 7 years, and I only recently realized that a major weakness in the way programming is taught is that beginners don't get to practice reading code enough to be able to read *quickly*. I made this site to randomly generate python programs for the user to read and figure out the output. It can be configured based on your level of ability, e.g. you can include or exclude different variable types and the difficulty levels gradually introduce more complex statements, if/elif/else, loops, and nested loops. There are three different exercises currently: control flow, boolean expressions, and functions.

I've been using this with one of my students and it seems to have helped. He certainly got faster at reading code, and I think the skill has transferred over to writing code as well.

Here's the link to the control flow exercise: [https://trprt.io/python-practice-problems-ifs-loops-control-flow](https://trprt.io/python-practice-problems-ifs-loops-control-flow)

Let me know if this helps you!",2302,105,palpalpalwarp,2020-08-17 11:55:55,https://www.reddit.com/r/learnprogramming/comments/ibcq42/i_made_a_site_that_randomly_generates_python/,0,learnprogramming
w88tes,a program I wrote 5 years ago just came in handy. I'm feeling quite proud actually.,"5 years ago I started learning python so try and get a better job. I quit so many times, but slowly worked up enough knowledge to bullshit my way into decent career as a data engineer. 

Well tonight my teacher wife was mad that she couldn't used any YouTube videos in her classroom because the network locked it out. Well 5 years ago just for learning I wrote a python program using youtube_dl that could download whole videos when given a url. Lucky I'm a data hoarder and still had it in an old hard drive. I showed it to her and 20 minutes later she had everything she needed. I'm feeling weirdly proud of this stupid little thing I made that was finally useful 5 years later. 

Don't give up, or at least don't give up completely. It might take longer than you had first hoped, but if my dumb ass can do this shit so can you.",2293,72,TrainquilOasis1423,2022-07-26 03:23:57,https://www.reddit.com/r/learnprogramming/comments/w88tes/a_program_i_wrote_5_years_ago_just_came_in_handy/,0,learnprogramming
uho9n0,Things I Wish All Junior Developers Knew,"Hi there, I'm an Engineering Manager with a little over a decade of experience. Since there are a lot of aspiring developers here, I thought I'd take the time to summarize some thoughts I've had as I've read and responded to posts on this sub.

&#x200B;

1. Your portfolio is not as important as you think it is.  
As a hiring manager, I have *maybe* 20-30 minutes to review your application. On a *very* good day. That means I'm going to read your resume, and if you have a portfolio, take a quick look. But all that look will be is:   
\- What projects did you do. Are any of them technically interesting/challenging  
\- What tools did you use  
\- How clean is your code  
\- Did you write good tests  
I won't have time to read in depth, really analyze your architecture, or run anything. Think of your portfolio as an extension of your resume. The only reason it exists it to catch my attention, and not set off my 'nope' flags.
2. Software is built by teams  
In the real world, non-trivial software is always built by teams, not individuals. This is true both of corporate software and open source. Linus Torvalds didn't write Linux, a distributed community of hundreds of contributors did. Understanding how to write software on a team is essential to your success, because that's how software gets written. 
3. Write tests.  
Seriously. Just do it. It's what all good teams in the industry do.
4. Freelancing is not a great option for folks new to the field.  
Freelancing is really appealing to a lot of folks. It feels like you're your own boss, setting your own schedule. The reality often is no where near as pleasant. Instead of one boss, you have a dozen, none of whom have any investment in your growth or well-being. You're competing directly with a huge pool of developers, many of whom probably live somewhere with a lower cost of living, and so can charge less. If you can get gigs at all, they are likely to pay a tiny fraction of what a full time salary would. Freelancing can be great once you're a real expert, and can get jobs where people are hiring you as a consultant. As someone new to the field, you aren't going to get those jobs.
5. Most software does pretty mundane stuff.  
The *vast* majority of software out there is straightforward CRUD apps. As someone new to the field, if you don't have an elite degree, this is what you will be writing. Fortunately, straightforward CRUD apps actually have a lot of interesting problems, because of the next two items.
6. Most software problems are people problems.  
Most of the hard technical problems have already been solved. What hasn't been solved, and is essentially unsolvable, are the human problems. How do you encourage users to do what you want. How do you prioritize conflicting requirements. How do you balance tech debt with feature development. How do you make sure teams are cohesive. How do you design processes that allow you to work fast an efficiently. These are the problems that software engineering is really about. 
7. Architecture is more important than coding.  
This is a huge one. Building software that's easy to extend and work with is the *single most important thing*. Your large scale design decisions are *critical.* A lot of newer developers ignore architecture to focus on coding, and this is a mistake. 
8. It's very unlikely anything you've written is special, and that's ok.  
I answer so many questions about someone wanting to hide or obfuscate their code, because they're scared someone will steal it. No one wants to steal your code. Nothing you have written is worth anything to a potential thief. And that's ok. Again, most software does mundane stuff. It's important to the business you're working for, but not especially valuable in and of itself. What's valuable is *users* and *data.* Reddit's source could leak tomorrow, and they'd be fine - a Reddit clone using the same source wouldn't magically get Reddit's user base. In my entire career, I've written perhaps two things that were actually valuable in and of themselves, and not just because they solved a problem.",2277,218,nomoreplsthx,2022-05-03 19:48:50,https://www.reddit.com/r/learnprogramming/comments/uho9n0/things_i_wish_all_junior_developers_knew/,1,learnprogramming
f97mwc,A complete computer science study plan to become a software engineer,"A multi-month study plan for going from web developer (self-taught, no CS degree) to software engineer for a large company.  


[https://github.com/jwasham/coding-interview-university](https://github.com/jwasham/coding-interview-university)",2277,73,mmaksimovic,2020-02-25 09:13:45,https://www.reddit.com/r/learnprogramming/comments/f97mwc/a_complete_computer_science_study_plan_to_become/,0,learnprogramming
nfu5yu,"Day 2 of my first software engineering job, and holy crap...","As the title says, I am just getting my foot in the door after self-teaching for one year, attending a coding bootcamp for 6 months, and job hunting for 9 months. Psyched to have benefits for the first time in over a decade, and be earning double my previous salary in an entry level role... Couldn't be more grateful! That being said, I understood about 2% of what they said on day 1, and about 10% on day 2. Feeling wayyyyy out of my depth here. Looking at millions of lines of code, written over 30 years, in 3 languages that I don't know, and dozens of pages worth of architectural schema. Watching my colleagues play the command line like sexy saxophonists, while I plip plop away at basic navigation commands. I have about a month to get my bearings while they set me up with all the programs needed to actually begin working, but even that feels like a drop in the bucket in terms of prep time.

Tell me, how do I keep the charade going long enough to figure out what the hell I'm doing?",2272,325,Guilteus,2021-05-19 03:00:32,https://www.reddit.com/r/learnprogramming/comments/nfu5yu/day_2_of_my_first_software_engineering_job_and/,0,learnprogramming
rdx1et,"I'm 31 - i started learning programming in October 2020, quit my old job June 2021, got my first web developer job in September 2021 and I LOVE it!","Just wanted to say that if you feel stuck in your career and want to move toward web development it's very much possible, and very much worth it. 

I dreaded my old job, and decided that I would take the leap. It was scary and challenging, but many things in life that are worth striving for seldom are easy and without any risk. 

I can wholeheartedly recommend Harvard's free courses on EdX called cs50 and cs50 web. Take them and then choose a framework and STICK WITH IT and get really good at it (i choose Django). Read books, build your own projects, TRY different things - and don't be afraid of doing it wrong. This is extra important if you are like me and don't have a CS degree - what you lack in formal schooling you can make up for with your own ambition and interest, a sound employer will see and appreciate this. 

Learn to stick with feeling confused, eventually you will figure out any problem in your way. It's like Einstein said - I'm not smarter than anyone else, I just stay with problems longer. 

Best of luck, and have faith in that you are doing the right thing. You owe it to yourself. Trust that if you grind this thing enough, eventually you will find a way to achieve your goal.

Programming is a lot about being frustrated, but also finding enjoyment is creating things and making things work. Don't beat yourself up for not getting your head around things, it's just a natural step of every problem you will face. It's the nature of being a programmer. Learn to have patience with yourself and the problems you face and don't let anyone make you think otherwise, and you will both grow much faster as a programmer and enjoy it more.

Don't be afraid of asking ""stupid"" questions - those who do are the ones who will learn the fastest.

Also one of the best advice I got on how to become a better programmer is to, lo and behold, go for daily walks without any stimuli. Just walk and let your mind wander or not wonder. It helps you sort our your thoughts.

EDIT:
I'm happy to see so many found this inspiring. Also, thank all of you who have contributed with well wishes. 

I notice many of you asking about the personal projects - my advice is to pick an idea of your own - no matter what it is - and try to figure out how to do it. Rather than just following a tutorial. Sure you will have to use tutorials, but you will need to combine knowledge from multiple places and put it all together, and this is excellent training for how the job will actually be.",2268,170,allun11,2021-12-11 10:27:15,https://www.reddit.com/r/learnprogramming/comments/rdx1et/im_31_i_started_learning_programming_in_october/,0,learnprogramming
niafrf,"CS graduate, unable to get a coding job for 12 months, people told me that I need more high-quality personal projects. I'm heavily depressed and have zero motivation, but I do want to get better.","I know this thread won't get a lot of attention, and it'll probably even get downvotes. But the title is exactly the situation I've found myself in. I don't even get phone interviews. There are various reasons for my being depressed that I shouldn't get into detail here, but I do want to be a tiny bit better.

I used to play a lot of video games, but I'm not interested in gaming anymore. Nowadays, I just lie in bed, sleeping for 10-12 hours a day. The idea of working on personal projects intimidates me, because 1) I don't even know what I'm interested in because depression makes you lose interest in everything, including the act of coding itself, and 2) It just feels extremely overwhelming to start a project from scratch.

In university, I took most of my upper level courses in machine learning, natural language processing, and data mining. I aced those courses, and I think I contributed enough for the final group projects. I wouldn't say I was the top contributor as I was also depressed during my college years, but I can work hard enough if there is a hard deadline and you're working for a grade (which in retrospect is largely worthless in the corporate world). In terms of personal projects, there is no deadline, I have nobody to work with (since I don't have friends), and there is no obvious reward other than having more projects on github for employers to look at. I don't feel intrinsic motivation when it comes to coding projects; I only feel the immense amount of pressure that is needed in order to stand out amongst my competitors. In short, personal projects feel more like a chore than a hobby.

I don't want to get too much into my mental health issues, but for me, the hardest part is getting started. If anyone can help me with that, that would be stellar. Thanks in advance!",2263,257,None,2021-05-22 04:12:48,https://www.reddit.com/r/learnprogramming/comments/niafrf/cs_graduate_unable_to_get_a_coding_job_for_12/,0,learnprogramming
g5h9nx,Feeling overwhelmed? It's probably because you're trying to learn multiple technologies at the same time.,"Lots of courses / bootcamps ""throw you in the deep end"" and get you started with a complicated technology stack, which leaves you feeling overwhelmed.  

I went to two coding bootcamps and this happened to me twice.  Both bootcamps wanted to teach me Ruby, Rails, Git, GitHub, and Postgres at the same time.  It was even worse at the bootcamp my friend went to a couple of years later - they were also teaching React / Redux.

I've been a big data engineer for the past few years and need to train lots of folks how to use Apache Spark, a complicated technology.  I don't even throw highly experienced engineers in the Spark deep end.  I'll teach them the basics of Scala, then Spark basics, then more complicated distributed computing topics.

If you're feeling completely lost, don't despair.  I was in your position before and was able to fight through and build a successful career.  Let me know if you're interested and I can put together another post that outlines how to learn technologies one-by-one, instead of learning multiple things at once.",2266,156,MrPowersAAHHH,2020-04-21 15:27:03,https://www.reddit.com/r/learnprogramming/comments/g5h9nx/feeling_overwhelmed_its_probably_because_youre/,0,learnprogramming
mfoev4,I made a site that randomly generates python practice programs to teach reading fluency (update),"I've been a programming tutor for about 7 years. From this, I've learned that beginners' writing ability is often heavily limited by their reading ability, so I made a site to randomly generate python programs for the user to read and figure out the output. The quizzes can be customized for your ability level and what topic you want to focus on. I posted it here a while ago and you all seemed to like it, so since then I've made some additions. I've added an account system so that you can sign up to track your scores so that you can tell whether you're getting faster. Before each quiz you'll see your current personal best so that you know what to aim for to beat your record. You'll also see a graph of your progress after each quiz and all of your graphs on your user dashboard.

Here's the link to the control flow exercise: https://trprt.io/python-practice-problems-ifs-loops-control-flow

Let me know if this helps you!",2267,122,palpalpalwarp,2021-03-29 12:23:51,https://www.reddit.com/r/learnprogramming/comments/mfoev4/i_made_a_site_that_randomly_generates_python/,0,learnprogramming
i3nrv9,Debugging should be in every beginner programming course.,"It took me a few years to learn about the debugging button and how to use it. I mean it's not that I didn't know about, it's literally in every modern ide ever. I just categorised it with the /other/ shit that you find in and use that you can pass your whole coding career without ever knowing about. Besides, when I clicked it it popped all of these mysterious scary looking windows that you aren't really sure how they can help you debugg shit.

So I ignored them most of the time and since I apparently ""didn't need"" them why should I concern myself? Oh boy how I was wrong. The day I became so curious that I actually googled them out was one of the happiest days in my life. Debugging just got 100× easier! And learning them didn't take more than an hour. If you don't know about them yet this is the day that changes. Google ' debugging ""your respective language"" ' and get ready for your life to change.",2259,157,None,2020-08-04 17:35:55,https://www.reddit.com/r/learnprogramming/comments/i3nrv9/debugging_should_be_in_every_beginner_programming/,0,learnprogramming
lpciu4,The best way to learn programming is to jump in face first--take it from someone who started a job heavy in programming weeks before the pandemic hit and had learn everything remotely on her own,"Hi! I started working in a comp bio lab right before the pandemic hit, and ever since then navigating through it has been really tough, especially since I had to work remotely and solve problems myself. Most of my tasks include creating and debugging programs and I was just launched into it completely naked. I have absolutely no background in programming whatsoever (major was biology/math, I thought I wanted to be a doctor), and being around people who literally eat, sleep and breathe coding makes it very intimidating sometimes. Especially when they start rambling a bunch of jargon to me and expect me to go off and make a program that does what they need it to, makes me overwhelmed and frustrated at times.

 But it has been extremely helpful because I started off learning the basic fundamentals of python and bash scripting and command line and git and all that before I even knew what any of it actually was. I still feel stupid when I ask basic questions about things, but I can definitely tell that there is a huge jump in progress compared to where I was a year ago and didn't even know what a for loop was or even a Boolean or string. And I think it's because they had me start programming things instead of learning to program things. I did instead of watched. Action was done instead of passively staring. Yeah, I watched videos explaining things, I still do in fact, but a large part of my time was spent creating scripts and if I got stuck, Google was my friend if I didn't know how to do something or asking a fellow co-worker. This helped me acquire the phrases I needed to clarify and explain things, and be more comfortable in the language/lingo. I think it's easier when you have to learn to do something for yourself without being spoonfed because it makes you have to think, and thinking outside of the box is want makes a good programmer. You can't think linearly, you have to think of all the different ways and methods of getting to the end goal, and all the different things that could happen and cause it crash or not perform as you want it to.

I still have a long way to go before I'm anywhere near the same level as my coworkers, but I feel a strong sense of accomplishment everytime I make a program or script that runs and gives me the output I need instead of giving a ton of errors(even though it looks like a 5 year old wrote it compared to the complex ones they write that look like beautiful works of art!! It's like looking at the statue of David or the Mona Lisa whereas mine looks like someone banged on the keyboard and somehow it managed to form coherent words lol).  I think about how little I knew before, and how crazy far I've come since then! The little victories are worth it. It makes me want to keep going and growing!

EDIT: Wow, I didn't expect this to blow up so much! I'm really glad it helped you all. I'll try to answer as much comments and questions later when I can. 

EDIT2: Thank you for the awards and kind messages!! You all are so sweet",2259,104,JammingScientist,2021-02-22 02:07:08,https://www.reddit.com/r/learnprogramming/comments/lpciu4/the_best_way_to_learn_programming_is_to_jump_in/,1,learnprogramming
149rmce,/r/learnprogramming still supports the protest - no submissions - no comments,"Dear Community!

First things first:

#Do not message the moderators asking for permission to post or comment as there will be no exceptions.

We also do not know how long this will be going. So, no need to ask us.

----

In the last couple days you may have learnt that many subreddits have gone private to protest the planned ridiculously high new API prices. (Application Programming Interface - the official way for third party apps and scripts to interact with reddit) prices and changes to the API itself that reddit.inc will impose starting from July 1st. This change will effectively kill all third party mobile reddit applications, like Apollo, RIF (formerly Reddit is Fun), Sync, and others. It will also make moderating more challenging.

We (along with many other subreddits) went private on June 12th to protest these changes. However, we do not want to stay private indefinitely: doing so would be contrary to our core mission of helping people learn programming.

Instead, our subreddit will reopen but in restricted (read-only) mode for an indefinite time. This means our posts and resources can be accessed again, but we will not allow new posts or comments.

If you have questions, start by reading our [**FAQ**](https://www.reddit.com/r/learnprogramming/wiki/faq) and search the subreddit. There is plenty of information.

---

**Why are we doing this?**

Third party apps are vital. They are more accessible to vision impaired or blind people. The official app which has been in development since 2016 still has neglected these essential features and as of now, there are only [vague promises](https://www.reddit.com/r/reddit/comments/145bram/addressing_the_community_about_changes_to_our_api/jnk2wk4/) that the official reddit app will become more accessible.

Another issue with the official app is the lack of moderation tools. We moderators have some tools on the website that simply are not accessible on the official app, but exist in third party apps. These tools are vital for us to keep the community running smoothly.

The planned API changes also affect what can be accessed. Reddit has decided to filter out NSFW content from the API. This means that any application that uses the API has no way of ""seeing"" such content, which opens a wide door for spammers as also moderation scripts and moderation bots will be affected.

Despite reddit claiming that moderation bots will not be affected by the new API pricing, many such bots will suffer. The new API limiting severely restricts the number of calls that can be made for free in a certain time period. Reddit has claimed that they will help developers to stay in the free tier, but reddit's credibility is very lacking as has been proven in the past.

For more details on the reason for the reddit wide protest, see:

- https://www.theverge.com/2023/6/5/23749188/reddit-subreddit-private-protest-api-changes-apollo-charges
- https://www.theverge.com/2023/6/13/23759559/reddit-internal-memo-api-pricing-changes-steve-huffman
- https://redd.it/142kct8
- https://redd.it/145l7wp",2258,3,desrtfx,2023-06-15 03:34:20,https://www.reddit.com/r/learnprogramming/comments/149rmce/rlearnprogramming_still_supports_the_protest_no/,0,learnprogramming
720ohy,MIT OpenCourseWare offers free to stream lectures from every course. This is the computer science list.,"https://ocw.mit.edu/courses/find-by-topic/#cat=engineering&subcat=computerscience

The breadth of the content they have available for free is insane. I apologize if this has been posted before but I believe this is worth bumping.

Cheers.",2260,57,xerum26,2017-09-23 20:23:16,https://www.reddit.com/r/learnprogramming/comments/720ohy/mit_opencourseware_offers_free_to_stream_lectures/,0,learnprogramming
s6n3u6,"dont worry about dev saturation. there is a huge supply of dreamers, people who cant even complete cs50, there are not many realists.","so basically we all know this field is hot and getting a lot of attention. i am just like you, learning, trying to get hired sometime next year. i spend a lot of time on reddit, discord and youtube. i see all the people wanting to get their foot in the door, just like me and you. this is my perception of the situaiton. theres a fuk ton of people who simply say they want to become a developer. they tell the whole world about their new future, with 100k+ salaries but dont actually do anything about it. they enroll in like dozans of  moocs but never even complete one. not only that but some are super unrealistic, like cs50 is not enough to get a job, you need way more then that and actual projects in your github, in addition you dont start out at FANG without experience. also, remote doesn't mean everyone in the universe is considered, USA remote means citizen or some equivalent. the silliness of some people is never ending, and these fools are loud af, repeating how much they want to become devs, basically dont worry about the saturation, yes there is saturation, but these people are dreamers, living in a fantasy world. not gonna lie i been dreaming for a while, but now i am keepin it real. put the hours in, actually complete things. finish 1 or 2 good moocs like TOP, apply to jobs where you can actually legally get hired.",2258,474,workfromhomebitch,2022-01-18 03:14:50,https://www.reddit.com/r/learnprogramming/comments/s6n3u6/dont_worry_about_dev_saturation_there_is_a_huge/,0,learnprogramming
qmigri,I DID IT!!!!!!!!!!!!!!!!!!,"Hey everyone.

I posted here not long ago where I told you guys about how I blew my final interview for a data analyst position. You all gave me a lot of good vibes and I wanted to thank you for that, it was something I needed in a very dark moment.

Fast forward couple of months and VOILA I DID IT!!!!!!!!!!!!!!!!!!!!!!!!

I come from a chemistry background so I learned SQL, python and R on my own which was a blast to be honest. And now finally a company is giving me the chance to shine.

After so many hours of doing shitty minimum wage jobs, doing the tilt in supermarkets, chopping onions at 7 in the morning, after picking 20 kg boxes at 6 AM, after getting yelled at and belittled by customers and abusive managers and bosses, after using every second I had to spare to learn and do projects on my own (I ll be honest there were a lot of resting periods as well which made me even more insecure in the moment)

I couldn't be happier, after so long it finally happened!

Best of lucks to you guys, hang in there, it is totally worth it.

A slight impostor syndrome is starting to build in me but I won't let it gain any momentum, I owned the interviews and the technical assessment so I know I got this! and you can too!!!

Ps: holy molly guys I just came back from seeing some friends and this exploded! I will prepare a coffee now and answer to everyone.",2253,154,Gabyto,2021-11-04 11:25:58,https://www.reddit.com/r/learnprogramming/comments/qmigri/i_did_it/,0,learnprogramming
cj2qbn,"If you’re interested in learning Python there’s just 35 keywords you _must_ know. The problem is like all programming jargon they can be a bit opaque, especially for anyone whose first language isn’t English.","I’ve just published an [epic length post](https://yawpitchroll.com/posts/the-35-words-you-need-to-python/) that covers them all, and I’d love to have some feedback.",2256,150,yawpitch,2019-07-28 22:54:55,https://www.reddit.com/r/learnprogramming/comments/cj2qbn/if_youre_interested_in_learning_python_theres/,0,learnprogramming
jpmqtw,Thanks to This Sub I Landed a Job,"I wanted to share an appreciation post to the Senior Devs and other amazing people who have years of experience and share tips on this subreddit. I have been teaching myself programming for the last year and a half. I'm 30 right now and I come from a design and a business background. Initially my goal was to build my own products and market them until I was able to make a decent amount of revenue.

This subreddit was valuable through the whole process as people made clear that the languages you learn are not as important as your ability to problem solve. 

Fast forward to a few weeks ago where I decided to apply for a few jobs on a whim. The advice learned from here over the year and my self education I had been putting myself through helped me pass two technical interviews and a meeting with the executive of product development.

This is my first tech position, I will be a Jr Software Dev.

My sincerest thanks to all of you strangers who have been brave enough to ask questions and to all those who were kind enough to provide advice and guidance. I don't have a mentor so this was pretty close for a replacement. 

Thank you all again.",2249,100,Spectacle_121,2020-11-07 07:34:44,https://www.reddit.com/r/learnprogramming/comments/jpmqtw/thanks_to_this_sub_i_landed_a_job/,0,learnprogramming
hr1a33,"I feel bad when im not programming, but when im programming i get tired and frustrated in about an hour or two","I feel so awful, i want to become a good programmer and start freelancing as a web developer. Im learning without any tutorials, just googling and searching for solutions. The first days of programming felt so good, but now i just feel bad for everything i do wether i am programming or not.",2253,173,darkocvet,2020-07-14 13:14:05,https://www.reddit.com/r/learnprogramming/comments/hr1a33/i_feel_bad_when_im_not_programming_but_when_im/,0,learnprogramming
sqb3zn,Girlfriend seeking Valentine’s Day assistance.,"My boyfriend is a programmer and I want to do something bold, but in a way that shows him that I care about what he does too. I googled and watched videos to learn, but I’m sure I have errors.

https://imgur.com/a/v0ouKci

Edit: Thank you to everyone who gave me critical feedback. I really appreciated it and actually learned a lot from reading your suggestions! I didn’t expect to enjoy learning this as much as I have, but it’s been a lot of fun! 😊",2240,228,Veggielovr2,2022-02-11 22:12:32,https://www.reddit.com/r/learnprogramming/comments/sqb3zn/girlfriend_seeking_valentines_day_assistance/,0,learnprogramming
77g5tw,25 free online programming courses and MOOCs for beginners (that are actually free),"Hey all, I made a [post](https://www.reddit.com/r/learnprogramming/comments/5juxmb/ive_been_learning_how_to_build_web_apps_in_the/) here a while ago about how I learned programming and built a MOOC search engine as my first project. Because of the encouraging feedback I received from this community, I've been building on it since!

Today, I'm back to share with you a list  I made of [**free programming MOOCs**](https://opencourser.com/post/94mb7l/25-free-online-programming-courses-for-beginners-2017). It includes ~~25~~ 26 high quality and well reviewed online programming courses geared towards beginners.

Now, you might be wondering, why in the world do we need *another* list when there are probably hundreds of lists out there already?

The short answer: Many of those lists are now outdated with many previously ""free"" courses turning into paid ones.

The long answer has to do with the trend of most online courses and MOOCs shedding their ""massively open"" designation in favor of a more economically sustainable model.

In a bid for profitability and to justify the high costs of developing online courses, most platforms and universities have started putting courses behind paywalls. Sometimes, it's partial—you're able to watch lectures, but unable to work on homework assignments, quizzes, or tests. Most times, however, it's a complete paywall that surrounds these courses.

It's a reasonable move and to be fair, most courses are priced affordably. However, it does make it harder for learners to find the right course. Moreover, the once free resources that communities like /r/learnprogramming might have recommended to newer programmers are no longer freely accessible.

My hope is to maintain a list that offers enough options, varied in depth, material, and effort required, to be meaningful to someone who wants to learn programming through a MOOC, one containing courses that are completely free. 

Can 25 courses cover the scope of hundreds of courses? Probably not. Still, I'm hopeful most learners can build a strong foundation with them.

I'd love to hear your feedback on this list. Let me know if you have a course you'd like to see on it or if you find a course here that's no longer free. Thanks!

*Edit: Added How to Code: Simple Data, recommended by /u/qna1*

^1 See [this](https://opencourser.com/post/94mb7l/25-free-online-programming-courses-for-beginners-2017) blog post for details on how the list is organized/grouped

^2 See affiliate disclosure below.

\# | Course | Created By | Course | Reviews
---|---|----|----|----|----
1.| Introduction to Computer Science and Programming Using Python |MIT|[Link](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9)|[Link](https://opencourser.com/course/3svflf/edx-introduction-to-computer-science-and-programming-using-python)
2.| Introduction to Computer Science |Harvard University|[Link](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|[Link](https://opencourser.com/course/v8fdhq/edx-introduction-to-computer-science)
3.| Intro to Computer Science |Udacity|[Link](https://www.udacity.com/course/intro-to-computer-science--cs101)|[Link](https://opencourser.com/course/zdp3hz/udacity-intro-to-computer-science)
4.| Introduction to Java Programming – Part 1 |HKUST|[Link](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x-2)|[Link](https://opencourser.com/course/mndma5/edx-introduction-to-java-programming---part-1)
5.| Introduction to Java Programming – Part 2 |HKUST|[Link](https://www.edx.org/course/introduction-java-programming-part-2-hkustx-comp102-2x-2)|[Link](https://opencourser.com/course/ltu11y/edx-introduction-to-java-programming---part-2)
6.| AP Computer Science A: Java Programming |Purdue University|[Link](https://www.edx.org/course/ap-computer-science-java-programming-purduex-cs180-1x)|[Link](https://opencourser.com/course/dfqg0o/edx-ap-computer-science-a-java-programming)
7.| How to Code: Simple Data | University of British Columbia|[Link](https://www.edx.org/course/how-code-simple-data-ubcx-htc1x)|[Link](https://opencourser.com/course/4b8p16/edx-how-to-code-simple-data)
8.| Programming Foundations with Python | Udacity|[Link](https://www.udacity.com/course/programming-foundations-with-python--ud036)|[Link](https://opencourser.com/course/gx5o1p/udacity-programming-foundations-with-python)
9.| Learn to Program in Java |Microsoft|[Link](https://www.edx.org/course/learn-program-java-microsoft-dev276x)|[Link](https://opencourser.com/course/b86y7g/edx-learn-to-program-in-java)
10.| Learn to Program: The Fundamentals |University of Toronto|[Link](https://www.coursera.org/learn/learn-to-program)|[Link](https://opencourser.com/course/ndcx3l/coursera-learn-to-program-the-fundamentals)
11.| Introduction to Python: Absolute Beginner |Microsoft|[Link](https://www.edx.org/course/introduction-python-absolute-beginner-microsoft-dev236x)|[Link](https://opencourser.com/course/evyuik/edx-introduction-to-python-absolute-beginner)
12.| Introduction to Python: Fundamentals |Microsoft|[Link](https://www.edx.org/course/introduction-python-fundamentals-microsoft-dev274x)|[Link](https://opencourser.com/course/ekll10/edx-introduction-to-python-fundamentals)
13.| Object-oriented Programming in Python: Create Your Own Adventure Game |Raspberry Pi Foundation|[Link](https://www.futurelearn.com/courses/object-oriented-principles?lr=228)|[Link](https://opencourser.com/course/wqu1po/futurelearn-object-oriented-programming-in-python-create-your-own-adventure-game)
14.| Begin Programming: Build Your First Mobile Game |University of Reading|[Link](https://www.futurelearn.com/courses/begin-programming?lr=211)|[Link](https://opencourser.com/course/cqxr6y/futurelearn-begin-programming-build-your-first-mobile-game)
15.| Logic and Computational Thinking |Microsoft|[Link](https://www.edx.org/course/logic-computational-thinking-microsoft-dev262x)|[Link](https://opencourser.com/course/4uf1nh/edx-logic-and-computational-thinking)
16.| Introduction to Web Development |UC Davis|[Link](https://www.coursera.org/learn/web-development)|[Link](https://opencourser.com/course/hqqsbx/coursera-introduction-to-web-development)
17.| Intro to HTML and CSS |Udacity|[Link](https://www.udacity.com/course/intro-to-html-and-css--ud304)|[Link](https://opencourser.com/course/qp8nm3/udacity-intro-to-html-and-css)
18.| Full Stack Foundations |Udacity|[Link](https://www.udacity.com/course/full-stack-foundations--ud088)|[Link](https://opencourser.com/course/xxis93/udacity-full-stack-foundations)
19.| Swift for Beginners |Udacity|[Link](https://www.udacity.com/course/swift-for-beginners--ud1022)|[Link](https://opencourser.com/course/3qifzj/udacity-swift-for-beginners)
20.| Intro to iOS App Development with Swift |Udacity|[Link](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585)|[Link](https://opencourser.com/course/0vzqlz/udacity-intro-to-ios-app-development-with-swift)
21.| Android for Beginners |Udacity|[Link](https://www.udacity.com/course/android-for-beginners--ud834)|[Link](https://opencourser.com/course/zso3mh/udacity-android-for-beginners)
22.| Android Development for Beginners |Udacity|[Link](https://www.udacity.com/course/android-development-for-beginners--ud837)|[Link](https://opencourser.com/course/zkidke/udacity-android-development-for-beginners)
23.| Intro to Relational Databases |Udacity|[Link](https://www.udacity.com/course/intro-to-relational-databases--ud197)|[Link](https://opencourser.com/course/v3xjve/udacity-intro-to-relational-databases)
24.| Data Analytics in Business |Georgia Tech|[Link](https://www.edx.org/course/data-analytics-business-gtx-mgt6203x)|[Link](https://opencourser.com/course/35qgnn/edx-data-analytics-in-business)
25.| Introduction to R for Data Science |Microsoft|[Link](https://www.edx.org/course/introduction-r-data-science-microsoft-dat204x-3)|[Link](https://opencourser.com/course/xy986o/edx-introduction-to-r-for-data-science)
26.| Computing for Data Analysis |Georgia Tech|[Link](https://www.edx.org/course/computing-data-analysis-gtx-cse6040x)|[Link](https://opencourser.com/course/cwnqah/edx-computing-for-data-analysis)

*Disclosure: As an affiliate, I may earn a commission on courses you purchase through OpenCourser. You can bypass any affiliate links by clicking links under the ""Course"" column. Note that my affiliate relationships have zero bearing on how this list was made. For more details, please read the full disclosure [here](https://opencourser.com/disclosure).*
",2239,88,denz88,2017-10-19 17:57:41,https://www.reddit.com/r/learnprogramming/comments/77g5tw/25_free_online_programming_courses_and_moocs_for/,0,learnprogramming
66gjvs,"Besides the programming language, learn the essential tools","Hi r/learnprogramming,

I'm a lurker, reading how beginners tackle learning how to program is my interest as I'm head of development in a web agency so interested in that sort of thing. We have our first ever interns so here's my take away message from the experience: **learn the tools too**.

Here's what I mean (this is my opinion from 10+ years of professional development experience, working with junior devs etc):  

1. **Learn git.**  
When you're working on code with people, you're not going to be sending it to them via e-mail (hopefully) or FTP, you'll be collaborating on it using some sort of a so-called version control system. Git is very likely to be the weapon of choice for wherever you end up (or, if it isn't, the concepts are similar enough it doesn't matter). You must know how to: clone a project, make a branch, diff, commit & push changes, pull other people's changes.  
How? There's  [an excellent free book](https://git-scm.com/book/en/v2) on the subject. Find a project you're interested on on Github and try to get a change merged (pick a larger project which has an established procedure for that). If you mess stuff up, [you can undo almost anything](http://ohshitgit.com/), learn how to mess up safely, think of that as the first thing you learn how to do when staring sky-diving or martial arts - falling safely.  

2. **Learn an IDE.**  
Ever wonder how professional developers are able to handle huge projects with thousands of files in them? How do they know where everything is? Well, they don't, their IDE tells them. IDEs are able to scan and understand your code, you can browse through it just like a website. You can open files by: file name, class name, function/method/constant name. You can do all your git stuff (see 1). You can generate parts of code, even whole classes, with nested folder structure and metadata, all of it correctly named / spelled and complete. All of this can be done by shortcuts so you're even faster.  
For example, I have a function called `getName()`, how do I know where is it used? I just Ctrl-Click (in my IDE) on it and it shows me a dropdown of all usages. I can search text for that, but it's so common that I'll have 200 false positive matches. I can rename the method (refactor), changing its name and all the calls to it from a single place. That's productivity.  
Don't use Notepad, use the strongest IDE your language has to offer, even just for the trial period, just to see what it's like.  

3. **Learn how to command-line**  
Terminal is scary once you're starting, but you should try and get over the initial reaction.  
Why? Almost all tools you'll be using will be command-line. Some of them will have a GUI companion, but that'll be an exception, not the rule. If you learn how to work with a (good) shell efficiently, that's the same productivity boost you get from your IDE. Command-line tools can be automated with ease, not so much GUI tools (they can, but it's a kludge). How do I work with this thing? How do I specify arguments efficiently? What does TAB do, how do people type so fast? How do I traverse the filesystem in a shell? What are environment variables? Etc.  
If using Mac/Linux, try to do as much stuff through the command-line as possible (git too, even if you follow 2). If using Windows, don't use command.com, use PowerShell instead or [install the Ubuntu bash layer](https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/) and play with that. You should feel so comfortable with the terminal you open it up as soon as logging in to do some programming, it's second nature.  

4. as said by u/tamalo: **Learn how to debug.**  
> And learn how to do it in two ways: Learn how to use a debugger. Your IDE that you picked up in bullet 2 above probably has one built in. If not, get a standalone one. Then learn to use it. Learn to set break points, to single step thru your code, learn how to inspect variables.  
> But even if you have a debugger, learn how to debug without one. Use print or log statements to dump the state of your program. Debugging this way forces you to think more about what you are looking for in your code. It's a powerful skill. Many problems that get posted in this sub would become obvious if the poster added a few well placed print statements.  

As I said, this is all my opinion watching people learning stuff in this field and these are the most important ones, in that order. Hope it helps someone.

**Edit:**  
thanks for all the comments and replies in which you (dis)agree with some or all points made. As stated, this is my opinion based on my experience working with junior devs (now also interns), onboarding them on new or legacy projects and technology, etc.

The reason why I did not chose (say) ""write tests"", ""learn to design systems"", ""learn frameworks"" etc. is to limit the number of things to a manageable number. Also, this list is a supplement, not as a primary source, you don't need Git or IDE if you're not programming.

Whatever someone says, tools are important, even basic tools. You might be a master winemaker, you still need glasses for people to taste your wine from, I'm not going to drink it out of a puddle under the barrel in your basement no matter how good the bouquet is.

I'll explain my choices further:  

- **""git"":**  
you NEED to be get to other people's code. If you get to work somewhere, you won't get to start a brand new project (except for exercise) or will people come over and use the code on your computer: it's meant to get somewhere else, be it a test server, production server, etc. You need to be able to move the code around, ""git"" is the way to do it. Why not SVN or Mercurial? Because Github, but also because it's really likely you'll be able to use SVN if you know Git, not the other way around. Why Git first? If you can't Git, you can't get to the source code of a project you'll be assigned to work on, you only have a empty folder on your workstation. Can't work on stuff you can't get to.  


- **""IDE"":**  
this got some... interesting reactions. :) Why an IDE? When you're programming in X, an IDE to program in X is a tool specifically tailored to help program in X, that's the whole idea. You can go the ""poweruser editor + plugins"" route but, guess what, now you need to find all those plugins, learn how to set them up to work together, figure out incompatibilities, etc. You've started to do A, but you need to do B first, so you get lost in B. Once that's out the way, you STILL need to learn how to do stuff with it, so you haven't really removed that step. You end up with pretty much an IDE, only composed and setup not by a person doing it 8h a day, 5 days a week, an expert in the field of supporting people to program in X, but **you**, a person literally learning how programming in X even works. Would you take advice from yourself, a doctor Googling your symptoms right in front of you and checking out WebMD? Neither would I. Just use an IDE, stop using it once you know why you're doing it, not because ""it's stupid"".  

- **""CLI"":**  
 it's true, you don't need CLI as much on Windows. Also, people see CLI and IDE as mutually exclusive. I disagree: while you want an IDE as a tool specifically designed to do a task (you have at hand), being a CLI user enables you to not do **just** the task at hand. Being a developer means you'll use a lot of cross-cutting technologies, some of them were mentioned in comments. You cannot allow yourself to be ""trapped in your IDE"": if you don't have a button for it, that means you don't know how to do it. That stance is unacceptable from a developer. Also, not being CLI-handy means you're missing out on a LOT of tools available to you for tasks you might need to do. Need to do a complex search&replace on a 20GB text file? It's [one easy `sed` command](https://robots.thoughtbot.com/sed-102-replace-in-place), good luck doing it in your regular editor, you'd need to program it yourself and, guess what, probably run from the command line. Once you figure out you can combine multiple commands together in a chain or that you can do logical evaluation (conditional command execution with dependencies), you'll be blown away by it. ",2231,169,dkarlovi,2017-04-20 09:06:28,https://www.reddit.com/r/learnprogramming/comments/66gjvs/besides_the_programming_language_learn_the/,0,learnprogramming
106jfin,"My ""self-taught"" programming notes - Full-stack web development, Linux, Networking, Startup...","LINK: https://github.com/8483/notes

I use these notes daily to refresh my memory on various topics I've encountered, both for work and fun.  

They're summaries written in the simplest way possible, as many tutorials tend to overcomplicate things.  

The notes have been crucial to my learning experience, and I encourage everyone to take notes themselves.

I hope you find them useful.

Tell me what you think. :)

**EDIT:** Here are [my older notes in a PDF file, covering the basics](https://drive.google.com/file/d/1uBuPRFSjCywLmerNK843XUMODyM5p5Ap/view?usp=share_link). I will move these in the Github ones.",2221,175,8483,2023-01-08 13:36:10,https://www.reddit.com/r/learnprogramming/comments/106jfin/my_selftaught_programming_notes_fullstack_web/,1,learnprogramming
9q6pgu,Python Udemy Courses - FREE,"Add the following courses to your basket:

&#x200B;

[https://www.udemy.com/python-pyramid-web-dev-beginners/](https://www.udemy.com/python-pyramid-web-dev-beginners/)

&#x200B;

[https://www.udemy.com/python-gui-programming-using-tkinter-and-python/](https://www.udemy.com/python-gui-programming-using-tkinter-and-python/)

&#x200B;

[https://www.udemy.com/iot-internet-of-things-automation-using-raspberry-pi/](https://www.udemy.com/iot-internet-of-things-automation-using-raspberry-pi/)

&#x200B;

[https://www.udemy.com/iot-internet-of-things-automation-with-esp8266/](https://www.udemy.com/iot-internet-of-things-automation-with-esp8266/)

&#x200B;

[https://www.udemy.com/cryptography-using-python/](https://www.udemy.com/cryptography-using-python/)

&#x200B;

[https://www.udemy.com/design-patterns-using-python/](https://www.udemy.com/design-patterns-using-python/)

&#x200B;

[https://www.udemy.com/statistics-for-data-science-using-python/](https://www.udemy.com/statistics-for-data-science-using-python/)

&#x200B;

[https://www.udemy.com/machine-learning-using-python/](https://www.udemy.com/machine-learning-using-python/)

&#x200B;

[https://www.udemy.com/pandas-with-python-tutorial/](https://www.udemy.com/pandas-with-python-tutorial/)

&#x200B;

[https://www.udemy.com/video-analytics-using-opencv-and-python-shells/](https://www.udemy.com/video-analytics-using-opencv-and-python-shells/)

&#x200B;

[https://www.udemy.com/artificial-intelligence-with-python/](https://www.udemy.com/artificial-intelligence-with-python/)

&#x200B;

[https://www.udemy.com/advanced-python-for-iot-iot-based-data-analysis/](https://www.udemy.com/advanced-python-for-iot-iot-based-data-analysis/)

&#x200B;

[https://www.udemy.com/python-for-iot-tutorials/](https://www.udemy.com/python-for-iot-tutorials/)

&#x200B;

[https://www.udemy.com/educba-data-science-with-python/](https://www.udemy.com/educba-data-science-with-python/)

&#x200B;

Add the promo code

&#x200B;

OCT\_SPL

&#x200B;

Enjoy




*Edit*


Obligatory OMG I can't believe I lost my Gold-ginity! Thanks to whoever did that!


I'm glad to see a lot of people are going to get something out of this!


I've tried replying to as many comments as possible.


Some comments I want to share with others:

------------

>There's also /r/udemyfreebies & /r/freeudemycourses if people are interested in more of these

As per /u/HighLevelJerk


-----------
>Links for the lazy:
>
>* [Complete Social Media Marketing](https://www.udemy.com/learn-digital-marketing-course/), code: `OCTOBERPRO10`
>
>* [Introduction to HTML](https://www.udemy.com/introduction-to-html-course/), code: `UE63LED26U`
>
>* [Learn to Code with Ruby](https://www.udemy.com/learn-to-code-with-ruby-lang/), code: `RUBYONE`
>
>* [Statistics with R - Beginner Level](https://www.udemy.com/statistics-with-r-beginner-level/), code: `SPREAD`
>
>* [Data Analysis with Pandas and Python](https://www.udemy.com/data-analysis-with-pandas/), code: `APRILMAGIC`
>
>* [Java Design Patterns and Architecture](https://www.udemy.com/java-design-patterns-tutorial/), code: `MAY18FREE`
>
>* [Data Science Beginners Guide to the Command Line](https://www.udemy.com/data-science-beginners-guide-to-the-command-line/), code: `DATA112`
>
>* [Business Fundamentals: Management and HR Management](https://www.udemy.com/business-fundamentals-management-and-hr-management/), code: `MANAGEMENTFREE`
>
>* [Excel VBA Programming - the Complete Guide](https://www.udemy.com/excel-vba-programming/), code: `GAUNTLET`


As per /u/Tushfeathers and /u/stvhwrd

-----------
*Edit2*
FRONT PAGE

Kill me now because I have peaked!",2220,316,Ma_Dixie_Normous,2018-10-21 20:09:46,https://www.reddit.com/r/learnprogramming/comments/9q6pgu/python_udemy_courses_free/,1,learnprogramming
vj430v,Got accepted as a software apprentice :),"Spent the last 6 months learning 2/3 hours a day after work. Before that spent 2 years addicted to drugs. Before that got kicked out of financial math degree which probably kickstarted the addiction.

I start on monday, earning £30k at a great company, to learn java and javascript(which I love) - all whilst working from home. Already earning more than all my friends and family who turned away from me during my little dark age(fuck you all).

Just want to motivate all of you learners who haven't got your foot on the ladder yet, are being doubted by those around you, or even just doubt your own abilities - keep plodding onwards. A strong will and large enough timesink are all you need to succeed.",2217,334,Substantial_Rest4712,2022-06-23 18:49:43,https://www.reddit.com/r/learnprogramming/comments/vj430v/got_accepted_as_a_software_apprentice/,0,learnprogramming
iwxvxs,If this awesome grandma could learn to code at the age 81 of course you could do it too!,"I've been struggling learning to code for months, I was so close to finally throw everything out and just find another skill to pursue, but I found this awesome video about this awesome grandma 

https://youtu.be/UFYJ2DE9wlM

And after I watched that video, you know what? I don't want to give up now, hell, I won't give up ever, if a 81 years old grandma could do it, then what makes me unable to do it too? 

And for you fellow struggler like me, we can do it! Just push a little bit more, no skill is ever easy, but if we keep pushing ourselves and keep practicing, I bet that the end will be the sweetest fruit we'll ever tasted.

""Nothing in this world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination alone are omnipotent. The slogan Press On! has solved and always will solve the problems of the human race."" - Calvin Coolidge",2222,114,KhZaym,2020-09-21 10:32:58,https://www.reddit.com/r/learnprogramming/comments/iwxvxs/if_this_awesome_grandma_could_learn_to_code_at/,0,learnprogramming
ij5dlm,Learn CSS by playing a Tower Defence game.,"You can use this game to learn CSS, you basically fill in CSS to position the turrets for each wave.  


[http://www.flexboxdefense.com/](http://www.flexboxdefense.com/)",2210,65,JeffreyFreeman,2020-08-30 02:45:08,https://www.reddit.com/r/learnprogramming/comments/ij5dlm/learn_css_by_playing_a_tower_defence_game/,0,learnprogramming
ke8pwe,I am in coding bootcamp for two months now and I can't believe how much I've learned.,"I started in mid October in this program for full-stack .Net development. We finished the front-end part like a week ago and had a test. I nailed it and I can't believe how much I learned in two months. I hadn't written a line of code before and now I can get around html, css and js. I just wanted to share with everyone here and to say keep pushing. Now we started with C# and I know the basics because some things are so similar with js. I think I might do this for life, I am just having fun solving problems with coding for now. Keep pushing and keep developing. Love ya!

EDIT: Thank you everyone for the upvotes and awards, I've never gotten a reddit award yay that's awesome. I didn't expect this much upvotes and support. This motivates me even more. I just had a class and going to bed soon, first thing tomorrow is coding. Good night, good luck and thanks again for the love.

Ps: Might do an update when I finish. Love ya all.

EDIT 2: I can't reply to everyone, but check out code academy Macedonia. That's where I'm taking my classes.",2205,241,blaify,2020-12-16 12:58:01,https://www.reddit.com/r/learnprogramming/comments/ke8pwe/i_am_in_coding_bootcamp_for_two_months_now_and_i/,0,learnprogramming
l0ipjo,List of various programming resources I gathered over the past year,"Hello there, this list includes resources I collected and kept as a nooby. I found these resources to be extremely useful during my initial steps as a programmer and wanted to share them with you.
This list includes python, java, javascript c++, and generally related topics.
Enjoy

**Python**

[Ultimate Python study guide](https://github.com/huangsam/ultimate-python)

[A beginner’s guide to data visualization with Python ](https://old.reddit.com/r/Python/comments/kriteb/a_beginners_guide_to_data_visualization_with/)

[and Seaborn](https://old.reddit.com/r/Python/comments/kriteb/a_beginners_guide_to_data_visualization_with/)[Nice Guide on Modern Python Packages](https://old.reddit.com/r/Python/comments/kxev5h/nice_guide_on_modern_python_packages/)

[Intro to Python and Programming for non-CS majors](https://github.com/webartifex/intro-to-python)

**Javascript**

[The Modern JavaScript Tutorial](https://javascript.info/)

[JavaScript 101 - Variables & Primitives](https://spdevuk.com/javascript-101-variables-and-primitives/)

[Guide To Javascript Array Functions: Why you should pick the least powerful tool for the job](https://jesseduffield.com/array-functions-and-the-rule-of-least-power/) 

[ Learn and practice modern JavaScript](https://learnjavascript.online/)

**Java**

[A Hitchhiker's Guide to Containerizing (Spring Boot) Java Apps](https://blog.frankel.ch/hitchhiker-guide-containerizing-java-apps/)

[A beginner’s guide to CDC (Change Data Capture)](https://vladmihalcea.com/a-beginners-guide-to-cdc-change-data-capture/)

[Java 15 Programmer's Guide To Text Blocks](https://inside.java/2020/08/05/textblocks-programmer-guide/)

[Modern Web Development in Java - The (Never) Complete Guide](https://asd.learnlearn.in/java-web/)

[Java Modules Cheat Sheet](https://old.reddit.com/r/java/comments/jyddn9/java_modules_cheat_sheet/)

[Java Modules Cheat Sheet](https://nipafx.dev/build-modules/)

**C++**

[The Definitive C++ Book Guide and List](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list)

[Linear-cpp](https://github.com/jesyspa/linear-cpp)

[Tony Gaddis Early Objects](http://instructor.sdu.edu.kz/~bakhyt/CPP/suggested%20books/Starting%20out%20with%20C++.pdf))

**General** 

[Flight rules for Git](https://github.com/k88hudson/git-flight-rules)

[Comprehensive Guide to Learn CS Online](https://qvault.io/2020/11/18/comprehensive-guide-to-learn-computer-science-online/)

[What Is Test Automation?](https://www.perfecto.io/blog/what-is-test-automation)

[Get Started With TypeScript the Easy Way](https://austingil.com/typescript-the-easy-way/)

[Machine Learning with Introduction](https://rubikscode.net/2021/01/04/machine-learning-with-ml-net-introduction/)",2196,91,armagoei,2021-01-19 12:15:27,https://www.reddit.com/r/learnprogramming/comments/l0ipjo/list_of_various_programming_resources_i_gathered/,0,learnprogramming
ft7lw4,Automate the Boring Stuff with Python Udemy course is free until Apr 7th,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

[(EDIT: The HTML book is free online, but you can get the PDF/Kindle ebook of Automate the Boring Stuff with Python in this week's Humble Bundle in support of cornavirus relief (Direct Relief, International Rescue Committee, Doctors Without Borders, Partners In Health)](https://www.humblebundle.com/conquer-covid19-bundle)

You can also click this link or manually enter the code: APR2020FREE (on Saturday the code changes to APR2020FREE2)

https://www.udemy.com/course/automate/?couponCode=APR2020FREE

This promo code works until April 7th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month.

You can also purchase the course at a discount using my code APR2020 or MAY2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",2193,123,AlSweigart,2020-04-01 20:11:37,https://www.reddit.com/r/learnprogramming/comments/ft7lw4/automate_the_boring_stuff_with_python_udemy/,1,learnprogramming
a1rp7c,I made a Python web scraping guide for beginners,"I've been web scraping professionally for a few years and decided to make a series of web scraping tutorials that I wish I had when I started.

The series will follow a large project I'm building that analyzes political rhetoric in the news.

Part 1 is about collecting media bias data: https://www.learndatasci.com/tutorials/ultimate-guide-web-scraping-w-python-requests-and-beautifulsoup/

I would really like to improve the article and give new Python learners 100% of what they need, so please feel free to let me know your thoughts.",2197,150,brendanmartin,2018-11-30 11:39:30,https://www.reddit.com/r/learnprogramming/comments/a1rp7c/i_made_a_python_web_scraping_guide_for_beginners/,0,learnprogramming
izo985,Laid off or affected by the pandemic? I'm running a Free Full Stack Web Development Bootcamp to help folks unlock a career in tech. I would love to have you join!,"Hey, everyone!

Starting Oct. 20th, I will be running a live intensive full stack web development bootcamp covering everything you need to know to go from no technical skills to employable. We’ll meet every Tuesday and Thursday from 6:30pm EST to 9:30pm EST with office hours on Saturdays from 12pm EST to 3pm EST. The goal is to give folks who have been laid off or affected by the pandemic the tools they need to command a job in software engineering. I’m looking for a group of 100 individuals (#100Devs) and will give priority to those affected by the pandemic and/or under represented in tech. I recently ran a short 5 week bootcamp that was an amazing success. I want to follow it up with a 30 week full stack program to help folx get ready for a career in software engineering.

If you would like to join, please follow the instructions in my blog post [here](https://leonnoel.com/blog/100devs/).

A little about me:

I’m Managing Director of Engineering for [Resilient Coders](http://resilientcoders.org/). My job is to get black and brown folks into high paying careers as software engineers. We’re pretty damn good at it too. 85% of our graduates, most of whom do not have degrees or prior experience, go on to get full time offers at an average starting salary of $98,000. All free and stipended. No bullshit or funny business. I’m also a Distinguished Faculty Member at General Assembly were I’ve been helping folks learn to code for the past 8 years. You can see a sampling of my classes taught at Harvard, MIT, and elsewhere [here](https://leonnoel.com/teach/) and reviews from my past students [here](https://leonnoel.com/students/).

What to expect:

We’ll have class two nights a week with the expectation that you come prepared and have done the assigned reading ahead of time. I like to use lecture as a means of exploration and not dictation, but that only works if you come prepared. The first half of class will be exploring new topics and the second half will be lab. During lab, you will tackle what we just covered by building. You’ll never just listen to me and then sign off. Myself and TA’s will be available throughout the lab. You’ll have real time guidance / feedback and a chance to have all your questions answered.

This course is designed to give you the skills you will need to pursue a career as a software engineer, but will only work if you are committed and ready to put in serious work.

Why am I doing this:

My activism is teaching. I want to help folks affected by the pandemic and those under represented in tech. The bootcamps I run are either very selective or expensive, so I am hoping to help in the best way I know how by offering a full stack course for free.

Disclaimer:

I like to joke, curse, and have fun. I do the same thing in my classroom. I value learning over nit picky correctness. If any of these things bother you, this course might not be the best fit.

Here are the videos from my most recent live bootcamp: https://www.youtube.com/channel/UCGiRSHBdWuCgjgmPPz_13xw

These should give you a good idea of my teaching style and what to expect.

Happy to answer any questions here on reddit.

Peace!

**Edit 1**
Everything will stream live on Twitch, but those that get accepted to #100Devs will get private channels with priority help, resume / portfolio reviews, private review sessions, interview prep, and much more! 

We'll be covering Full stack JS - HTML, CSS, JS, Node, React, MongoDB, and Postgres!",2187,344,leonnoel,2020-09-25 17:50:42,https://www.reddit.com/r/learnprogramming/comments/izo985/laid_off_or_affected_by_the_pandemic_im_running_a/,0,learnprogramming
rnoqoh,freeCodeCamp is learning from The Odin Project,"Hey r/learnprogramming, I know many of you here are fans of The Odin Project. I am too, and have been friends with its creator, Erik Trautman, since 2013. The Odin Project covers a lot of tools that freeCodeCamp hasn't really been able to cover interactively in the browser. Over the past few years, I've learned quite a bit from it, and from reading the positive things people say about it here on this subreddit.

There is no one-stop shop for learning to code, and I encourage people to take advantage of the vast array of learning resources out there. (OSSU is good, too – created by Eric Douglas, a really thoughtful developer from Brazil.) But that doesn't mean freeCodeCamp can't learn from these resources and keep improving. And learn we are.

Here are two big ways the community has put this learning into action so far this year. Note that I am not going to link to anything out of respect for r/learnprogramming's rules around self-promotion – I hope this is OK with the mods:

1. We launched a 300-hour Relational Database certification earlier this year. The Odin Project is good about encouraging people to set up their local developer environment and use  Linux, SQL, and Git. We now cover these tools as well, all within the context of building projects with tests. And you do the entire curriculum right inside VS Code (running inside Linux, running inside a Docker container). We are working on getting this entire environment running inside a browser, too.
2. We rebuilt our entire 300-hour Responsive Web Design certification from the ground up to be project-oriented. Now you learn all these tools and technologies by building projects (no more individual lessons). We still have full test suites for every step of building the project, but instead of showing a bunch of failing tests, you'll see context-specific hints to help you get unstuck. (The beta is accessible at the bottom of the freeCodeCamp curriculum page.)

Both of these certifications involve thousands of discrete coding steps, each with tests. We dramatically amp'd up the repetition based on feedback here on r/learnprogramming that people wanted more practice with concepts and with syntax, so they could more easily retain everything.

freeCodeCamp's core curriculum is under active development, and we're rebuilding every aspect of it. We also have more than 8,000 extra-curricular tutorials on everything from Rust to Flutter to Kubernetes, and more than 700 full-length courses on the community YouTube.

If you think of any other learning resources I could learn from and seek inspiration in, let me know in the replies. I am not too proud to learn from anyone. We'll continue to adopt whichever approaches you all think work best.",2172,110,quincylarson,2021-12-24 15:41:05,https://www.reddit.com/r/learnprogramming/comments/rnoqoh/freecodecamp_is_learning_from_the_odin_project/,0,learnprogramming
ndj95h,Why learning to code is so hard,"My friend who's a software engineer made [a video](https://youtu.be/0P1jrbx7HJw) on why exactly learning to code feels so difficult and stressful, and I related to it so much that I had to share with y'all.

It reminded me that coding is hard, but it's **just like any other skill**, and it takes time and hard work to master. Just because I can't figure something out, doesn't mean that I'm dumb. It means that I just need more time to learn more and get more experience.

Dropping this here in case any of you feel intense impostor syndrome/are struggling. I can't recommend the video enough, and I wish someone had told me this stuff years ago. My own learning process for programming has been a rollercoaster, but it's an incredible skill and I'm so glad I have stuck with it over time (getting my CS degree in 3 weeks wooo!)

&#x200B;

edit post: obligatory thanks for the awards  I'm blown away by how many people relate to this and I can't wait to tell my friend! I guess there's so much hype around learning to code that we forget the simple fact that it's just a skill to learn and patience and time are 100% necessary.",2179,196,another_refresh,2021-05-16 07:48:53,https://www.reddit.com/r/learnprogramming/comments/ndj95h/why_learning_to_code_is_so_hard/,0,learnprogramming
556kxj,O'Reilly Offering Programming eBooks for Free (Direct Links Included),"Started on [this post](https://www.reddit.com/r/Python/comments/553s3g/oreilly_offers_functional_programming_in_python/) on /r/Python wherein /u/sudoes [posted a link](https://www.reddit.com/r/Python/comments/553s3g/oreilly_offers_functional_programming_in_python/d87uax6) to the [Homepage](http://www.oreilly.com/programming/free/). I then extracted all the direct links.

Direct Links:  
Modern Java EE Design Patterns - Building Scalable Architecture for Sustainable Enterprise Development  
[epub](http://www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.epub)  
[mobi](http://www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.pdf)

Object-Oriented vs. Functional Programming - Bridging the Divide Between Opposing Paradigms  
[epub](http://www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.epub)  
[mobi](http://www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.pdf)

Java: The Legend - Past, Present, and Future  
[epub](http://www.oreilly.com/programming/free/files/java-the-legend.epub)  
[mobi](http://www.oreilly.com/programming/free/files/java-the-legend.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/java-the-legend.pdf)

Introducing Java 8 - A Quick-Start Guide to Lambdas and Streams  
[epub](http://www.oreilly.com/programming/free/files/introducing-java-8.epub)  
[mobi](http://www.oreilly.com/programming/free/files/introducing-java-8.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/introducing-java-8.pdf)

A Whirlwind Tour of Python  
[epub](http://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.epub)  
[mobi](http://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf)

20 Python Libraries You Aren't Using (But Should)  
[epub](http://www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.epub)  
[mobi](http://www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.pdf)

Hadoop with Python  
[epub](http://www.oreilly.com/programming/free/files/hadoop-with-python.epub)  
[mobi](http://www.oreilly.com/programming/free/files/hadoop-with-python.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/hadoop-with-python.pdf)

How to Make Mistakes in Python  
[epub](http://www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.epub)  
[mobi](http://www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.pdf)

Functional Programming in Python  
[epub](http://www.oreilly.com/programming/free/files/functional-programming-python.epub)  
[mobi](http://www.oreilly.com/programming/free/files/functional-programming-python.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/functional-programming-python.pdf)

Python in Education  
[epub](http://www.oreilly.com/programming/free/files/python-in-education.epub)  
[mobi](http://www.oreilly.com/programming/free/files/python-in-education.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/python-in-education.pdf)

Picking a Python Version: A Manifesto  
[epub](http://www.oreilly.com/programming/free/files/from-future-import-python.epub)  
[mobi](http://www.oreilly.com/programming/free/files/from-future-import-python.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/from-future-import-python.pdf)

Trends Shaping the London Tech Scene  
[epub](http://www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.epub)  
[mobi](http://www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.pdf)

2016 European Software Development Salary Survey  
[pdf](http://www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf)

2016 Software Development Salary Survey  
[pdf](http://www.oreilly.com/programming/free/files/2016-software-development-salary-survey-report.pdf)

Why Rust?  
[epub](http://www.oreilly.com/programming/free/files/why-rust.epub)  
[mobi](http://www.oreilly.com/programming/free/files/why-rust.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/why-rust.pdf)

C++ Today  
[epub](http://www.oreilly.com/programming/free/files/c++-today.epub)  
[mobi](http://www.oreilly.com/programming/free/files/c++-today.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/c++-today.pdf)

Analyzing and Visualizing Data with F#  
[epub](http://www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.epub)  
[mobi](http://www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.pdf)

RxJava for Android App Development  
[epub](http://www.oreilly.com/programming/free/files/rxjava-for-android-app-development.epub)  
[mobi](http://www.oreilly.com/programming/free/files/rxjava-for-android-app-development.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/rxjava-for-android-app-development.pdf)

Swift Pocket Reference  
[epub](http://www.oreilly.com/programming/free/files/swift-pocket-reference.epub)  
[mobi](http://www.oreilly.com/programming/free/files/swift-pocket-reference.mobi)  
[pdf](http://www.oreilly.com/programming/free/files/swift-pocket-reference.pdf)
",2175,164,FallenAege,2016-09-30 06:00:17,https://www.reddit.com/r/learnprogramming/comments/556kxj/oreilly_offering_programming_ebooks_for_free/,0,learnprogramming
gwlwvr,"My friends kept asking me to make a web dev tutorial for complete beginners... after three years of requests, I finally gave in. Here's my intro to web dev and modern HTML for anyone completely new to web development.","[https://www.youtube.com/watch?v=3RXlQPkJzCM](https://www.youtube.com/watch?v=3RXlQPkJzCM)

Hey all - my name is Chris, I've been a web developer for about seven years. Like many others' progressions, I started out fiddling with web development videos online, continuing to plug in work until I was able to land my first internship in 2014. Since then, I've been developing web apps professionally, starting out as a full-time employee at an agency, then branching off on my own to do independent agency work.

This video, although only covering HTML, takes the most useful parts of what I've learned throughout my seven years as a web developer. I don't go into extreme detail trying to cover every HTML tag out there, but rather, only the tags you'll be using a lot, and how to use them in a smart, organized manner that prepares you for success as you progress towards CSS.

I really hope this helps anyone new out there, trying to find a teacher or mentor that has experienced the hardships of learning to code and knows how to navigate around them now. If you have any questions at all about code, interviews, landing jobs, etc. please don't hesitate to DM here, I'm down to help, you specifically, in any way possible  🙌",2166,56,BuffloBEAST,2020-06-04 17:27:33,https://www.reddit.com/r/learnprogramming/comments/gwlwvr/my_friends_kept_asking_me_to_make_a_web_dev/,0,learnprogramming
grn4ey,Finished with your first programming course and not sure how to go on? The Stanford Code in Place team shares a roadmap with what courses to follow and where to find information about them,"**Read this first:** I was a Section Leader for Stanford's Code in Place course (a free online offering of (part of) their intro to CS course as a way to support the community during COVID-19). The course finished, and one of the professors behind it: Ali Malik, shared this roadmap for how to proceed. It is the result of a shared effort of the people behind the course. Keep in mind that I have not made any changes to the original! So there's plenty of references to the Code in Place course. Just imagine it says ""your first programming course"" instead and read on :) And also, this was reposted with Ali's consent!

# Life after Code in Place

Having completed Code In Place, there  are many paths you might choose to take: this handout is intended to  provide a possible roadmap for some of them. Like all guidelines, this  is an approximate and non-exhaustive list on how to learn about a  subject. There are a plethora different ways to achieve mastery that  might not be represented here.

We have split up this resource into umbrella topics that students have been asking about. In reality, there are a lot more ways to apply Computer Science, such as music, healthcare, social good and education.

Each area has a list of **core topics** you need to understand to engage with meaningfully with that discipline. After you develop a solid understanding of these core topics, you can pick and choose whatever subareas you find interesting and focus there.

If there is any topic not covered here that you are interested in, ask about it in the comments! We will try to answer those as well.

**How to use this resource**:

Since we can’t cover the vast range of possible material in the world, most of the resources linked below are websites of university courses that cover the relevant concept. ***This doesn’t mean you have to take the academic course to learn that material***. Instead, the course syllabus can serve as a reference point for which topics are important to cover. You can then go about actually learning these topics however you want. Some potential ways to learn could be to search for the topic on google or youtube, read textbooks, or browse reddit.

# Foundations of CS

These are major concepts that are important to solidify, irrespective of what area of CS you are interested in. It consists of all the foundational concepts: programs, variables, loops, conditions, data structures, and core algorithms.

**CS106A:**

You have done most of this! Congrats :)

**CS106B:**

Stanford’s sequel class to CS 106A. In CS 106B, you further develop your toolkit by deepening your understanding of how a computer represents data and learning about additional problem-solving techniques and structures. The class is taught in C++, one of the most popular programming languages in history.

*Course website*: [http://web.stanford.edu/class/cs106b/](http://web.stanford.edu/class/cs106b/)

*Old recorded lectures*: [https://see.stanford.edu/Course](https://see.stanford.edu/Course)

# Area Specific Paths

# Data Science, AI, and ML

**Core**:

* Probability and Statistics ([CS109](http://web.stanford.edu/class/archive/cs/cs109/cs109.1196/))
* Data science with numpy and matplotlib ([CS102](http://web.stanford.edu/class/cs102/), [Harvard Data Science](http://cs109.github.io/2015/index.html))
* Linear algebra and Multivariable Calculus ([Mathematics for Machine Learning](https://www.coursera.org/specializations/mathematics-machine-learning), [3b1b Linear Algebra](https://www.youtube.com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab), [3b1b Calculus](https://www.youtube.com/watch?v=WUvTyaaNkzM&list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr), [MIT18.06](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/), [Coding the Matrix](https://www.youtube.com/channel/UCGVa4wp8SWGFtMe6hcdpHlg/playlists))

**AI/ML**:

* Machine learning ([CS231N](http://cs231n.stanford.edu/), [CS229](https://www.coursera.org/learn/machine-learning))
* Natural language processing ([CS124](http://web.stanford.edu/class/cs124/), [CS224N](http://web.stanford.edu/class/cs224n/))
* Computer vision ([CS231N](http://cs231n.stanford.edu/))
* Reinforcement learning ([CS234](http://web.stanford.edu/class/cs234/index.html))

## Systems

**Core**:

* Computer Architecture and Systems (CS107 [website](http://web.stanford.edu/class/cs107/) and [videos](https://see.stanford.edu/Course))
* Principles of Systems ([CS110](http://web.stanford.edu/class/cs110/))

# Graphics/Game Design/VR

**Core**:

* Linear algebra and Multivariable Calculus ([Mathematics for Machine Learning](https://www.coursera.org/specializations/mathematics-machine-learning),[3b1b Linear Algebra](https://www.youtube.com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab), [3b1b Calculus](https://www.youtube.com/watch?v=WUvTyaaNkzM&list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr), [MIT18.06](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/), [Coding the Matrix](https://www.youtube.com/channel/UCGVa4wp8SWGFtMe6hcdpHlg/playlists))
* Core physics (mechanics, differential equations)

**Areas:**

* 2D/3D Graphics, rendering, animation, geometry ([CS248](http://cs248.stanford.edu/winter20/))
* Virtual Reality ([EE267](https://stanford.edu/class/ee267/))
* Animation and Simulation ([CS348C](http://graphics.stanford.edu/courses/cs348c/))
* Introduction to Game Design and Development ([CS146](https://stanfordgamedev.weebly.com/))

## Web dev (frontend/backend)

Web development is how we make websites and online applications to do useful things. It consists of two major areas. 

**Frontend**: This deals with everything related to what a website user can see and interact with such as the design, style, menus, text, images, etc. 

**Backend**: This deals with everything that has to do with all the logic and internal working of a website that is not typically visible to a user. This is stuff like storing data in databases, making a server, authentication, creating users, generating dynamic pages, etc.

These resources will generally cover both frontend (HTML, CSS, javascript) andbackend programming:

* [Mozilla: Learn Web Development](https://developer.mozilla.org/en-US/docs/Learn) 
* [The Odin Project](https://www.theodinproject.com/home)
* [The Flask Mega Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)

## Mobile dev

* iPhone: any Swift resources provided by [Apple](https://developer.apple.com/swift/)
* Android: any Kotlin resources provided by [Google](https://developer.android.com/courses)

# General Resources

## Programming Tools

* One of the most wonderful things about the field of Computer Science is how collaborative and open a field it is. This is enabled by websites like [Github](https://github.com/), [GitLab](https://about.gitlab.com/) and [BitBucket](https://bitbucket.org/product), in which programmers can share and work together on their code. Underlying each of these websites is a system called Git, which allows you to manage the different versions of your program with minimal fuss. Learn the basics of Git using [Github’s tutorial](https://try.github.io/), or [BitBucket’s help center](https://www.atlassian.com/git).  Some SLs wrote up really great intros to Github. See this [ed post](https://us.edstem.org/courses/490/discussion/71024) and this other [video](https://www.youtube.com/watch?v=umvKOaRWz-A)!
* In addition to PyCharm and Ed, there are countless other editors and IDEs, each with their own strengths and which can be customized for your purposes. Two of the most popular editors are [Visual Studio Code](https://code.visualstudio.com/) and [Sublime Text](https://www.sublimetext.com/). 
* As you work on projects of your own, you are bound to run into bugs. [Stack Overflow](https://stackoverflow.com/) is a question & answer forum that is probably the single best resource on the internet to get advice on resolving bugs.

## Other Programming Languages

Python is a wonderful language, but there are many other wonderful languages you might be interested in learning:

* HTML, CSS and Javascript are the best tools for developing internet-based application. Mozilla’s [resources](https://developer.mozilla.org/en-US/docs/Learn) are a fantastic introduction.
* C and C++ are two of the most commonly used programming languages, and are great for programmers who want more direct control over what their computers are doing. You can learn C++ from a combination of [CS 106B](http://cs106b.stanford.edu/) and [CS 106L](http://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/), and you could learn C [here](https://www.learn-c.org/).
* Rust is a more recent language that also affords programmers very low-level control of their computers. 
* [Java](https://www.codecademy.com/learn/learn-java) and [Go](https://tour.golang.org/welcome/1) are great choices to build systems that must handle large amounts of data.
* [Haskell](http://learnyouahaskell.com/introduction), [Scala](https://docs.scala-lang.org/learn.html), and [OCaml](https://ocaml.org/learn/tutorials/) are programming languages that promote a style of programming known as functional programming, which often is enormously helpful in processing data and is a fascinating intellectual endeavour. 

## Tech Interviews

Interviews for tech internships and jobs are kind of their own skill that really gets better with practice. These are some good resources to practice for tech job interviews. Remember, you don't want to be memorising these answers. Instead you want to develop your computational thinking so that you can figure out these answers on the spot!

* [Cracking the Coding Interview](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X)
* [Hackerrank](https://www.hackerrank.com/domains/algorithms)

# Collection of Resources by SLs

These are a collection of various resources contributed by the section leaders of Code in Place. They aren’t structured in any particular way but they might serve as a useful reference for you!

* Great answer by a section leader: [https://us.edstem.org/courses/490/discussion/71967](https://us.edstem.org/courses/490/discussion/71967)
* Take a MOOC, such as [CS106B and CS107](https://see.stanford.edu/Course), or [the Coursera version of CS 229](https://www.coursera.org/learn/machine-learning?utm_source=gg&utm_medium=sem&utm_content=07-StanfordML-US&campaignid=685340575&adgroupid=32639001781&device=c&keyword=machine%20learning%20tutorial&matchtype=e&network=g&devicemodel=&adpostion=&creativeid=243289762754&hide_mobile_promo&gclid=CjwKCAjwnIr1BRAWEiwA6GpwNUqKjmT-1xa3cNeaocKYhj3_ZxszfBzVimQMwjwIw8miHi1zJH2NuRoCMHQQAvD_BwE) or Coursera’s [Deep Learning](https://www.coursera.org/specializations/deep-learning?utm_source=gg&utm_medium=sem&utm_content=07-StanfordML-US&campaignid=685340575&adgroupid=32639001781&device=c&keyword=machine%20learning%20tutorial&matchtype=e&network=g&devicemodel=&adpostion=&creativeid=243289762754&hide_mobile_promo=&gclid=CjwKCAjwnIr1BRAWEiwA6GpwNUqKjmT-1xa3cNeaocKYhj3_ZxszfBzVimQMwjwIw8miHi1zJH2NuRoCMHQQAvD_BwE#courses)
* More MOOCS: [list from Class Central](https://www.freecodecamp.org/news/free-courses-top-cs-universities/)
* Try [codewars.com](http://www.codewars.com/) to learn more Python and other languages
* Find a learning partner (in your section, or someone else in the class) so that you can help each other continue learning to code -- having peer/community support can help a lot! (It could help if a “partner-seeking” or “team-seeking” thread were posted on Ed for this purpose.)
* Work through [interview prep problems](https://www.hackerrank.com/domains/algorithms)
   * Hackerrank in general is great - it gently introduces Python concepts through simple problems, and also has non-Python Algorithm tests that are pretty difficult and interesting
* Build something cool!
   * Glue existing libraries into useful software
* Completing [Python bootcamp course](https://www.udemy.com/course/complete-python-bootcamp/) from Udemy 
* Subscribe to [PyCoder’s weekly](https://pycoders.com/) for a weekly dose of Python news and others surrounding Python
* Learning the tools in computer science through MIT’s [The Missing Semester of Your CS Education](https://missing.csail.mit.edu/)
* Check out some conference tutorials or talks.
   * [This year’s pycon](https://us.pycon.org/2020/online/) 
   * [Pycon youtube search](https://www.youtube.com/results?search_query=pycon)
   * [Raymond Hettinger’s talks](https://www.youtube.com/results?search_query=raymond+hettinger+) \- IMO one of the best speakers on python - here are some of my favorites that are great for beginners, so you can watch all of these immediately. 
      * [The Mental Game of Python](https://www.youtube.com/watch?v=UANN2Eu6ZnM)
      * [Transforming Code into Beautiful, Idiomatic Python](https://www.youtube.com/watch?v=OSGv2VnC0go&t=2371s) \- great to learn language specific features of python if you already know some of c, java, etc this will show you how to write better python, and if you don’t then you still learn how to write great python code. 
      * [Being a Core Developer in Python](https://www.youtube.com/watch?v=voXVTjwnn-U) 
   * [Awesome Roadmaps](https://github.com/orsanawwad/awesome-roadmaps) \- A curated list of awesome software development roadmaps
      * [Coding Interview University Roadmap](https://github.com/jwasham/coding-interview-university) \- This is a list of free resources to learn the content that a CS undergrad would learn in college
      * [Web developer roadmap 2019](https://github.com/kamranahmedse/developer-roadmap) \- good starting places shows you lots of useful technologies
      * [Go developer roadmap 2019](https://github.com/Alikhll/golang-developer-roadmap) 
      * [UI/UX designer roadmap 2017](https://github.com/togiberlin/ui-ux-designer-roadmap)
      * [Game developer roadmap 2018](https://github.com/utilForever/game-developer-roadmap)
      * [Deep Learning Papers Reading Roadmap](https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap)
      * [iOS developer in 2018](https://github.com/BohdanOrlov/iOS-Developer-Roadmap)
      * [Mobile developer in 2017](https://github.com/godrm/mobile-developer-roadmap)
      * [React developer in 2019](https://github.com/adam-golab/react-developer-roadmap)
      * [Vue developer in 2019](https://github.com/marekbrainhub/vue-developer-roadmap)
      * [Vue.js developer in 2018](https://github.com/flaviocopes/vue-developer-roadmap)
      * [Node.js Developer Roadmap](https://github.com/aliyr/Nodejs-Developer-Roadmap)
      * [.net back-end Roadmap](https://github.com/saifaustcse/.net-developer-roadmap)
      * [ASP.NET Core Developer roadmap in 2019](https://github.com/MoienTajik/AspNetCore-Developer-Roadmap)
      * [Data science roadmap](https://github.com/MrMimic/data-scientist-roadmap)
      * [Hacker roadmap](https://github.com/Sundowndev/hacker-roadmap)
      * [Software architect roadmap](https://github.com/AlaaAttya/software-architect-roadmap)
      * [Angular Developer Roadmap](https://github.com/sulco/angular-developer-roadmap)
      * [Front-end HTML5/CSS3/Javascript related technologies to learn in 2017](https://github.com/ManzDev/roadmap-web-developer-2017)
      * [Software Quality Assurance Roadmap](https://github.com/anas-qa/Quality-Assurance-Road-Map)
      * [Android Developer Roadmap in 2019](https://github.com/anacoimbrag/android-developer-roadmap)
   * Software-adjacent areas
      * Design/UX ([CS147](https://hci.stanford.edu/courses/cs147/2019/au/))
      * Product Manager
      * Project Manager
      * Sales for software
   * Help a GitHub project
   * Learn about how a computer executes their code
      * [NAND2Tetris](https://www.nand2tetris.org/)
      * [Build an 8 bit computer from scratch](https://eater.net/8bit)
   * Learn how to build intelligence into real things outside computers
      * [Arduino tutorials](https://www.arduino.cc/en/Tutorial/HomePage?from=Main.Tutorials)",2169,52,s7oev,2020-05-27 16:38:58,https://www.reddit.com/r/learnprogramming/comments/grn4ey/finished_with_your_first_programming_course_and/,1,learnprogramming
3a14n2,r/LearnProgramming is the Subreddit Of The Day!,"As the title says, /r/learnprogramming is the subreddit of the day!

----

**Do read the article: http://www.reddit.com/r/subredditoftheday/comments/3a14ch/june_16th_2015_rlearnprogramming_welcome_to_the/**  

listed here and have a great day! :)

---

Rya",2166,75,rya11111,2015-06-16 12:18:22,https://www.reddit.com/r/learnprogramming/comments/3a14n2/rlearnprogramming_is_the_subreddit_of_the_day/,0,learnprogramming
601afk,Amazing Repository of Hundreds of Free Programming Books. Includes All Possible Subjects and Is Updated Frequently.,"I am not sure if this has been posted before. I did a quick google search and if it has been posted I didn't see it in any of the first few pages of google so here it is! = )

My sister showed it to me just the other day. It's on [Github Located Here](https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#pyramid).

Anyway, I hope it helps. Tons of great stuff here for any sort of development or design.",2165,56,TekNite,2017-03-18 00:15:28,https://www.reddit.com/r/learnprogramming/comments/601afk/amazing_repository_of_hundreds_of_free/,0,learnprogramming
fpcyge,Real Python is offering free video courses.,"Real Python is one of the best source to learn Python in depth. Their video courses are usually premium, now they are offering redeem code for few of their video courses. 

https://realpython.com/free-courses-march-2020",2166,104,oculusshift,2020-03-26 15:01:22,https://www.reddit.com/r/learnprogramming/comments/fpcyge/real_python_is_offering_free_video_courses/,1,learnprogramming
encuei,I Follow This Method Whenever My Brain Is struggling With A Complicated Programming Task. I Thought It Is Worth Sharing With The Community.,"As a software engineer, I felt stuck countless times during project development. As a programmer, you might have experienced this feeling yourself, I bet.

Regardless if it is work-related or in a personal endeavour, you usually start projects very enthusiastically.

However, when a specific task feels too overwhelming, you tend to lose focus, procrastinate, and sometimes even question your very decision of pursuing a career in your current field.

I want to share with you a simple way that will greatly help you overcome technically-challenging tasks.

Whether developing software or trying to solve coding challenges, applying this method will help you finish your most complicated tasks.

I call this method: *Elementary Task In Progress* (ETIP).

What do I mean by elementary? By definition, an elementary task is a very simple and basic task that is hardly broken down into smaller, easier steps.

***The task in progress should always be elementary so that its execution is straightforward.***

Let me clarify this further by asking you a question: “What is the most basic step you can do to get closer to finishing your complicated task?”

Identify that step. Turn it into a task on its own. Work on it. That’s your ETIP.

If you are stuck in your project because the task in progress is too complicated, chances are, your task is *not* an ETIP. Turn it into an ETIP by applying the following steps:

* Break the task in progress into simpler, more basic steps.
* For each individual step, break it up even further until it is in its most elementary form. This is your ETIP.
* Pick the first ETIP and start working on it.
* Once done with your first ETIP, move to the next one.

***Never*** ***work on a task that is not an ETIP!***

Remember, the task in progress should always be so elementary that its execution is straightforward.

Do you feel that your next task is too complicated? Time to break it down into ETIPs.

Use the ETIP method every time a task feels too overwhelming. Break your task into basic and simple steps that you can execute easily.

While it is almost unavoidable that you will encounter challenging and complex projects that are made up of complicated tasks, you should not work on a task unless you make sure its completion is simple.

The ETIP method will help you to always progress in completing your projects no matter how big the challenges you are faced with.

I hope this advice will be helpful to you. 

If you can you relate to this? Then let me know your thoughts in the comment section.",2149,191,jones-macallan,2020-01-11 20:34:49,https://www.reddit.com/r/learnprogramming/comments/encuei/i_follow_this_method_whenever_my_brain_is/,1,learnprogramming
3kh4bv,Please stop selling us BS. This sub-reddit is to help developers not sell us on bogus non-sense.,"So I'm making this post, because I'm genuinely upset at the post below. I firmly believe this sub is meant to help each other out and we should look out for each other. On the below post, some new Udemy class is claiming that you can go from a beginner to a paid professional after finishing their class. 

So I asked them a few simple questions about the class success stories and this is what they came back with: 

> ""First off the course has only been live for a week and it has exploded all over the internet because of how amazing it is. With that being said, the course is built by our instructor who has helped over 50 people get full time jobs in a matter of weeks.
> We do not spend time on computer science or theory during the course, it is important to know data structures and algorithms though as you become a more advanced engineer. We teach you the things you need to know ASAP to get a job. With that being said we do cover Arrays and Dictionaries/Hashtables in depth.
> It ultimately depends on the area, demand and what type of company you want to work for. However, after you take the course you should spend a good 6 hours brushing up on objective-c. We also talk about how to work with recruiters during the course, in order to help you get a job.""

This made me laugh pretty hard.
1. They have no evidence for their bold title since they just launched a week ago. NO REAL CASES
2. They said you don't need to know algorithms to land you a job. BS
3. You only need 6 hours to learn obj-C

They still haven't answered my questions yet. 

I'm writing this to get the communities thoughts on posts like this. Do you guys like getting advertised to? or do you want real developers helping developers. I just don't want this sub Reddit to turn into bunch of new accounts claiming they saw the light to programming and spam us with paid classes. 

https://www.reddit.com/r/learnprogramming/comments/3kfpkz/ios_9_swift_from_beginner_to_paid_professional/


**FYI for Swift, just take the Stanford class. It's freaking free and great**
https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099

EDIT: so the teacher of the class reached out to me and said he is legit and gave me his Linkedin info. THis is the first post I saw form him. http://www.linkedin.com/pulse/**reddit-made-me-1500-1-hour-mark-price?**trk=prof-post (The post is no longer available but sceenshots are forever: http://imgur.com/yjNwhpA) I guess he was embarrassed. 


EDIT: Hi everyone. Thanks for speaking up on this topic. I think the community has spoken pretty clearly on this topic, and I hope it serves as a tool for content creators to look at before posting to this sub.  However, can we please stop voting the post up? I really don't want this post to be higher on ""all time"" than

""40 Key Computer Science Concepts Explained In Layman’s Terms (x-post from r/interestingasfuck)"" or
""r/LearnProgramming is the Subreddit Of The Day!"" posts. 

Also my post was never to harass that OP of the other post. I just didn't want to see shady activity like his. So don't go harassing him or anything. We are above that.",2147,325,theomnicomic,2015-09-10 23:47:58,https://www.reddit.com/r/learnprogramming/comments/3kh4bv/please_stop_selling_us_bs_this_subreddit_is_to/,0,learnprogramming
potvln,Just had an interviewer basically laugh at me?,"So I just had a phone interview for an entry level software dev position and wasn’t originally too worried about it. I’ll preface by saying that I’m basically a self taught developer in different languages (mostly front end with very little Java and Python).

So I start the phone interview and the guy seems nice enough, asks me the usual questions (are you willing to relocate, etc. etc.) talks about the day to day, standard stuff. Then we get to experience. He asks how familiar I am with Java. I’m an honest guy, and feel like if I lie in an interview to get the job it’ll only make me look bad in the long run so I tell the truth. I’ve taken multiple programming courses in college but am still a little unfamiliar with Java. He _chuckles to himself_ then asks how much experience I have with Linux and I say none, because in all honesty I don’t. He then goes on to say, in a very long and laughable way, that I wouldn’t be a good fit for the position.

It’s funny because I’ve been sending out tons of applications and rejections haven’t really bothered me but the way this guy would just basically laugh at me because of my lack of experience for an _entry level position_ made me feel like shit. I’m learning Python right now and now I’m starting to doubt if I even want to keep pursuing this. I’m having a hard time learning considering I’m mostly self-taught and think that maybe I should focus more on UX/UI development or something else entirely instead of full stack or automation/AI/machine learning like I wanted in the future.

I’m just so lost and can’t seem to get an in anywhere and I’m tired. I’m real fucking tired honestly.

Edit: Making one edit and one edit only. Wow. Yeah it’s cliché to say, but I was not expecting this amount of support. Honestly, I’m grateful for the wealth of information, advice, and resources shared so thank you all. 

I wrote this post just to really let off some steam obviously because that was bizarre to me and yeah I might’ve overreacted. 

To answer some FAQs

-I do have Java experience, I just haven’t _used_ Java in a long time but probably could pick it up very easily if I wanted.

-From the comments, I learned it turns out I _do_ have a little bit of experience in Linux (really MacOS and doing command line stuff with bash). I’m still learning. 

-I, just like many tech people, have issues with social settings, interviews, and selling myself. Yes, I know - “Well no wonder you’re not getting the job” I’m working on it. I probably could’ve had a better interview if I worded some responses better (“I haven’t worked with Java in a little bit, but have no problem picking it back up and am eager to learn more”) but here we are and at the end of the day who gives a fuck. Another one bites the dust. 

-The position _was_ entry level. The JD said only Java was needed. I know Java. Maybe I was under-qualified. Sue me. I’m still gonna apply.",2143,444,pandasinmoscow,2021-09-15 16:45:04,https://www.reddit.com/r/learnprogramming/comments/potvln/just_had_an_interviewer_basically_laugh_at_me/,0,learnprogramming
qezk6p,Free online Coding platforms to learn and improve your coding skills,"• [https://www.hackerrank.com](https://www.hackerrank.com) =>  Java, C++, PHP, Python, SQL, JavaScript etc (Competitive Programming)

&#x200B;

• [https://www.codewars.com](https://www.codewars.com)  => Clojure,CoffeeScript,C,Coq, C++,C#,Java,JavaScript,Kotlin,PHP,Python,Racket,Ruby,Rust,Shell,SQL,Swift,TypeScript etc. (Complex problems, competitive programming) (Highly Recommended)

&#x200B;

• [https://www.hackerearth.com](https://www.hackerearth.com) => C++, Java, Python, and C# etc. (hackathons and 10k+ programming challenges)

&#x200B;

• [https://projecteuler.net](https://projecteuler.net) => mathematical/computer programming problems that will require more than just mathematical insights to solve.

• [http://www.programmr.com](http://www.programmr.com) =>Java,C++, php,C#, Ruby,python,iOS

&#x200B;

• [https://www.codechef.com](https://www.codechef.com) => 35+ programming languges. I would suggest for c,c++ and java programmers. Highly rated.

&#x200B;

• [http://www.codeabbey.com](http://www.codeabbey.com) => Highly rated for beginners (programming problems)

&#x200B;

• [https://www.topcoder.com](https://www.topcoder.com) => (competitive programming)

&#x200B;

• [https://coderbyte.com](https://coderbyte.com) => Some of the courses and challenges on Coderbyte are free.(practice programming and improve your coding skills)

&#x200B;

• [https://leetcode.com](https://leetcode.com) => Great for DS&A interviews, technical interviews. C++, C#, C, Java, JavaScript, Python,Ruby etc. One of my favourite platform.Highly recommended.

&#x200B;

• [http://exercism.io](http://exercism.io) =>C, C#, C++, CoffeeScript, Elm, Erlang, F#, Go, Java, JavaScript etc

&#x200B;

• [https://codefights.com](https://codefights.com) => programmers to enhance their debugging skills as well as knowledge about algorithms.

&#x200B;

• [http://www.cyber-dojo.org](http://www.cyber-dojo.org) =>  promotes coding & testing — an IDE, mostly coding.

&#x200B;

• [http://codingbat.com](http://codingbat.com) => coding problems to build coding skill in Java and Python

&#x200B;

• [https://www.codingame.com](https://www.codingame.com) => Game development (challenge based training platform for programmers)

&#x200B;

• [https://www.freecodecamp.org/](https://www.freecodecamp.org/) => (HTML/CSS/JAVASCRIPT/REACT etc) Highly recommended for web development.

&#x200B;

• [https://www.sololearn.com/](https://www.sololearn.com/) => python,c++,html,java,css,javascript etc. (code with their browser IDE)(Highly recommended for beginners)

&#x200B;

• [https://codeforces.com/](https://codeforces.com/) => Competitive Programming

&#x200B;

• [https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/) => Algorithms and Data Structures, various programming articles available.

&#x200B;

• [https://www.theodinproject.com/](https://www.theodinproject.com/) => Web Development

&#x200B;

• [https://www.codewell.cc/](https://www.codewell.cc/) => Frontend webdevelopement

&#x200B;

• [https://www.cses.fi/](https://www.cses.fi/) => Competitive Programming Practice Problems (highly recommended)

&#x200B;

• [https://codesignal.com/](https://codesignal.com/)  => the most advanced assessment platform for technical hiring.

&#x200B;

• [https://www.frontendmentor.io/](https://www.frontendmentor.io/) => HTML/CSS/JAVASCRIPT challenges

&#x200B;

• [https://www.mooc.fi/en/](https://www.mooc.fi/en/) => python,java,AI,cyber security etc. (Recommended for beginners)

&#x200B;

• [http://www.pythonchallenge.com](http://www.pythonchallenge.com)

&#x200B;

• [https://codegolf.stackexchange.com](https://codegolf.stackexchange.com)

&#x200B;

• [https://www.codeacademy.com/](https://www.codecademy.com/)

&#x200B;

• [https://programmingpraxis.com](https://programmingpraxis.com)",2144,121,jd_300,2021-10-24 19:44:20,https://www.reddit.com/r/learnprogramming/comments/qezk6p/free_online_coding_platforms_to_learn_and_improve/,0,learnprogramming
3zfbp1,Here's a list of 221 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2016),"This is not the complete list of MOOCs starting in January 2016, just the ones relevant to this community. The complete list of courses starting in January 2016 can be found over at [Class Central (516 courses)](https://www.class-central.com/report/mooc-course-report-january-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER(38)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[HTML, CSS and JavaScript](https://www.coursera.org/learn/html-css-javascript) via **Coursera**|4th Jan|3|★★★★☆ [(7)](https://www.class-central.com/r/4239)
 [Programming and the Web for Beginners](https://www.coursera.org/learn/duke-programming-web) via **Coursera**|4th Jan|4|★★★☆☆ [(4)](https://www.class-central.com/r/4256)
 [Introduction to HTML5](https://www.coursera.org/learn/html) via **Coursera**|4th Jan|3|★★★★☆ [(13)](https://www.class-central.com/r/4307)
 [Ruby on Rails: An Introduction](https://www.coursera.org/learn/ruby-on-rails-intro) via **Coursera**|4th Jan|3|★★★☆☆ [(40)](https://www.class-central.com/r/4258)
[NEW] [BJC.3x: The Beauty and Joy of Computing (CS Principles), Part 3](https://www.edx.org/course/beauty-joy-computing-cs-principles-part-uc-berkeleyx-bjc-3x) via **edX**|4th Jan|8|☆☆☆☆☆
 [Introduction to Cyber Security](http://www.futurelearn.com/courses/introduction-to-cyber-security?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed) via **FutureLearn**|4th Jan|8|★★★★☆ [(11)](https://www.class-central.com/r/2448)
 [Code Yourself! An Introduction to Programming](https://www.coursera.org/learn/intro-programming) via **Coursera**|4th Jan|5|★★★★★ [(2)](https://www.class-central.com/r/2938)
 [An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/course/interactivepython1) via **Coursera**|9th Jan|5|★★★★★ [(2702)](https://www.class-central.com/r/408)
[NEW] [CSE1309x: Learn to Program Using Python](https://www.edx.org/course/learn-program-using-python-utarlingtonx-cse1309x) via **edX**|10th Jan|9|☆☆☆☆☆
 [Introduction to CSS3](https://www.coursera.org/learn/introcss) via **Coursera**|11th Jan|4|★★★★★ [(2)](https://www.class-central.com/r/4294)
 [6.00.1x: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-6) via **edX**|13th Jan|9|★★★★★ [(61)](https://www.class-central.com/r/1341)
 [Internet History, Technology, and Security](https://www.coursera.org/learn/internet-history) via **Coursera**|25th Jan|10|★★★★★ [(23)](https://www.class-central.com/r/335)
 [Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(53)](https://www.class-central.com/r/320)
 [Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★☆☆ [(11)](https://www.class-central.com/r/831)
 [Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(3)](https://www.class-central.com/r/2013)
 [Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(16)](https://www.class-central.com/r/2659)
 [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(8)](https://www.class-central.com/r/2660)
 [How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(17)](https://www.class-central.com/r/2661)
 [CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x) via **edX**|Self paced|NA|★★★★★ [(39)](https://www.class-central.com/r/442)
 [Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★☆☆☆ [(2)](https://www.class-central.com/r/3253)
 [Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|11|★★★★★ [(6)](https://www.class-central.com/r/1578)
 [CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced) via **Stanford OpenEdx**|Self paced|6|★★★★☆ [(8)](https://www.class-central.com/r/2175)
 [CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0) via **edX**|Self paced|6|★★★★★ [(4)](https://www.class-central.com/r/2954)
 [CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x) via **edX**|Self paced|6|★★★☆☆ [(1)](https://www.class-central.com/r/2957)
 [DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0) via **edX**|Self paced|22|★★★☆☆ [(6)](https://www.class-central.com/r/3338)
 [LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2) via **edX**|Self paced|8|★★★★☆ [(24)](https://www.class-central.com/r/1857)
 [CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x) via **edX**|Self paced|14|★★★★★ [(2)](https://www.class-central.com/r/3483)
 [CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0) via **edX**|Self paced|9|★★☆☆☆ [(10)](https://www.class-central.com/r/1650)
 [COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x) via **edX**|Self paced|5|★★★★☆ [(3)](https://www.class-central.com/r/1983)
 [Learn Swift Programming Syntax](https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|★★★★☆ [(1)](https://www.class-central.com/r/4049)
 [Code101x: Think. Create. Code](https://www.edx.org/course/think-create-code-adelaidex-code101x-1) via **edX**|Self paced|27|★★★★★ [(1)](https://www.class-central.com/r/3231)
 [CS101.2x: Introduction to Computer Programming, Part 2](https://www.edx.org/course/introduction-computer-programming-part-2-iitbombayx-cs101-2x-0) via **edX**|Self paced|NA|☆☆☆☆☆
 [IT.1.1x: Introduction to Programming with Java Part 1: Starting to Code with Java](https://www.edx.org/course/introduction-programming-java-part-1-uc3mx-it-1-1x-0) via **edX**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/2813)
 [DEV208x: Introduction to jQuery](https://www.edx.org/course/introduction-jquery-microsoft-dev208x-0) via **edX**|Self paced|53|★★★★☆ [(2)](https://www.class-central.com/r/4062)
 [Introduction to Databases](https://www.coursera.org/course/db) via **Coursera**|Self paced|NA|★★★★★ [(29)](https://www.class-central.com/r/303)
 [Computer Science 101](https://www.coursera.org/course/cs101) via **Coursera**|Self paced|NA|★★★★☆ [(14)](https://www.class-central.com/r/375)
 
INTERMEDIATE(141)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[NEW] [Interfacing with the Raspberry Pi](https://www.coursera.org/learn/raspberry-pi-interface) via **Coursera**|1st Jan|NA|☆☆☆☆☆
[NEW] [Machine Learning for Musicians and Artists](https://www.kadenze.com/courses/machine-learning-for-musicians-and-artists/info) via **Kadenze**|Jan|7|☆☆☆☆☆
[NEW] [Advanced Styling with Responsive Design](https://www.coursera.org/learn/responsivedesign) via **Coursera**|1st Jan|NA|☆☆☆☆☆
 [Introduction to Big Data](https://www.coursera.org/learn/intro-to-big-data) via **Coursera**|4th Jan|3|★★★☆☆ [(16)](https://www.class-central.com/r/4164)
 [Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) via **Coursera**|4th Jan|6|★★★★★ [(3)](https://www.class-central.com/r/4212)
 [Responsive Website Basics: Code with HTML, CSS, and JavaScript ](https://www.coursera.org/learn/website-coding) via **Coursera**|4th Jan|4|★★★★★ [(6)](https://www.class-central.com/r/4191)
 [Advanced Data Structures in Java](https://www.coursera.org/learn/advanced-data-structures) via **Coursera**|4th Jan|5|☆☆☆☆☆
 [Database Management Essentials](https://www.coursera.org/learn/database-management) via **Coursera**|4th Jan|7|★★★★☆ [(1)](https://www.class-central.com/r/4337)
 [Java Programming: Principles of Software Design](https://www.coursera.org/learn/java-programming-design-principles) via **Coursera**|4th Jan|4|☆☆☆☆☆
 [Data structures: Measuring and Optimizing Performance](https://www.coursera.org/learn/data-structures-optimizing-performance) via **Coursera**|4th Jan|5|☆☆☆☆☆
 [Data Manipulation at Scale: Systems and Algorithms](https://www.coursera.org/learn/data-manipulation) via **Coursera**|4th Jan|4|★★★☆☆ [(1)](https://www.class-central.com/r/4473)
 [Introduction To Swift Programming](https://www.coursera.org/learn/swift-programming) via **Coursera**|4th Jan|5|★☆☆☆☆ [(1)](https://www.class-central.com/r/4248)
 [Data Management and Visualization](https://www.coursera.org/learn/data-visualization) via **Coursera**|4th Jan|4|★★★★☆ [(2)](https://www.class-central.com/r/4184)
 [Data Warehouse Concepts, Design, and Data Integration](https://www.coursera.org/learn/dwdesign) via **Coursera**|4th Jan|5|★★★★★ [(1)](https://www.class-central.com/r/4230)
 [Web Application Development with JavaScript and MongoDB](https://www.coursera.org/learn/web-application-development) via **Coursera**|4th Jan|4|☆☆☆☆☆
 [Communicating Data Science Results](https://www.coursera.org/learn/data-results) via **Coursera**|4th Jan|3|☆☆☆☆☆
 [Rails with Active Record and Action Pack](https://www.coursera.org/learn/rails-with-active-record) via **Coursera**|4th Jan|4|★★★★☆ [(1)](https://www.class-central.com/r/4197)
 [Responsive Website Tutorial and Examples](https://www.coursera.org/learn/responsive-website-examples) via **Coursera**|4th Jan|4|☆☆☆☆☆
 [Interactivity with JavaScript](https://www.coursera.org/learn/javascript) via **Coursera**|4th Jan|4|☆☆☆☆☆
 [Practical Machine Learning](https://www.coursera.org/learn/practical-machine-learning) via **Coursera**|4th Jan|NA|★★★★☆ [(11)](https://www.class-central.com/r/1719)
 [Statistical Inference](https://www.coursera.org/learn/statistical-inference) via **Coursera**|4th Jan|NA|★★★☆☆ [(16)](https://www.class-central.com/r/1717)
 [Developing Data Products](https://www.coursera.org/learn/data-products) via **Coursera**|4th Jan|NA|★★★★☆ [(5)](https://www.class-central.com/r/1720)
 [Regression Models](https://www.coursera.org/learn/regression-models) via **Coursera**|4th Jan|NA|★★★☆☆ [(12)](https://www.class-central.com/r/1718)
 [Reproducible Research](https://www.coursera.org/learn/reproducible-research) via **Coursera**|4th Jan|NA|★★★★☆ [(11)](https://www.class-central.com/r/1716)
 [Exploratory Data Analysis](https://www.coursera.org/learn/exploratory-data-analysis) via **Coursera**|4th Jan|NA|★★★★☆ [(17)](https://www.class-central.com/r/1715)
 [R Programming](https://www.coursera.org/learn/r-programming) via **Coursera**|4th Jan|NA|★★★☆☆ [(170)](https://www.class-central.com/r/1713)
 [The Data Scientist’s Toolbox](https://www.coursera.org/learn/data-scientists-tools) via **Coursera**|4th Jan|NA|★★★☆☆ [(103)](https://www.class-central.com/r/1712)
 [Getting and Cleaning Data](https://www.coursera.org/learn/data-cleaning) via **Coursera**|4th Jan|NA|★★★☆☆ [(30)](https://www.class-central.com/r/1714)
 [Approximation Algorithms Part I](https://www.coursera.org/learn/approximation-algorithms-part-1) via **Coursera**|4th Jan|5|☆☆☆☆☆
[NEW] [Managing Big Data with MySQL](https://www.coursera.org/learn/analytics-mysql) via **Coursera**|4th Jan|NA|☆☆☆☆☆
 [Image and video processing: From Mars to Hollywood with a stop at the hospital](https://www.coursera.org/course/images) via **Coursera**|4th Jan|9|★★★★☆ [(5)](https://www.class-central.com/r/462)
 [M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about) via **MongoDB University**|5th Jan|7|★★★★★ [(11)](https://www.class-central.com/r/599)
 [M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about) via **MongoDB University**|5th Jan|7|★★★★☆ [(5)](https://www.class-central.com/r/1188)
 [M101N: MongoDB for .NET Developers](https://university.mongodb.com/courses/M101N/about) via **MongoDB University**|5th Jan|NA|★★★★☆ [(3)](https://www.class-central.com/r/3273)
 [M101P: MongoDB for Developers](https://university.mongodb.com/courses/M101P/about) via **MongoDB University**|5th Jan|7|★★★★★ [(3)](https://www.class-central.com/r/600)
 [M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about) via **MongoDB University**|5th Jan|7|★★★★☆ [(6)](https://www.class-central.com/r/475)
 [M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about) via **MongoDB University**|5th Jan|7|★★★★★ [(2)](https://www.class-central.com/r/1777)
[NEW] [Best Practices for iOS User Interface Design](https://www.coursera.org/learn/ui) via **Coursera**|6th Jan|NA|☆☆☆☆☆
 [Principles of Computing (Part 1)](https://www.coursera.org/course/principlescomputing1) via **Coursera**|9th Jan|5|★★★★★ [(14)](https://www.class-central.com/r/1724)
 [Concepts in Game Development](https://www.open2study.com//node/1763) via **Open2Study**|11th Jan|4|★★★★☆ [(15)](https://www.class-central.com/r/1176)
 [CS169.2x: Engineering Software as a Service (Saas), Part 2](https://www.edx.org/course/engineering-software-service-saas-part-2-uc-berkeleyx-cs169-2x) via **edX**|11th Jan|8|★★★★★ [(4)](https://www.class-central.com/r/558)
 [Front-End JavaScript Frameworks: AngularJS](https://www.coursera.org/learn/angular-js) via **Coursera**|11th Jan|4|☆☆☆☆☆
 [Using Databases with Python](https://www.coursera.org/learn/python-databases) via **Coursera**|11th Jan|5|☆☆☆☆☆
 [Introduction to Big Data Analytics](https://www.coursera.org/learn/bigdata-analytics) via **Coursera**|11th Jan|5|★☆☆☆☆ [(5)](https://www.class-central.com/r/4216)
 [Hadoop Platform and Application Framework](https://www.coursera.org/learn/hadoop) via **Coursera**|11th Jan|5|★★☆☆☆ [(11)](https://www.class-central.com/r/4269)
 [Data Visualization and Communication with Tableau](https://www.coursera.org/learn/analytics-tableau) via **Coursera**|11th Jan|5|★★★★★ [(2)](https://www.class-central.com/r/4297)
 [Java Programming: Solving Problems with Software](https://www.coursera.org/learn/java-programming) via **Coursera**|11th Jan|4|★★★☆☆ [(2)](https://www.class-central.com/r/4305)
 [Front-End Web UI Frameworks and Tools](https://www.coursera.org/learn/web-frameworks) via **Coursera**|11th Jan|4|☆☆☆☆☆
 [Responsive Web Design](https://www.coursera.org/learn/responsive-web-design) via **Coursera**|11th Jan|4|★★★★☆ [(4)](https://www.class-central.com/r/4200)
 [Java Programming: Arrays, Lists, and Structured Data](https://www.coursera.org/learn/java-programming-arrays-lists-data) via **Coursera**|11th Jan|4|☆☆☆☆☆
 [Introduction to Meteor.js Development  ](https://www.coursera.org/learn/meteor-development) via **Coursera**|11th Jan|4|★★★★★ [(1)](https://www.class-central.com/r/4328)
 [iOS App Development Basics](https://www.coursera.org/learn/ios-app-development-basics) via **Coursera**|11th Jan|5|☆☆☆☆☆
 [Data Analysis Tools](https://www.coursera.org/learn/data-analysis-tools) via **Coursera**|11th Jan|4|★☆☆☆☆ [(1)](https://www.class-central.com/r/4169)
 [Information Visualization](http://ivmooc.cns.iu.edu/) via **Others**|12th Jan|15|★★★★★ [(1)](https://www.class-central.com/r/627)
 [Документы и презентации в LaTeX (Introduction to LaTeX)](https://www.coursera.org/learn/latex) via **Coursera**|12th Jan|NA|☆☆☆☆☆
 [Algorithmic Thinking (Part 1)](https://www.coursera.org/course/algorithmicthink1) via **Coursera**|16th Jan|4|★★★★☆ [(6)](https://www.class-central.com/r/1725)
[NEW] [Ruby on Rails Web Services and Integration with MongoDB](https://www.coursera.org/learn/ruby-on-rails-web-services-mongodb) via **Coursera**|18th Jan|NA|☆☆☆☆☆
 [Bioinformatics: Introduction and Methods 生物信息学: 导论与方法](https://www.coursera.org/learn/bioinformatics-pku) via **Coursera**|18th Jan|14|☆☆☆☆☆
[NEW] [Algorithms, Biology, and Programming for Beginners](https://www.coursera.org/course/algobioprogramming) via **Coursera**|18th Jan|8|★☆☆☆☆ [(1)](https://www.class-central.com/r/2291)
 [Programming, Data Structures and Algorithms](https://onlinecourses.nptel.ac.in/noc16_cs06) via **NPTEL**|18th Jan|10|★★☆☆☆ [(2)](https://www.class-central.com/r/2778)
[NEW] [An introduction to Haskell Programming](https://onlinecourses.nptel.ac.in/noc16_cs05) via **NPTEL**|18th Jan|8|☆☆☆☆☆
 [Design and Analysis of Algorithms](https://onlinecourses.nptel.ac.in/noc16_cs04) via **NPTEL**|18th Jan|8|★★★☆☆ [(1)](https://www.class-central.com/r/3984)
[NEW] [MATLAB Programming for Numerical Computation](https://onlinecourses.nptel.ac.in/noc16_ch01) via **NPTEL**|18th Jan|8|☆☆☆☆☆
[NEW] [Multiplatform Mobile App Development with Web Technologies](https://www.coursera.org/learn/hybrid-mobile-development) via **Coursera**|18th Jan|NA|☆☆☆☆☆
 [Machine Learning](https://www.coursera.org/learn/machine-learning) via **Coursera**|25th Jan|11|★★★★★ [(137)](https://www.class-central.com/r/835)
 [Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(10)](https://www.class-central.com/r/323)
 [Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(16)](https://www.class-central.com/r/324)
 [Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(7)](https://www.class-central.com/r/325)
 [Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★☆☆☆ [(3)](https://www.class-central.com/r/364)
 [Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★★ [(6)](https://www.class-central.com/r/365)
 [Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(3)](https://www.class-central.com/r/457)
 [Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/455)
 [Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★★☆ [(8)](https://www.class-central.com/r/592)
 [HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(4)](https://www.class-central.com/r/551)
 [Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html) via **Others**|Self paced|10|★★★★☆ [(2)](https://www.class-central.com/r/366)
 [Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(10)](https://www.class-central.com/r/1470)
 [CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1021)
 [Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(8)](https://www.class-central.com/r/1480)
 [Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/1479)
 [Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(13)](https://www.class-central.com/r/1478)
 [Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014) via **openHPI**|Self paced|NA|★★★★☆ [(3)](https://www.class-central.com/r/1701)
 [Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|★★★★☆ [(2)](https://www.class-central.com/r/2189)
 [UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(2)](https://www.class-central.com/r/2212)
 [Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(1)](https://www.class-central.com/r/2215)
 [Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★★ [(2)](https://www.class-central.com/r/2211)
 [Software Development Process](https://www.udacity.com/course/ud805) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/2335)
 [Computer Networking](https://www.udacity.com/course/ud436) via **Udacity**|Self paced|12|★★★★★ [(3)](https://www.class-central.com/r/2336)
 [Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about) via **Others**|Self paced|17|★★★★★ [(2)](https://www.class-central.com/r/2339)
 [Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(8)](https://www.class-central.com/r/2658)
 [Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/2997)
 [Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|★★★☆☆ [(3)](https://www.class-central.com/r/2898)
 [HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/2999)
 [Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★★ [(4)](https://www.class-central.com/r/2861)
 [Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★☆ [(2)](https://www.class-central.com/r/2998)
 [Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★☆ [(6)](https://www.class-central.com/r/2996)
 [Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(4)](https://www.class-central.com/r/3255)
 [Health Informatics in the Cloud](https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|☆☆☆☆☆
 [JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/3351)
 [UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|15|☆☆☆☆☆
 [Responsive Images](https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/3352)
 [iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(1)](https://www.class-central.com/r/3524)
 [Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(1)](https://www.class-central.com/r/3525)
 [iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(4)](https://www.class-central.com/r/3579)
 [Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Material Design for Android Developers](https://www.udacity.com/course/material-design-for-android-developers--ud862?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3584)
 [DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0) via **edX**|Self paced|22|☆☆☆☆☆
 [DEV202.1x: Building Cloud Apps with Microsoft Azure – Part 1](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-1x-0) via **edX**|Self paced|22|★★★☆☆ [(1)](https://www.class-central.com/r/3348)
 [AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0) via **edX**|Self paced|NA|★★★☆☆ [(3)](https://www.class-central.com/r/1564)
 [Xcode Debugging](https://www.udacity.com/course/xcode-debugging--ud774?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Big Data, Cloud Computing, & CDN Emerging Technologies](https://www.coursera.org/learn/big-data-cloud-computing-cdn) via **Coursera**|Self paced|3|★★★☆☆ [(3)](https://www.class-central.com/r/3931)
 [KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0) via **edX**|Self paced|8|★★★★☆ [(9)](https://www.class-central.com/r/1836)
 [Intro to DevOps](https://www.udacity.com/course/intro-to-devops--ud611?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(1)](https://www.class-central.com/r/4013)
 [Configuring Linux Web Servers](https://www.udacity.com/course/configuring-linux-web-servers--ud299?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|☆☆☆☆☆
 [Learn Backbone.js](https://www.udacity.com/course/learn-backbonejs--ud990?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|☆☆☆☆☆
 [Statistical Computing with R - a gentle introduction](https://extendstore.ucl.ac.uk/product?catalog=UCLXR) via **Others**|Self paced|NA|☆☆☆☆☆
 [SPD1x: Systematic Program Design - Part 1: The Core Method](https://www.edx.org/course/systematic-program-design-part-1-core-ubcx-spd1x-0) via **edX**|Self paced|7|★★★☆☆ [(4)](https://www.class-central.com/r/3465)
 [How to create <anything> in Android](https://www.udacity.com/course/how-to-create-anything-in-android--ud802?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [DAT204x: Introduction to R Programming](https://www.edx.org/course/introduction-r-programming-microsoft-dat204x-0) via **edX**|Self paced|4|★★★★☆ [(14)](https://www.class-central.com/r/3928)
 [Software Architecture & Design](https://www.udacity.com/course/software-architecture-design--ud821?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/3418)
 [PH525.1x: Data Analysis for Life Sciences 1: Statistics and R](https://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x) via **edX**|Self paced|4|★★★★☆ [(6)](https://www.class-central.com/r/2960)
 [2D Game Development with LibGDX](https://www.udacity.com/course/2d-game-development-with-libgdx--ud405?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-1) via **edX**|Self paced|NA|★★★★☆ [(6)](https://www.class-central.com/r/3339)
 [Designing RESTful APIs](https://www.udacity.com/course/designing-restful-apis--ud388?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Intro to Data Analysis](https://www.udacity.com/course/intro-to-data-analysis--ud170?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Web Tooling & Automation](https://www.udacity.com/course/web-tooling-automation--ud892?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [M101x: Introduction to MongoDB using the MEAN Stack](https://www.edx.org/course/introduction-mongodb-using-mean-stack-mongodbx-m101x) via **edX**|Self paced|58|☆☆☆☆☆
 [Networks: Friends, Money, and Bytes](https://www.coursera.org/learn/friends-money-bytes) via **Coursera**|Self paced|NA|★★★☆☆ [(1)](https://www.class-central.com/r/359)
 [Interactive Computer Graphics](https://www.coursera.org/learn/interactive-computer-graphics) via **Coursera**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/2067)
 [SPD2x: Systematic Program Design - Part 2: Arbitrary Sized Data](https://www.edx.org/course/systematic-program-design-part-2-ubcx-spd2x) via **edX**|Self paced|5|☆☆☆☆☆
 [Firebase Essentials For Android](https://www.udacity.com/course/firebase-essentials-for-android--ud009?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [CSE167x: Computer Graphics](https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-0) via **edX**|Self paced|NA|★★★★☆ [(5)](https://www.class-central.com/r/548)
 [JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3082)

ADVANCED(42)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[NEW] [Machine Learning for Data Analysis](https://www.coursera.org/learn/machine-learning-data-analysis) via **Coursera**|1st Jan|NA|☆☆☆☆☆
 [Regression Modeling in Practice](https://www.coursera.org/learn/regression-modeling-practice) via **Coursera**|1st Jan|4|☆☆☆☆☆
[NEW] [Machine Learning: Classification](https://www.coursera.org/learn/ml-classification) via **Coursera**|1st Jan|NA|☆☆☆☆☆
[NEW] [Machine Learning With Big Data](https://www.coursera.org/learn/machinelearningwithbigdata) via **Coursera**|4th Jan|4|☆☆☆☆☆
 [Machine Learning Foundations: A Case Study Approach](https://www.coursera.org/learn/ml-foundations) via **Coursera**|4th Jan|6|★★★★☆ [(15)](https://www.class-central.com/r/4352)
 [Practical Predictive Analytics: Models and Methods](https://www.coursera.org/learn/predictive-analytics) via **Coursera**|4th Jan|4|☆☆☆☆☆
[NEW] [Relational Database Support for Data Warehouses](https://www.coursera.org/learn/dwrelational) via **Coursera**|4th Jan|NA|☆☆☆☆☆
[NEW] [Cryptography II](https://www.coursera.org/course/crypto2) via **Coursera**|11th Jan|6|★★★★★ [(1)](https://www.class-central.com/r/425)
 [Machine Learning: Regression](https://www.coursera.org/learn/ml-regression) via **Coursera**|11th Jan|6|★★★★★ [(1)](https://www.class-central.com/r/4289)
[NEW] [Introduction to Machine Learning](https://onlinecourses.nptel.ac.in/noc16_cs03) via **NPTEL**|18th Jan|12|☆☆☆☆☆
[NEW] [Artificial Intelligence: Knowledge Representation and Reasoning](https://onlinecourses.nptel.ac.in/noc16_cs02) via **NPTEL**|18th Jan|12|☆☆☆☆☆
 [Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/course/hiddenmessages) via **Coursera**|25th Jan|4|★★★★★ [(13)](https://www.class-central.com/r/3289)
 [Comparing Genes, Proteins, and Genomes (Bioinformatics III)](https://www.coursera.org/course/comparinggenomes) via **Coursera**|25th Jan|5|☆☆☆☆☆
 [Molecular Evolution (Bioinformatics IV)](https://www.coursera.org/course/molecularevolution) via **Coursera**|25th Jan|5|☆☆☆☆☆
[NEW] [DS102X: Machine Learning for Data Science and Analytics](https://www.edx.org/course/machine-learning-data-science-analytics-columbiax-ds102x) via **edX**|25th Jan|4|☆☆☆☆☆
 [DAT202.1x: Processing Big Data with Azure HDInsight](https://www.edx.org/course/processing-big-data-azure-hdinsight-microsoft-dat202-1x) via **edX**|25th Jan|5|★★★★★ [(4)](https://www.class-central.com/r/3917)
[NEW] [Finding Mutations in DNA and Proteins (Bioinformatics VI)](https://www.coursera.org/course/mutations) via **Coursera**|25th Jan|5|☆☆☆☆☆
 [Genome Sequencing (Bioinformatics II)](https://www.coursera.org/course/assembly) via **Coursera**|25th Jan|4|★★★★★ [(2)](https://www.class-central.com/r/3290)
 [Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(16)](https://www.class-central.com/r/319)
 [Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/326)
 [Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/549)
 [Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/552)
 [Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/550)
 [Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1847)
 [Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1848)
 [Reinforcement Learning](https://www.udacity.com/course/reinforcement-learning--ud600?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/1849)
 [In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup) via **openSAP**|Self paced|NA|★★☆☆☆ [(1)](https://www.class-central.com/r/2458)
 [Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(1)](https://www.class-central.com/r/3000)
 [Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(3)](https://www.class-central.com/r/3256)
 [Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(4)](https://www.class-central.com/r/1016)
 [High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1018)
 [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1024)
 [Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|☆☆☆☆☆
 [Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems) via **Coursera**|Self paced|NA|★★★★☆ [(14)](https://www.class-central.com/r/1029)
 [Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Introduction to Computer Vision](https://www.udacity.com/course/introduction-to-computer-vision--ud810?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [GT - Refresher - Advanced OS](https://www.udacity.com/course/gt-refresher-advanced-os--ud098?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Introduction to Operating Systems](https://www.udacity.com/course/introduction-to-operating-systems--ud923?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [High Performance Computing](https://www.udacity.com/course/high-performance-computing--ud281?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [DAT203x: Data Science and Machine Learning Essentials](https://www.edx.org/course/data-science-machine-learning-essentials-microsoft-dat203x-0) via **edX**|Self paced|20|★★★★☆ [(5)](https://www.class-central.com/r/3954)
 [Machine Learning for Trading](https://www.udacity.com/course/machine-learning-for-trading--ud501?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Machine Learning](https://www.udacity.com/course/ud262) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1020)",2141,116,dhawal,2016-01-04 16:00:05,https://www.reddit.com/r/learnprogramming/comments/3zfbp1/heres_a_list_of_221_free_online_programmingcs/,1,learnprogramming
lhqgnz,Just a simple piece of advice as I code more every day.,"I noticed when I first started learning to code in school, I had this assumption that people coded “fast”, as in typing brand new code from scratch quickly. I just wanted to let people know who are starting out that this isn’t always the case, and that you shouldn’t worry about it. It’s far more important to understand what you’re wanting to code before you code it. That takes time and patience. I notice I write much better, more accurate code when I am calm and take my time to think about every line I write and what it’s doing. Segmentation is key! Break EVERYTHING down to it’s simplest form, and don’t panic when you feel stupid or think you’re still on an “easy” lesson. Coding has taught me patience more than anything else in my life. If you can enjoy the ride as much or more then the actual outcome (because you should know the desired outcome intimately by that point) then you are on a good path. Happy coding!",2135,107,ConsciousCog1,2021-02-11 18:01:34,https://www.reddit.com/r/learnprogramming/comments/lhqgnz/just_a_simple_piece_of_advice_as_i_code_more/,0,learnprogramming
j8r1gh,A motivational post if you're thinking of giving up.,"A while ago I posted [about getting into the App Store](https://www.reddit.com/r/learnprogramming/comments/dr49iw/43_yrs_old_just_got_my_app_approved_for_the_apple/) at 43 years of age. 

Well.. My app got over 12,000 down loads this week.  I have spent a little while responding to some feedback that I received via the reviews. The app is free so its not life changing in any way but the feeling I got when I first saw those numbers I amazing and it was never about the money. Almost 13,000 people now use my app. I was about to give up on it and let it fade into app history, but now I have a renewed lease on keeping it updated and working on another app idea that I have.

Keep up the hard work, you never know how much success you can miss out on if you don't try.",2131,164,mokadillion,2020-10-10 19:52:10,https://www.reddit.com/r/learnprogramming/comments/j8r1gh/a_motivational_post_if_youre_thinking_of_giving_up/,0,learnprogramming
nqmah8,Has anyone here done 4 years of comp science but still feel like they don't know anything?,"So I'm not sure how common this is and this might be downvoted because it looks like I wasted my time(probably true tho) but I'm honestly curious has anyone here been in this situation and managed to get out?

During classes I was able to do everything that was required, I know my computer science concepts really well and I can do a lot of stuff with code(I did a script to automate powerpoint presentations the other day).  But now that I'm applying to internships and the like I keep getting questions like  ""What have you developed during your free time? Which technologies did you use ? What type of diagrams did you make for the server architecture ? "" 

 I'm honestly feeling really stupid right now because it seems like these 4 years have been wasted learning math and physics when I could've focused on just building stuff instead of trying to get a degree.


EDIT: So I posted this in my throwaway cuz I wasn't sure what the reaction was gonna be (I even thought I might get banned haha) but this community is really welcoming and helpful. Thanks for all the replies and the tips on getting better, I've been working on some tutorials and I guess the years I spent in Uni do help because I haven't really felt stuck anyway is just I dont have the zeal that some other people have when it comes to programming in general.  Nevertheless I hope I can join you guys in the programming workforce and keep honing my skills. 

I'm planning to move on to a masters degree at my current uni so I'll probably have 2 more years of student life before I actually need to start working so I'll try my best so build some cool stuff.

Thank you all!",2132,255,NeedTopassA,2021-06-02 13:52:38,https://www.reddit.com/r/learnprogramming/comments/nqmah8/has_anyone_here_done_4_years_of_comp_science_but/,0,learnprogramming
13m6rvg,I got my first job!!!!,"Two years ago, I didn't even know how to unzip a file.I didn't know what terminal was.I hadn't done math in 5 + years and I had never seen code in my life.

I am a guitarist, multidisciplinary artist and composer. So far from computer science. I have a bachelor's in jazz guitar. Hahaha. I went back to school in a condensed program and learned to code for the next 1.5 years.

In that time I lost the majority of my friends.Was fired from my circus job.Stopped playing music.BF broke up with me.Severe depression.

Learned JavaScript, MySql, PHP, wordpress, React, Angular, Vue, and linux. Along with Figma, photoshop and adobe premier pro.

It was so hard. Many many nights crying. Almost failed a couple of courses. I was refused all the internships my school provided (I ended up networking and finding one on my own). And after 6 months of constant applications (about 350+ CVs) I finally got a job as a fullstack web developer at an agency!!!!!! They said they liked my strange background and people skills.

Don't give up. If I can do it... literally anybody can.

Sad about the breakup... stoked about the job! LOL. I'm playing music again. Going to the gym. I have a sick standing desk setup and starting reconnecting with old friends and made some nerdy computer pals at school.  


  
UPDATE:   


My ex-bf called me back! hahahaha. So weird.

ANYWAY  thank you so much for ALL THE KIND MESSAGES. I read every comment and tried to respond to everyone.  It was an incredibly hard journey but I really learned that anybody with enough perseverance can do it. Thank you a million bajillion.",2129,208,papitas_4u,2023-05-19 20:26:55,https://www.reddit.com/r/learnprogramming/comments/13m6rvg/i_got_my_first_job/,0,learnprogramming
rtvjvm,"Self-taught, new job this year, $75k -> $135k salary","*A lot of people have been asking about the company both my old co-worker and I work for and I don't feel comfortable talking about that. I told a few people where my old co-worker got his job, but then 30 more DMs came in and it's too much. I did ask him about his bootcamp and he noted that only 2 of the 40 people that took it were able to get jobs after and him and the other person that did get jobs had self-taught experience.*

&#x200B;

I was debating whether or not to post this, but this is something I would have wanted to hear a few years ago and I'm sure someone out there would want to also. I would like to keep personally identifiable info out of this post if possible (hence the throwaway account), but I'll go over the basics at least.

I'm not going to lie to you and tell you I was working as a janitor or something and read a few books and here I am. I started off doing tech support years ago for a small company making $14 an hour, so I was already somewhat invested in tech by this point, but I had no programming knowledge beyond very basic HTML (I didn't even know what a div was). After about 8 years and numerous $1-2 dollar raises per year, I decided I was going nowhere and thought to pick up programming. As with lots of people, I had no idea where to start, but I just googled it and landed on Udemy where I took a course for $10 on c#. I initially chose c# because one of the programs I supported was written in c# and I thought I could maybe add on to it at some point. I was eased into it so well that I never felt like I had to stop and rethink my options, since all I had to do was literally watch a video and copy the code down, then go back through the section and do it a second time. Barely anything ever stuck once I learned it, but I knew that I had learned it once before and could go back into the video and find it again, then after 10 times of doing it, it started to finally stick.

Not too long after I started learning with the help of the aforementioned video, along with numerous other videos, I started to tackle a small work project related to simple text file input/parsing/output. Luckily I had the help of the company developer and he could point out some things that I was doing clearly wrong or I simply didn't know. I will say, I had a really hard time with the ideas of how arrays worked and looking back now, it seems so trivial, but that mindset has been a big trend in my learning.

Program after program, I just kept going and kept learning and it never felt like I was making any sort of incremental progress, but I was definitely being able to make better programs as I went on. I was never good enough to just look at some code and figure out what was going on unless I had just recently wrote it myself. I eventually started writing programs for our customers to make my tech support job easier for their custom systems and then even went as far as selling one to a customer for $1200 (in retrospecct, this was unethical as I should have went through the company to sell it).

I eventually rewrote out flagship software and to be honest, I expected to make a lot more money. The raises stayed the same as they were when I was doing just tech support, but I was doing a lot of work compared to what I used to do since I now had tech support and program writing and support. I waited this out a few years and the big raise I hoped for just  never happened. I was making around $75k when I finally got fed-up and decided to see what else was out there. I looked up my skills and found a local job that was paying quite a bit more, so I made up and sent a resume and did the interview. I will leave the details of the interview out unless someone asks, but it went well and I was offered a job after the 2nd interview. This was the only company I even applied to and their offer was $25k more than what I was making, so I decided to take the plunge and leave my job that I was very good at and comfortable with. 6 months into the job, I was offered a $35k raise without me having to even ask and now I had wish I had left my old job sooner.

I know I skipped over some details, but I'll be happy to answer any questions as long as it won't identify me too much.",2130,214,throwaway83243234248,2022-01-01 23:26:44,https://www.reddit.com/r/learnprogramming/comments/rtvjvm/selftaught_new_job_this_year_75k_135k_salary/,1,learnprogramming
bfew1a,I'm a self-taught developer with nearly a decade of industry experience. I went from years spent trying to make game engines with no luck to having > $100k annual salary. Here's my advice.,"**BACKGROUND:**

During my teens, I spent years trying to write game engines as a self-taught programmer with no luck.

I'm currently a professional business applications developer earning over $100k / yr. Here's a few realizations I had:

**Focus on the PROBLEM SPACE you want a solution to**

Step away from the SOLUTION SPACE until you fully understand the problem you want to solve or task you want to accomplish.

Solution-oriented items, such as pseudocode, technical design, programming, etc. should come AFTER you've acquired a grasp of what it is you actually want to do.

This is not a strict rule, but I would step back and think about what it is you are actually trying to do if you find yourself spending more than 45 minutes without making any measurable progress.

WHY: To avoid coding yourself into a hole. You *may* be able to solve problems by coding yourself around them, but why take that chance?

**Project progress should be measured by PROBLEMS SOLVED, not CODE WRITTEN**

Or perhaps even problems understood, as noted above, since a deep understanding of problems will often make crafting solutions easier.

This tip is a bit of a throwback to my game engine days. It's easy to write things like ""entity loaders"", ""input handlers"", ""collision handlers"", ""dynamic resource managers"" without ever having a game or putting graphics on the screen.

Similarly, many people seem to get stuck wondering how they actually create a project from start to finish.

Don't feel ashamed if you need to watch a Youtube video to help you out, use a prototyping or wireframing tool, whatever helps you reach your target faster.

If you like the puzzle-solving aspect of programming and feel like looking stuff up is cheating... don't worry, you can fill the gaps back in later. Better to look up how to do it right and veer yourself back on course than waste years writing a ""game engine"" that can do a million things except make people say, ""Wow, this game is fun.""

**That being said, you WILL need to learn BASIC SYNTAX, ALGORITHMS, DATA STRUCTURES, and COMMON METHODS AND PATTERNS first**

That's a bit wordy, but everyone uses programming differently. Some people see it as a collection of tools and functions they call at various times in order to build applications. Others care more about the abstract architecture behind programs, how they actually execute, etc.

You can honestly get a job programming either way. Figure out your threshold and risk tolerance (more abstract / computer-sciencey programming will cost more upfront but probably give more job security down the line) and get going.

Take some intro to programming courses and just stick through with them. I recommend something like the first three courses in UC Berkeley's computer science program, which are available online for free. That's 61A, 61B, 61C. Others have recommended Harvard CS50x.

The gist is, find ONE or just a FEW *really good* courses on programming. Stick through with them. Should require at most a few months of effort (maybe longer for multiple courses). But you will learn a *ton* that will stick with you for a long time.

If you watch ""how to"" videos on Youtube or get Udacity or Udemy courses, you will probably be able to get going even faster.

**Losing motivation? Lacking project ideas? Not sure what to do?**

Okay, do you actually want to program? Have you taken a walk outside lately? Do you have a life outside of sitting in front of the computer all day?

I mean, there are literally lists of project ideas, communities where people program together, all sorts of stuff.

I think it's both fair and healthy to re-evaluate your life frequently, enjoy a sunset, and reassure yourself whether or not you actually want to do this.

What motivates each person is going to be different, so I can't tell anyone specifically what to do. Just know that it is absolutely normal to get demotivated learning programming, to feel like a failure, struggle with simple things like getting your code to compile, etc.

Programming is an odd career. I mean, even when things go well, I spend more time debugging and validating code than I do writing it and enjoying the end result.

That kind of love-hate relationship with work isn't for everyone. Figure out what's best for you.

**PRO TIP:**

* Debugging is the #1 skill I want a developer to have. Programming who can step through code and evaluate the environment watch conditions are ""teach themselves to fish"" kind of people. When I work with a junior on my team, I am constantly reminding them to first step through things in the debugger rather than try coding themselves out of a problem. The debugger will tell you exactly what code is *actually* doing, not just what you think it's doing and then you wind up confused and making code changes until your program somehow magically works.",2121,201,None,2019-04-20 17:43:04,https://www.reddit.com/r/learnprogramming/comments/bfew1a/im_a_selftaught_developer_with_nearly_a_decade_of/,0,learnprogramming
n4cju0,34 y/o with no quals/experience got his first job,"This is just a thank you to the numerous threads over the past year that kept me sane and made me realise I wasn't making a stupid mistake.

I grafted my ass off and am now a Junior Java Developer.

It's never too late, show your drive and willingness to learn and it's just a matter of when, not if.

Thanks again. Seriously.",2122,196,Iainuk32,2021-05-04 01:13:22,https://www.reddit.com/r/learnprogramming/comments/n4cju0/34_yo_with_no_qualsexperience_got_his_first_job/,0,learnprogramming
mgmd2t,I tried for years to learn programming and never get off the ground. At the beginning of Covid I started to dabble with Game Dev and it all FINALLY clicked. Today I learned that I'll be assigned some custom scripting work at my dayjob (IT Consulting) as a direct result of what I've taught myself.,"**TL;DR:** Title.

When I tell you I tried for years... I mean YEARS. My first attempt to learn this stuff (basic ""Hello World"") was in 2010. And for a decade, about every 18 months I'd try again and the effort would always flounder.

There's a different threshold for everyone on what it means to ""get it"" but for me that feeling was absent time after time.

In an unrelated effort, I decided I wanted to learn Unity and dabble with Indie Game Development. I was originally intending to actively avoid the ""coding"" part but there just is no way around it when using Unity.

After committing to another attempt to learn this stuff the basic concepts finally started to reveal themselves. I was STUNNED. Learning finally started to happen.

I think for me, the reason is that I had something I was interested in and I could visually see my changes applied (change this number, square get bigger!) ... that really helped for some reason.

Fast forward a bit and I started to look into some more intermediate C# concepts as well as some industry best practices (SOLID Principles and all that).

I still have a lot to learn, but I was able to lightly demonstrate my skills to my day job managers and they were thrilled. Today I found out I'll be on some customer assignments that will allow me to use what I've learned. (This is very exciting for me personally as it will lead to more enjoyable work, work hours and opportunities).

I made a few videos with a bit more detail on exactly why I think I was successful (see my YouTube in my bio) but I'll also try to sum up the points here.

* **Be humble / Don't be afraid to feel dumb**\--A lot of times I would close a blog, turn off a video or put down a book not because it didn't have value but because I didn't like how dumb it made me feel. This was stupid... and getting over this really helped me.
* **Be patient ... I can't express this one enough**. You just have to trust me that if you dedicate yourself and learn INTENTIONALLY that the knowledge will accumulate over time. I now know I didn't need game development to teach myself this... I just needed to commit. (It just so happens it was EASIER to commit when I had something I cared about).
* **Don't judge yourself**. There will be days where you just don't get any work done or don't even make it your keyboard. For some reason, the guilt of this sometimes made me feel like I should just give up. I think in the past there was a voice inside me that was saying ""If you need a day off after only 4 days of giving this a go... you're not cutout for this."" And that was bullshit.

I hope this helps you guys.

EDIT: Humbled and very pleased by the response this has received! It's always good to know others have shared in the same struggles I have and I hope all of us together can grow as a result of the great discussion taking place here. Keep it up!",2118,137,Jimmy_Lib,2021-03-30 18:18:22,https://www.reddit.com/r/learnprogramming/comments/mgmd2t/i_tried_for_years_to_learn_programming_and_never/,0,learnprogramming
y6y6jl,From a Sr. Dev to new devs,"To the new developers employed or not I see a lot of the same questions and I’m going to do my best to answer some of the common questions and give some general advice on how to really set yourself apart.

**Questions**:

**Q**. How do I become a better developer?

**A**. Practice. Treat software like a sport spend some time every day working out a problem even if it’s something from leetcode or hacker rank IMO spend an hour on this daily, spend another hour on projects and another on learning when your employed the second two are easy when your still working on finding that first job you have to set this time aside and just never stop doing this. 

**Q**. What are the things an employer looks for?

**A**. Soft skills passing a coding exam is easy if you have practiced your craft this doesn’t mean you’ll pass them all as some are intentionally designed for you to fail to see how you handle it and how you go about solving challenging problems. A really good soft skill is having the right mindset having the mindset that your trying to help them (peer, client, employer etc) succeed rather than trying to get the job, gig, client etc really does wonders

**Q**. How do I overcome imposter syndrome?

**A**. Overcoming this is difficult and there’s no one size fits all because imposter syndrome is for different reasons but the best thing to do is be comfortable knowing you don’t know and be comfortable on the journey of seeking knowledge. 

Now for some advice. I’ll start with the beginnings of learning to program. 
1. anyone can learn to program but not everyone should learn to program the biggest advice I have here is to really ask yourself if you love it or not. I don’t mean every moment do you love it. I mean do you love it such that when it’s hard and frustrating do you want to keep trying even if you end up trying again tomorrow. If not honestly ask yourself what does. This doesn’t mean you shouldn’t be a dev but great devs love the craft. 
2. Now to job searching and interviewing your just as much in control as the interviewer. In fact you might as well be an interviewer your just interviewing them on why you should work there examples being do you think you’ll get along with your peers, will you enjoy the culture and can this job satisfy your goals for growth and the questions you ask your interviewer should be aimed at getting this information.
3. lastly is to seek out information and people. Don’t expect them to come to you if you want to learn about a different part of the company ask to have lunch with that person and pick their brain about what it is they do, the pain points they have and brainstorm possible solutions to their problems. 

That’s some of the best of what I got feel free to message me but preferably ask questions in the comments as someone else might have the same questions and it will bring them value to have the same answer.",2124,213,thegovortator,2022-10-18 05:43:26,https://www.reddit.com/r/learnprogramming/comments/y6y6jl/from_a_sr_dev_to_new_devs/,1,learnprogramming
uzjjbi,"After 2 years of self learning, I (30yo) got a job as a junior web developer.","**EDIT:**  
Wow, I didn't think this post would blow up like this. I'm happy to see that since I found this sub when I started learning, it has remained a positive community. 

Thank you so much to everyone who took the time to read my story!

My intentions are to pay it forward.  
I learned a lot here and if there's any questions you may have, feel free to message me and I will do my best to respond.   


**TLDR was placed at the top of the post instead of the bottom.** 

**Warning, this is a LONG ASS post.**

***TLDR : I was a blue collar job guy who self learned part time for 2 years, quit my job for a month to focus on coding and apply for jobs but landed a job based on a previous good impression I left on a stranger.***

Prior to learning, I was a high school drop out. Worked only physical labor jobs to get by.

It wasn't until I met my fiancee in early 2018 where she saw potential in me to be more than I was. She encouraged me to go to school and get a better paying job for myself.

I got into a local college and took a network systems administrator course while working full-time and graduated the following year (10 month course) with honors.

I lived my entire life up until that point thinking very little of myself. But after accomplishing this I started developing a growth mindset.

As a requirement for graduating, I was required to work in the industry as a practicum student for a local IT business for three weeks.

My job at the time did not approve of my time off request to do my work placement.

So I gave them my two weeks notice.

During my practicum, I found out very quickly that I did not want to work as a tech support or help desk agent.

This was a difficult time for me. I just left my job, I had nothing else lined up and I didn't want to pursue a career related to my education.

Luckily, I had a friend working at a local computer parts store which was looking for a sales rep. I asked if he could put in a good word for me.

I figured I would try something new and use my education as leverage to get the job. This was an ironic situation for me. Because of my blue collar background, I never thought I would ever work a customer facing job. This also seemed to be closely related to a tech support or help desk role too.. Which I didn't want to do. But I was getting desperate and the bills were coming.

I got through two interviews and was offered the job. I accepted.

I worked as a sales rep from spring 2019 into the beginning of 2020. I developed a lot of soft skills from my experience working and through mentorship from my late store manager.

The pandemic hits, the world changes. People start treating retail associates a lot worse than usual. This becomes detrimental for my mental health.

Word gets out through my extended family that I was looking for another job.

One of my aunts in another province is dating a senior software engineer. He reaches out to me and wants to get to know me.

We meet virtually and we share stories. He tells me what he does and how a lot of people in the industry are self taught.

I'm baffled by this information. Prior to this conversation, my understanding was that software engineers needed a degree and needed to be some sort of code genius to get a job. He explained that it was quite the contrary.

I'm intrigued and he explains into depth what he does. He tells me about monolithic apps, apis, rocker, etc.

I sit there nodding but I haven't got a clue what he's talking about. But I am inspired.

After our meeting, I spent the rest of the evening searching YouTube what a crud app is and how I can build one. I find a tutorial about the mern stack and use it to build a crud app. I follow it blindly. Downloading vscode, pausing the video every time a new line of code needed to be typed. Haven't got a clue what any of it is or what it means.

The following day, I eagerly message software engineer guy and tell him about it. God bless his soul for showing me enthusiasm as we do with children showing us crayon drawings of an elephant but it looks like genitalia. He encouraged me to dive deeper and learn more.

I spend the following year doing just that. Coming to this sub, lurking without an account, using all the resource I could find here and all over the internet.

I eventually come across the odin project, codecademy and freecodecamp. These were my biggest resources for learning during 2020.

I only dedicated a couple of hours a day here and there to study. My mental health from work discouraged me from studying and instead drove me to chase after dopamine inducing activities. Like playing video games.

Early 2021 comes around. I see a job posting on our companies website for an intermediate web developer position. I decide to shoot my shot.

I find out very quickly how unqualified I am for this. I am presented a technical interview written completely in c#. A language I've never touched (only been playing with HTML, CSS, javascript the triforce of courage) and every single test was about data structures and algorithms. Which I have not studied either.

I get rejected for this role but the senior dev is kind enough to answer a few questions I had about what I could do to improve.

He relates to me by telling me he is self taught as well. Tells me what resources he's used and how he got to where he is. This enlightens me but the experience discourages me.

I ended up take a lengthy break from studying. Until late summer, 2021. I had switched roles to a merchandising / shipping & receiving role in my company (back to physical labor I go) but due to an acute dietary related disease, I essentially become useless for these roles.

My manager reluctantly offers to lay me off for medical reasons or to switch me to a less physically demanding role in customer service.

I take the the latter and work the customer service job. Which surprisingly wasn't as bad for my mental health as I thought.

But at this point I had already deeply thought about my life and my position with that company. Growth was limited and I needed a change.

I get back to studying and finally work up the courage to jump into learning React. I was reluctant to learn it because I felt that I was too green in javascript because of the difficulty of the odin project (which I never finished btw).

I buy a couple of udemy courses and start building small projects but eventually abandoning them. I was stuck in a vicious cycle of trying to figure out how or what to learn.

I was stuck in the motions of progressing but not actually moving. Tutorial hell had a death grip on me and I didn't even know it.

Fall of 2021, I see a possible opportunity to leave my current job for another company with an equal pay and possibilities for growth... But it's a labor job.

I retain a casual position with the computer parts store with the intention that ill be working two jobs, work over time at the new job and ill be making bank.

One month in and I feel that I've made a horrible mistake.

I don't get offered any shifts from my customer service job. No over time is offered to me at my labor job. Although the pay is an equal wage. I forgot I was receiving a bonus at my customer service job.

Things did not go as I planned at all.

I begged for my job back, but was told it wasn't possible as they had already found replacements.

I was stuck working labor again.

Feb 2022 I've spent enough time at this company to realize two things.

1. Supply chain is terrible because of covid, causing us to have a shortage of work. We would stand around for hours waiting to do something. No one was sent home ever and no one was laid off either. We were just expected to sweep the floors or make ourselves look busy.
2. I am getting older.

As a general worker in the facility. I was cycled into a new department that required heavy lifting. I ended up straining a tendon in my elbow and got excused from work for a couple of days. Turns out the damage was decent enough to put me on light duties.

HR offers me a light duties job sitting at a computer in an isolated room where I use an automated metal pressing machine to... Press labels onto metal.

I worked with no supervision. No deadline. No nothing. Just me, the computer and unrestricted access to the internet.

I use this time to study on their computer.

Without a proper dev environment, I used things like jsfiddle, and code sandbox to build things.

I learn how to fetch data from apis and best practices for react. I spend lots of time researching how to land a job as a dev and what I need to put on my portfolio.

I spend two months in this isolated room. Alone with a computer with no supervision. I basically got paid to learn to code.

My injury is finally recovered enough to allow me to return to work and that I also got worried I might have been stretching it out too long.

I return to working physical labor.

Because I worked a shift rotation. I was often too tired to study at home after work or on the weekends. But I still tried to study when I could. It was just difficult with this job.

Apr.18.2022 It's the 1st day back on morning shift. I'm there at 7am and tired because of the shift rotation and inability to get used to the new sleeping pattern.

We are out of work again. I catch myself looking at the clock too many times and ask myself how many times am I going to keep looking at that clock. How many more days am I going to slave my life away at a job that I am miserable at.

Something clicks in my head and I decide im just going to leave. I text my fiancee that I'm heading home and not coming back. She backs my decision knowing how miserable I have been there.

I assure her that I am going to spend my time studying and applying for developer jobs.

I finally create a Reddit account but I continue lurking. Looking for resources and motivation to help me in my job hunt.

I find a particular post about a shit head guide to get a job or something like that. I read it diligently and try applying what I learned.

100s of applications sent out in the span of a month. 10s of rejections and plenty no responses.

I mix up my approach to applying between hitting a submit resume button and reaching out to people on linked in for referrals.

Finally. A few weeks prior to this event happening, a local gentleman connects with me that I am unfamiliar with. He posts here and there about his company but discreetly. I slowly realize his company is a start up.

One day he posts he is looking for a junior web developer. So I send him a dm kindly requesting if he could take a look at my resume.

He doesn't get back to me until the following week. Apologizing that it's been a crazy week for him. He asks if I used vue.js. I tell him no but I am confident in my ability to pick up a new framework in no time, now being an “experienced” react developer. (I mostly just hacked away crud apps and learned a lot about data fetching from apis)

He offers to meet with me later in the week with him and his senior developers. But makes me aware that the only reason why he's letting me skip right to this interview is because of my time at the computer parts store.

Apparently I left him an impressionable experience during my time with that company and he never forgot about it. He found me on LinkedIn when I had set my profile to open to work and saw that I had a background in web development.

I meet with him and his devs. We exchange stories. It felt more of a conversation amongst regular people. My soft skills allowed me to control much of the conversation and left them little need to ask me questions.

They ask to see some of my projects. I immediately show them my GitHub and tell them about how I left my previous job to focus on coding and let my commits act as proof of that. Dated from the day I left to the day of the interview. Almost everyday had commits.

I pull up a live demo of a full stack mern crud app I hacked up a few weeks prior. I hadn't implemented form validation for the backend. So it would crash if certain credentials weren't input properly. I had not checked prior to the interview if my backend was running.

So I essentially was showing them a useless app. I apologized and continued to explain some of the other technical challenges I had while developing the app and the solutions I had for those challenges.

They commended me for my determination and ability to solve problems despite showing them a broken app.

They tell me that they see a great growth pattern with me and offer me a job. Without hesitation, I accept.

I've now worked two full days with the team. They're a great bunch of guys and very helpful.

I've never used vue or PHP, they know this and they've still given me a chance to prove myself.

I finally got my dream job, working with a great team, and I couldn't be happier.

Moral of the story: Your soft skills might just be what ends up getting you that job, not as much your technical experience, or your portfolio.

If I can do it. You can too.",2124,186,krwnlesskev,2022-05-28 09:08:50,https://www.reddit.com/r/learnprogramming/comments/uzjjbi/after_2_years_of_self_learning_i_30yo_got_a_job/,0,learnprogramming
ejefqw,I'm thinking about running a Python course for beginners live streamed on YouTube so it can be interactive. Would you be interested?,"It's just an idea. Would you join? I've already run a course at my company so I've got all the materials and everything.

Edit:  
I made a YouTube channel, you can subscribe here:  [https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ](https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ)   
There are still an awful lot to do, please be patient, I'll post in r/learnprogramming when I'm ready.",2117,417,Odz86,2020-01-03 11:54:34,https://www.reddit.com/r/learnprogramming/comments/ejefqw/im_thinking_about_running_a_python_course_for/,0,learnprogramming
nshkfh,"I just wrote 320 lines of code in 3 hours, it felt incredible","I've never like wrote this much in a sitting so, and quite proud of myself for that 🙂",2119,209,None,2021-06-04 22:44:11,https://www.reddit.com/r/learnprogramming/comments/nshkfh/i_just_wrote_320_lines_of_code_in_3_hours_it_felt/,0,learnprogramming
arkci1,"Congratulations, /r/learnprogramming! You are subreddit of the day!",http://www.reddit.com/r/subredditoftheday/comments/arkcd7/february_17th_2019_rlearnprogramming_welcome_to/,2107,43,SROTDroid,2019-02-17 13:00:53,https://www.reddit.com/r/learnprogramming/comments/arkci1/congratulations_rlearnprogramming_you_are/,0,learnprogramming
gd7rs2,"Been feeling stuck pursuing a Computer Science degree for 2 years, and today I took the first class of Harvard CS50 on EdX. HIGHLY RECOMMEND IT!!","So I started pursuing computer science in a not so good university and the teachers aren't exactly the best. So despite my original interest in the subject, I didn't learn anything really, just on a superficial level to pass exams. I hated the feeling of not really knowing anything in depth about the subject, and especially the fact that I can't program. The feeling of despair was real. 

Today, I took the Harvard CS50 Introduction to Computer Science course on EdX. It's available for free. The teacher is so energetic and enthusiastic, and teaches really, really well. Even if you know the basics, it's still worth going through. He also gave introduction to basic concepts of programming and if you're feeling stuck in CS, I highly recommend you take the course. It'll revive your interest and actually make you want to pick up programming and tinker around with it, just because of how interesting it is. 

Happy Learning!",2109,172,HunterKiller1441,2020-05-04 08:32:50,https://www.reddit.com/r/learnprogramming/comments/gd7rs2/been_feeling_stuck_pursuing_a_computer_science/,1,learnprogramming
sodjiy,"I know this might sound ignorant, but how do you actually use GitHub?","Like the title says, I don’t know how to use GitHub, when to use GitHub, or why to use GitHub for that matter. I’ve built my first few original projects but I’ve always just done it off my hard drive, and no tutorial that I’ve done has told me to do otherwise. So when am I supposed to upload to GitHub? Is there some way to have changes automatically reflect or something?

Thanks for taking the time to read and respond.

Edit: holy shit I wrote this on my way to work expecting one or two answers. Thanks for everyone taking the time to help me and other beginners learn! I’ll work through the comments when I get home.",2112,161,moreghoststhanpeople,2022-02-09 13:25:25,https://www.reddit.com/r/learnprogramming/comments/sodjiy/i_know_this_might_sound_ignorant_but_how_do_you/,0,learnprogramming
33i1k2,40 Key Computer Science Concepts Explained In Layman’s Terms (x-post from r/interestingasfuck),"http://carlcheo.com/compsci. I thought you guys here would like this

Edit: Wow I can't believe this post made it to the front page and thanks kind stranger for the gold!",2115,125,jww1117,2015-04-22 18:09:51,https://www.reddit.com/r/learnprogramming/comments/33i1k2/40_key_computer_science_concepts_explained_in/,2,learnprogramming
tqfrif,Why is everyone so helpful to new coders?,"Been at it 6 months. Blows my mind how many offers I've had for mentorship, coaching, etc with no mention of payment or trade exchange. Not looking for feels, just trying to work out why this industry is this way in comparison to basically all others. You don't see plumbers and accountants fighting over who gets to train the new person.

--

EDIT: ""How do I get mentors?""

Short answer: I don't know, but I did try very hard on my own for a few months before I started raising some of my issues with friends and coders I met online. It probably helps really going for it on your own first because people can sense that. When help is offered, take it!

EDIT: Thanks for Silver!",2108,332,pravda23,2022-03-28 18:23:19,https://www.reddit.com/r/learnprogramming/comments/tqfrif/why_is_everyone_so_helpful_to_new_coders/,0,learnprogramming
dbvn03,"When learning, don't just type out the code...","Took me a while to realize that just typing out the code from the tutorial wasn't enough.

You gotta PLAY AROUND with it, change some things here and there and see how it affects the program.

This has helped me solidify my understanding of the concepts that the tutorials/textbooks toss at me.",2098,104,chugmycum,2019-10-01 16:12:11,https://www.reddit.com/r/learnprogramming/comments/dbvn03/when_learning_dont_just_type_out_the_code/,1,learnprogramming
pymrss,"Can someone for the love of god explain what Git and Github is like I'm 5? Everytime I go to Github, I'm lost as hell","Someone please tell me what they are, I feel like I should know at this point but am embarrassed to admit I don't.",2096,233,Severe_Sweet_862,2021-09-30 15:59:49,https://www.reddit.com/r/learnprogramming/comments/pymrss/can_someone_for_the_love_of_god_explain_what_git/,0,learnprogramming
lv3hb7,Repetition is the key to NOT burning out in the learning process,"As a fellow beginner in programming and more specifically Android development I have an observation to make.

Nothing will fry your brain quicker than reading or watching a tutorial of what looks like nonsense, remembering some of it just long enough to go to the next one. 

After 11 months of struggle I decided to follow a tutorial on a particular app. Created it, remembered nothing. Then I did it again and remembered way more than I thought. Then I tried creating my own version of that app from memory. Then I recreated it again with extra functionality. Then I looked even closer and read documentation on absolutely everything i didn't understand 100%. And now I'm creating it again, with even more functionality.  

I've learned more about programming in 3 weeks than I've learned all year. I really wish someone would have made me repeat everything again.. and again.. and again starting last year. I literally can't believe how fast I've picked up on concepts that were giving me migraines before, just by simply repeating the process again and again, seeing it work, trying to change it, seeing it fail, fixing it, adding to it etc.

Things will get exponentially harder for you if you move on to learning new things before you have a grasp on what you're learning right now. Also.. being excited to customize code I finally understand and being able to go for 10 hours is a whole lot nicer than feeling like I just got run over by a freight train after trying to keep up with a new tutorial for only an hour.",2088,98,goddammitfenton,2021-03-01 08:00:14,https://www.reddit.com/r/learnprogramming/comments/lv3hb7/repetition_is_the_key_to_not_burning_out_in_the/,0,learnprogramming
js1ard,I just want to say thank you guys,"Hi there!


In 2017, I was feeling miserable in my office job and I was considering to learn programming. I remember how the README of this sub was everything I was looking for, and the posts gave to me plenty of confidence that I could do it if I put up the time and effort.


I've been studying since then, building bigger and bigger projects and for 6 months now I've been working and as SWE in a large eCommerce Company in my country.


I just randomly remembered how I dreamed with the day that I could come here and tell you guys about it.


I really appreciate the community. Thank you!",2076,62,Vtempero,2020-11-11 04:24:54,https://www.reddit.com/r/learnprogramming/comments/js1ard/i_just_want_to_say_thank_you_guys/,0,learnprogramming
lfxwa4,How to Plan and Build a Project,"EDIT: Here is part 2: [https://www.reddit.com/r/learnprogramming/comments/ngu4mz/how\_to\_plan\_and\_build\_a\_project\_building\_it/](https://www.reddit.com/r/learnprogramming/comments/ngu4mz/how_to_plan_and_build_a_project_building_it/)

Hi everyone,

I wanted to share a process I have been using for several years to plan how to build any project whether it is a smaller personal project or a large project with a team of developers. This is also similar to the process we use on our team at work.

To get started, we create three very short and simple artifacts before starting to build a new project. A one-pager, a workflow diagram, and a task list. Depending on the size of the project, this usually takes one person a day or less to complete.

These artifacts are created in this order. First, a one-page description of the project in human terms. Anyone should be able to read this single page and know what the project will do. Next, a workflow diagram is created which is actually a combination sequence, class, and workflow diagram. Once the workflow diagram is done, a task list is created from the workflow diagram with tasks broken down into single day units of work. The task list tells us where to start and what else we will be doing each day until the project is done.

The following describes these three artifacts using a small project, a landing page service, as an example.

The source code for the project MVP built using the artifacts below is here:

[https://github.com/bigspotteddog/landing-page-service](https://github.com/bigspotteddog/landing-page-service)

## How to Write a One-Pager

A one-pager is typically a single page or less that describes the project in human terms so anyone reading it will know what the project will do. I usually just start describing the project, usually starting with the problem that needs to be solved and what I want it to do.

For a personal project, I am the one who writes the one-pager. At work, the one-pager is typically written by the product owner.

## Sample one-pager

# Landing Page Service

We have some courses and other digital products we would like to create landing pages for that will collect the email addresses of people interested in each of these products.

We would like to collect the email addresses somewhere so we can send out emails to inform our prospective customers about the products they are interested in. It would be nice if the system would automatically send a response email thanking the prospective customer for registering. That would give the customer an immediate response rather than waiting for us to notice that a new customer registered and then sending them an email manually much later.

Since we will have several digital products the emails sent to the customer should be tailored to the product they are interested in. That way, we can customize the email sent out for a particular product.

It would be nice to have the ability to create an email template for a product that way we can personalize the email with their name or other information about the product.

We have seen other email marketing systems that can send out a series of emails spaced out with a couple of days in between. We would like to be able to schedule a series of emails for a product and specify the number of days in between each email and the next one.

Some of the emails may have links to PDFs or other downloadable links.

Once a customer purchases a product, they should no longer receive sales related emails and they should now be sent product related update emails.

We would like to track where an email addresses was submitted from so we can see which marketing campaigns were successful and which ones were not and at what point the customer converted. There could be several locations with the email input form and it is possible we will add this to blog articles or other places.

A customer should be able to unsubscribe from receiving emails. If customer registers again after unsubscribing we would like that email address to be reactivated from where they left off.

## How to Create a Workflow Diagram

Next, we create a workflow diagram from the one-pager description. This workflow diagram is a combination of a sequence diagram and a class diagram done in a workflow like form. This diagram does not use strict UML, just boxes and lines with arrows or diamonds, and a bunch of text in the whitespace to describe that part of the diagram. I often number the steps or show some form of entry point so the reader knows where to start from. The boxes are classes or screen mockups, the lines with arrows indicate the direction of flow while the lines with diamonds indicate class relationships.

## Sample workflow diagram

[Sample workflow diagram](https://raw.githubusercontent.com/bigspotteddog/landing-page-service/main/landing_page_service_tasked.png)

To create this diagram, I am using Balsamiq Mockups but you can use anything that can draw boxes and lines. I used to use paper and pencil. Balsamiq has that browser widget you see on the left but it could just as well be a box that said browser in the middle of it.

I started drawing this diagram from the one-pager by going through it looking for things that have information we need. Looking at the one-pager, I picked the word ""product"" from the first paragraph and figured it should have a name and description. Reading through the next few paragraphs, I picked out the word ""email"" and drew that box. Don't start connecting lines yet, just put the boxes on the diagram on the first pass. From there I put all of the other boxes on the diagram then started grouping the boxes that should be next to each other. After that, I drew the lines and put some of the text from the one-pager on the diagram reworded to describe the program flow.

With the diagram completed, it is easier to review the system to see milestone boundaries for releases. In the diagram, we were able to trim out an MVP by simply having the receiving handler send out a response email instead of having to develop the automated part of the system to get an initial release of something functional.

Once the task breakdown step is completed (below) the tasks identified are added to the workflow diagram to show what part of the system that task builds.

## How to Create a Task Breakdown

With the workflow diagram completed, I start from the entry point and create a task list to complete that one box or line on the diagram. This could be a single task if it can be completed in a day; otherwise, it ends up being a description of what needs to be accomplished and a list of subtasks are created in single day chunks until the parent task is completely tasked out. Then it is on to the next box or line in the work flow. Sometimes, there are multiple entry points so each of those are addressed in the same manner.

In the diagram above, the entry point for the MVP starts with the web page form at step 4.

Task durations can be whatever you or your team are comfortable with. For myself, I like one day tasks because it is a day of work or less. I often have gaps in time that I am working on a personal project, so having the task done is better than trying to remember where I was a few days ago. With a team, you have pull requests to be reviewed then testing, so a single day of development will typically run about 3 days with 24-hour turnaround. One for development, one for review and any changes, one for testing.

This sample task breakdown has all of the system tasked out to give a complete example. Normally, I would only task the part that is going to be built in the current release. In this case, the MVP in blue on the diagram would be the only part tasked out or tasks 1 through 9 below.

With the task list, I know where to start and what I will be doing one task after the other until the project is done.

## Sample task breakdown

# Landing Page Service

## Allow customers to register with their email (post request to database, send email)

## Publish landing page

* Task 1: Get an application server running locally with template landing page
* Task 2: Get template landing page hosted on the Internet
* Task 3: Modify the landing page to customize it for our business
* Task 4: Modify the landing page to send a post request to a url with a fake campaign\_id and the entered email address

## Save email addresses

* Task 5: Create an email endpoint to receive the email post request
* Task 6: Create a database table to save email addresses
* Task 7: Save the email address received to the email database table

## Send email response

* Task 8: Modify the email endpoint to send a thank you response email
* Task 9: Modify the landing page to popup a thank you message

## This is now a functional MVP!

## Process emails (restful processing, database)

## Administrative pages (add authentication)

* Task 10: Create an administrative website for restricted access
* Task 11: Add authentication to the website for administrative pages
* Task 12: Add an administrative user account

## Get the list of email addresses (get request to return a list)

* Task 13: Add an endpoint that returns the list of emails
* Task 14: Add a web page that displays the list of emails

## Add products (post request to create records in the database)

* Task 15: Create a web page to post a product
* Task 16: Create a product endpoint to receive the product post request
* Task 17: Create a database table to save products
* Task 18: Save the product received to the product database table

## Add campaigns (containment database relationships)

* Task 19: Create a web page to post a campaign
* Task 20: Create a campaign endpoint to receive the campaign post request
* Task 21: Create a database table to save campaigns
* Task 22: Save the campaign received to the campaign database table

## Associate emails to products by campaign (aggregate database relationships)

* Task 23: Modify the email endpoint to look up the campaign
* Task 24: Create a database table to save the product-email associations
* Task 25: Modify the email endpoint to create the product-email association
* Task 26: Modify the email listing to show the products an email is interested in

## Email templates (using templates)

* Task 27: Create an email template to use for sending the thank you response email
* Task 28: Modify the thank you response email to use the template
* Task 29: Create a web page to post an email template
* Task 30: Create an endpoint to receive an email template
* Task 31: Create a database table to save the email template
* Task 32: Save the email template received to the email template database table
* Task 33: Use the email template to send the thank you response email

## Scheduling tasks (restful, database, sending emails)

## Schedule email (more restful)

* Task 34: Create an endpoint to receive a scheduled email
* Task 35: Create a database table to save the scheduled email
* Task 36: Create a web page to post a scheduled email
* Task 37: Save the scheduled email to the scheduled email database table

## Send scheduled emails (running scheduled tasks)

* Task 38: Create a scheduled process that sends scheduled emails
* Task 39: Fetch scheduled emails to send
* Task 40: Send emails

## Campaign flow (scheduling the next task)

* Task 41: Modify the scheduled process to schedule the next email template as a scheduled email",2074,53,bink-lynch,2021-02-09 08:14:00,https://www.reddit.com/r/learnprogramming/comments/lfxwa4/how_to_plan_and_build_a_project/,1,learnprogramming
irbb3c,Code Wars is my favourite resource as a beginner,"** Absolutely no affiliation to Code Wars. 

Just wanted to say that for me personally this website is doing so much for my learning.  Once I had got through the first few months reading books to understand the basic concepts of coding and syntax, this website gives me motivation every day to actually apply that information to problem solving and just.. code, code, code..

I'm not saying it's a substitution for also writing your own projects but the large amount of feedback and solutions which are provided mean that I'm constantly learning how to do things smarter and apply computational thinking to incrementally harder problems.  

What do you think, do you get much out of it?",2057,139,FatherOfTheSevenSeas,2020-09-12 11:59:24,https://www.reddit.com/r/learnprogramming/comments/irbb3c/code_wars_is_my_favourite_resource_as_a_beginner/,0,learnprogramming
78p6mq,"Thanks to r/learnprogramming's help, I built a simple python script that calls out my ISP every time my network speed isn't what i'm paying for!","To check it out [look here!](https://twitter.com/CmonOptus/)

[source code also](https://github.com/slavkobojanic/CmonOptus)

It essentially calls out my service provider 'Optus', because ever since I upgraded to their 'fiber' service I have gotten nothing but awful service and they have done nothing to fix their attempts for months.

Just wanted to say thank you for the help :)",2065,233,None,2017-10-25 17:20:56,https://www.reddit.com/r/learnprogramming/comments/78p6mq/thanks_to_rlearnprogrammings_help_i_built_a/,0,learnprogramming
v0xdym,Starting my coding journey aged 46.,"Hi, I just wanted to mention I'm 46 years old and I'm starting my coding journey with TOP.  Any shoutouts of encouragement will be appreciated and any advice even more. I cannot afford to pay for bootcamps so I have to use free resources and I got so many conflicting opinions I decided to just start with TOP - I'm still open to any suggestions but if I just keep reading opinions on where to start I'll never start so I decided with TOP for now. Wish me luck :)

I hope I'm doing this right I'm not very active on Reddit or any other forum so excuse me for unintentionally breaking any Reddit etiquette or rules but here's my first 'edit': I really was overwhelmed by all the amazing responses, (too many to answer) PM's, offers to help and to share resources etc. I simply wanted to share what I'm going to try at my age and I got all these good vibes - this is a great subreddit (forum?) and I'll try to check in more often and thanks again for every single contribution.",2057,307,Yellowmargarine,2022-05-30 10:40:07,https://www.reddit.com/r/learnprogramming/comments/v0xdym/starting_my_coding_journey_aged_46/,0,learnprogramming
n0jxac,"I spent three days and 15-20 hours trying to find a good TDD tutorial for front-end development in javascript for my freelance work. I finally found this, and it's amazing. Comprehensive and extremely well written.","https://outsidein.dev/about-this-guide.html

The author starts from the very beginning, with gathering client stories, and steps through a full Agile workflow, from kanban board to CI/CD to finished product, using outside-in TDD each step of the way. He talks in depth about why and how to use the outside-in approach, while integrating instead of abandoning unit tests. At the end there's a ""where to go from here"" with useful recommendations, and he's got a Gitter set up and appears to be responsive on it. It's fantastic. I can't believe it's free.",2053,54,okfine,2021-04-28 17:22:18,https://www.reddit.com/r/learnprogramming/comments/n0jxac/i_spent_three_days_and_1520_hours_trying_to_find/,0,learnprogramming
m8nmuu,All the MOOC of Helsinki University...,"So, after a little research, I found out that Helsinki's university offers a lot of MOOC (Massive Open Online Course), **they're all open, free of charge and fully available online**.They are all available at this link : [https://www.mooc.fi/](https://www.mooc.fi/)

There's a lot of courses, here is a little list of them with the links:

* [Elements of AI](https://www.elementsofai.com/) :  for everyone interested in learning what AI is. No need for knowledge about AI to take this course.
* [Building AI](https://buildingai.elementsofai.com/) :  for anyone who wants to improve their AI-related vocabulary and skills, including non-programmers and people who can program in Python.
* [Hands on computing science](https://handsonscicomp.readthedocs.io/en/latest/) :  a “map” of diverse skills that you need for scientific computing, which are often not directly taught in classes these days.
* [Java programming](https://java-programming.mooc.fi/) :  you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language.
* [Ethics of AI](https://ethics-of-ai.mooc.fi/) :  for anyone who is interested in the ethical aspects of AI,  to learn what AI ethics means, what can and can’t be done to develop AI in an ethically sustainable way.
* [Data wrangling in Python and R](https://slicendice.co.uk/) :  A mini-course for deep and lasting intuitions about transforming data in Python or R.
* [Introduction to Cyber Security](https://cybersecuritybase.mooc.fi/) :  in collaboration with F-Secure that focuses on building core knowledge and abilities related to the work of a cyber security professional.
* [Full Stack Web development](https://fullstackopen.com/en/) :  will introduce you to modern JavaScript-based web development.  Learn React, Redux, Node.js, MongoDB, GraphQL and TypeScript in one go!
* [DevOps with Docker](https://devopswithdocker.com/) : an introductory course to the world of DevOps with Docker and docker-compose. ( in partnership with  Eficode the leading DevOps company in Europe).
* [DevOps with Kubernetes](https://devopswithkubernetes.com/) :  an introductory course to Kubernetes with K3s and GKE, you will  develop software with a microservice architecture that utilizes Kubernetes to serve software that scales and deploys automatically. And learn how to manage it all. 

# All the courses are FREE !

So don't hesitate to begin whatever you want, and enjoy, also don't forget to thank Helsinki's University .. <3

Enjoy. :D",2053,77,choukri6666,2021-03-19 18:25:42,https://www.reddit.com/r/learnprogramming/comments/m8nmuu/all_the_mooc_of_helsinki_university/,1,learnprogramming
elu96x,I'm teaching C# to an absolute beginner and putting our lessons on YouTube/Live streaming on Twitch. Would you like to learn with us?,"TL DR: There is a live stream at 8:00PM CST on [Twitch](https://www.twitch.tv/themattbauer). Meet me there and we'll learn to code. There are additional resources on my [YouTube](https://www.youtube.com/channel/UCHcxGunEdEPlgq5JulJ2fYQ) channel.

&#x200B;

I have a friend that has been trying to learn to program for almost a year, but nothing has stuck. I know a lot of people on this sub have the same problem.  My goal is to help my friend, and along with him you, to break the slump and finally learn how to code. I've done tutoring in the past and I have created a lesson plan that explains codding in small chunks that build upon one another.

The plan is to make him a full stack web developer.

&#x200B;

The first step is learning C# and how to program.

I'll then be moving on to SQL.

And finally, JavaScript and React to make a webpage.

&#x200B;

My timing is a little unfortunate. I know there has been a lot of excitement for the Python tutorials. I have a very similar idea, but for C# and web development.

The first live streamed lesson will be tonight around 8:00PM CST for anyone that would like to join.

Twitch: [https://www.twitch.tv/themattbauer](https://www.twitch.tv/themattbauer)

I also have a YouTube channel where I post every Tuesday. I will be releasing edited versions of the live stream in shorter videos.

[Lesson 0: Installing Visual Studio](https://www.youtube.com/watch?v=tELYDC3Ej8s)

[Lesson 1: Variables](https://www.youtube.com/watch?v=SFGDP2RUK5o)

&#x200B;

I also have the lesson notes and tasks on my personal website [http://finalparsec.com/Blog/ViewPost/c-sharp-lesson-1](http://finalparsec.com/Blog/ViewPost/c-sharp-lesson-1). They are on GitHub as well, but this course is for complete beginners. So I don't expect you to know how to use Git.

&#x200B;

EDIT: There is also a Discord server you can join where I'll be posting schedule info and where you can discuss the lessons:

[https://discord.gg/EffvErM](https://discord.gg/EffvErM)

EDIT2: I had a great time on the stream with you all. Can't wait for the next one. The schedule is posted on Twitch and in the Discord.

[Twitch VOD Here](https://www.youtube.com/watch?v=hl_QOLehmmA)",2042,121,Final_Parsec,2020-01-08 15:35:22,https://www.reddit.com/r/learnprogramming/comments/elu96x/im_teaching_c_to_an_absolute_beginner_and_putting/,0,learnprogramming
c23ad2,I want to help you get a job,"Hello all!

I know how annoying self-promotion can be, so I apologize in advance, but this is something I'm really excited and passionate about.

&#x200B;

I've started a YouTube series and a community is coming together for the purpose of teaching software development to a level where someone could get hired as a developer. I'm going to be using C#/MS SQL/MVC, etc, and will be starting from the absolute basics, with the assumption that the ""student"" has no programming experience, but it will move pretty quickly to first get all of the basics of the languages down, source control, project management, database design, architecture, etc.

&#x200B;

Once the foundation is set, we will be working on a large-scale project. We will have multiple contributors, bug tracking, refactors, bad requirements, unit testing, etc. Many things you can expect to see in a real world scenario. It won't happen overnight, it will take several months. But my hope is that at the end, you can go to an interview with confidence that you have experience using different tools, methodologies, etc.

&#x200B;

We'll also be talking about interview tips, resume/portfolio reviews, etc.

&#x200B;

We have a few experienced developers already who have offered to help, so hopefully there will be plenty to help out if you get stuck. If anyone's interested, I'd love to help :)

&#x200B;

YouTube playlist -  [https://www.youtube.com/playlist?list=PLSGIJi1SszlHUR-VCWCUgKWQEEDIzhri7](https://www.youtube.com/playlist?list=PLSGIJi1SszlHUR-VCWCUgKWQEEDIzhri7)

Twitch -  [https://www.twitch.tv/relevantjesse](https://www.twitch.tv/relevantjesse)

Discord -  [https://discord.gg/bTbNm6V](https://www.youtube.com/redirect?event=video_description&v=77KP_254Shw&redir_token=eJ6yz0Rf7ItCST9BqhRT9axeJHB8MTU2MDk1NjM3NUAxNTYwODY5OTc1&q=https%3A%2F%2Fdiscord.gg%2FbTbNm6V)

&#x200B;

Edit: Quick thank you to all of the outpouring of support on this. It means so much to me that so many people are interested in a career in software development (or even just learning about coding!) Thank you for the platinum. So much love to all of you, and I promise to hold up my end of the deal and do everything I can to help you all succeed!",2037,113,RelevantJesse,2019-06-18 15:01:17,https://www.reddit.com/r/learnprogramming/comments/c23ad2/i_want_to_help_you_get_a_job/,1,learnprogramming
h8gokq,Frontend Web Developer Roadmap: Everything you need to know to get started,"**What is frontend web development?**

It is using code to create the visual part of a website. The content, the colours and positioning, as well as the logic that is on a page, such as submitting a form. That's frontend. The other part is 'backend', which is everything related to the database and network; the non-visual things that are going on behind the scene.

&#x200B;

**Different routes to learn web development**

***CS Degree***: The first is a degree, through either a university or college. This offers strong foundational knowledge in computer science, which can be very helpful, especially in certain areas of programming. However in my experience, this understanding of computer science is not necessary in order to get your first web development job and you can learn all of the theory and nitty gritty details of computers while on the job. Additionally, getting a degree is also a very long process, so 3-4 years, it's also extremely expensive - and the majority of it won't be focused on web development.

***Bootcamp:*** Next -3-4 month coding bootcamps (offers good structure and forces you to be fully immersed, but expensive and must be full-time)

***Self-taught:*** Finally -Self taught. What the focus of this guide is. This route offers a flexible schedule and inexpensive, and as long as you have the right set of online courses and curriculum set up for you, I believe it is the best option. Getting your first web development job is not about what certificate or degree you have. In most cases, it is a meritocracy - that is, if you have the skills to do the job, you can get the job.

&#x200B;

**How long does it take to be job ready? 4-12 months.**

Outline a timeframe which you are able to dedicate towards learning web development(3, 6 or 12 months) and create a schedule around it. This way you can track your progress and hold yourself accountable if you set a specific date to, such as finishing a specific course or start apply to jobs. Whether it is 3 or 12 months, the only thing that changes is how much time per week you are able to dedicate towards learning this craft. If it is 3 months, you'll need to be working 12+ hours per day, and for 12 months, maybe 2 hours per day. The key is coding daily, so you can immerse yourself.

It's also important to stick to one programming language, based on the job you're wanting to get. Don't get distracted by other languages. They're fantastic, but your focus needs to be on the core frontend stack. You don't want to be a Jack of all trades, but master of none. You need to get vertical proficiency, not horizontal - and you get that by practicing that one thing, daily.

**What do you need to learn?**

HTML (the content - the text, images, links), CSS(the styling - colors, positioning and responsiveness), and JavaScript(the logic for your website, when you click a submit button - what happens?). Once you have learned those three and have a strong foundation in JavaScript, then you'll be at a crossroads; React, Angular or Vue. These are JavaScript libraries and frameworks, which act as wrappers around vanilla JavaScript, giving you additional functionality that would take longer to code otherwise. It is important that the first thing you do before getting too deep into one of these, is to look on job websites (LinkedIn, Glassdoor or Indeed) and ensure that there are a lot of jobs for all of these in your area. Search for titles including ""frontend developer and frontend engineer"", as well as the words 'Angular, Vue and React' and see how many listings there are. If there is more of one of these technologies in your area, it may be better to learn that one. You'll likely find many of each. Personally I would recommend React as it is easier to learn than a full framework and there are usually a ton of jobs out there for it.

As a bonus, I would recommend looking into TypeScript and Redux. In JavaScript, you don't have to say that variable x is a number. It will infer that x = 5 is a number type. This however can sometimes lead to hard to catch bugs. TypeScript is still JavaScript, but it allows you to add strong typing to your application, where you define that variable x will be a number.

Redux is a state management library. Angular, React and Vue all have their own variations of Redux. When your application gets bigger and there are lots of different parts with their own data, Redux acts as a centralized memory for all of your different UI components to read from. It acts as a single source of truth so that everything stays organized.

Also need to be familiar with the version control technology Git (allowing you to 'save' your app at a specific point, roll back to it if necessary, and share the code online to others using Github or Bitbucket).

May also be helpful to know the basics of SASS (CSS wrapper, giving you more utility. It is still CSS, but just some extra tools which can be huge time savers). Along the way, you'll also need to learn basic terminal commands, using NPM packages and the build tool Webpack. You should also be familiar with the basics of Agile methodologies, which is a management style that a lot of development teams work in. If you're familiar with the very basics, then it will be an easier transition for you to join a dev team, and hiring managers will know that as well.

**Learning resources**

So, what resources can you use to learn all of this? I found that between YouTube and Udemy, you can learn everything required. I am going to leave a list down below with a list of Udemy courses you can pick up for $15 (when on sale). Each course is about 20-30 hours and it will teach you the required fundamentals. **I'm not affiliated with these courses and make no money on it. I simply know the instructors are excellent and am sure they are high quality courses.**

[https://www.udemy.com/course/modern-html-css-from-the-beginning/](https://www.udemy.com/course/modern-html-css-from-the-beginning/)

[https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/](https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/)

[https://www.udemy.com/course/modern-javascript-from-the-beginning/](https://www.udemy.com/course/modern-javascript-from-the-beginning/)

[https://www.udemy.com/course/complete-react-developer-zero-to-mastery/](https://www.udemy.com/course/complete-react-developer-zero-to-mastery/)

[https://www.udemy.com/course/vuejs-2-the-complete-guide/](https://www.udemy.com/course/vuejs-2-the-complete-guide/)

[https://www.udemy.com/course/the-complete-guide-to-angular-2/](https://www.udemy.com/course/the-complete-guide-to-angular-2/)

&#x200B;

**Once you've completed a these courses and have built a few projects**

After that, it is all about getting your first job. I am going to create posts (and videos) on each of these points, because they deserve a post of their own.

In short, you'll need to have a great resume which highlights your love for web development, while also emphasizing how all of your previous job experiences has guided you towards this new career path.

Have a GitHub with your own projects on it, as well as some of the work you've done while learning along the way. Build out a portfolio website which highlights the projects you've build and the skills you have. You can host your portfolio and projects for free on GitHub Pages.

Consider doing 1 or 2 freelance jobs(even if it is just for friends or family), where you're working with a real client, with a real deadline. This will be good practice for you, and will show your future employer that someone has already trusted you, and that you delivered.

Familiarize yourself with LinkedIn, Indeed and Glassdoor - and start applying for 3-5 jobs per day. I did this for an entire month, had a few interviews and then landed my first job. It can take a few weeks, or a few months - eventually you will get your first opportunity. Getting your first job is the most difficult. Once you have worked somewhere and have some experience, finding your next job will be a lot easier.

&#x200B;

**Conclusion**

On a final note, learning code is not easy. There will be roadblocks and it can be a difficult grind at times. Remember that the path you are on now is worth it and can get you to the place in your life where you really want to be, whether that is career satisfaction, ability to work from anywhere in the world, or financial freedom.

Thank you for your time! Consider checking out my YouTube channel, as I'm posting weekly now with videos specifically for frontend developers who are just starting out. [Available here](https://www.youtube.com/c/programmingwithpax).",2030,149,ProgrammingWithPax,2020-06-13 21:49:55,https://www.reddit.com/r/learnprogramming/comments/h8gokq/frontend_web_developer_roadmap_everything_you/,1,learnprogramming
fqmoi4,Learning to code is like playing WoW,"I’m 31 and I started teach myself a couple months ago and the best way I describe it is that it feels like playing World of Warcraft. My friends started a decade+ ago and I always felt like they were level 60s. I come back to find out that levels now max out at level 120. You don’t get a mount until you’re level 40 and you really don’t get to the core of the game until you’re level 20. And here I am, a level 2, and the only way to level up is to creep. Just creeping. There is no magic scroll that levels me up, I just have to keep on creeping.

Well, I’m in it to win it. Happy creeping y’all.


Edit: shout out the the level 60/120s and everyone in between who’ve been creating player guides and been power leveling newbies up!",2036,172,gryphonsoccer,2020-03-28 15:52:23,https://www.reddit.com/r/learnprogramming/comments/fqmoi4/learning_to_code_is_like_playing_wow/,1,learnprogramming
dzeza7,I made a learning guide to help people become programmers/software engineers,"I wrote a guide to help my friends get their feet as programmers/software engineers, based on my personal experience and opinions, and I figured it might be of interest to people here. Of course, I'm not the most amazing engineer out there, so please go easy! I hope this helps someone out there.

Pull requests are welcome, as is advice on which license to use and how to implement it - I'd like to keep it copy-left, I think.

*edit on 2020-09-23*

I'm updating the link here to be a bit more concise.

* Old Link (doesn't work anymore): https://electrichive.github.io/waggle-dance-programming-guide/
* New Link (now works): https://electrichive.github.io/waggledance",2033,120,opheron,2019-11-21 06:04:42,https://www.reddit.com/r/learnprogramming/comments/dzeza7/i_made_a_learning_guide_to_help_people_become/,0,learnprogramming
88jkjv,How I went from newbie to Software Engineer in 9 months while working full time,"[Here is the post](https://medium.freecodecamp.org/how-i-went-from-newbie-to-software-engineer-in-9-months-while-working-full-time-460bd8485847)

Happy to answer any questions here! :)",2022,222,austintackaberry,2018-03-31 16:00:48,https://www.reddit.com/r/learnprogramming/comments/88jkjv/how_i_went_from_newbie_to_software_engineer_in_9/,0,learnprogramming
hbvwg1,Excellent youtube courses for learning programming logic.,"This man teaches better and with more dedication than most MIT professors and has better content. 

&#x200B;

not sure why we don't see more of him here.   


[https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw/videos](https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw/videos)",2028,93,samboy_05,2020-06-19 06:52:41,https://www.reddit.com/r/learnprogramming/comments/hbvwg1/excellent_youtube_courses_for_learning/,0,learnprogramming
xkpxo0,0 to 6 figures in 9 months: you can do it too!,"This post is me sharing my story, on my main account so you all can see that I am actually a real person. 9 months ago, I graduated college with a useless degree, 60k in debt and no idea what I wanted to do with my life. I stumbled across a reddit post about 100devs, and was intrigued. I decided to give it a shot, and committed fully to the program. Today, I signed my offer letter for a 6 figure fully remote job as a frontend software engineer! Here is my advice:

&#x200B;

1. Give 100devs a shot. If your goal is to get a job, this is the program for you. Leon (the teacher) always says ""this is a jobs program, not a learn to code program"". If your goal is to get a solid, well-rounded coding education, you can't go wrong with The Odin Project. I've done several lessons from it, it's great. But if you want to get a job, it's 100devs all the way. Come watch a live class, there are literally 10-15 people a week getting jobs. It's 100% legit and I could not encourage it enough.
2. Network, network, network! This is the most important thing I have to say. It's one of the biggest things 100devs pushes for a reason. For one, social skills can be lacking in this profession and they are necessary to get and succeed in any job. Half the reason I think I got this particular job is because I was able to make the interviewers laugh, and had a great, genuine conversation with them. And also, making connections with recruiters and other SWE's is one of the best ways to get a real job. People are much more likely to hire people they know and have talked to before.
3. Don't wait! Start NOW! If you have a solid grasp of HTML/CSS/JS, you know enough to get a job. I promise. My interview was incredibly simple, they basically went through my resume, asked me about some projects, and the technical portion was incredibly basic. Companies don't want/need a coding mastermind for entry level roles, they want someone with good social skills that is teachable and willing to learn (with a good coding foundation of course). I am the kind of person that will do everything but apply to jobs just to make sure I'm ready. That is not the way to do it! I'm lucky my recruiter reached out to me on LinkedIn, which takes me to my next point...
4. LinkedIn! Use it. Make it pretty. Watch Danny Thompson videos on YouTube if you need advice/inspiration. I have recruiters reaching out to me daily even now; if you set things up right, you might not even have to do any work to get the interview!

&#x200B;

I want to reiterate, these are all things I learned from 100devs. I say this because I see a lot of hate for the program on this sub, and it has been the best thing that has ever happened to me. It is 100% free, and there's a great community on discord with like 20,000+ people, who are all the nicest and most helpful people I've ever met. The same goes for all those saying it's impossible to get a job in less than a year with no previous coding experience: false. I spent about 3-4 hours a day on average to get to this point, and quite frankly I didn't need any of the hundred hours I spent grinding Leetcode and learning a bunch of frameworks. I enjoyed the process, but it wasn't necessary. So if you're reading this, and you feel down because people are telling you you NEED to know XYZ before you can be considered a software engineer, or apply to jobs, pay them no mind. Start now! The people you meet through networking and the interviews you fail will do more for you than any 10 Leetcode problems (unless you're trying to get a FAANG job obviously). Keep your head up, and keep grinding! You got this :)

&#x200B;

Edit: For anyone saying this sounds like an ad.. fair enough lol. It's hard to sing the praises of a program without sounding like an ad unfortunately. But... it's free. Completely. What exactly would be the benefit of peddling a free program?",2017,517,jenso2k,2022-09-22 03:20:33,https://www.reddit.com/r/learnprogramming/comments/xkpxo0/0_to_6_figures_in_9_months_you_can_do_it_too/,0,learnprogramming
ieakwc,The new way to improve your coding skills while having fun and getting noticed,"A colleague at work demoed this website (not his, he just found it) to help with our recruiting efforts, plus he thought it was fun. You learn coding while programming games. There are challenges and you can see the code that others have done so you can learn from what they did as well.

Here is the link:  [https://www.codingame.com/start](https://www.codingame.com/start)

Pretty cool!

EDIT: the title \^\^\^ is their slogan on that page.

EDIT: it seems to be free for anyone. I think they are making money by charging employers.",2020,90,bink-lynch,2020-08-22 02:31:47,https://www.reddit.com/r/learnprogramming/comments/ieakwc/the_new_way_to_improve_your_coding_skills_while/,1,learnprogramming
ekz6y3,I got 2000+ upvotes and 400+ comments on my idea so there's no way back: I'll make the live streaming Python course just for you guys!,"TLDR; please subscribe if you would like to join: [https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ](https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ)

It all started with this post: [https://www.reddit.com/r/learnprogramming/comments/ejefqw/im\_thinking\_about\_running\_a\_python\_course\_for/](https://www.reddit.com/r/learnprogramming/comments/ejefqw/im_thinking_about_running_a_python_course_for/)

I have never ever posted a video online, I'm an introvert but now it’s almost a moral obligation to make this channel if there's such a high demand.

My vision is to have a course for absolute beginners that's formed by the community, I want to interact with you. If you watch a course on e.g. Udemy or subscribe for a channel that already uploaded all the lessons -> that's static material, there's no feedback from you. It would be way more powerful to make these sessions with you, answer your questions in real-time and guide you to improve yourselves session by session.

I'll set up a small website where you can sign in and I'll give you homework/challenges. You will get some input data and a task and you have to produce an output. The site will automatically check your results. Based on how all of you do these challenges I'll know your weaknesses and we can work on them.

I would like to teach you JavaScript as well. Python is awesome but creating command line applications are not so exciting (it can be!) so it would be better to create interactive web applications with Python Flask back-end. That’s powerful!

Furthermore working 10+ years at large companies in challenging environments I would also give you ""I wish I knew it before"" career advice. (I worked myself up from a small city in Hungary to the City of London where I work as a data engineer/developer/consultant at one of the largest companies globally.)

I’ll upload a video later with more details on the course but I’m still waiting for the camera tripod and the microphone.

Below you can find the link for my channel, please subscribe if you would like to join the course:[https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ](https://www.youtube.com/channel/UCuiHDgG-Vzkg4wbaCe9nczQ)",2019,124,Odz86,2020-01-06 19:49:04,https://www.reddit.com/r/learnprogramming/comments/ekz6y3/i_got_2000_upvotes_and_400_comments_on_my_idea_so/,0,learnprogramming
qw86t1,The Gods have gifted me my first IT JOB - SELF TAUGHT,"Short Story : 

-> August 2020 bought Angela Yu course.

-> February 2021 quit my job to fully learn Programming & Databases 10/16H a day on Udemy, CLI & IDE ALL ALONE.

-> November 2021 & after 5 fully finished courses (repeated some) landed my first IT JOB in programming & databases.

Conclusion : Work hard, never give up & you will impress.

Don't forget keep learning even after you got them job, never stop grinding.

❤️",2012,184,v_iHuGi,2021-11-17 20:28:11,https://www.reddit.com/r/learnprogramming/comments/qw86t1/the_gods_have_gifted_me_my_first_it_job_self/,1,learnprogramming
d5p7my,"Don't wait for passion. Learn first, and discover passion in learning.","This is more of a psychological post than one strictly related to coding. But, for you budding coders out there, I just wanna encourage you to filter out the noise that says ""to be a good coder, you have to have a passion for it"". 

If you're literally just starting out, you can't have a passion for coding. You don't know what it really is yet, or how it works, or what potential it might unlock in you. 

Make a decision to learn. And give yourself a target. Commt. Don't give up until you reach that goal. Once you've actually accomplished something, then you can assess whether you might have feel passionate about coding or not. 

I found myself feeling a lot of anxiety about learning to code, because I kept seeing posts that say you'll only learn successfully if your passionate and driven to make the necessary sacrifices to study and practice. It took me longer than it should have just to start, because I couldn't honestly claim I had a passion for it. But of course I couldn't! I'd never played around with it! 

I've been at it for about a month now, and I'm starting to feel the passion. I'll get home from work at 23h00, and I'll make sure I squeeze in at least 30 minutes. I find myself thinking about it, dreaming about it, and wondering how it might be at work in the tech I encounter in daily life. 

I think if you feel naturally inclined to thinking, analysing, using logic, and thinking abstractly, then you might just find passion in coding. 

So don't give up before you try! Push through the fog and confusion at the beginning until you start getting a sense of what it's about. But you can't wait for it. 

Passion builds through the process, it doesn't start it. 

So just start yourself! And you might just discover something about what you're actually capable of.",2009,96,couragethecurious,2019-09-17 23:36:44,https://www.reddit.com/r/learnprogramming/comments/d5p7my/dont_wait_for_passion_learn_first_and_discover/,0,learnprogramming
mbypo6,I didn’t give up on learning this time. Here’s what worked for me.,"Like many who delve into programming (from what I’ve read at least) I gave up a few times. 

I’ve only been programming for a few months now, but I’ve made more progress than ever before. I’m not saying this is the right way to go about this, it’s just the way that finally has worked for me.

This is coming from the perspective of someone who has a full time job in an unrelated field, a wife and kids, and only 1 hr maximum free time each day to study. 

-commit to coding every single day. Doesn’t matter how brief, though I did set a goal of 5 pages of a programming book daily to complete.

-do not move onto the the next 5 pages until you’ve mastered the current 5. Doesn’t matter if you’re hung up on an issue for 3 days. Google it, and think about it for days, and only once you really know the concept, move on. Yes, you’ll get stuck for days on really stupid small stuff. Suffer through it. Personally,  I view it as my mind just learning how to troubleshoot issues, and how to think about code. It’s a skill that I think needs to be developed. 

-don’t get hung up on syntax. Instead get a text editor like sublime that creates it for you as you go. Like if you open a { it’ll put a closed one next to it. Overtime, you’ll learn syntax much quicker, because you’ll get used to seeing it written properly. 

-when you think you understand a new concept, try it out in a few different ways. Don’t settle for “what works,” settle for “I understand the concept completely. 

-don’t feel like you have to memorize stuff. What you need to grasp is all the concepts, learn what they do, and then you can reference the manual for further info when you need to actually implement the concept in a project.

-don’t do too many tutorials. Personally I am on page 450 of a 700 page book, and after that I intend to do an online course, but then I’m going straight into building an application that I’ll use in my daily life. From why I read from people here, this is the way to do it. 

-don’t be so hard on yourself. There are many, many times where I’m learning and I feel totally inadequate and frankly, dumb.  But what I have complete confidence in now is the idea that with repeated exposure, it’ll sink in. Take your time, trust the process, and be kind to yourself.

-when you think you know a concept, talk about it out loud as if you’re teaching someone. If you can teach something, you know it. 

-go into this with a long term mindset. You don’t have to learn everything in 1 week, month, or a year. My nature is to jump into things 100% in life, and devote every ounce of energy to it, but that’s not the right approach here. Small, consistent wins is better.

-anytime you have some free time- eating a meal, going on a walk, turn on a YouTube video on the topic you are learning about. Hearing it taught in a different way, or many different ways, is a fast way for it to sink in. This is an especially helpful tip for days you’re feeling lazy. Everyone can muster the energy to watch a single 10 minute YouTube video. You may not think you’re gaining anything from it, but you probably are, as things slowly become more concrete. 

————————————-

EDIT: To answer some questions...

Didn't expect this reaction, glad my post helped someone. I actually posted this selfishly, b/c I thought people might chime in and provide some insights onto what I should adjust in my strategy. Luckily, they did, and here's what I've taken away from this: 

1) I shouldn't do an online course when I'm done with the book. Honestly, I think this is true. Courses are just procrastination for the eventual moment where we're faced with that ""oh sh** moment- I don't know what I'm doing.” I'm just gonna embrace that moment and start an app asap. 

2) I should ease up a bit and not require a 100% understanding of one concept before I move onto the next. I guess my point there was- it's important to know how everything in your app is working. It's super easy to just say ""oh, it works"", and move on, but I think long term, this is not the right strategy. 

The main thing I would stress to anyone learning- is the importance of repeated exposure, and learning it from multiple sources, because you don't know who you're going to click with. 

I also saw a comment about making sure this is a daily habit, even once I think I ""know"" what I'm doing. I completely agree with this. To me, it's just like learning a foreign language. Without repeated practice, you're eventually going to lose it. 

Finally, a lot of you asked the book that I am using. 

The book is called ""Head First PHP &amp; MySQL."" I chose this book for two reasons: 

1) Their HTML/CSS book was golden for me. 

2) PHP is what I chose to learn, for reasons I won't get into here. 

The book teaches concepts in a very slow pace, which for me, really allows things to sink in. It'll also spread some basic concepts over 3-5 pages, with quite a bit of redundancy, and I think that some people probably would want a faster pace, but not me. Personally, I like the slow pace, and the feeling of turning pages makes me feel like I'm making progress- and personally, I need to feel those little wins to keep going. 

Anyway- I decided to make this post because finally, I can tell that a habit has formed here, and I am completely confident that if I keep it up, I will become a (decent) developer eventually. 

Thank you for the kind comments. 

I wish everyone here success :)",2009,119,Weary_Mango_113,2021-03-24 05:54:18,https://www.reddit.com/r/learnprogramming/comments/mbypo6/i_didnt_give_up_on_learning_this_time_heres_what/,1,learnprogramming
ihae5j,Types of roles in Programming & How to find what's right for you,"Hi all, as someone with a CS degree and 2+ years experience in the industry, I thought it'd be useful to write up a guide on the different programming roles that exist currently. I believe this can be helpful to determine the tools/languages/skills to learn early on and can eventually lead to a fulfilling career. :)   
Link: [Types of Programming roles](https://medium.com/@SamihaAmin/finding-fulfillment-in-coding-jobs-which-programming-role-is-your-perfect-match-10b475beb65a?source=friends_link&sk=018923ab3f552bf092ec5864cdde8cdc)

Please let me know your thoughts!",2006,129,None,2020-08-26 23:52:23,https://www.reddit.com/r/learnprogramming/comments/ihae5j/types_of_roles_in_programming_how_to_find_whats/,0,learnprogramming
cpt58h,Python programming for beginners,"I have been working on a website for absolute beginners on python and have created tutorials on each beginner topic in detail. This course is interactive and I made it the best UX possible. I have some practice problems with solutions and some interesting codes like Guess game, time conversion, Voice-controlled assistant etc. 
I am open for any critics/suggestions. 
Visit my website at: https://www.masterpython.me",2005,131,TheImmortal071,2019-08-13 13:28:05,https://www.reddit.com/r/learnprogramming/comments/cpt58h/python_programming_for_beginners/,1,learnprogramming
hpt7h2,Trying to solve a problem for hours or more and you finally solve it,"such a  cathartic  feeling.  Just started learning python at 29 and yesterday when i finally solved a problem  by myself after hours of thinking about it i shouted fucking yes into the air

 this is probably going to be an addiction for me .....",2012,144,Zozy90,2020-07-12 11:51:36,https://www.reddit.com/r/learnprogramming/comments/hpt7h2/trying_to_solve_a_problem_for_hours_or_more_and/,1,learnprogramming
zt89po,"Today I became Senior Developer, all self-taught","After landing my first ever programming job in 2020, I just got promoted to the Senior title today.

A little background about me: I finished my bachelor's degree in business management by late 2016, ended up doing sales up until 2018 when I finally decided that programming is definitely the path I'd take until the day I die.

It took me one whole year to grasp the most basic concepts. I had difficulty understanding variables, OOP, and struggled so much with CSS. I kept going though, hoping that someday it would all click.

By mid 2019, I quit my sale job to learn programming full time. Now looking back, it was a drastic decision. I could have continued my job and still study after work, as the World was heading toward a pandemic. It was very stressful to be unemployed, with no money when 2020 started. But I'm still glad I made the choice as I was forced to use my Christmas and New Year's Eve to learn ReactJs hoping I could find a job quickly.

After New Year, I started applying for hundreds of job postings, including the company I currently work at. I was brutally rejected then, however.

By mid 2020, I was able to land my first job as a front-end developer at a local start-up company. It was such a shitty place to work. The CEO owed me and the guys I worked with months of salary, blaming it on the pandemic. The gig didn't last more than half a year. I quit and tried to survive by working on multiple freelance projects at the same time. But I was happy I got to work as a programmer, even though I made pennies.

By 2021, I re-apply for my current company, for I was impressed with the interview process and the people I interacted with. By my surprise, I was offered a fresher position. I was offered pennies still, but I figured the company had great benefits and progressive training programs. They would pay us to take courses and earn certificates without any commitments. So, I took the chance.

Fast forward 2 years later, I'm now considered the most experience member in my team, the courses and certificates I took during this time helped me gain profound knowledge, and I'm offered a Senior position with the salary that most people in my country could only dream for.  And I don't plan to just stop here.

It has been a great journey and I'm glad I made the switch I hope this story could reach someone who is still struggling to find their path as the year is about to end. Maybe just like me, as long as you stick to your goal, the next couple years would prove that you have made the right choice.",2004,233,NameNotGroot,2022-12-23 06:21:14,https://www.reddit.com/r/learnprogramming/comments/zt89po/today_i_became_senior_developer_all_selftaught/,0,learnprogramming
u0tfoc,"Tip - Stop ""half learning"" things. Put in the time and effort to master them.","I see a lot of people making the same mistake I did when I was learning - moving too fast, slapping code together that you don't fully understand.

Invest the time to _master_ the basics and it'll pay dividends down the road. 

For example, you can learn the basics of regular expressions in a few hours. My advice - study them hard for a **week or two**. This might seem like overkill, but it'll save you time (and stress) in the long run.",1998,276,neb2357,2022-04-10 23:02:41,https://www.reddit.com/r/learnprogramming/comments/u0tfoc/tip_stop_half_learning_things_put_in_the_time_and/,0,learnprogramming
8rrfps,"I just wanted to say thanks! One year ago, I started coding, and today, my app has reached 9 999 installs.","I want this to be a thank you, and an inspiration to everyone who is still struggling and starting out. It all started with a simple problem: I wanted a shortcut to the windows snipping tool. Now, you can just press Win+Shift+S, but that feature didn't exist yet. I started looking here and discovered autohotkey, which I quickly downloaded and achieved what I wanted. But this got me hooked, and I tried to achieve all kinds of things with it. At some point my friends started making requests, and I discovered that not only coding was fun, but it was really gratifying to write text that other people can then interact with. This made me start learning java to code for android.

I never thought more than a couple friends would download these apps, yet here we are. When looking at the Google Play console today, I saw this amazing number: [9 999](https://i.imgur.com/UaeAAPt.png). It's amazing to know that something I did myself is one of the apps so many people gave a shot. The app itself is a rather simple one. It allows you to display pictures and videos, but the phone is locked during that time. It comes in handy when you want to show a group of friends a few memes, but don't want them to go through your whole gallery, or texts. So you select the memes only and share them to my app. Then you lock your phone the usual way and they will appear on top of the lock screen. [Play Store Link](https://play.google.com/store/apps/details?id=com.gtp.showapicturetoyourfriend)

But of course the journey wasn't an easy one. I still remember sitting in my latin class and watching udacity videos with subtitles under my desk. Trying to understand what these 'intents' were and why there are functions if I can fit everything in onCreate(). The first time I made an app 'myself' I copied blocks of code from ""how to make a simple weather app"" and swapped out one or two lines. And after countless hours of trying, making mistakes that seemed so stupid after solving them and cursing my phone for being so complicated I had a semi-finished product, which I couldn't wait to release. So if you are doubting yourself, or thinking that you can't do this because you don't understand these weird functions and syntaxes, don't give up. This is as complicated as anything else, it just seems easy on the outside. There was no one who just booted up his PC and started coding, every developer once had to learn the basics, and they are still learning. Just give it a shot. Find something that you want to create, and then work your way there. It can take months, but at the end, you haven't just made something. You learned something, something that may come in handy in the future, and something that is marketable when looking for a job. And you can proudly say that you know a bit more how these magical devices work which you use every day. And by the way: They get even more magical after you understand a bit more about them.",1995,116,Somethingweirdhere,2018-06-17 14:39:16,https://www.reddit.com/r/learnprogramming/comments/8rrfps/i_just_wanted_to_say_thanks_one_year_ago_i/,0,learnprogramming
7u5rp3,Awesome cheat sheet for must know data structures and algorithms,I was searching for materials to review for an upcoming interview and I found the [Big-O Cheat Sheet](http://bigocheatsheet.com). It's got Big-O information and quick links to all of your basic data structures and algorithms. This is a great resource to check when you're starting a new project or preparing for an interview.,1989,57,ExplosiveTortuga,2018-01-31 00:31:16,https://www.reddit.com/r/learnprogramming/comments/7u5rp3/awesome_cheat_sheet_for_must_know_data_structures/,0,learnprogramming
wv29t7,The University of Illinois at Urbana-Champaign released the materials for its introductory CS course for free,"Link: https://www.learncs.online/

UIUC is a top 5 CS school, so I was surprised to see that no one posted this here yet. It's taught in Kotlin or Java, and has all the daily lessons students get. It also comes with debugging and programming problems, a forum, and interactive coding examples, though I don't think it has anything related to the semester project that the students all do.",1992,72,420thBattleOfIsonzo,2022-08-22 19:09:31,https://www.reddit.com/r/learnprogramming/comments/wv29t7/the_university_of_illinois_at_urbanachampaign/,0,learnprogramming
ns4ghg,Aspiring Programmers: 3 steps to crafting a stand out GitHub Profile (to help get you noticed),"Hey aspiring programmers of /learnprogramming!

As community leader for [The Fast Tracked Programmer](http://discord.com/invite/gXW4fD9D6Y) discord, I've learnt a lot about GitHub Profiles recently and I'd like to pass some of that knowledge on to those who are really struggling to land their first tech job right now.

Here's a couple of pointers to help maximise your chances of getting noticed:

1. Include a profile readme that clearly states what your programming related interests and skills are, along with what you're looking for
2. Ensure that all your projects have a readme which clearly states what it does (and why it exists)
3. Push small, incremental changes often to show that you're practising on a consistent basis \[updated based on feedback\]

If you're feeling a bit unsure about how to improve your GitHub Profile, feel free to DM me I'd be more than happy to provide feedback!",1975,116,bedrock-adam,2021-06-04 12:54:55,https://www.reddit.com/r/learnprogramming/comments/ns4ghg/aspiring_programmers_3_steps_to_crafting_a_stand/,0,learnprogramming
yanbb8,'Learning how to Google answers' - A senior software engineer told me it's a skill his juniors struggle to grasp. How true is that?,"A senior SWE told me programming is mainly learning how to google and find answers by yourself. That's after you have a grasp of the computer science and programming fundamentals. He says his juniors always ask questions that they could simply google or repetitive questions they could find by themselves.

Googling sounds easy, right? But then he says juniors often expect to find the exact answer to the problem like at the back of a textbook and that's where they struggle. It's a skill of finding similar code and then rethinking how to reapply the concept they learned to their code. That he says is where you build experience.

Curious to know how true or accurate this is?",1975,200,Lankaner,2022-10-22 13:06:42,https://www.reddit.com/r/learnprogramming/comments/yanbb8/learning_how_to_google_answers_a_senior_software/,0,learnprogramming
eelexn,List of Programming Challenge Websites,"List of Programming Challenge Websites

- https://exercism.io
- https://leetcode.com
- https://codesignal.com / https://codefights.com
- https://www.topcoder.com/challenges
- https://www.hackerrank.com
- https://www.codingame.com
- https://www.halite.io
- https://www.codewars.com
- https://projecteuler.net
- https://www.codechef.com
- https://www.hackerearth.com
- https://practity.com
- https://coderbyte.com
- https://www.codeabbey.com
- https://www.spoj.com
- https://codingbat.com
- https://dmoj.ca
- https://open.kattis.com
- https://exercism.io
- https://screeps.com
- http://rosalind.info

edit:

- https://reddit.com/r/dailyprogrammer
- https://www.geeksforgeeks.org
- https://codesignal.com
- https://perlweeklychallenge.org
- https://adventofcode.com
- https://www.dailycodingproblem.com
- http://www.4clojure.com
- https://www.thehuxley.com
- https://www.firecode.io
- https://edabit.com
- https://www.interviewbit.com/practice",1977,104,AndreVallestero,2019-12-23 14:42:07,https://www.reddit.com/r/learnprogramming/comments/eelexn/list_of_programming_challenge_websites/,0,learnprogramming
g3m5ai,Would anyone like to join a discord server for learning programming for complete beginners ?,"During my Computer Science degree I noticed a lot of places when you are trying to learn are quite unforgiving and don’t like questions when someone completely new is trying to learn. So I created my own discord server named the programming playground for all new programmers to be able to comfortably ask questions and learn together without the stress of someone thinking they are dumb hahaha 

If this isn’t allowed I apologise but I think it will be a good resource for people learning !:) 

Anyway if you are interested I can send you an invite just comment :)",1970,1331,lightlysaltedStev,2020-04-18 11:38:05,https://www.reddit.com/r/learnprogramming/comments/g3m5ai/would_anyone_like_to_join_a_discord_server_for/,0,learnprogramming
j01p1y,The Odin Project introduced a full-blown React course,"Hey @everyone! You may notice your percentage change in the JS section of TOP, this is because we introduced a full-blown React course in favor of a high level overview of the 3 main frameworks. This is thanks to aronfischer putting in a lot of work to get the meat of the content finished. 

This has been a long time coming, and we have decided that focusing on a specific framework is more important than a high level overview of many of them. We believe that understanding the concepts is more important than learning specific pieces and feel you can learn the others with minimal issues after completing the React one. Good luck all! Feel free to give criticism and feedback either here or on GitHub!

Here is a link to the new section: https://theodinproject.com/courses/javascript#react-js",1975,120,kadaxda,2020-09-26 07:29:40,https://www.reddit.com/r/learnprogramming/comments/j01p1y/the_odin_project_introduced_a_fullblown_react/,0,learnprogramming
48kk9h,The #learnprogramming IRC channel is too hostile for people to even have a chance to LEARN.,"I've kept my mouth shut about this for a while now but after tonight I'm done with it. I've had my fair share of experiences coming into the chatroom and leaving on the verge of abandoning programming forever. I don't consider myself to be ""new"" programmer, but I'm also not yet a candidate for employment at any software development company. 

Someone today just came in and asked why their program was giving them an error. Here was the offending line of code
    
        scanf(""%d"" , Choice);

Wanna know what was said to him?

""how do you expect scanf to update the int unless you give it a pointer""

Excellent response! Anyone who's ever taken an intro class in C can easily identify this issue. But guess what? The guy who was asking for help didn't know why it wasn't working. He didn't know how to interpret the error his compiler was giving him, he didn't know what an int* was or how it  was different from an int, and he didn't know how to understand the C reference guide for the scanf() function.

I began walking him through picking apart the error. I began with: ""Alright, so we know the error is at line 8. But we're not sure why. Let's figure that out."" My next step was to direct him torwards any notes he had about his scanf() function from class to guide him towards what parameters he should be using.

Wanna know what happens next? Someone tags me with the message ""wtf"" and tells me to ""stop helping"" because I don't know what a pointer is. Just for reference, I do. Keep in mind, this particular user doesn't follow up with the explanation of a pointer, or any links/references to such. He just tells me to stop helping.

This is not an isolated incident. I often find when I ask a question, people would much rather give me partial answers and tell me how bad I am for trying to solve my problem in the way that I have. If I dare follow up their answer with a question such as ""Why do it like x instead of y?"" I get told things such as ""Because that's how it is. If you disagree, than feel free to continue to write shitty code.""

This kind of attitude is NOT OKAY for an IRC chat that claims to be a channel dedicated to learning programming. It's one thing to think a question is stupid and choose to not reply to it. It's another to make the person feel like they're stupid for asking it.

I'm not suggesting we give everyone all the answers all the time. I am merely suggesting that we realize that not everyone is coming in here to ask advanced questions. Some people are going to come in and not even know why their hello world function isn't working. And while we should not have to be their personal debuggers, we need to get rid of this attitude that somehow those types of users aren't deserving of our help because we're not at that same level anymore. 

 * We should be teaching people how to interpret the esoteric compilers spit out.
 * We should be teaching people how to read and comprehend documentation about their language of choice.
 * We should be teaching people about sites like Stack Overflow and how to effectively use Google.
 * And most importantly (IMO) we should be teaching people not to be afraid to ask questions if they need help. 

**UPDATE** Seems like today quite a few people in the #learnprogramming channel have been making fun of this post. Now sounds like a good time to get a new room up and started once and for all.",1968,523,kaepor,2016-03-02 04:38:50,https://www.reddit.com/r/learnprogramming/comments/48kk9h/the_learnprogramming_irc_channel_is_too_hostile/,0,learnprogramming
w5vtbh,1 year into coding and I just got a great job,"Honestly I paid so much for a coding Bootcamp and I felt like shit after, so dumb and so unsure. But hey here I am a year later and I just got an amazing job working under a senior developer. THIS makes every thing I did, all the stress worth it. I just want to let people know how extremely excited I am I start august 9th. And wow I've never felt like I've been in the right path till now. I am 24F and have been denied so many interviews this feels like the win I deserved!!

Edit: Sorry for the not great sentence structure or details here I was ""celebrating"" when I made this LOL

Edit 2: I changed the damn F24 sorry everyone I'm not a fighter jet unfortunately... Also so many people asked I did UCLA full stack web development course",1968,294,Poudydawn,2022-07-23 05:22:31,https://www.reddit.com/r/learnprogramming/comments/w5vtbh/1_year_into_coding_and_i_just_got_a_great_job/,0,learnprogramming
jzi5pg,"Is math necessary? Well, it'll save you a whole lot of time and effort, so yes.","I had the idea to make a 'simple' rotating cube. I never learned geometry in any meaningful way and thought I'd just draw the cube and translate it degree by degree. That turned out to be a lot of work, so I started thinking ""turning is basically making a circle, so maybe I can use PI"". I started searching and turns out you also need sin and cos to calculate a fluent turn. This thing is way over my head, so I found a working example on rosetta code and I've decided to just tweak that code to add pyramids and spheres. I'm on day 3 now of a single afternoon project and haven't even done anything yet.",1964,277,abbadon420,2020-11-23 14:04:08,https://www.reddit.com/r/learnprogramming/comments/jzi5pg/is_math_necessary_well_itll_save_you_a_whole_lot/,0,learnprogramming
am5eej,"FCC released a list of 560+ free programming courses classified by Beginner, Intermediate and Advanced","Here's the link 
 https://medium.freecodecamp.org/free-online-programming-computer-science-courses-you-can-start-in-february-e621d959e64
I think it's a pretty exhaustive list and touches on almost everything in programming if you're not looking for something very specific. Enjoy! 
I never thought I could count the upvotes of this post in thousands. Thanks guys",1968,65,life_never_stops_97,2019-02-01 18:53:47,https://www.reddit.com/r/learnprogramming/comments/am5eej/fcc_released_a_list_of_560_free_programming/,0,learnprogramming
g19d92,The Learning Loop is Dangerous,"As programmers we all know what are loops.This post is about a special type of loop.Almost every newbie trying to learn programming will come across this phase in his programming pathway.
Yes the learning loop is dangerous try not to get stuck in it.

Yes we all love to learn new stuff in tech Yeah I agree its cool.But binging online courses like Netflix series is not the way to do it.It is not going to be beneficial for you.

Once you learned programming language.You are no longer a newbie.You can and you should start building something immediately.Maybe a simple application to calculate something.Or just use your skills to light some LEDs using an arduino. 

You should take your time and build something with the knowledge you gained before moving on to a new technology.Find your interests stay focused.

I've seen people taking courses over and over ML,React,Flutter,Django .I had a friend who's hobby is completing online courses.
But at the end of the day He had learnt something about those technology but he have no practical knowledge in it.He hasn't built anything in it.
Never be like him.

Learn something build something.
Learn and Build that should be your slogan as a Newbie programmer.",1959,194,Incrypto123,2020-04-14 17:03:34,https://www.reddit.com/r/learnprogramming/comments/g19d92/the_learning_loop_is_dangerous/,0,learnprogramming
hrntil,"After many failed attempts at picking up programming, this is the most consistent I've been so far and the main that thing I've changed is that I'm now taking my time.","The main difference between what I was doing before and what I am doing now, is that I'm taking my time.

#Take your time!!

The last 3 or 4 times I've always been in a massive hurry to learn as much as I can in as little time as possible.  I would sign up for CS50 or some other programming course and watch 6 videos back to back and take as much notes as possible, thinking I was actually learning this stuff.  I thought ""If I finish this beginner course, I can move on to an intermediate course, and then an expert course!!!  I'll be able to do ``input(""Type goal here "")`` in no time!!"".

I have had to be realistic with myself.  I have done the same thing multiple times and failed each time *because I am not a prodigy*.  Can you teach yourself calculus in a week?  All of computer science?  Probably not.  Learning an entire programming language is not going to happen.

I am in MITs introduction to python and computer science course (again) and I'm actually farther along with it than I ever have been, I have absorbed a lot more information by doing the problem sets maybe the day after I watch the video lecture.  I also pause the video a lot so the full 45 minute lecture maybe takes up about an hour and a half of my time.  When I pause the video, I'm looking at the code that comes with the lecture notes.  I'm maybe editing it a bit to make it do something else.  Which brings me to my next point.

#Play around with what you've learned.

This also comes under taking your time.  Yes, at first it *looks* like you can ""only"" do some basic mathematics and maybe print some stuff out, get some input etc.  Maybe you might think to yourself, ""this stuff is too basic, I can't do anything with this"".  You can.  Take your time and get creative.  Perhaps read a little bit of documentation (yes, documentation looks a bit daunting at first.  You'll have to take your time with that too.)

Nothing else to say here.

#If you're on a course, don't get tunnel vision.

I have done this every single time.  It's boring and overwhelming as fuck.  There's a lot of new information to learn on beginner courses, so I think it's normal to feel bad about not understanding something the first time (fucking for loops!!) don't just rewatch or reread the same content and wait for an epiphany.  Use it to learn it. 

There are beginner level exercises out there on the internet, which you may feel bad about not knowing how to do because you just watched a video on it, it's all good.  Just give it a go.  I personally have liked ProjectEuler's problems.  I had to sleep on the second problem only to realise I had a variable where it shouldn't have been.  I honestly needed to look up the solution for the first one because I USED A FOR LOOP WRONG.  I had to *use* the loop to learn how to *actually* use it.  Seriously, you need to practice.

#Dont feel guilty for taking time out to do something else!!!

Self explanatory, although I think it's normal to feel guilty.  The thing is, you're not a ``input(""Your favourite RPG"")`` character with infinite energy.  Take a damn break.  Don't feel guilty about feeling guilty!!!!!!


Edit:  For some practice (outside of [MIT's free course](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/) problem sets)I've been using these two websites.

[ProjectEuler](http://ProjectEueler.net)

[Pynative](http://Pynative.com) (Python) This helped a lot for ``for`` loops.

Edit 2:  Would be really cool if anyone posted their websites with exercises for other languages!",1959,161,G-Fieri,2020-07-15 13:45:20,https://www.reddit.com/r/learnprogramming/comments/hrntil/after_many_failed_attempts_at_picking_up/,0,learnprogramming
gol5bi,"Failed my first interview, heck yea.","Today i had my first interview, it was pretty basic asked me about C programming, i was literally shaking from emotions and than he told me to write some code and i even forgot how to type int :)

how can i reduce the stress and emotions from interviews? 

And how was your first interview?",1957,336,None,2020-05-22 15:13:20,https://www.reddit.com/r/learnprogramming/comments/gol5bi/failed_my_first_interview_heck_yea/,0,learnprogramming
jywdp4,Machine Learning & Algorithms Courses for FREE from Coursera. They have made some of their Machine Learning Courses FREE due to COVID-19 and you can earn a Certificate for FREE until 12/31/20.,"Offer is subject to change and valid through 12/31/20. Discount applied at   checkout. One-time use only. Offer valid until 12/31/20, while supplies last. [**Main Article**](https://exploreroftruth.medium.com/earn-coursera-certificates-for-free-on-some-programming-courses-during-the-coronavirus-epidemic-e5c468c912b7)

**Share with everyone who don't know. Here are courses:**

1. Getting Started with AWS Machine Learning ( offered by Amazon Web Services)
2. Machine Learning for Business Professionals (offered by Google Cloud)
3. Algorithms, Part I (Offered by Princeton University)
4. Algorithms, Part II (Offered by Princeton University)
5. Computer Science: Algorithms, Theory, and Machines(Offered by Princeton University)
6. Data Science Math Skills (offered by Duke University)
7. Cloud Computing Basics (Cloud 101). Offered by “LearnQuest”
8. Google Cloud Platform Fundamentals for AWS Professionals (offered by Google Cloud)

**Happy Learning!**",1956,117,microcontroller_tuto,2020-11-22 14:21:29,https://www.reddit.com/r/learnprogramming/comments/jywdp4/machine_learning_algorithms_courses_for_free_from/,0,learnprogramming
4npim9,10 Coding practices which allows NASA to write millions of lines of code with handful of errors,"Coding pactices by NASA:

1.	Restrict all code to very simple control flow constructs – do not use goto statements, setjmp or longjmp constructs, and direct or indirect recursion.
2.	All loops must have a fixed upper-bound. It must be trivially possible for a checking tool to prove statically that a preset upper-bound on the number of iterations of a loop cannot be exceeded. If the loop-bound cannot be proven statically, the rule is considered violated.
3.	Do not use dynamic memory allocation after initialization.
4.	No function should be longer than what can be printed on a single sheet of paper in a standard reference format with one line per statement and one line per declaration. Typically, this means no more than about 60 lines of code per function. 
5.	The assertion density of the code should average to a minimum of two assertions per function. Assertions are used to check for anomalous conditions that should never happen in real-life executions. Assertions must always be side-effect free and should be defined as Boolean tests. When an assertion fails, an explicit recovery action must be taken, e.g., by returning an error condition to the caller of the function that executes the failing assertion. Any assertion for which a static checking tool can prove that it can never fail or never hold violates this rule (I.e., it is not possible to satisfy the rule by adding unhelpful “assert(true)” statements).
6.	Data objects must be declared at the smallest possible level of scope.
7.	The return value of non-void functions must be checked by each calling function, and the validity of parameters must be checked inside each function.
8.	The use of the preprocessor must be limited to the inclusion of header files and simple macro definitions. Token pasting, variable argument lists (ellipses), and recursive macro calls are not allowed. All macros must expand into complete syntactic units. The use of conditional compilation directives is often also dubious, but cannot always be avoided. This means that there should rarely be justification for more than one or two conditional compilation directives even in large software development efforts, beyond the standard boilerplate that avoids multiple inclusion of the same header file. Each such use should be flagged by a tool-based checker and justified in the code.
9.	The use of pointers should be restricted. Specifically, no more than one level of dereferencing is allowed. Pointer dereference operations may not be hidden in macro definitions or inside typedef declarations. Function pointers are not permitted.
10.	All code must be compiled, from the first day of development, with all compiler warnings enabled at the compiler’s most pedantic setting. All code must compile with these setting without any warnings. All code must be checked daily with at least one, but preferably more than one, state-of-the-art static source code analyzer and should pass the analyses with zero warnings.


These rules will be like seatbelts for us if we use them, a little uncomfortable at first but an essential preparation equipment in the long run.

Edit: This is a summary of many of the coding standards employed by JPL (thanks to /u/wafflemanpro for pointing this out). Here is a list of all of them, http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf",1955,186,RageAdi,2016-06-12 08:49:24,https://www.reddit.com/r/learnprogramming/comments/4npim9/10_coding_practices_which_allows_nasa_to_write/,0,learnprogramming
ig0yme,TIL I’m literally not good enough,"I’m a software development student about to graduate from a two year college in September. I have a good GPA (3.81), and I’m currently in an Internship(Angular front end, Java backend). Today, both my internship teacher and my internship boss told me I’m not good enough for entry level developer positions in my area. Apparently I don’t produce enough code, and when I do “I struggle to translate theory into practical output”. 

For some background, I started in college with 0 experience in programming. I didn’t know what an if statement was. I didn’t know what github was, or what an “agile environment” meant. I couldn’t navigate CLI or ssh into a server. I didn’t know how to query an SQL server or create a virtual machine. In two years, I’ve made websites from scratch (HTML5 & CSS), developed Android applications, created databases and managed them in VMs, passed Data Structures & Algorithms (with an A-!), made Wordpress plugins in PHP, passed CISCO networking essentials, made a freakn 2D game in Unity, plus MORE, and I’m STILL not good enough. 

What the hell does it take to get into this industry? I dropped everything and moved in with my wife’s parents to attend college. I lived in a utility closest, worked a part time job, had my first child (oh god the lack of sleep), and still got up at 7am everyday to go to school and maintain good grades. I need to start making money once I graduate, as I have to help provide for my family. 

I don’t want to give up. I’m going to keep putting one foot in front of the other and eventually, hopefully, I’ll get a job. But today, I’m really not feeling that. Today, my instructors just told me I don’t have the skills needed to get an entry level development job.",1948,366,GhettoGifGuy,2020-08-24 23:54:00,https://www.reddit.com/r/learnprogramming/comments/ig0yme/til_im_literally_not_good_enough/,0,learnprogramming
jhu7z1,I just failed my first coding interview and realized I need a deeper understanding of algorithms. Which resources would you recommend?,"**TLDR:** Tittle + should I focus on basic algorithms resources or go straight for interview focused stuff?

&#x200B;

*Background: I'm a civil engineer transitioning to IT, I finished some intro courses + a web dev bootcamp-style course. My career plan right now involves looking for a junior position as a developer and eventually start a MS in computer science or software engineering, while also getting on the job experience.*

On Friday I had my first programming assessment sent to me. I had 2.5hs to solve 2 problems using Python, one involving string manipulation and the other defining a class with several methods. The first one was super simple, but took me way too long. I couldn't finish the second one, in part because I wasn't very familiar with Python's class syntax and in part because I'm still not very comfortable with OOP. If I had an extra hour, I could have finished it, but it wasn't the case.

I'm very proud of getting as far as I did, but I realized I don't have a good grasp of algorithms fundamentals and that I'm definitely lacking practice in these time-constrained exercises.

In general I'm the kind of person that likes to learn fundamentals before application. So I ask you guys: Do you think I should focus on basic algorithms bibliography or should I go straight to stuff like ""Cracking the Coding Interview""? In any case, what books/courses/etc. would you recommend for someone in my situation?",1943,147,Urgokk,2020-10-25 14:30:02,https://www.reddit.com/r/learnprogramming/comments/jhu7z1/i_just_failed_my_first_coding_interview_and/,0,learnprogramming
gk7usb,Learn to code TODAY! (Seriously),"Hi guys, I'd like to share my story with coding and when it really started. I know a lot of you guys is having the same struggles I did and I hope this helps.

At first, I didn't understand how some letters on a screen became a whole web store system. It was mystical to me. After some researches, I was told to learn HTML/CSS/SQL/JS/PHP. The starter kit for web development.

So I did, started to learn theories, syntax and when I (thought) finished, I was hopeless. Thinking: ""ok, so now I know what is these things and how it works, but how the hell am I supposed to mix it up together and build something meaningful?"".

I was stuck. I quit for some time, I didn't knew what was the next step, and searching on the web it looked to me that was a jump from the basics to building complex systems, and I was too dumb for this.

But then, the day that made me a true programmer became! And this is the tip that I thought it might help you guys:

To become a programmer, you have to program. Oh yeah, you already read this on other posts, but it sounds pretentious, right? Like, shut up dude, you already code, it's easy for you to say. Yes, I agree.

The thing is, besides learning syntax and other stuff, do an analysis of yourself.  Where are you now? What you already know? What are the things you always see around but have no clue what it is? OOP? API? AWS? What is this? Take notes, search what it is, just to clear your mind. If you have all this information that is kinda blank on your head, it's just overwhelming you. Sounds more difficult than it actually is.

Then when you know what is your level at programming, start taking your own challenges, compatible to that level. Example: I was trying to create a CRUD (Create/Read/Update/Delete) system in Java with SQL, I tried to jump steps and went to youtube tutorials without knowing the basic syntax of both languages, it was frustrating. Then I got back to my ""make-a-sum"" console programs. After I learned the basics, I finally was able to understand that tutorials properly and then when I watched it again, became natural. It has a lot of things that I didn't knew, but having a solid background for what the tutor was speaking, I was able to study it afterwards. 

So, to program: program (but not any or every challenge you found on the internet, but your own challenges, what you are capable to do). 

The more I study the more I see is an endless road. The only point you can say: ""Ok, now I'm am a programmer!"" is when you take challenges and don't give up on them, and make it works. No matter how small is your project.

Search for the zone where is always slightly difficult.

You can become a programmer today, maybe a bad one, but you can start it today! Now, go build something with what you are capable, you'll be a great programmer soon. :)",1949,144,None,2020-05-15 12:04:07,https://www.reddit.com/r/learnprogramming/comments/gk7usb/learn_to_code_today_seriously/,0,learnprogramming
o8nhpd,"Does anybody else spend hours trying to implement something, and later look back and wonder why it took you so long ""just to do that?""","Might be hindsight bias, but I've noticed that it takes a bit of a blow on my self-esteem more than I thought. I'd literally spend hours trying to implement a small block of code that's supposed to do one thing, find a solution, spend some more time debugging it, and later I'd look at it and wonder ""why the f*ck did this take so long?""",1946,126,Seankala,2021-06-27 01:32:17,https://www.reddit.com/r/learnprogramming/comments/o8nhpd/does_anybody_else_spend_hours_trying_to_implement/,0,learnprogramming
l4mrke,"As a self learner, I feel like every waking moment spent not coding is setting me back. How do I be kinder to myself and take a more realistic approach?","I feel like everyday I’m not coding I’m just ending up further and further behind those that studied CS or younger than me and just starting their journey.

Sometimes I even find myself getting frustrated at loved ones for wanting to spend time with me when I feel guilty that time could be spent bettering my future.

Any seniors or other learners dealt with this and could offer some advice?",1945,242,None,2021-01-25 12:18:22,https://www.reddit.com/r/learnprogramming/comments/l4mrke/as_a_self_learner_i_feel_like_every_waking_moment/,0,learnprogramming
wsp1bm,"Learning to code is one thing, learning to complete a project is a totally different beast","One of the things I struggled with when I began coding was starting a million projects and finishing exactly zero of them. Tell me if this sounds familiar:

1. Get awesome idea for new project
2. Start coding immediately, hard and fast
3. Get something that starts resembling parts of what you want to make
4. Not know how to continue or what else to add to it
5. Get frustrated trying to add more things because now it's all a gigantic mess of sloppy code and throwaway implementation
6. Forget about it forever and ever because you're genuinely terrified to touch it.

Right? Well that's okay, that's how you learn to become focused and to figure out what's important, what isn't and how to improve. The key to breaking that chain is learning to apply some project management principals to your work that will make you as questions such as ""Do I really need this bit of functionality?"" ""Is this really what I should be doing right now?"" ""How can I simplify this to make sure it actually sees the light of day?""

Project management methodologies, especially agile ones, are your friend here. Most companies use them in their day to day operations because it allows teams and projects to remain focused and code to remain clean. Now you're probably not a team, but you're also not a god, and keeping track of everything you need to do and in which order, in your head, leads to the cycle above every time you're making something that takes longer than a couple of days.

To kill that cycle, [I've made this handy tutorial](https://www.youtube.com/watch?v=gLoMaCZ6BIE) on how to manage any kind of personal project (not just dev projects) using Kanban. But, because I'm not tone-deaf, I made it in plain English without using any industry-specific terms so that anyone with zero experience can follow along. It's a very simplified version intended just for one individual, or at most a team of up to 3. Give it a shot, and I'm confident that you'll find building and tracking your personal projects a LOT more pleasant and effective with a much higher completion rate.

Edit: wow did not expect this kind of reception. Thank you everyone for all your comments. Unfortunately I can't reply to your comments as I'm out on a mini vacation but know that I've read all of them and there are a lot of valid points in there. A good day to you all!",1938,69,taranasus,2022-08-19 21:09:20,https://www.reddit.com/r/learnprogramming/comments/wsp1bm/learning_to_code_is_one_thing_learning_to/,0,learnprogramming
o88m7y,"At 24, after 3 years of being self-taught, I launched my first big project - GamePassCompare, a website to compare between gaming subscriptions. Here's what I learned from 6 months of a solo project, and some tips.","Hi,

I am self-taught for 3 years now, and it's been quite a journey, I still remember my first question on this sub, it was ""what the hell is 'return' and why we need it"".

This week I launched my first big project [GamePassCompare.com](https://www.GamePassCompare.com), it's a web service to compare different gaming subscriptions easily, but I don't want to talk about this project, I want to focus more on the development part.

1. **It takes time!** \- Working on a solo project IS HARD, it's actually nothing like watching a tutorial. Once no one lays the steps for you it's 100 times harder. Making the decisions yourself changes everything, it took me 3 working days to figure out the color theme. Days to decide on margins, formatting, phrasing, and whatnot. When I got the idea for the website, I estimate it for 2 months of work, it took me 6 and a half.
2. **Don't cling to a mistake just because you spend a lot of time making it** \- You gonna need to admit a mistake at some point, as I said before - once no one lays the step for you, it won't go out smooth, mistakes will be made, and fixing them is going to take a lot of time, BUT YOU HAVE TO DO IT. During the time of creating this project, I had to re-structure the database 4 times to fit my needs, destroy the design and start over, realize that a feature I worked on for weeks is actually useless, and shred it. But you gotta admit the mistake and move on.
3. **Take a break if you need to!** \- I had 3 burnouts and a lot of breakdowns during these 6 months because I pushed myself too far. Coding is hard, coding dreams are harder. You gotta learn when to stop and know your limit. Sometimes it's better to stop for a week, or even 2, and come back fresh to keep working. Things will be more clear, my mom calls it ""Getting down to get back up stronger"" (free translation).  Sometimes I was stuck on something for weeks, got back after a break, and solved it in 5 minutes.
4. **Stackoverflow won't solve all your problems** \- I went from asking what 'return' is, and getting my account blocked for noob questions there to hoping my question will be closed in 5 minutes because some StackOverflow genius/jerk will send a link to my exact question being answered 17 years ago. But because it wasn't that simple I had to figure it out myself after getting no answers. But I did it, and learned that everything is possible if you sit on it for long enough, willing to get your hands dirty, and also try to be creative.
5. **If you can't design, hire someone ASAP** \- We see so many talented people on the internet and come to think it's easy to find a good freelancer for your work. But it's not! If you would look at the donation page on my website you will see that I promise a t-shirt with ""Coming soon"", I am actually working on the designs for 2 months now. Finding the best freelancer for the job you need is HARD, I was very lucky to find the very talented u/SeanNemo to create the logo for my website in less than a week. But don't wait with it till the end, the sooner you start looking, the better.
6. **Do something you love** \-  Steve Jobs once said that the reason the iPod was so good was that the engineers volunteered to work overtime to make it, because they all wanted one for themselves, so they wanted it to be the best. sure, Netflix mockups are nice, but it's hard to be motivated to create something like that. What pushed me through the burnouts is that I wanted to use the website I was making.

&#x200B;

I hope these tips will help you moving forward, good luck :)",1941,93,xSypRo,2021-06-26 10:57:53,https://www.reddit.com/r/learnprogramming/comments/o88m7y/at_24_after_3_years_of_being_selftaught_i/,0,learnprogramming
dpe57o,"As someone who's about 3 months into their first dev job, here's a handful of tips that would've been useful to know before starting","(Note: this isn't gonna be any kind of interview advice, I suck at those big time)

I just recently started my first dev job about 3 months ago as a backend .NET developer. The company is pretty run of the mill, nothing crazy like Google or anything. I wanted to just share a couple tips as I think my perspective as a new guy could be helpful for many of you that will similarly be in my shoes at some point.

* You won't know shit the first day. Your boss will probably say a bunch of terminology that will make absolutely no sense to you. This is the part where you need to ask a lot of questions. More than likely, your boss will not expect you to be a pro at understanding a big complicated system day one or even month one. Don't be afraid to say you don't know something. You will most likely feel very stressed these weeks when you feel like you know nothing.
* Following on the above point, before working a dev job I never even *thought* about how much you really need to know about the field your code relates to. For example, my company makes insurance software. As a relatively fresh college grad, I basically know zero about insurance. And surprise surprise, you need to know what the hell you're doing in order to code it properly. So I've spent quite a good chunk of my time just trying to pick apart how insurance works and writing down insurance terminology.
* **Know how to debug code.** This is probably the biggest skill I didn't really pay attention to before getting a job. Every professor just said ""know how to read other people's code,"" but that's really hard to quantify. Literally 99% of your tasks in a job, you will have to step through the code with the debugger to understand how it works before you make any changes. I had never even stepped through code before starting this job, because I was so used to my personal projects where I know everything about the code. When working with Visual Studio, you *will* use breakpoints, and you *will* add watches on variables. I seriously vastly underestimated how important debugging is.

When coding projects on my free time, I liked to think of programming as closer to art. You're putting a lot of time and effort into creating something unique. It takes a lot of the same thought processes that go into drawing or designing. Should this go here? Can this be done better? I think this will work better.

When coding at work, I think it's closer to detective work than art. You're not painting a beautiful app on your canvas, the app already exists. You're a problem solver. You're receiving tasks pointing you in the right direction of the issue, but it's your job to investigate and find the culprit. You're not creating, you're fixing and updating.

Let me know if you have any other questions, I'd be happy to answer

Edit: words",1934,123,ChuggingDadsCum,2019-10-30 22:35:48,https://www.reddit.com/r/learnprogramming/comments/dpe57o/as_someone_whos_about_3_months_into_their_first/,1,learnprogramming
8gbbsz,MIT lecturer Ana Bell discusses the best books to learn computer science and programming (2018).,"Ana Bell, lecturer in the Electrical Engineering and Computer Science Department at the Massachusetts Institute of Technology, chooses the best books to learn computer science and programming. 

https://fivebooks.com/best-books/programming-computer-science-ana-bell/",1932,117,FiveBooks,2018-05-01 19:48:07,https://www.reddit.com/r/learnprogramming/comments/8gbbsz/mit_lecturer_ana_bell_discusses_the_best_books_to/,0,learnprogramming
m4u9v7,A collection of CS course notes - for free :),"Sorry, deleted the previous post but here's the link if anyone's interested: [https://sarvasvarora.me/misc/course-notes](https://sarvasvarora.me/misc/course-notes)

If someone's wondering why I removed them earlier,,, some student in my class warned me that I might be breaching code of conduct as a student. I wanted to make sure if everything's fine and turns out it is because for one, I'm not selling these and secondly, I don't claim the slides material (wherever it is) as mine.

If anyone still has any problem with it, lmk and I'll remove :)",1929,64,yet_another_cs_dude,2021-03-14 12:17:12,https://www.reddit.com/r/learnprogramming/comments/m4u9v7/a_collection_of_cs_course_notes_for_free/,0,learnprogramming
vnexu6,Is it okay to copy snippets of code and tweak them?,"i would like to ask about something that i feel guilty of doing, instead of wasting like 30 mins creating say a navbar from scratch and constanly searching about tiny details, i just take a whatever already available navbar that exists on the internet and tweak it the way i feel it and it takes me like 3 mins in total for the same result, is this considered cheating or does companies allow this?",1921,395,None,2022-06-29 12:43:44,https://www.reddit.com/r/learnprogramming/comments/vnexu6/is_it_okay_to_copy_snippets_of_code_and_tweak_them/,0,learnprogramming
lmi0zp,From a Beginner to Beginners: From print('Hello World!') to Tutorial Hell to Getting my First Job!,"Hello all,

It finally happened! I became employed as a Data Engineer after self studying Python for around 8 months and SQL for around a month or two.  For reference, I'm based in the UK and above the age of 30.

I lost my job as a traditional scientist around August last year and had been at the mercy of a company doing data science/engineering incorrectly (overfitted models, zero subject matter expertise, dog shit data).  So, I took it upon myself to teach myself and prove they were doing it wrong.  Little did I know, I ended up discovering something I really enjoyed - making sure everybody is getting the right data.

After around 2 months of applying for jobs, I was contacted out of the blue by a company's HR department which was local who were looking for somebody to join their team as a Data Engineer.  This was pretty much nothing to do with my skill level and was 99% luck and being in the right place at the right time as the technical questions weren't as hard as other roles and the role itself is very new in the company.  I say nothing to do with my skill level because I really don't think I'm qualified for this job yet.  I also happened to be interested in a field which is popping off at the moment, so entering a market into a huge demand definitely contributes to success.

I had a total of 5 interviews:

* Data Engineer (webscraping)
 
* Python Developer/Consultant (I still don't really know what this job is, I took the interview because it was an interview)

* Test Automation Engineer

* Data Engineer (business intelligence)

* Data Engineer (financial services)

All of that aside, I think it's worth going over some stuff which might useful.  A lot of the skills in the learn programming subreddits are often a technical discussion and help.  Even from a science background there's a lot of similarities in the job search - the assumption good skills alone are enough to land the job.  Unfortunately, due to an influx of anybody being able to call themselves a recruiter, job hunting is definitely another skill that all programmers looking to get their job should learn in order to navigate getting strong armed into less than desirable positions for less than desirable conditions.

I was unemployed back in the tail end of the 2008 financial crash as well and, over time, I realised having the experience of job hunting and dealing with job specs, interviews, offers, recruiters was extremely helpful.  I completely understand that a lot of people in here may have never been in full time employment before so I thought it'd be useful to highlight what's still relevant:

**Culture, Prospects, Location, Money**

I would say these are pretty much the things that should drive your decision to get a job.

* You want to work with fun, decent people in a place which don't think you're a robot.

* You want a job which can either take you places at that company or kick start your career.

* It has to be somewhere you don't hate living.

* You want to get paid fairly.

Of course, not everything is set in stone and it's very much recommended to decide what you skimp on.  I'll echo something I learnt in science - offering to be paid less than the market value might help you now, but really hurts the industry as a whole.  Know your worth and stick to it.

For reference, here's the lowdown on a job I turned down vs the job I accepted:

Turned down:

* Recruiter constantly asked me the same questions over and over again (is the location okay because you live far away and are you sure you have experience using Python to which I answered yes)

* I did 3 interviews for them.  First stage was a classic verbal interview where the director literally left on the minute of the time we had allocated for the interview, cutting me off mid sentence.  Second stage was a technical task which I received feedback of ""not being great"" (this was because it was below the level of a developer.  At no point did I say, or suggest, I was at a developer level.  I was also applying for a junior level role) although invited me back for a third interview.  Third interview was a series of quick fire technical questions with right/wrong answers.  This whole process took 5 weeks.

* Spent another 2 weeks telling me they were still looking at other candidates.  So we are at 7 weeks for an interview process.

* Threw me an offer mid week and wanted me to start Monday.

At the beginning, I was so excited for this job although over time began to despair that this is the only job I might get.  Took all of this shite on the chin anyway and began planning my exit strategy.  Fortunately, a different job came through:

* A HR staff member found my CV directly on LinkedIn, emailed, and called me to schedule an interview.

* Manager was extremely personable and interested in hearing my motivations, giving me plenty of time to express myself.  Also over ran the interview by ten minutes as we were getting along.  They called me back on the same day to arrange a second stage interview.

* Second stage interview was with said manager and the analytics director.  Same format of being relaxed and asking a mix of scenario and experience based questions in order to see my approach to solving problems rather than how well I knew the documentation.  They also took the time at the end of the interview to get to know me more which was a really positive sign.

* I was offered the job about 3 hours after the second stage with an explicit instruction I'll be mostly working from home for the forseeable future and my start date will be at the very earliest in two weeks.

* This whole interview process took one week.

The relief and joy I experienced when I got this job was immense and made me realise that being desperate is a dangerous thing.

**Know What You're Looking For**

Googling is a highly underrated skill and it can be pretty crazy seeing people who are amazing at Googling for solutions to programming problems although completely forget all of that whilst job hunting.

What not to search for:

* Software developer jobs london

* Software engineer jobs wales

These are honestly the worst things you can search for because they will give you every result for every language and you'll spend a lot of time sifting through shite you don't want to apply for.

How you should search:

* Language + developer/engineer/general job title + location + jobs

* e.g. javascript front end developer new york city jobs

**Sometimes, It's Better to be Lucky Than Be Good**

I mentioned earlier getting the position I did was not about skill and more about being in the right place and that's something I want to touch on here.

In the end, as self taught programmers, university graduates, and people looking to change careers, all we want is a chance to prove ourselves.  In order to get that chance, you might have to face a few rejections and apply for stuff you might not necessarily be qualified for *right now*.  Although, if you honestly believe it's a job you can do given some time and training and you want to prove that, then every time you see a job application, just send your CV/resume in.  It doesn't cost anything and the worst thing that happens is they say no and you aren't ready yet.

Mindset whilst jobhunting is just as important as technical ability because with a weak mindset, you'll never get the opportunity to show what you're really good at.

I hope this was useful to somebody and good luck with everybody also looking to get their first job.

EDIT: 

**What courses did you use?**

[Courses I did here](https://www.reddit.com/r/learnprogramming/comments/lmi0zp/from_a_beginner_to_beginners_from_printhello/gnwfwv9/).

I also used Kaggle's free courses to get an introductory feel of Data Science.

In terms of study plan, it was extremely unstructured and I kind of liked that because it meant I could work on what I wanted to work on instead of following a regime which would mean learning stuff I didn't want to learn or wasn't ready to learn yet.",1922,163,MikeDoesEverything,2021-02-18 08:37:46,https://www.reddit.com/r/learnprogramming/comments/lmi0zp/from_a_beginner_to_beginners_from_printhello/,0,learnprogramming
po0ytf,I was recently hired for my first position as software developer at 39 and I want to give back to the community.,"I totally stole the idea from [https://www.reddit.com/r/learnprogramming/comments/pnpqzv/want\_to\_someone\_to\_keep\_you\_accountable\_and/](https://www.reddit.com/r/learnprogramming/comments/pnpqzv/want_to_someone_to_keep_you_accountable_and/) this post. I think it's a great idea and I want to help too.

Send me a message if you need motivation, ideas for projects or just chat. It's tough out there these days and we need more community. :-)

Edit: 

I've been getting a lot DMs about my journey, so here's a link to a post I made when I get the job, I think it will clarify many of the questions: 😁

[https://www.reddit.com/r/learnprogramming/comments/o7jq75/at\_39\_i\_just\_got\_an\_offer\_for\_my\_first\_software/](https://www.reddit.com/r/learnprogramming/comments/o7jq75/at_39_i_just_got_an_offer_for_my_first_software/)",1925,264,CappuccinoCodes,2021-09-14 11:33:16,https://www.reddit.com/r/learnprogramming/comments/po0ytf/i_was_recently_hired_for_my_first_position_as/,0,learnprogramming
owoib8,"I DID IT!! - Realtor, no CS degree, made the switch at 32","Sometimes a hunger for knowledge and an unwillingness to give up is more important than your current coding skills.

I started my journey March 2020, took a break because times were good in real estate, and then came back seriously to coding and learning computer science fundamentals during my 10-week paternity leave. 

All total, my journey was roughly 7 months of start-and-stop learning because of having a newborn... while both mom and dad were full-time working parents WITHOUT daycare. Luckily we were working remotely.

I'm going to forget some of the resources I used, but can give as many general tips that I used in my journey as possible. My situation was a bit unique: 

-I LOVE my company and intended to make a career at said company... and openly love talking about it, making it easy to see that I'm committed to the job.

-I reached out to an internal developer known for helping non-tech people learn programming and he started me off in the right direction



General tips:


***DO NOT LEARN EVERYTHING!! If I have one piece of advice it is to become an expert in one area rather than a master of none. Sure learning Postgres or MongoDB or Hibernate & Spring is important... but fundamentally these things are additions to an underlying bigger picture which are CS concepts and your programming language's way of handling things. (Yes its more verbose and convoluted, but without learning the 'why' you are using a calculator without knowing the underlying math behind it)

***If you are mediocre at coding but have great people skills, companies WANT you. I have loads of friends in the developer world that have said this and I didnt believe them until I got this job! Work hard to get to know people and utilize their knowledge... but don't annoy them. Its a fine line so tread it well =P

***Be proficient in your IDE of choice and practice & apply what you're learning. No one will hire you because of your excellent theoretical knowledge, you need to be able to apply it.

***You can skip hard problems on problem solving websites and come back to them another time with new eyes. I solved maybe 150 problems and skipped another 50 or so that I was 80% there and couldn't solve without bugs. Sometimes you'll figure it out just by virtue of learning something in another class and coming back to your question 2 weeks later

***Don't underestimate the power of free resources, I've paid a total of maybe $179 and used 90% free resources to fill in knowledge gaps and gain better understanding. You do NOT need paid subscriptions or paid bootcamps unless you learn better with accountability.



The resources I used (as chronogically ordered as possible, but likely not in a helpful/logical order):


-Codecademy C# Basics (just to learn the basics. Its pretty great for a quick start, but you quickly realize that coding is NOT a game once you get into it)

-Codecademy Python

-Codecademy Javascript

-Udemy C# Masterclass with Mosh (100% completed)

-Udemy Java Masterclass for Programmers by Tim Buchalka (40% completed)

-Udemy Computer Science 101 (100% completed)

-The Odin Project (HTML, CSS & JavaScript, completed the Front-End Fundamentals and am 50% completed on the Full Stack Javascript course. Amazing free resource with great Discord channel)

-FreeCodeCamp.org (started using this as part of The Odin Project. But came back time and time again for blog posts and other various knowledge)

-Harvard's free CS50 course: Intro to Computer Science (best teacher ever... easy to comprehend, but I had to go back and rewatch many lectures 2 or 3 times to have them sink in)

-HackerRank.com (easier to read starting out in my opinion)

-LeetCode.com (harder to read at first, but all these similar problem solving websites become intuitive to solve once you've done 50+ problems)

-Java documentation (this is huge and DON'T underestimate the importance of being able to read your preferred languages documentations)

- r/learnprogramming (read posts on your feed often, there's some situations that arose where I felt exactly the same way as a fellow newb, and reading the post and comments kept me motivated)

- r/cscareerquestions (same here, so many thoughts that pertain to the hiring process that are helpful to us newbs!)

-Medium.com blogs

-GeeksForGeeks.org (mainly for reference)

Overall, I'd say persistence and drive won me the job, and it can be the same story for you! Being able to solve problems is great (and I solved all 3 that came up during my interviews), but having the ability to take directions and understand your customer's needs requires people skills. You CAN do this, even if you take a long time at it.

45 minutes under pressure is not always enough time to solve a problem, and being on the right track is enough to get you a job. FAANG may require more from you, but to get into the Big N its not always required. Keep learning, keep growing, DON'T give up, persist through the tough parts, and you too will get that job!!!so proud to be a part of this amazing community, and I will continue to comment on posts of fellow newbs to help get you where you need to be =]

I hope this post helps 1 or 2 of you!!

EDIT: Thank you to all for commenting and upvoting, was not expecting such a response! I'm going through comments to respond now and feel free to message me =]",1922,161,BodeMan5280,2021-08-02 21:36:57,https://www.reddit.com/r/learnprogramming/comments/owoib8/i_did_it_realtor_no_cs_degree_made_the_switch_at/,1,learnprogramming
sa5s8o,Best feeling a programmer can experience,Best feeling a programmer can experience is posting a question on StackOverflow and not getting immediately shit on and downvoted/banned for asking stupid questions.,1919,182,DAutistOfWallStreet,2022-01-22 16:12:08,https://www.reddit.com/r/learnprogramming/comments/sa5s8o/best_feeling_a_programmer_can_experience/,0,learnprogramming
8vsesz,Roadmaps to become a software developer,"Over the past few weeks I have been working to mentor members of this community who are just starting to help provide some guidance and a sense of direction.  In that time I have happened to stumble upon a couple of handy resources myself that I find can be helpful in providing awareness of what to learn and when.  I have not created and do not take credit for these resources, these are just some that I have found.

Web Developer Roadmap:

[https://github.com/kamranahmedse/developer-roadmap](https://github.com/kamranahmedse/developer-roadmap)

Game Developer Roadmap:

[https://github.com/utilForever/game-developer-roadmap](https://github.com/utilForever/game-developer-roadmap)

Data Scientist Roadmap:

[https://github.com/MrMimic/data-scientist-roadmap](https://github.com/MrMimic/data-scientist-roadmap)

iOS Developer Roadmap:

[https://github.com/BohdanOrlov/iOS-Developer-Roadmap](https://github.com/BohdanOrlov/iOS-Developer-Roadmap)

React Developer Roadmap:

[https://github.com/adam-golab/react-developer-roadmap](https://github.com/adam-golab/react-developer-roadmap)

If there are any others that you all know about I can can add them to this list.  As far as the web developer roadmap goes, if any of you have questions on what is mentioned in the roadmap I would be happy to answer.

Edit: added react roadmap",1918,122,jessjessrevolution,2018-07-03 13:59:48,https://www.reddit.com/r/learnprogramming/comments/8vsesz/roadmaps_to_become_a_software_developer/,1,learnprogramming
inm8z3,How I became a self-taught developer?,"In this brief post, I want to help everyone who is trying to become a developer and make changes to their career. This post may be applicable to some of you as I have been there.

I do not have degree in Computer Science, but of course my education in technical field helped me a lot. But if you don't have technical background, I would say still you can become a web developer and earn higher income.

These are the items that really helped me learn. I am basically from India and I was over 30 when I planned to switch career. Some of you may be thinking that it may be difficult to switch career when you're over certain age. This is absolutely right, but it's you who limits your opportunities. Some employers may be reluctant to hire you, but not all. It's you who will need the push because you have left your studies from many years and now if you have to read the book again, you would feel bored. It took me quite a while before I got into my university days rhythm. Yes, you can get back the same confidence and concentration that you had when you were learning things actively. It just takes some time and persistent effort.

Once I was back to my normal rate of reading. I started reading lots and lots of books. When I was travelling I would read and when I was home, I would practice on my laptop; typing same code from books to replicate those cases and see how they worked. Yes, reading book along will never help. I was frustrated and so much worried that I may be wasting my time, but still I carried on because I had to make a move.

It will be frustrating initially especially if you're learning programming language for the first time, but hang on. So those frustrating days led me watch videos. I landed on Youtube playlists which are absolutely awesome if you're beginner. The main part most course creators forget is that they are creating content for learners not for professionals. This channel on Youtube had videos which were byte-sized videos with content moving not too fast for beginners to follow and I watched every single videos on HTML, CSS, Python, and what not.

So, then I finalized my plan for all programming language. At least this works for me. Whenever I want to learn new programming language, I would start by watching some videos on that programming where instructor is actually coding along. This would help me understand little bit, not much. Of course only watching videos can never help. Then, I would also get a book for this language. Books are absolutely essential for any programming language (of course not HTML, CSS). This is because books cover lot more content than videos. On top of that, learners usually have tendency to move on to next video because they want to learn quickly. This was the case for me and I would move on to next topic without fully practicing or learning the first content fully.

So, I would use book to learn interactively on my laptop. I mostly use ebooks for this because that allows me to open book on one side and type the code in the laptop easily. Once you've got basic syntax, then it's time to find some interactive full course where Udemy may be useful or sometimes also youtube. I used all the possible resources to learn.

Finally, I had confidence to apply for jobs. For entry level jobs, I applied to about 15 companies and I was hired at 6-7 of those. Also, in resume, I just wrote about the interactive projects I had worked on while learning and in those projects I had worked on REST API, integrating Angular client and so many things. Also, by the time I started to apply, I had learned bunch of languages which definitely helped me get sort listed. Of the few job interviews I failed, couple of them were because they didn't think I am serious to switch career because I had been in different industry for quite long time.

I was so glad that  I made the move and  now I make 4-5 times the income I was making in my first ever job. This was just a story of single developer. If you're learning programming, please hang in, take time to study and if you're older, be patient. Even to get the level of concentration takes some time and lot of effort. So, just keep practicing.

All the best.",1916,231,piyushpatel2005,2020-09-06 13:45:42,https://www.reddit.com/r/learnprogramming/comments/inm8z3/how_i_became_a_selftaught_developer/,0,learnprogramming
hluvkr,"Extensive Web Scraping Tutorial in Python, Ruby, Node, R and Java","Hi everyone, having worked in the web scraping industry for a few years I know how easily troublesome it can be to write, maintain and even begin web scraping.

One year ago, I wrote a web-scraping guide that was really loved by the community. [reddit post](https://old.reddit.com/r/learnprogramming/comments/cqa5ed/a_webscraping_guide_for_beginners/), [article](https://www.daolf.com/posts/avoiding-being-blocked-while-scraping-ultimate-guide/). It was actually my first and only gilded post here 😊.

One year forward, I left my job and co-bootstrapped a web scraping API 🤞. During the year we have made some good tutorials for beginners on our blog and I wanted to share it with you. 

We tried our best to make those tutorials complete (20 minutes read time each) and simple. They cover many topics related to web scraping from bottom to top.

* how to make HTTP requests
* how to parse HTML
* how to use Chrome headless

and much more.

So far we have written extensive guides for 5 languages:

* [🐍 Python](https://www.scrapingbee.com/blog/web-scraping-101-with-python/)
* [💎 Ruby](https://www.scrapingbee.com/blog/web-scraping-ruby/)
* [😎 NodeJS](https://www.scrapingbee.com/blog/web-scraping-javascript/)
* [🤓 R](https://www.scrapingbee.com/blog/web-scraping-r/)
* [☕️ Java (130 pages free-ebook)](https://www.scrapingbee.com/java-webscraping-book/)

Hoping that it can help you with your work or your project.

Happy to answer web scraping questions if you have any.",1916,77,pijora,2020-07-05 21:44:42,https://www.reddit.com/r/learnprogramming/comments/hluvkr/extensive_web_scraping_tutorial_in_python_ruby/,0,learnprogramming
ijomyo,Learn to Code With Data Visualizations - Interactive Python Lessons - Then Keep Going :),"Hey Gang,

I've been teaching people to code for the past five years, and  wrote some lessons so that people with no knowledge could get ramped up, and see the purpose of coding.  I battled tested the first fourteen on my mom to make sure :)

I'm providing 70 free interactive lessons that cover: intro to programming,  pandas, intro to ml, and building a neural network from scratch.  No login, just start.

[All of the 70 lessons are here](https://www.jigsawlabs.io/#free), and [here are the companion videos](https://www.youtube.com/playlist?list=PLCG6Te769p1gkVJizwSmo6GoEI9oHoAPA) on each of the subjects over the next five weeks.

I'd love to know what you think!

1. [Introduction](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//0-starting-to-code.ipynb)
2. [Variables](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//1-visual-variables.ipynb)
3. [Lists](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//2-visual-lists.ipynb)
4. [Dictionaries](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//3-visual-dicts.ipynb)
5. [Coding Tips](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//4-review.ipynb)
6. [Loops](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//5-introduction-to-loops.ipynb)
7. [Nested Data](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//6-nested-data-structures.ipynb)
8. [Make it Easy](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//7-make-it-easy.ipynb)
9. [Loop Over Data](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//8-looping-through-live-data.ipynb)
10. [Loops to Lists](https://colab.research.google.com/github/jigsawlabs-student/code-intro/blob/master//9-loops-to-lists.ipynb)",1906,55,JeffKatzy,2020-08-31 01:11:53,https://www.reddit.com/r/learnprogramming/comments/ijomyo/learn_to_code_with_data_visualizations/,1,learnprogramming
9hk3fr,"Do yourself a favor and go learn Git by using Git Kraken. Git is an insanely powerful tool, but it's hard to grasp the concepts without a intuitive GUI.","As it turns out, committing to Master every time isn't the right thing to do. Since I've learned about branching and versioning the right way, Git has become an immensely more powerful tool to me. I wasn't able to grasp everything that it could do by just reading documentation. Their youtube videos are really good for beginners, and the UI is very intuitive as well. 

I use two different computers to code, one being a powerful PC at home and the other being a macbook while I go to school. I'm a commuter so I spend a lot of time at school on my laptop - this led to many pointless commits just so I could continue coding once I got to school. Now that I understand branching better, I'm able to create a remote branch specifically for dirty commits when I'm going between computers. My repository stays way cleaner now.

I'm far from an expert, but since a friend recommended GitKraken I've learned more in 30 minutes than I had by reading documentation for hours.

**EDIT**
I guess I didn't mean that GitKraken should be the only way to use git, so I hope no one reads this and thinks they shouldn't learn the actual CLI. Sorry if I mislead anyone",1910,196,baddad25,2018-09-20 23:25:19,https://www.reddit.com/r/learnprogramming/comments/9hk3fr/do_yourself_a_favor_and_go_learn_git_by_using_git/,0,learnprogramming
ecf8sz,"I want to learn programming pretty quickly with the hopes of freelancing to make money for my family, what's a good route(s) to go?","Hey everyone.  So basically, I'm very motivated to learn programming on a good enough basis to do freelancing work to make extra money for my family.  I'm not big on giving personal details, but thanks to life, our account has gone negative once again, and I'm tired of my family having to be put through this.  I haven't truly dedicated myself to learning programming, I guess because I do have a job so in the back of my mind it wasn't a huge deal, but I am changing that outlook today.  One day, a full time job programming would be great, but in the meantime, I want to do better for myself and my family and make extra money.  Any thoughts you have on a good way to learn the basics, enough to do freelancing, I would really appreciate.  I've got to make a change, and I want to make it today.  Thank you.

EDIT: Oh my gosh, my first Gold! I certainly wasn't expecting that, but thank you so much!

EDIT 2: Wow, and a Silver as well.  I want to thank everyone who has responded to my post.  I'm doing my best to individually answer everyone who has done so.  I really can't thank you all enough for all of your advice!",1904,397,Berret25,2019-12-18 16:58:37,https://www.reddit.com/r/learnprogramming/comments/ecf8sz/i_want_to_learn_programming_pretty_quickly_with/,1,learnprogramming
dswb5p,Neat website to learn Linux/Bash,"[https://linuxjourney.com/](https://linuxjourney.com/)

Not sure if this was mentioned before, but it helped me a lot.",1899,101,sundid,2019-11-07 11:15:49,https://www.reddit.com/r/learnprogramming/comments/dswb5p/neat_website_to_learn_linuxbash/,2,learnprogramming
nmlkje,First day at the office tomorrow.,"Firstly, I will apologize if this is all over the place. Secondly, I want to thank the kind people in this sub who have given me nothing but motivation and encouragement. 

In December 2020, I had finally given up trying to continue to work in kitchens. Given the pandemic, the job has changed significantly and it certainly was no longer stable. I contemplated for many months what kind of career I wanted. I knew I wanted to work with my brain as I spent the first 15 years working with my hands. I was encouraged to start learning to program from a friend I play an MMO-RPG with.  I took his advice. My path was not structured by any means, but it started with the popular HTML/CSS/JavaScript avenue. I bought Udemy courses, spent a good amount of time on FCC, and TOP, and Youtubed my way through the past 6 months. I spent a lot of time scouting this sub-reddit, finding others on the same path as well as people who has accomplished their goals in changing career. I had a lot of time given the situation in Canada, but I encourage everyone whos on this path to keep striving. I don't have a high school diploma, and I sure as hell don't have any degrees in computer science or programming. But, I had a interview today and I have a job tomorrow.

&#x200B;

Sincerely from one person to many

Thank you!",1889,176,baretumpaz,2021-05-28 00:26:24,https://www.reddit.com/r/learnprogramming/comments/nmlkje/first_day_at_the_office_tomorrow/,1,learnprogramming
p03xa9,Playlist on how to build a website from scratch in just HTML and CSS - Job shadow me as I build a real clients website and explain everything I do and why. No frameworks. This YouTube playlist is perfect for beginners who want to see what it's like to work as a developer and learn by doing.,"Here's the link to the playlist[https://youtube.com/playlist?list=PLMPdeA59PPg2BF9ACL5182LmISoBe1gOp](https://youtube.com/playlist?list=PLMPdeA59PPg2BF9ACL5182LmISoBe1gOp)

And the individual videos if you prefer

1- HTML[https://youtu.be/2g8RtZVpVGA](https://youtu.be/2g8RtZVpVGA)

2 - Mobile CSS[https://youtu.be/qbKSr-jDSjo](https://youtu.be/qbKSr-jDSjo)

3 - Tablet CSS[https://youtu.be/OEPnMsKQV6c](https://youtu.be/OEPnMsKQV6c)

4 - Desktop CSS[https://youtu.be/YIMLSIA5RBg](https://youtu.be/YIMLSIA5RBg)

5 - Adding Dark Mode[https://youtu.be/mMr1xOWdkUM](https://youtu.be/mMr1xOWdkUM)

6 - Optimize for perfect page speeds[https://youtu.be/jLXx0GZ5Z6E](https://youtu.be/jLXx0GZ5Z6E)

7 - Add Interior Pages To a Multi-page static website   
[https://youtu.be/XaOo9945N0E](https://youtu.be/XaOo9945N0E)

&#x200B;

I'm doing these series to help other developers get out of tutorial hell and watch how someone applies everything you learn into doing real work. I record EVERYTHING. That means all my mistakes are in it too so you can see how I think through the problem, how I troubleshoot the issue, and how I find the solution. As important as coding is to your job, learning how to THINK like a developer and how to solve problems is the most important part of the job. Hopefully watching me can help you start thinking like one!

So if you're new and want to see how a a real developer works and thinks through making a website from scratch this is the perfect series for you! Or if you're a seasoned developer but want to catch up on the latest ways to build a mobile first and responsive website this is a great refresher.

All of my websites are done mobile first and fully responsive and I optimize them to get 97-99/100 mobile page speed scores on Google and most importantly, satisfy their new Core Vitals metrics. I am a big proponent of static websites for small businesses because often times it's all they need and the clean code makes their pages lightning fast and makes Google happy.

I wanted to share my process with everyone because I want to show what can still be done in just html and css. You don't NEED frameworks to build beautiful sites. You just need a little inspiration. Please feel free to let me know if you have any questions or requests for future videos. I have 3 more sites I'm beginning to start building and recording so if this kind of stuff is your jam there's plenty more to come!",1893,84,Citrous_Oyster,2021-08-07 23:36:18,https://www.reddit.com/r/learnprogramming/comments/p03xa9/playlist_on_how_to_build_a_website_from_scratch/,0,learnprogramming
6cc3mk,"I made 3 easy to follow videos that show a beginner how to create their first website (HTML, CSS, JavaScript)","[Episode 1: HTML](https://www.youtube.com/watch?v=0VxXmuQZUeg&index=1&list=PLFUqwj4q1Zr98Mlbor93AYaZF9aRQJhIS)
-

[Episode 2: CSS](https://youtu.be/hwdUO9A9AIs?list=PLFUqwj4q1Zr98Mlbor93AYaZF9aRQJhIS)
-

[Episode 3: JavaScript (jQuery)](https://youtu.be/I3viwN_JdsM?list=PLFUqwj4q1Zr98Mlbor93AYaZF9aRQJhIS)
-

Hello everyone.  It's been a while since I've posted here.  The last time was back when my Java Game Development series was on like episode 30, now it's on [Episode 74](https://www.youtube.com/watch?v=3VTxCliqW84).

Anyways since I often tutor students in learning the basics of web development I decided to take those lessons and condense them into a few quick videos.  The videos assume no prior programming experience, but should be informative to anyone who has not done much web development.

Those learning can feel free to ask any questions you have either in this thread or the YouTube comments and I will respond to them.  Those with web dev experience can feel free to provide some feedback on how I might improve my lessons in the future. :)",1890,79,indiebryan,2017-05-20 19:06:08,https://www.reddit.com/r/learnprogramming/comments/6cc3mk/i_made_3_easy_to_follow_videos_that_show_a/,0,learnprogramming
akbeqk,The Open Source Computer Science Degree,"[https://github.com/ForrestKnight/open-source-cs](https://github.com/ForrestKnight/open-source-cs)

&#x200B;

Hey guys, just wanted to share this project I found by YouTube recommending me the video of the author explaining the layout of the project. [Link to Youtube video.](https://www.youtube.com/watch?v=NyOvFSP_IpQ)

&#x200B;

The video is almost 18 minutes long. So, to save you some time, here is my summarization of the video.

* It's a curated list of free courses that fulfills the requirements needed for an undergraduate computer science degree minus the general education (like art history). That is based on his experience with his computer degree program. Also, he looked at different Ivy League type schools computer science degree programs and [https://github.com/ossu/computer-science](https://github.com/ossu/computer-science).
* The list is seperated into 7 categories:

1. Computer Science Basics
2. Programming
3. Math
4. Systems
5. Theory
6. Applications
7. Unix

* This is his own take based on TOSCSD projects he has seen before.
* He found the courses with the help of [class-central.com](https://class-central.com) .
* Guy says it's called ""The Open Source Computer Science Degree"" because the courses are offered for free.
* All the courses are free and all are hosted either on edX, udacity and coursera.
* In Coursera, there are payment options. There are some that are completely free but you can also access the paid ones via the audit system which means you just won't get certification for finishing it.

# The Layout

Courses

\- self-explanatory

School

\- which university you will be learning from or the course is from

Duration

\- the time it will take you to finish if you followed what is on the effort tab

Frequency

self-paced - meaning, the course is available all the time

other values - meaning, how many times in a week/month a new class will begin

* Note: Some courses on coursera will say that the start date is the date today to get you to act quickly. So, these courses are implicitly self-paced.

Prerequisites

\- self-explanatory

* Even though some of the links are affiliate links, you are not buying anything. It's just in case you will buy something, like for example in Coursera, which in turn will help the channel in some way.

# Computer Science Basics

* I recommend finishing this one first, to see if you really are into computer science.
* If you know a better course on a subject, you can fork the project and I will see if I agree.

# Programming

* Take Courses 1 - 6 in order.
* The reason why they are all in Java is because I was stoked that there are 6 courses provided by the same school which in turn goes perfectly together. Plus Java syntax is similar to many other programming languages that you will use throughout your computer science and software engineering career.
* Courses, Programming Languages Part A, B, C are essentially principles of programming which I took when I was in taking up my computer science program. The idea of it is to learn how to learn new languages based on the information you've learned from courses 1 - 6.

# Math

* A lot of people are scared about this subject but I see computer science more of a math degree than it is an engineering degree.
* The math you'll mostly learn in computer science is calculus, linear algebra, probability and statistics, and discrete math.

# Systems

* You'll learn about building computers, computer architecture.
* I recommend finishing the computer science intro and the first Programming course (Java Programming: Solving Problems with Software), and then hop to learning this section.

# Theory

* A big part of computer science is theory.
* Make sure you know calculus to understand the first course listed.
* A bunch of algorithms, theory and machine courses.

# Applications

* What roles he thinks are applicable if you know computer science.

# Unix

* Very basic, no prerequisites required.
* Recommended that you know this stuff.

&#x200B;

Edit: Top comment from author:

>Just to be clear, I call this ""open source"" because the courses are offered for free. This does NOT mean you can redistribute or modify these courses 😂  I know y'all are smarter than that.  Oh yea, and this idea is all about the learning aspect, not the sheepskin. With these courses you have the opportunity to obtain the same knowledge as someone graduating with an undergraduate CS degree.﻿

&#x200B;

Edit #2:

Another open-source cs degree project: [https://github.com/mvillaloboz/open-source-cs-degree](https://github.com/mvillaloboz/open-source-cs-degree)",1877,130,Ghost-17,2019-01-27 11:50:48,https://www.reddit.com/r/learnprogramming/comments/akbeqk/the_open_source_computer_science_degree/,0,learnprogramming
ktfpfx,Use books instead of brief tutorials to learn programming,"Fundamental and broad knowledge (which is important in programming) can only be gained from books. Tutorials (text/video) are more like cookbooks that will taught something particular and are good if used as a supplementation to a books. Also book can be used later as a reference were you can quickly look for a topic that you are interested in. If you have never program before be sure to pick a book that is intended for people that never have programed before. 

Also its is important to write your code in parallel with book. Just anything, practice is very important.

Good luck :)",1876,300,vasili111,2021-01-09 00:22:57,https://www.reddit.com/r/learnprogramming/comments/ktfpfx/use_books_instead_of_brief_tutorials_to_learn/,0,learnprogramming
m7zx99,The Helsinki full stack web development's 2021 course is now open,"The courses for this year is now open, I think it's a really great resources, and it's free..

So enjoy :D

The link : [https://fullstackopen.com/en/](https://fullstackopen.com/en/)",1871,176,choukri6666,2021-03-18 20:29:47,https://www.reddit.com/r/learnprogramming/comments/m7zx99/the_helsinki_full_stack_web_developments_2021/,0,learnprogramming
9jwu1p,Do yourself a favor and learn something about databases,"As a professional programmer, I noticed something looking through these posts; not a lot of attention is given to databases. No matter what job, language, or industry you are work in, you will have to work with databases. Understanding databases and how they are structured goes beyond writing SQL.

[Here](https://www.youtube.com/watch?v=Nv_rPDOwoVQ&list=PLvndR40H6vCUSkb88kFdmlSzAzsnQIJBF) is a playlist of lectures given by Dr. Gary Boetticher at University of Houston at Clear Lake. It begins with the fundamentals but also goes into more complicated concepts. This is what got me through my university database courses. 

Good luck!

P.S. - I just noticed the he didn't put the lectures in order, so you will have to order them using the title. 

",1867,123,cscareerthrowaawy,2018-09-29 13:45:26,https://www.reddit.com/r/learnprogramming/comments/9jwu1p/do_yourself_a_favor_and_learn_something_about/,0,learnprogramming
asqslg,"If you have 0 programming experience, I strongly recommend starting with Scratch","I just finished making a game on Scratch ([https://scratch.mit.edu/](https://scratch.mit.edu/)) and learned a lot very quickly. It is intended for kids/teens, but I'd recommend spending a couple of days with it to anyone. You'll learn how to approach programming problems and all the basics without worrying about the syntax. It's so much better than starting with tutorials that just make you copy-paste their code, as you learn by doing and looking at other people's projects to figure things out. My project's ""code"" is not perfect and I'm probably not going to spend more time with it, but it definitely got me motivated to continue learning. 

&#x200B;

If anyone's curious, here's the game that I made. It took 3 days with little programming experience. Working with aspects of the game loop, sprites, sounds, animation, bug-testing, etc really helped me understand the bigger picture.

[https://scratch.mit.edu/projects/287503779/](https://scratch.mit.edu/projects/287503779/)",1869,197,None,2019-02-20 17:08:33,https://www.reddit.com/r/learnprogramming/comments/asqslg/if_you_have_0_programming_experience_i_strongly/,0,learnprogramming
8yzbt7,Codingame.com is by far the best programming site I have encountered so far,"This site is huge, it includes 2 main types of challenges multiplayer ones(which are about programming a bot to do something better than your opponent's bot) and puzzles(my personal favorites!) which are diverse challenges ranging from creating an algorithm for a mars lander so it can land, to analiyzing different temperatures and deciding which one to print.

Here's what's truly amazing: This site supports over 25 languages!!!! including C++, C, Java, Python, C# and many more.

The site is super polished and the community is super friendly and helpful(helping me many times to get out of coding problems and debugging). I haven't had this much fun learning to program in months!


Obligatory: This site is not for complete begginers and is not intended to teach you a new language, the site's purpose is that people who know a language (or are learning one) can deepen their understanding of it through fun challenges and activities.

(I am in no way related to codingames.com btw, I just wanted to share this awesome community with you folks!)",1870,97,MagicMajeck,2018-07-15 04:49:46,https://www.reddit.com/r/learnprogramming/comments/8yzbt7/codingamecom_is_by_far_the_best_programming_site/,0,learnprogramming
693en2,"I turned my life around when I learned to code after my country collapsed, so I'm donating all profits from my store to a charity that teaches syrian refugees how to code.","I don't want to get too sappy, but I thought I'd share this because people might find this motivating, and others might want to contribute.

https://horriblenoise.ca/blogs/word/summer-17-launch-diabetes-inducing-discounts-and-feel-good-charity-flexations

I taught myself how to code, and then went to school briefly, when my country collapsed and I lost my job in 2013 when the Arab Spring hit, and moved to Canada on my own.

A few years later I was a dev at Shopify, a big canadian ecommerce company (and one of the largest and oldest rails apps currently running) and created an online shop with my friend, a lowbrow artist in Vancouver. At the beginning of 2015 I was living on a futon because that was all I could afford until my next pay check. 

By the end of that year, I was earning good money doing very interesting work, and had time to work on my online store which is my main hobby now.

I like to raise money for causes I am passionate about. Black Friday we donated to a charity that helps end FGM in Africa. 

This time, we are giving everything we make to RE-CODED, which goes to refugee camps in Iraq and runs a bootcamp that teaches youth how to code. I don't think I've ever seen a cause that resonated with me more. My journey wasn't easy, but my country wasn't shelled and I wasn't trapped in a refugee camp.

Anyway, thanks for checking it out, good luck with your journey, and be sure to cop a shirt or two if you want to support.

I'm available for mentorship or help if you DM me, especially if you come from a very nontraditionalbackground like me.

PS: The tall brunette modelling the heavy metal shirt is also a reborn programmer.

PSS: If you want to sidestep the middleman and donate to the charity directly, you can donate here: https://www.generosity.com/emergencies-fundraising/iraq-re-coded--2

However, I bet some of you could do with a fresh new t-shirt or two for the summer. Many of them have designs inspired by the programming and dominos lifestyle.

Stay Greasy,

jellyc0la from HORRIBLENOISE",1869,63,jellycola,2017-05-03 21:41:25,https://www.reddit.com/r/learnprogramming/comments/693en2/i_turned_my_life_around_when_i_learned_to_code/,0,learnprogramming
161xdxo,I did it! From 0 to dev in a year,"Quick success story for everyone saying it’s not possible anymore.

A year ago I started teaching myself how to code. Did free code camp through the Javascript section and the Odín Project  through foundations. At this point in my journey even reversing a string was a semi confusing concept.

Still put in the effort and by 2 months of learning to program had a pretty decent looking website with only HTML and css and the Etch a Sketch project from Odín with Js and DOM manipulation.

By this point I decided I enjoyed programming so I decided to go to a bootcamp and spent the next 4 months putting in about 9-10 hours a day between school and extra study. During this time I made a 2d video game with collision, and 2 social media clones  for class projects.

After bootcamp I started my journey to getting employed. And trust me I saw all the negativity here and on CScareerquestions telling me I would be nothing without a degree.

So I knew I had to do better.

In the last 6 months I competed in two hackathons, volunteered for a dev community daily that allowed me to list them as internship experience, and created 3 complex applications with various integrations including AI combined with health api’s and location services, and my own streaming/upload platform for people to post gaming clips.

Yesterday I just finished my first week at my first dev job which offered me a position for 75k a year.

And while that might not sound like a lot to everyone. I don’t live in a tech hub and it’s about 50k more than I’ve ever made before.

This career path is still possible. You just just gotta put in the work and things will fall into place. 

I won’t lie to you and say I felt like quitting 1000 times. I drilled it into my head this was my plan A and my Plan B and I feel that the mentality is necessary these days.

Best of luck to everyone on their journey.

~ A new Jr. Dev",1855,222,Intelligent-Lock-623,2023-08-26 14:56:49,https://www.reddit.com/r/learnprogramming/comments/161xdxo/i_did_it_from_0_to_dev_in_a_year/,1,learnprogramming
iv1aer,Looking to learn python?,"I created this repository: [https://github.com/arpit-omprakash/Byte-Sized-Code](https://github.com/arpit-omprakash/Byte-Sized-Code) that has well-documented beginner-friendly Jupyter notebooks on different topics in Python ranging from Basic Syntax, up to Regular Expressions and some other general use cases (working with Files and Directories). This is perfect for beginners as they can also download the notebooks and try out the different examples. More advanced programmers can use this as a reference/cheat sheet for different topics.

Others are also welcome to contribute to the project and suggest any additional topics that can be worked on.

This is an effort by me to create a community of people who will help each other in their journey of learning python. Do check it out. Let me know what you think!!

Edit: I've included a simple project for beginners to the repository. Do check it out!",1857,100,Aceking007,2020-09-18 07:00:34,https://www.reddit.com/r/learnprogramming/comments/iv1aer/looking_to_learn_python/,1,learnprogramming
cwq4hn,MIT's Introduction to Computer Science and Programming Using Python starts today.,"For those of you who are interested, MIT's popular Introduction to Computer Science and Programming course starts today. I took the previous iteration of the class but had to drop out due to time constraints. I registered and intend to complete it this time around. It's a really well designed course that goes through the basic topics of computer science. The assignments are challenging, but you will learn a lot from completing them. I highly recommend it!

Link:  [https://www.edx.org/course/6-00-1x-introduction-to-computer-science-and-programming-using-python-3](https://www.edx.org/course/6-00-1x-introduction-to-computer-science-and-programming-using-python-3)",1851,121,Meiryoku,2019-08-28 20:10:31,https://www.reddit.com/r/learnprogramming/comments/cwq4hn/mits_introduction_to_computer_science_and/,0,learnprogramming
9x28gm,Free Programming Books,"idk how many times this has been posted but, it serves as a guide for those just starting and i'd like to help those guys out.

[https://goalkicker.com/](https://goalkicker.com/)",1860,112,Usuratonkachi59,2018-11-14 17:38:16,https://www.reddit.com/r/learnprogramming/comments/9x28gm/free_programming_books/,0,learnprogramming
fmisli,"I don’t know who needs to hear this, but take a break from coding when something isn’t working and come back to it later! A fresh perspective can help a lot!","I’m not a pro level programmer, I’m new and learning and find this to be very helpful. Just wanted to share.",1847,104,savageball,2020-03-21 17:41:17,https://www.reddit.com/r/learnprogramming/comments/fmisli/i_dont_know_who_needs_to_hear_this_but_take_a/,0,learnprogramming
mrqfhc,"Self-studied for 1.5 years, my first day as a Solutions Engineer is tomorrow! Here's my story.","First of all, I just want to say that r/learnprogramming is an AMAZING community. I've learned about so many useful resources from you all and have had so many of my questions answered here. Reading your success stories has also given hope and motivation to get to where I am today. I'm writing this post in hopes that it helps you get where you want to go!

A little about me. I've been working as an account manager in digital advertising for the last 2.5 years (my first job out of college). Tomorrow, I'll be starting a job as an Associate Solutions Engineer at the same company.

## Salary

I went from $70k to $105k (NYC). The entry-level salaries are real!!!

## Timeline

**Highschool**

Chinese parents wanted me to learn programming and go into CS. I didn't want to be a fucking nerd so my dumbass decided to skip out on the programming classes my highschool graciously offered. I regret this so much haha.

**Sometime in 2018**

Learned basic HTML and CSS because I wanted to build a food blog and didn't like Squarespace templates. Turns out I hated writing a food blog but enjoyed learning to code.

**Sept 2019**

Went on vacation and did some soul searching. Realized I didn't want to do the account management work for the rest of my life, so decided to switch careers early. That bit of coding from 2018 gave me the inspiration to do more discovery. I talked to engineers at my company and found out that many of them switched careers by going to a bootcamp. Started looking into it and doing the Codesmith and Hack Reactor pre-courses.

**Mar 2020**

My company was about to announce an account manager → solutions engineer transfer program, where they sponsored you to go to bootcamp. I was waiting for this, then the pandemic hit. This was scrapped. I was sad. However I decided that paying $20k and losing my financial security in the middle of a pandemic was a bad idea, so I decided to stay and just self-study until going to a bootcamp made sense again.

**Mar 2020 - Feb 2021**

Completed various online courses (will link resources below) and personal projects. Around Sept of 2020, I gained the confidence in my ability to learn programming and decided to self study all the way.

**Nov 2020 - March 2021**

Started writing Google apps scripts to automate things in my account management job. Started building little tools for my team. Eventually started building more legit tools that caught the attention of other orgs, including the one I'm going to be joining tomorrow.

**Last week of March 2021**

Finally an opening on the SE team! Fixed up my resume, did a ton of interview prep, interviewed, and got the job!

## Resources

* SuperHi fundamental HTML/CSS - these classes were great but they cost money and I think you can easily learn the same content for free.
* [Codesmith Pre-Course](https://codesmith.io/)
* [Hack Reactor Pre-course](https://www.hackreactor.com/)
* [CS50x](https://cs50.harvard.edu/x/2021/)
* [CS50 Web](https://cs50.harvard.edu/web/2020/)
* [SQLZoo](https://sqlzoo.net/)
* [Codewars](https://www.codewars.com/)
* [Stephen Grider's Modern React with Redux](https://www.udemy.com/course/react-redux/)
* [Stephen Grider's Node with React, Fullstack Web Dev](https://www.udemy.com/course/node-with-react-fullstack-web-development/)
* [FullStack Open](https://fullstackopen.com/) (I skipped around here. I didn't feel so great about back end so I pretty much just did that section)
* [Various apps scripts tutorials](https://developers.google.com/apps-script/articles/tutorials)
* Currently: [Google Cloud Platform tutorials](https://cloud.google.com/gcp/getting-started), as my company does a lot with GCP

## Self-study thoughts & Advice

* Free online resources are so good now, you can totally learn and get a job without bootcamp. If it weren't for covid, I probably would have gone the bootcamp route. Now I'm extremely glad I saved that $20k, because it is very doable to learn it yourself. If you're considering it, I would push you towards at least trying to self-study at first, and only do bootcamp if you feel you are really struggling on your own.
* The best skill you can have when self studying is being able to google shit when you're confused. It takes some time to get used to how documentation, stack overflow, etc are written, and you'll get better at sifting out good answers from bad. The second best skill is knowing [how to ask good questions](https://www.freecodecamp.org/news/how-to-ask-good-questions-as-a-developer-9f71ff809b63/) in programming discord groups (CS50 has a great one), Udemy boards, r/learnprogramming, or Stack Overflow. It's a lot of work to ask good questions, but it will give everyone else a fighting chance to get you an answer, and will also help you understand the topic yourself better. If you're doing it on your own, you have to learn how to unstick yourself!
* Since you are losing out on a lot of networking and won't have formal education listen on your resume, DO PERSONAL PROJECTS. If you can, do projects for your current job or a small business. Saying that you did CS50x is not good enough, you have to prove that you can actually build things!
* If you're able to do an internal transfer like I was (and we're lucky to be able to do so), make sure not to check out of your current role. If you're trying to get hired, you're going to want your current manager on your side! If you are working in a culture that allows this, I would talk to your boss/leadership about your programming goals, and also talk to people in the engineering org you are trying to transfer into. The more colleagues you have cheering you on, the easier it will be to make that transfer happen.

## General Advice

* Learning how to program is more a volume game than anything. I genuinely believe that most people can figure it out, it's just a matter of dedicating the time. If you're confused as fuck, don't fret. Just keep spending the time and eventually the pieces will fall into place.
* You don't need to learn everything from one place. If you want to be a full stack developer, check out the curriculums on Fullstack Open, The Odin Project, or bootcamps. Those will give you an idea of what you need to know. From there, you can jump from one course to another if you find one course to be more compelling than another. The important thing is just learning all the different concepts, doesn't matter from who.
* You can always break down your problem into smaller ones. Solve those, and you'll end up with a full solution!
* Always express gratitude when people help you.

Edit: A lot of folks are asking me about how much time I spent/how much time they should spend. I was lucky where a lot of my studying was during the 2020 lockdowns, so I had plenty of time to study. I tried to do as much as possible without burning out on it. I would say on average, I'd try to do \~1-2 hours *most* weeknights, and 4-8 hours each day of the weekend. If you start working on a personal project that you really want to get done, you'll find it's pretty easy to spend the entire day coding. It did really vary week to week though. It’s okay to take your foot off the gas sometimes and sometimes you even need to stop completely to refuel. As long as you spend the time driving the miles you’ll get where you want to go!",1845,121,katsuthunder,2021-04-15 23:06:42,https://www.reddit.com/r/learnprogramming/comments/mrqfhc/selfstudied_for_15_years_my_first_day_as_a/,1,learnprogramming
a0qafu,Amazon has opened their internal Machine Learning training for all,"Only AWS account is required. Havent taken the course yet so cant vouch for quality.

https://aws.amazon.com/training/learning-paths/machine-learning/",1844,103,kurtailed,2018-11-27 02:16:11,https://www.reddit.com/r/learnprogramming/comments/a0qafu/amazon_has_opened_their_internal_machine_learning/,0,learnprogramming
td32m1,Just wanted to share some good news!,"I'm a teacher and have been learning programming. I was finally able (after months of failure) to create my first successful script. It checks if students sent their homework!!!  I'm absolutely buzzing with joy right now!!!

Edit:. Thanks so much for the feedback and help you guys do.  Really means a lot :)",1844,112,imseeingdouble,2022-03-13 09:11:09,https://www.reddit.com/r/learnprogramming/comments/td32m1/just_wanted_to_share_some_good_news/,1,learnprogramming
nwrsn6,Video Series : Learn Python Programming for Absolute Beginners with Zero Programming Knowledge," In  this video series, Bryan Cairns covers Python Programming from scratch  for beginners without any programming or python knowledge.

1. Introduction and Setup  
[https://youtu.be/dVDRyLZXZCs](https://youtu.be/dVDRyLZXZCs)
2. Variables  
[https://youtu.be/Gl8kPcec9bo](https://youtu.be/Gl8kPcec9bo)
3. Comments, Booleans and Comparisons  
[https://youtu.be/aBU2dcSb7eY](https://youtu.be/aBU2dcSb7eY)
4. Numbers and Basic Numeric Operations  
[https://youtu.be/mQ9U60g7O2E](https://youtu.be/mQ9U60g7O2E)
5. Strings  
[https://youtu.be/GLzQ5Wbdba4](https://youtu.be/GLzQ5Wbdba4)
6. Basic String Operations  
[https://youtu.be/gDZZD\_dltlY](https://youtu.be/gDZZD_dltlY)
7. Lists  
[https://youtu.be/VUsZrPHQNt4](https://youtu.be/VUsZrPHQNt4)
8. Sets  
[https://youtu.be/hpfnvV74rIQ](https://youtu.be/hpfnvV74rIQ)
9. Tuples : Fast and Read-Only (Immutable)  
[https://youtu.be/r5BCdPA0oBI](https://youtu.be/r5BCdPA0oBI)
10. Dictionaries : Indexed with Keys  
[https://youtu.be/ucB9vRFnXMs](https://youtu.be/ucB9vRFnXMs)
11. Flow Control : If - Else - Elif  
[https://youtu.be/pQV4GgV24AM](https://youtu.be/pQV4GgV24AM)
12. Flow Control : While Loops  
[https://youtu.be/dkitNPmRjkA](https://youtu.be/dkitNPmRjkA)
13. Flow Control : For Loops and Range  
[https://youtu.be/ls-HZsl1xts](https://youtu.be/ls-HZsl1xts)

If you're interested in bookmarking the entire playlist, here's the link  
[https://www.youtube.com/watch?v=dVDRyLZXZCs&list=PLPjzo6hl2P4-Oa6gQS09EZbqPnxl\_deEW](https://www.youtube.com/watch?v=dVDRyLZXZCs&list=PLPjzo6hl2P4-Oa6gQS09EZbqPnxl_deEW)  
Note : 4 Additional videos will be available on the playlist each and every day.

Good luck learning & Happy Pythoneering.",1845,69,ayubphy,2021-06-10 16:25:46,https://www.reddit.com/r/learnprogramming/comments/nwrsn6/video_series_learn_python_programming_for/,1,learnprogramming
d7z2jw,Are you cut out to be a programmer?,"The short answer is **YES**. If you want to be.

I see posts all the time on this sub, which are basically asking this same question. And for good reason! Programming is *hard* for most people. Myself included. Personally, it took me about a year of practicing every day before it clicked.

But there are lots of difficult things that people learn that are complicated. Right now, your brain is performing an extremely complex task, which is reading English. You probably cannot remember learning English, but I can assure you that you sucked at it for the first few years! The trick to learning it was constant practice and not giving up.

Are some people naturally better at speaking, reading and writing the English language? Yes, of course! Some kids sound eloquent at the age of 6, while others sound like a caveman. But as adults, most people have learned English well enough that they can communicate their ideas to others, and that's what matters most.

The same goes for programming. Most of us will struggle along like toddlers learning their first language until eventually, we are writing complex logic and apps that get the job done.

One of the biggest tips I can give new learners is to NOT focus on learning a framework or specific technology. Start with a popular programming language with lots of community support, like python or javascript, pick a course/tutorial/book/whatever and stick to it. You should be watching/reading videos about 25% of the time and trying to program your own stuff (even if it's just a slightly different variant of what you're watching) about 75% of the time.

Also, in the beginning stages of learning programming, write your logic down ON PAPER **before** you try to type it into your machine. Programming syntax is precise, and bouncing back and forth between syntax and logic is extremely difficult for beginners. Writing stuff down on paper will allow your brain to focus on the logic. For the record, I have been programming for about 5-6 years and still write down complex logic on paper before I program it.

Yes, you are cut out to be a programmer. If you can read this post, you're not too stupid.",1843,224,jpayne0061,2019-09-23 00:35:23,https://www.reddit.com/r/learnprogramming/comments/d7z2jw/are_you_cut_out_to_be_a_programmer/,1,learnprogramming
k5ud4l,Have ADHD and wanna learn how to code? You can do it!,"I just wanna make a motivational post for my fellow ADHDers. 
If you are getting distracted while coding, you should try using a Pomodoro timer, it really helps for me as long as I don't do anything that will get me distracted during the pauses. If you are fully focused while coding, you don't have to use one tho.

Also you may lose interest after a while but that is totally fine, just do something else for a couple days and pick it back up when you get interested again, just don't wait too long so you don't forget everything!

I've been learning to code on and off for a while now and I might not be going at the fastest pace possible but at least I'm having alot of fun while learning!

If you are a social person you could try getting a coding buddy to get motivated!

Don't let ADHD get in the way of learning to code! 
If I can do it you can do it too, never give up! I believe in you!

If you have any other tips or questions for me and other people with ADHD please let me know!

Edit: people were saying that ADHD does not make you remember things faster, I heard it somewhere and I remember things fast so I just assumed it was true, sorry my bad",1846,295,kaajjaak,2020-12-03 09:50:56,https://www.reddit.com/r/learnprogramming/comments/k5ud4l/have_adhd_and_wanna_learn_how_to_code_you_can_do/,0,learnprogramming
5hgkxm,"Lovable dude does 30 min or less ""coding challenges"" in Processing while giving in-depth explanations of the process. Really informative and entertaining stuff.",https://www.youtube.com/watch?v=IKB1hWWedMk,1840,67,snickerton,2016-12-09 21:53:03,https://www.reddit.com/r/learnprogramming/comments/5hgkxm/lovable_dude_does_30_min_or_less_coding/,0,learnprogramming
co5x32,I made a Chrome Extension that skips Ads on YouTube,"[https://github.com/andykawabata/youtube\_ad\_skipper](https://github.com/andykawabata/youtube_ad_skipper)

So I've been learning to code for about a year now, messing with javascript on and off for that time. A few weeks ago I got the idea to automate clicking the ""skip ad"" button on youtube. When I located the element that listens for the click, I realized that you can do .click() on it even before the skip ""countdown"" is over and it will skip the ad! From here I thought it would be easy to make an extension that skips all ads. However, it was not easy! Here are some of the challenges I ran into and what I learned. Hopefully it will help anyone trying to make their own chrome extension.

**Content Script only fires with domain change** I was under the impression that your content script was reloaded into the page every time the URL changed. Not the case! From what I now understand, content scripts only run when you change wbesites, so going from video to video within youtube wouldn't trigger it. After a lot of searching I learned you can use a background script to listen for changes in the url of a specific tab and send a ""message"" to the content script of that tab. You can add an ""onMessage"" event listener in your content script that effectively is turned into a ""onUrlChange"" in my case.

EDIT: someone informed me that this is not true. The reason that switching videos doesn't reload the script is because they are loaded into the existing page with javascript. 

**Content Script Timing** I'm still unclear about how the Content Script loads in relation to the rest of the document. It seems to fire long before the DOM is finished loading. I tried using jQuery's ""$(document).ready()"" but my script was still trying to define elements that weren't loaded yet. I eventually used an ""onLoad"" event listener which was better but still didn't completely solve the problem. It seems like internet speed had something to do with it as well. I gave up and resorted to a brute force approach which used setInterval to continually try defining the element (every 200ms). If it became defined the click() would execute and the interval would be stopped. If it tried to define the element more than 21 times, the interval was stopped as well. This leads to a lot of unnecessary script-running but almost guarantees the element will be found and clicked.

**Detecting mid-video adds** I also had to figure out a way to detect ads in the middle of videos. I found a function called mutationObserver that listens for changes in the DOM. Every youtube video has a DIV that contains all the ad elements. When the video is playing, it's empty, when an ad starts, child elements are appended to it. I had mutation observer fire a script when any elements were added or removed to this parent. This method definitely triggers some ""false positives"" (script fires even when there's no ad) but I couldn't think of anything better.",1836,112,69leafclover,2019-08-09 17:52:20,https://www.reddit.com/r/learnprogramming/comments/co5x32/i_made_a_chrome_extension_that_skips_ads_on/,0,learnprogramming
bna6bd,"Tim Cook ""I don't think a four year degree is necessary to be proficient at coding""",">*""I don't think a four year degree is necessary to be proficient at coding"".*  
>  
>*""I think that's an old, traditional view. What we found out is that if we can get coding in in the early grades and have a progression of difficulty over the tenure of somebody's high school years, by the time you graduate kids like Liam, as an example of this, they're already writing apps that could be put on the* [*App Store*](https://www.macrumors.com/roundup/app-store/)*.""*

&#x200B;

[https://www.macrumors.com/2019/05/10/apple-ceo-tim-cook-says-no-degree-needed-to-code/](https://www.macrumors.com/2019/05/10/apple-ceo-tim-cook-says-no-degree-needed-to-code/)",1833,329,asamshah,2019-05-11 09:19:35,https://www.reddit.com/r/learnprogramming/comments/bna6bd/tim_cook_i_dont_think_a_four_year_degree_is/,0,learnprogramming
8s2b8l,"Thank you guys! One year ago I started this journey, and just got my first job offer working remote full time.","One year ago I discovered this subreddit and my new passion for programming.  You guys told me (well not me, personally) to take Harvard's CS50, and I did, and I loved it.  I then took the MOOC Java course because it seemed like Java was one of the more 'employable' languages. That course really helped me solidify OOP concepts.


After that I started following along one of the many 'beginner 2D game in Java' series on Youtube, and went off that to make my own fully fledged multiplayer card/board strategy game. My friends and I have been having fun playing it, and I finally whipped up a resume. 


Now I will be working from home as a programmer for a small team that is part of a very large company.  Couldn't be more eager, enthusiastic, and excited to start!


Anyway, my point is, I'm 31, have no college degree, and this subreddit changed my life.  I code every day, and would regardless of the job thing because I love it, but this is just incredible.


Thank you all! 



Edit:  Want to add some edits for a lot of common questions....

1. I had a technical interview which comprised of 2 people grilling me about my source code for my game.  I was able to talk calmly and confidently about my game.  Definitely prefer this to ""hey whats up with this algorithm and how can you improve it to be log(n).. whatever whatever.  I was asked ""how did you optimize this over time?"" ""Why do you have custom exceptions instead of the default try/catch ones?"" ""why do you instantiate new HashSets in most of your loops instead of copying existing ones?"" stuff like that.  I was very comfortable here. After this I had a second interview which was basically to see if I would fit company culture/ personality stuff.  I then got an offer 18 days after the second interview.

2. I had a couple other projects on my resume that were never brought up.  All in all I had three projects I was confident with, two of which were apart of the CS50 curriculum, a website that you could register, log in (SQLite db) and buy and sell stocks with fake money.  The other was using google maps API to get a news/RSS feed from any area you clicked on the map.  Again, this was never brought up, all they were concerned with was my game, written entirely in Java.

3.  Harvard's course:  https://www.edx.org/course/cs50s-introduction-computer-science-harvardx-cs50x
    
  MOOC Java:          http://mooc.fi/courses/2013/programming-part-1/


4. Do I have any advice? Not really.. I think my situation was unique enough to not really gather anything from it.  Hopefully you all keep doing this because you enjoy doing it.  Positivity breeds positivity.  Keep doing what you love, and be determined to make something, anything! If you think you are job ready, then say yes to any social invite, and speak with passion about your hobbies to everyone! Good things will come.


5. And finally, yes, you can play my game, but it won't be fun by yourself! It is designed to be played 1 vs 1.  If anyone likes strategy/tactical games, PM me and we'll set up a time to play.  Networking code is not finished so we'd have to play via skype or discord screen share, which is how my friends and I are playing.  Leader boards will be up soon.  My friends all seem to kick my ass in the game, so prepare to beat me. (but I will nerf all the cards you like right before the match). 

Thanks again, guys! <3",1832,135,martyworm,2018-06-18 19:32:17,https://www.reddit.com/r/learnprogramming/comments/8s2b8l/thank_you_guys_one_year_ago_i_started_this/,0,learnprogramming
jgtir5,Finally got my first job as a self taught developer!,"I already made a similar post sharing [an article](https://towardsdatascience.com/how-i-became-a-software-developer-during-the-pandemic-without-a-degree-or-a-bootcamp-ef7a4184efde) I wrote about my experience, unfortunately it has been   taken down automatically due to too many reports, I think it might have been due to the article being behind medium's paywall.

Since I think I received a great response for it and I think it's a pity it's not available anymore on Reddit I want to share my favorite tips from the article hoping it can help my fellow redditors and to say thanks to theis community that helped me so much in my journey. 

My background is in chemical engineering (dropped out the final academic year due to not liking the major), I worked for one year in a technology company in an unrelated position when I decided that I wanted to learn programming and become a developer.

I did not want to start university again due to bad experiences or join a bootcamp and spend thousands without being sure that it was the right path for me, so I moved back with my parents and started studying like I never did before in my life, when you are passionate about a subject the hours just fly by.

After one year of dedication, missed opportunities due to covid and failed interviews, I finally aced the interview for a fantastic company that saw my dedication and passion.

# Harvard's Introduction to Computer Science

 [CS50](https://www.edx.org/course/cs50s-introduction-to-computer-science) is just great. If you started recently or you are intermediate you should definitely take this course, it teaches fundamentals that too often get ignored by self-taught students and It puts the emphasis on being independent and learning to do it on your own.

It's definitely the thing that put me on the right track after months of not following a rigorous roadmap and not learning as much as I could. The staff is phenomenal and there is a free certificate if you complete every assignment and a final project of your choice. 

# Projects are vital

This is relevant for everyone, don't just stick to online courses or your lectures, reading about programming without actually doing it is as likely of making you a programmer as reading cookbooks without cooking is of making you a chef.

The best way to avoid “[tutorial hell](https://levelup.gitconnected.com/getting-out-of-tutorial-hell-4ed8aa788b2b)” and actually become competent is putting everything you learn to good use with projects based on the material you are currently studying. 

They are also great to showcase on your resume if you have don't have much relevant experience, but you have to be the one to bring them up because in my experience recruiters don't really have the time to check your GitHub repo.

# Commit to something

Another way to get stuck without making progress is trying to learn too many things at the same time without having a focus, or changing subject too often, learning the right thing is not as important as actually having a deep understanding of any topic, after you learn the first language or framework the second is drastically easier.

That shouldn't stop you from trying different things, I was sure Artificial Intelligence would be my passion when I realized that training models is actually quite boring and sometimes frustrating, just be sure that you dedicate enough time to each endeavor. 

# Don't wait too much before applying

You will never feel ready for your first job because you probably aren’t.  
Most companies, at least the good ones, hire juniors knowing well that they will lose them money for months before they are competent enough to bring profit, they are investing in you and committing to your improvement! 

Instead of waiting more ask a friend who is in the field or even people you don’t know on social media but are willing to help if your portfolio and knowledge are at the level necessary to pass a technical interview. 

# Networking is key if you don't have a brilliant resume

Let's be honest, the job market is absolutely screwed, every posting on Linkedin has hundreds of candidates, some of them seniors or mid level applying for lower level positions, unless you just graduated from Cornell or MTI you will have to send hundreds of applications before receiving any answer. 

That's why networking is so important, use your social media like Reddit, Twitter, and Linkedin actively, participate in job fairs and conventions (physical or virtual), try meeting people that work in the sector you aspire to be in and ask them for advice, even a cold message on Linkedin can do wonders if you keep the interaction polite. 

I got at least a couple of interviews from messaging recruiters on Linkedin, and I actually found my current company because the founder saw my profile on [AngelList](https://angel.co/jobs), and liked it enough to message and ask me to send my resume, the fact that we had a personal interaction really helped me in passing the first selection stage. 

# Prepare for the interview

Like it or not algorithms, data structures, and Leetcode are the standard for many technical interviews, you can definitely find jobs that ask domain specific questions, but you can hardly afford to shrink your already small opportunities pool.

Don’t forget that your interviewers are people! Being able to communicate how you reason is more important than arriving immediately at the right solution, also be likable and confident in behavioral interviews and do your research, companies want people that are committed to working with them.

# Learn from your rejections 

You will get rejected, it's part of life. I failed really important interviews for positions that I cared a lot about, but every time I took it as a lesson to improve on my weaknesses.

But also, don't take it too harshly, being deemed not ready for an opportunity doesn’t mean you aren’t good enough but that you have to keep looking for the right place and the right people that will be able to see your potential. 

Good luck to everyone, I hope you will be able to achieve your dream like I was able to.",1829,91,Federico95ita,2020-10-23 19:05:15,https://www.reddit.com/r/learnprogramming/comments/jgtir5/finally_got_my_first_job_as_a_self_taught/,0,learnprogramming
116633d,Anyone want to know what it's like to work on a real project?,"I am a software engineer with 20+ years exp. (Currently a VPoE, working with game studios around the world) and  I've been trying to simulate the experience of what it's like starting your first software engineering job.

Basically what I've come up with is this:

* A full project with all the complexities of a real world project ([Github](https://github.com/Code-Over-Time/varcade_games))
* A wiki with a run through of how to get set up and an intro to the project ([Github](https://github.com/Code-Over-Time/varcade_games/wiki) wiki)
* A bunch of hands on tasks, from junior to senior ([Github Q&A](https://github.com/Code-Over-Time/varcade_games/discussions/categories/announcements), so you can ask questions)

I've done a few iterations on this and am pretty happy with it, I think it replicates working on a real project very well ... actually I think the documentation is probably better than what you will find in your first job (unfortunately). It's all free and open source. Not exactly for total beginners (you should have at least doing a coding course or two).  But even a total beginner should be able to follow along and get the experience of setting up a full project.

&#x200B;

Anyway, I hope some of you can find some value in this!

\*Edit: I should also have said, there is a dev server [here,](https://varcade-games.com/) where you can actually try out the software

&#x200B;

\*Another edit: Here's a link to the Discord, if you want to join and work with other people (I'll also be there, helping people out - \*with my limited free time): [https://discord.gg/Em7yhQ3b5W](https://discord.gg/Em7yhQ3b5W)",1821,75,CodeOverTime,2023-02-19 09:14:15,https://www.reddit.com/r/learnprogramming/comments/116633d/anyone_want_to_know_what_its_like_to_work_on_a/,0,learnprogramming
mkmecv,"[Opinion] Harvard's CS50 is an amazing course and wonderfully taught, but it's not a good first course to learn programming/computer science for someone with no background","I know Python and Java and have done quite a bit of Data Structures work and a few personal projects. I recently went through the CS50 content for it's introduction to C before tackling an OS course. I absolutely loved the course and how Malan teaches, but I really think that the pace is way to fast for someone with no CS background. There was even a Harvard student in one of the lectures that tried to ask how to keep up because everything was going so fast. I think most of the students probably took AP computer science or had some previous knowledge, or else they make use of the TAs and office hours to keep up. 

For self learning, I think this goes way too quickly and shouldn't be recommended as a first intro course. The lectures are good so you think you ""get it"" because it's all explained so well, but then the problem sets are much more difficult and I think a lot of people would get discouraged or give up if they don't have a solid foundation of some of the concepts, (like previous experience working with loops, functions, etc.).

I just wanted to put this out there because I see the course recommended so much (and rightfully so). But for someone with no prior programming exposure, a gentler intro with a higher level language is probably a better start. For example, Georgia Tech's Intro to Python Programming course truly assumed no background knowledge, had a very gentle and thorough intro to all of the important concepts, and had a ton of built in exercises that started out very doable and gradually got harder. I never felt like I was in over my head. Something like that is going to be a lot less frustrating for someone learning on their own that may not have the option to ask for help when they inevitably get stuck. 

&#x200B;

And damn, C is an entirely different beast...",1820,269,hobbitmagic,2021-04-05 14:47:54,https://www.reddit.com/r/learnprogramming/comments/mkmecv/opinion_harvards_cs50_is_an_amazing_course_and/,0,learnprogramming
s5aqrn,It seems like everyone and their mother is learning programming?,"Myself included. There are so many bootcamps, so many grads and a lot of people going on the self-taught road. 

Surely this will become a very saturated market in the next few years?",1819,618,PerfectSuggestion428,2022-01-16 12:19:12,https://www.reddit.com/r/learnprogramming/comments/s5aqrn/it_seems_like_everyone_and_their_mother_is/,0,learnprogramming
f5clo3,"I’m a developer who has spent the last six years teaching web development to over 700,000 online students. AMA about how to become a web developer!","Hello!

I started my “career” as a lowly studio engineer in New York City (my claim to fame is that I worked with LCD Soundsystem). I quickly burned out and discovered I actually hated working insane hours for virtually no pay in a recording studio.  I discovered my love of teaching coding while studying computer science at NYU and I’ve been doing it ever since. Here’s a bit about me:

I started out teaching in-person web development bootcamps at General Assembly in San Francisco back in 2014. I eventually left to join Galvanize and help open up their San Francisco campus. I taught a couple hundred students over 2 years at Galvanize, and eventually became their Curriculum Director across all campuses.  94% of my in-person students went on to get full-time engineering jobs, and they work all over the world at companies ranging from tiny 2 person teams to tech behemoths  (Google, Apple, etc)

Teaching bootcamps (and attending them!) is crazy exhausting, so after a couple  years I was ready for a change.  At the same time, I recognized there was a clear lack of quality learning resources available online and so in 2016 I joined Udacity and started creating content for their nanodegree programs. Shortly thereafter I decided to release my first Udemy course, the Web Developer Bootcamp, in hopes of generating a little bit of income on the side.  I was completely caught off guard by the response to my course, and after a couple months of waffling back and forth, I decided to quit my job and focus on teaching online full-time.Fast forward to today, and I’ve released 9 courses on [Udemy](https://www.udemy.com/user/coltsteele/) with over 700,000 students choosing to enroll in them.   Last year I started up a [YouTube channel](https://www.youtube.com/channel/UCrqAGUPPMOdo0jfQ6grikZw) where I release free instructional videos on wide-ranging topics. Most recently, I’ve partnered with Springboard to launch the [Software Engineering Career Track](https://www.springboard.com/workshops/software-engineering-career-track/?utm_source=colt-steele&utm_medium=reddit&utm_campaign=sec), a job-guaranteed online bootcamp with benefits like 1:1 mentorship from a software engineering expert, capstone projects, live code reviews, on-demand TA support, and personal career coaching.

I’d love to answer any questions you have about becoming a web developer, bootcamps/courses, or anything else -- AMA :)",1821,244,colt-steele,2020-02-17 17:55:12,https://www.reddit.com/r/learnprogramming/comments/f5clo3/im_a_developer_who_has_spent_the_last_six_years/,1,learnprogramming
9umxty,Been a Chemist for 9 years with 2 degrees. Decided to quit everything and jump. After doing 6 months of self-studies + 4 months of a bootcamp -- landed a job successfully (corporate work),"Hello Reddit. Kind of my first post here ever. English is not my native language; please excuse any errors on my part.

I've been wanting to share my story for the longest time. I guess I was hesitant because I wasn't sure if I'd survive this long enough (in this industry). This story is almost 3 years old, and I've been working as a Software Engineer for a little over 2 years now.

&#x200B;

**October 2015**

It was a really tough time for me. I had two degrees—B.S. in Biochemistry and M.S. in Biomaterial Science—but I wasn’t doing well as a Chemist. My wage was barely $15/hr. I was demoted to a part-time position due to a financial crisis at the company. Later found out I was making roughly 16K. Most jobs I had prior to this was voluntary work (no-pay school research) as well. I guess that's when I thought, ""well, this is it. I quit.""

One night after work, I started writing random thoughts on a whiteboard:

* ""What do I truly love?""
* ""What are things I could spend hours on and not get bored?""

At first, I was compromising my answers—something related to Chemistry. Since, my life was full of compromises, I had to get the cheesiest answer possible. Basically, it came down to two choices—soccer and video game. How could I become a professional in these fields?

Well, I was 29, so becoming a professional player in either field seemed almost impossible.

* ""What about a professional game developer?""

&#x200B;

**November 2015**

That's how it started. I purchased my first programming course, ""Learn to Code by Making Games - Complete C# Unity Developer"" from Udemy by Ben Tristem. The very first program (or game) I built was a text adventure game. After about a month of game development, I admitted that this—programming—is more fun than my actual job.

&#x200B;

**December 2015 - February 2016**

I decided to take it more seriously. After finishing Codecademy's JavaScript stack, I began looking for much harder schools or programs to take. Udacity's Introduction to Programming and Front End Nano-degrees came next. I think that's when I first heard of the concept ""coding bootcamp."" It is also this moment, that I thought about quitting my job and go full-time on learning to code.

&#x200B;

**March 2016**

Ironically, I was getting married around this time. I remember telling (almost confessing) my wife the day before the wedding that I am quitting my job and pursuing a new career. She still married me (!) and simply said,

* ""Just do what you got to do. I believe you can make it happen.""

My wife was staying in Korea after the marriage ceremony. She had to wait for her Spouse Visa to process and that usually takes about 8 months. So, I thought 4-5 months of bootcamp + 3 months of job searching = will get me a job in perfect timing.

&#x200B;

**April - June 2016**

Well, my plan of making a transition in 8 months got sabotaged when I failed to get into Hack Reactor (popular bootcamp in SF) twice in a row. I was quite frustrated at this point with the decisions I made—quitting a Chemist job, paying $700 for a bootcamp prep course, etc. Turns out the best thing I did was taking that Hack Reactor prep course because I made some friends who eventually introduced me this another bootcamp. They had a much lenient way of accepting students, and everything else—price, online setting, timing—felt perfect for my needs. I enrolled right away.

&#x200B;

**June - October 2016**

During this time, I felt like Goku in the hyperbolic chamber. The course schedule went from 7 AM to 3 PM. Then, after a personal mentor session, it was back to studying again until 2 AM. Weekends were time to catch up on things I missed during the week. My parents were incredibly supportive both financially and emotionally. I dedicated the entire 4 months on nothing but programming—no friends, no soccer, no sun (okay, maybe not that). I graduated on October 7th of 2016. The very next day, (excited) I went to a career fair nearby and that's when I heard:

* ""You are pretty much worthless.""

I guess he (my friend's boss) was right. I mean, they were looking for a C# developer and I was this JavaScript guy with no ASP .NET background. But, still... that hurt me.

&#x200B;

**October - November 2016**

I canceled all my short travel plans and began buying a shit load of programming books.

* ""If you think I'm worthless, I'm going to prove you wrong.""

I remember following even more strict study plan than the bootcamp. Of the initial 95 jobs, I applied, I got 19 responses. Of the 19 responses, I had 9 interviews. Soon, my wife came to the US, but I was so sure that I could get the job in a month. Then, Thanksgiving came.

&#x200B;

**November - December 2016 (The End)**

HRs are humans too. They eat turkeys and they forget about you. At least that's how I wanted to believe. Of the 9 ongoing interviews, everything got dropped. No one responded to my follow-up emails. I had a tech home challenge that asked me to build a stack. Took me a day to finish, but no response. I began to feel sorry for my wife. She left her families and friends to live in a foreign land (where she can't even speak fluently) and I failed.

Then, there was a phone call around early December. A recruiter called saying there's a contract interview offer at a corporate nearby. It was such a huge company that I didn't even bother applying. I thought:

* ""Alright, I'll take it (as a practice).""

My attitude (going into the interview) was very calm because there was nothing that could go worse. I had already signed a rental agreement with the cheapest local apartment I could find (400 sqft, with washer/dryer outside). My plan was to survive the next 4 months in case the interview goes bad. They were looking for an Angular developer and I was a React one. I did my best to convince them I could learn Angular if given the opportunity. However, I missed a lot of questions asked, and I thought I definitely failed this one.

Next morning, I was packing my stuff to move into the new apartment, when I heard a phone call. The recruiter called me,

* ""You got the job! I'm so happy for you!""

Honestly, it took me like a good few hours to figure out that wasn't like an IRS scam call. They offered 75K and I negotiated up to 85K. I immediately canceled the apartment contract and moved to the best possible apartment I could find next to work.

&#x200B;

**December 2016 - Now (Epilogue)**

My contract for the corporate was extended to full length due to my performance. I ended up buying a \~2000 sqft house in a beautiful town. I moved onto a different company (much smaller, but stable) and am working there as a Front End Engineer.

I would be lying if I said I did this on my own. I had families, friends, mentors, recruiters, and random kind hearts to help me along the road. I cannot thank this community enough. I remember coming to this subreddit numerous times, mostly reading others' success stories and trying to get inspired. So, I hope this post inspires many out there that it's possible—and you are definitely NOT worthless.

&#x200B;

Thanks for listening to my story.

&#x200B;

**(Update)**

Wow, I really didn't expect >700 upvotes. Thanks all for liking my story. I had many requests to share the name of the bootcamp or the links I originally posted. I won't post the name of the bootcamp, because most people will think I'm trying to sell them. Again, I'm NOT affiliated with my bootcamp what-so-ever. I benefit nothing from this. If you would like to know the name just DM me.

I do, however, would like to take this opportunity to share my YouTube channel (and Twitter if you wish to connect). Mainly, because my channel is dedicated to helping others who are trying to make a transition into the tech industry as a programmer. I would like to share not only my knowledge and experience, but also fellow success stories as well.

* YouTube [https://www.youtube.com/channel/UCr3DrTo983haSYkCAFsygjg](https://www.youtube.com/channel/UCr3DrTo983haSYkCAFsygjg)
* Twitter [https://twitter.com/seanjun21](https://twitter.com/seanjun21) \- (Let me know if you are coming from Reddit, I'll follow back)

**(Update 2)**

Okay, 1.6K upvote WOW. I really didn't expect that. Thank you VERY VERY much. I'm reading all the DMs and trying to reply to all the comments one by one. Initially, I wrote this to inspire others, but in return, I'm getting inspired from all the positive comments I received. I'm like even thinking about printing some of these words and putting in on my wall. So, thanks, everyone.

I realized a lot of you guys DM me about the bootcamp name and which program I took (about 50% of DMs). I figured at this point, you guys already know I'm not doing this for ads or marketing purpose. Plus, it's kind of time-consuming for all of us to go through all the DMs just to get the name of the bootcamp :/ We are all aspiring programmers and lazy by nature :D So, I will just drop the names here.

* Thinkful is the name of the bootcamp I got enrolled back in June 2016.
* I was enrolled in their Full-Time Web Development program (4 months ended in October 2016). I think they updated and call it Engineering Immersion now. Last time I checked, the course is 5 months long instead of 4 months.
* I'm dropping names here to save the hassle of DM-ing everyone for a very simple question and answer. However, if you wish to know more about the program, feel free to leave a comment/DM. I will again do my best to answer all.

Thanks!",1812,248,None,2018-11-06 09:28:45,https://www.reddit.com/r/learnprogramming/comments/9umxty/been_a_chemist_for_9_years_with_2_degrees_decided/,0,learnprogramming
sfq3tk,"I am on my second job as a self-taught developer, wanted to share some things I wish someone had told me before I started.","I'll try to keep it short, in bullet point format. AMA anything in the comments.

- getting an ""in"" into the industry is just as, if not more important than acquiring technical skill

- solving leetcode-style problems is cool and probably matters for some interviews, but spending time coding in complex, real world projects is much, much more important

- if your goal is to get a job, make sure you are learning a tech stack common in your area. In my case, this is AWS, Node, and React

- become familiar with the basics of front end and back end code, but try to specialize in one or the other

- build strong portfolio projects. If you're front end, don't reinvent the wheel, use established component libraries/css solutions to get great looking projects fast

- you get better iteratively. Your first project will probably have horrible design patterns. Build multiple projects and count on making the last ones your featured portfolio projects

- try to practice coding every day, for years if you have to. Stamina is very important, so don't learn at a pace where you will burn out

- try to find someone better than you and pair up with them

- don't neglect the ""meta"" tools of development. Examples include VSCode extensions, the github/bitbucket UI, how to set up and use code linters, etc.

- you can be rejected after an interview and get an offer from that same company later. Don't burn bridges or discount a company just because you were rejected the first time",1795,144,None,2022-01-29 19:51:22,https://www.reddit.com/r/learnprogramming/comments/sfq3tk/i_am_on_my_second_job_as_a_selftaught_developer/,0,learnprogramming
ekhouk,MIT's Introduction to Programming Using Python course is back,"One of the most popular courses in edX's history - with over 1 million people enrolled - is back. Learn computer science and programming using Python from the instructors at MIT. The course is free to try:

[https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-0](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-0)",1797,96,DrunkRedditBot,2020-01-05 19:27:14,https://www.reddit.com/r/learnprogramming/comments/ekhouk/mits_introduction_to_programming_using_python/,0,learnprogramming
7yf4f8,Cheat sheet on the very basics of github and git,"Git/Github tutorials can make it seem like rocket surgery. It isn't. It is very easy to set up quickly. Below I describe how. It is a kind of minimal kernel to get your repository set up locally and at github.

# Get things set up with Git and GitHub
#### Set up Git locally    
a. Download and install Git (http://git-scm.com/downloads)    
b. If not in linux, open git terminal (Git Bash). In linux, it just works.    
c. Configure your username and email:    

    git config --global user.name <your user name>
    git config --global user.email <your email address>

####Sign up for Github account (https://github.com)    
I would suggest registering using the email you used in your Git configuration above.

# Do it up locally
1. In your project folder, make a `.gitignore` file that has the names of things you don't want to be version controlled (e.g., docx, *exe, pycache folders, and anything else you want hidden).      
2. cd to your project folder, and enter `git init`.  You know have a local github repository.   You pretty much are done.
3. `git status` to see what's up.    
4. `git add .` to add everything to staging area.    
5. `git commit -m ""my first commit!""` to commit to repository    

Now work on your project locally. When you have something cool, then commit it with commands 4 and 5.  You are using git. Use `git status` to see what's going on in your repository. 

# Do it up remotely
1. At github, point and click and such to create repository with project name that you want (e.g., foo). The url of the repository will be provided to you (e.g., `https://github.com/yourname/foo.git`).    
2. Connect your local repository to the remote one using that url you just got. At your terminal:     

    `git remote add origin https://github.com/yourname/foo.git`    
3. Push your local repository to github:      

     `git push origin master`    
It will ask you for your remote username and pw.

And now, whenever you have finished working on your local machine, just enter that same command from step 3 and your work will be pushed to github!

# Have fun
There, you've done it. Go check out your repository at github. Share it. Pat yourself on the back for a sec. Now, get to work and write that code! Maybe add a readme file to your project, so people will be able to read about it: github will show it automatically for you. The above is 99% of what I do with my little one-person projects. Once you hit a snag or need more information about more complicated stuff, you will be able to get it at stack overflow or google or via a book.

-----
**Edit**: Thanks redditors so much for the positive response to this! Based on the comments, there are a couple of things I will change in the next version of this cheat sheet. One: in Windows you don't *have* to use Git Bash, and I made it sound like you do. You can run the commands from the standard Windows terminal. Two: people have pointed out some really nice beginner tutorials, and I will add a short list of those for ""further reading"" next time (for instance what about `pull` and other basic stuff: a true beginner tutorial would teach you that once you have the above ultra-basics mastered). This was not meant to be a full beginner tutorial, but just enough to get someone using git/github to help realize how simple it is: something that I desperately needed a few years ago, and had trouble finding. Three: I will add a link to an explanation of what version control is and why you might need it: while that goes beyond the scope of this cheat sheet, a few people have asked about it and I think it is important especially at a sub on *learning* programming. ",1800,102,cpp_or_bust,2018-02-18 16:05:30,https://www.reddit.com/r/learnprogramming/comments/7yf4f8/cheat_sheet_on_the_very_basics_of_github_and_git/,0,learnprogramming
qjs3wh,I built futurecoder: a 100% free and interactive course for complete beginners,"Website: https://futurecoder.io/

Source code: https://github.com/alexmojaki/futurecoder

Highlights:

- **100% free** and open source, no ads or paid content.
- **No account required** at any point. You can start instantly.
  - (You can create an account if you want to save your progress online and across devices. Your email is only used for password resets. You can sign up separately for email updates on the home page)
- **Runs in the browser** using [Pyodide](https://pyodide.org/). No servers. Stores user data in firebase.
- **3 integrated debuggers** can be started with one click to show what your code is doing in different ways.
- **Enhanced tracebacks** make errors easy to understand.
- **Useful for anyone**: You can have the above without having to look at the course. [IDE mode](https://futurecoder.io/course/#ide) gives you an instant scratchpad to write and debug code similar to repl.it.
- **Completely interactive course**: run code at every step which is checked automatically, keeping you engaged and learning by doing.
- **Makes learning easy, not frustrating** with plenty of gentle guidance and optional help the whole way:
  - **Hints**: every exercise has many small optional hints to give you just the information you need to figure it out and no more.
  - **Solutions**: when the hints run out and you're still stuck, there are 2 ways to gradually reveal a solution so you can still apply your mind and make progress.
  - **Advice for common mistakes**: customised linting for beginners and exercise-specific checks to keep you on track.

I'm obviously biased but I honestly think futurecoder is better than Codecademy or any other similar website, without even counting the fact that it's free. For example, here are some drawbacks of Codecademy:

- Still on Python 3.6 instead of 3.9
- No interactive shell/REPL/console
- No debuggers
- Basic error tracebacks not suitable for beginners
- No stdin, i.e. no `input()` so you can't write interactive programs, and no `pdb`.
- No gradual guidance when you're stuck. You can get one big hint, then the full solution in one go. This is not effective for learners having difficulty.

Unless you're looking for something targeted at children, I believe this is the best way for any complete beginner to start learning programming. That's obviously a bold and subjective statement so I'm keen to hear other opinions and feedback. What do you think futurecoder needs? Videos? Quizzes? Gamification? These are all possibilities.",1795,128,alexmojaki,2021-10-31 15:40:58,https://www.reddit.com/r/learnprogramming/comments/qjs3wh/i_built_futurecoder_a_100_free_and_interactive/,0,learnprogramming
p83r66,Programming books every developer should read,"I have just picked up 'The clean coder' (Robert Martin). I had read somewhere that it was a worth-to-read book and then I decided to get it and see what can I find there.  


I think there are some pretty famous books from the same author that I will perhaps read as well, BUT, what I would like with this post is to ask to experienced developers in general to recommend books that would help junior developers to become better professionals in their career.  
I ask this because its not easy being a junior just to pick any code-related book that you can find in the library. So, if you have to recommend something that is a MUST read for developers, what would that be?  


Background: junior javascript developer looking forward to develop skills every day.",1787,189,Quiet-Blackberry-887,2021-08-20 11:59:19,https://www.reddit.com/r/learnprogramming/comments/p83r66/programming_books_every_developer_should_read/,0,learnprogramming
nyen17,3 things that has nothing to do with programming that made me a better programmer,"Hi,

Been talking to a friend who studies computer science at Harvard university. He is the best programmer I know, faster than most seniors at my work in terms of coding challenges. I spoke to him about wanting to be a better programmer, and I asked him what I could do to speed up my learning process as I'm already familiarizing myself with techniques such as Vim and upping my typing speed to 150 wpm.

He told me that in order to be a better programmer, other than just programming, you need to have 3 skills.

1. **Take long walks without a phone**

What he really meant was learn to be patient. Take long walks for an hour or preferably longer with your own thought. Focus on your breath, think about life and learn to be patient. The further from home the better. Just don't think about work or problems.

2. **Make art**

He told me that you need to be creative. Programmers tend to be very analytic and sometimes stay in the box due to their lack of creative thinking. He suggests activating your right brain. Whether this is through music, painting, sculpting or any other form of creativity does not matter he suggests.

3. **Work out**

There are multiple studies that prove that working out intensively 3 hours per week or longer can enhance memory significantly. I suggest going to *PubMed* and read the articles for yourself as there are tons that back this claim.

Don't force yourself to do anything. I found his 3 ''rules'' to be true, and I also feel happier. Hope you learned something.",1790,189,Celiuu,2021-06-12 19:41:09,https://www.reddit.com/r/learnprogramming/comments/nyen17/3_things_that_has_nothing_to_do_with_programming/,0,learnprogramming
gqxkph,I wrote up every module that I took in my CS degree with a list of searchable terms.,"The courses are broken down by semester so you can see the progression, and there are links to the full course description for each one on there. If you have any questions, I'd be happy to answer.

https://www.cameronmacleod.com/blog/cs-degree-structure",1785,100,notexactlyawe,2020-05-26 13:59:53,https://www.reddit.com/r/learnprogramming/comments/gqxkph/i_wrote_up_every_module_that_i_took_in_my_cs/,0,learnprogramming
4a8ohh,Why don't we tag each post on /r/learnprogramming with a specific language tag (C/C++/Python) so its easier to search?,,1784,63,vishnu_gupt,2016-03-13 15:28:43,https://www.reddit.com/r/learnprogramming/comments/4a8ohh/why_dont_we_tag_each_post_on_rlearnprogramming/,0,learnprogramming
9c380n,"Here's a list of coding exercises to help get you from ""Beginner"" to ""OK"" in a language","EDIT: By ""OK"" I mean that you can stumble your way through a relatively basic problem. If someone says ""I can speak French OK"", I wouldn't expect them to seamlessly translate complex thoughts from English to French. I would expect them to be able to walk around Paris, order food from a menu, ask where something is, etc. You may disagree with the word I chose to use, but that was the intent I was going for. Obviously there is MUCH more to programming that this stuff.

Hey all,

I'm currently a developer in the industry and I see a lot of posts on ""How should I get started with learning XYZ language"" so I thought I'd make a list of exercises (that increase in difficulty) that should familiarize yourself with any given language. If anyone finds this useful, I can continue to add more exercises with more difficulty:

1. **Hello World**: Create a program that outputs ""Hello World"".

2. **Loop**: Create a program that loops 10 times and output the current loop (ex. ""I'm on loop 6"", then ""I'm on loop 7"").

3. **First Class**: Create a class called ""Car"" that has 1 variable called ""licensePlate"". Within the class, create a default constructor that sets ""licensePlate"" to *'Unknown'* and a method/function called ""getLicensePlate"" that returns the variable ""licensePlate"".

4. **Second Class**: Add a second Car constructor to our class that takes 1 input of type String. This is the license plate number. Assign the value of the inputLicensePlate to our variable licensePlate.

5. **Inheritance**: Create an abstract class called ""Vehicle"". Within ""Vehicle"", create a variable called 'wheels"" and create a method/function called ""getWheels"" and return the variable wheels with that method. In addition, create an abstract method/function called ""washVehicle"". **NOTE**: *Usually you would create an Abstract class BEFORE creating the concrete class implementation (so you'd create Vehicle and then extend Car/Motorcycle after that) but in this specific case I wanted to make sure everyone knew how to create a simple class before going on to an Abstract class.*

6. **Inheritance pt. 2**: Make your Car class from before inherit from the Vehicle class. Alter the constructors accordingly and override the necessary functions/methods. In the Car class, your ""washVehicle"" method should output a String that reads ""I'm going through the car wash!"". 

7. **Inheritance pt. 3**: Create a ""Motorcycle"" class that inherits from the Vehicle class. Create the necessary constructors (wheels = 2, etc). For the ""washVehicle"" method, output a String that reads ""I'm washing my motorcycle by hand!"". 

8. **I/O**: Create a text file with 10 lines of license plates in it followed by the type of vehicle (for example, one line in the file would read “ABC123 Car”).  Add an instance variable of type String called “make”. Read the file and create an ArrayList of Vehicle objects with the corresponding attributes from the file. Every time a vehicle object is created, ask the user for an input for the make of the vehicle (ex: “Ford”). After array list is created and the file is read, output the contents of the ArrayList.

9. **Put it all together**: Create a text based game that lets a player role play as Frodo as he goes from the Shire to Weathertop. There is no combat system necessary, this is entirely story based. Allow the player to pick from a few choices to further the story along. Certain choices should kill the player if he chooses incorrectly. Every choice should be output to a text file. Bonus points if you implement an inventory function. **Try and think about sources of errors when you go along. Any time a user is allowed input into your program, that can open your program up to a ton of bugs**.

10. **Bonus**: Write unit tests for your code in step 9. Unit tests are VERY important. Any dev team worth its weight in gold will test (ha) you on this in your interviews.

11. **Bonus pt. 2**: Go back to number 8 and start from the ground up using the “Test Driven Development” methodology. TDD is a different way of approaching coding design and I’ve been quizzed on a it a couple of times in interviews.

**Version Control**: Create a GitHub project repository and upload your code there.

**Critique**: Share your GitHub project here if you have any questions or want any critiques!

**Profit**: Make $200k because you're now the greatest developer since Bill Gates.

In all seriousness, feel free to reach out to me for any advice or guidance! If you run into a brick wall and can't figure it out, don't sweat it! Half of my coding time is spent reading documentation, StackOverflow, and google. I won't give you the right answer, but I'll point you in the right direction!

EDIT: More problems. These will be a little more in-depth and assume you have the basics of your language down. I'll try and throw in some problems from my past interviews. A lot of them can probably be found online on leetcode or the like, so don't expect any groundbreaking stuff here.

1. **Fibonacci Sequence Calculator**: From an interview with a fairly popular messaging app company in Asia. Create a program that calculates the nth number in the Fibonacci sequence. What is the your runtime? Can you think of any better ways to calculate it? 

2. **Design Exercise**: You are tasked with creating the battle system for Creative Assembly's ""Total War Warhammer"". The following are the requirements:

- A battle is in real time between 2 players (one AI, one human player)

- Each player has anywhere from 1 to 20 units (or squads)

- Each unit is comprised of anywhere from 1 to 120 individual models. 

- Every model within the unit has the same stats (attack, defense, armor, etc) EXCEPT for ""current health"" (which will change as the battle progresses).

- Each model does damage to an enemy model based on a formula Creative Assembly uses (I'll add this when I remember where it was)

- A player wins when the enemy has no more units

- For simplicity's sake, start off with Player A having 1 unit of melee units and Player B having 1 unit of melee units.

- Minimum Viable Product: Battle Report should output a list of each player's units before the battle. Upon 1 player's victory, another Battle Report should be generated that states the winning players current unit's, unit size, etc. No need to display graphics, a simple text will do.

- At a high level, how would you design this? Would you use an inheritance structure or something different? How would you scale your program from 2 total units in combat to 20 vs 20 (with potentially thousands of models engaging in combat)? Are there any constraints to the language you're using? If I added a requirement of ""only IndividualModels within X distance of the enemy can attack"", how would you approach this? 

3. **Island Counter**: This was from an interview with a midsized company for a Backend Dev position: You have a 2-dimensional array (or grid) of 1's and 0's. The 1's represent ""land"" and the 0's represent ""water"". An island is defined as a group of at least 1 ""1"" that is surrounded by water. It is assumed that the edges outside of our grid are water for the sake of simplicity. Create an algorithm that calculates how many UNIQUE islands are present in our grid. What is your runtime? Is there any improvement that can be made to your runtime?

4. **Multi-threading**: I'd like to input a multi-threading problem in here, but I can't think of one off the top of my head. I'll edit later as I think of it.

5. **Data Pulls**: You are the developer for an organization that needs data from different data sources. These data sources are comprised of databases (Oracle, MySQL, Postgres), copying and pulling flat files (.txt, .csv, .tsv), using FTP to pull an XML file, and a potential for many future data sources to be added. You are tasked with creating a brand new ""data pull program"" that manages the various data source pulls. All data sources must be written to a file of some kind and stored on a generic file server in any format you wish (so SQL query results should be written to a file and then sent to the destination).

- How would you design this? What language would you use? Are there any frameworks/libraries you can think of that would assist you?

- What are some potential issues you could run into? What sort of Unit Tests would you write to test out the various pulls?

- How would you manage to QA each file to ensure it is complete and accurate (with no dropped data between source and destination)?",1782,102,None,2018-09-01 13:56:59,https://www.reddit.com/r/learnprogramming/comments/9c380n/heres_a_list_of_coding_exercises_to_help_get_you/,0,learnprogramming
zg0qg4,You can use ChatGPT to train yourself,"Ask it questions like:

""Can you give me a set of recursive problem exercises that I can try and solve on my own?""

And it will reply with a couple of questions, along with the explanation if your lost. super neat!",1775,206,gamerbrains,2022-12-08 14:37:38,https://www.reddit.com/r/learnprogramming/comments/zg0qg4/you_can_use_chatgpt_to_train_yourself/,0,learnprogramming
sm3jvk,Working for a company has been a lot different than I thought,"So I've been working as an API dev for the past 6 months in a large company. It's quite interesting to see how much different it is from what I thought. 

**Experience**

At first I  presumed that in corporate, everything was super strict based on how to write your code perfectly, how to use the right tools effectively and everything had to be THEIR way. But in my experience *(and please note that I do understand this differs from company to company)* it's completely different. People give me the job, expect me to figure it out based on security standards and done. 

Then when I have questions, I approach a senior and half the time he's not even sure, so we're kind of just stackoverflowing together while he tries to connect the dots in places where I can't.

**The point**

The reason for me sharing this is to tell you that if you're anything like me, there's no need to worry. If you love to learn and are passionate about programming, it's literally just like a Computer Science class, but with a salary.",1780,119,Celiuu,2022-02-06 18:22:06,https://www.reddit.com/r/learnprogramming/comments/sm3jvk/working_for_a_company_has_been_a_lot_different/,0,learnprogramming
j37iy9,"If you had 45 weeks to learn enough programming from the ground up to apply for jobs, where would you start?","I understand the most important thing is to just do it, but I still feel more comfortable setting even very general targets

CS50 -> The Odin Project (this looks amazing thanks to all who suggested) Full Stack Javascript while simultaneously studying for AWS cert.



.....

I lost my job in August due to Covid layoffs. I was earning quite a high salary considering the industry I was in and it will be extremely difficult to land something that good again in that industry. I started a degree in Cognitive Science, but couldn't finish because my education was being paid for by my job. I didn't really get into any of the computer science courses.

Since I was laid off, I qualify for Employment Insurance for 45 weeks. My income has been cut in half so I will have barely enough for rent and bills, but I want to use this time efficiently to learn enough programming to apply for some entry-level developer jobs.

My questions are.

1. If you were on a really tight budget right now, which laptop would you buy that would be able to support this goal
2. If you had 45 weeks to learn, how would you map it out? I'm thinking of starting with CS50 and going from there. I have basic knowledge of HTML and CSS and javascript but I would like to start from the beginning. I would like to learn python and then I'm open to suggestions from there. Preferably looking for free or affordable resources that have a start and end (like a course)
3. I really like the creative side of programming. I even think I'd enjoy UI/UX design, but not sure where I should start with that.

TL;DR

You have 45 weeks, all day availability. How would you map out your 45 weeks to learn enough to apply for entry level jobs",1772,302,None,2020-10-01 12:23:17,https://www.reddit.com/r/learnprogramming/comments/j37iy9/if_you_had_45_weeks_to_learn_enough_programming/,0,learnprogramming
addzno,The best thing about learning to program is no longer seeing targeted ads on depression,"Everything is now about programming.

Oh, and I’m happy :)",1768,85,prozaczodiac,2019-01-07 04:24:12,https://www.reddit.com/r/learnprogramming/comments/addzno/the_best_thing_about_learning_to_program_is_no/,0,learnprogramming
jjlues,I finally opened my years-old Pandora's Box of cybersecurity & programming resource bookmarks while in quarantine,"One of my nasty habits is bookmarking useful online resources and then forgetting about them.

Last week, while I was in quarantine, I used my free time to open this Pandora's Box. 

Some of the resources were super useful, and some are now irrelevant.  I don't actually remember why I bookmarked some of them, but I thought that they might be useful for some people, so I'm deciding to share a few of these links with the community.

- [Tools You Should Know As A Cybersecurity Engineer](https://medium.com/manishmshiva/10-tools-you-should-know-as-a-cybersecurity-engineer-3b9809c7bbc2)
- [Offensive Security 2013 - FSU - Lecture5: Reverse Engineering (x86) Workshop Day 1](https://www.youtube.com/watch?v=Pg8bmV9vcKg&feature=youtu.be)
- [Computer Systems Security Course](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-858-computer-systems-security-fall-2014/)
- [Some notes for journalists about cybersecurity](https://blog.erratasec.com/2018/10/some-notes-for-journalists-about.html#more)
- [The DDoS That Almost Broke the Internet](https://blog.cloudflare.com/http3-the-past-present-and-future/)
- [Penetration Testing Tools Cheat Sheet ∞](https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/)
- [So, you want to work in security?](https://www.freecodecamp.org/news/so-you-want-to-work-in-security-bc6c10157d23/)
- [A site with tons of cool hacking tutorials](https://null-byte.wonderhowto.com/)
- [How to C (2016)](https://matt.sh/howto-c)
- [How I hacked hundreds of companies through their helpdesk](https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c)
- [The Definitive C++ Book Guide and List](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list)
- [Cybersecurity Visuals Challenge](https://www.openideo.com/challenge-briefs/cybersecurity-visuals)
- [Hijacking user sessions with the Heartbleed vulnerability](https://mattslifebytes.com/2014/04/08/hijacking-user-sessions-with-the-heartbleed-vulnerability/)
- [Free training by Palo Alto networks](https://www.paloaltonetworks.com/services/education/digital-learning)
- [How I made LastPass give me all your passwords](https://labs.detectify.com/2016/07/27/how-i-made-lastpass-give-me-all-your-passwords/)
- [What is SAST](https://www.perforce.com/blog/kw/what-is-sast)
- [Python Cybersecurity and Penetration Testing](https://talkpython.fm/episodes/show/37/python-cybersecurity-and-penetration-testing)
- [Introducing Chronicle, a new Alphabet business dedicated to cybersecurity](https://medium.com/chronicle-blog/give-good-the-advantage-75ab2c242e45)
- [Docker Image Vulnerability Research](https://www.federacy.com/blog/docker-image-vulnerability-research/)
- [State of Cybersecurity Industry Exposure at Dark Web](https://www.immuniweb.com/blog/state-cybersecurity-dark-web-exposure.html)
- [Cybersecurity Advice for Political Campaigns](https://zeltser.com/security-checklist-for-campaigns/)
- [How we exploited a remote code execution vulnerability in math.js](https://capacitorset.github.io/mathjs/)
- [Site for training your hacking skills](https://www.root-me.org/?lang=en)
- [Free Vulnerability management training by Qualysguard](https://www.qualys.com/training/)
- [Ethical Hacking Course, Learn Ethical Hacking Online | Cybrary](https://www.cybrary.it/course/ethical-hacking/)
- [Free training by cisco on Cyber Security](https://www.cisco.com/c/m/en_sg/partners/cisco-networking-academy/index.html)
- [ImageMagick Is On Fire — CVE-2016–3714](https://imagetragick.com/)
- [A beginner's look at smart pointers in modern C++](https://www.internalpointers.com/post/beginner-s-look-smart-pointers-modern-c)
- [Sudo Vulnerability ](https://www.openwall.com/lists/oss-security/2019/10/14/1)
- [Training playground](https://www.hackthissite.org/)
- [VulnHub](https://www.vulnhub.com/)",1772,71,cresidential,2020-10-28 11:16:21,https://www.reddit.com/r/learnprogramming/comments/jjlues/i_finally_opened_my_yearsold_pandoras_box_of/,1,learnprogramming
n8i7pq,Git Cheat Sheet,Useful one from GitLab: [https://about.gitlab.com/images/press/git-cheat-sheet.pdf](https://about.gitlab.com/images/press/git-cheat-sheet.pdf),1770,82,None,2021-05-09 16:52:06,https://www.reddit.com/r/learnprogramming/comments/n8i7pq/git_cheat_sheet/,0,learnprogramming
gi7dor,Can teach programming for free,"~~Hi. I'm a middle-level full-stack web developer with around 1.5 years of teaching experience. I can teach you HTML, CSS, JavaScript, React Native, Redux, Python, PHP, Git for free online. Also I can help you with Django, Laravel, Vue.js, Vuex, MySQL, MongoDB.~~

~~The problem is, my English is not so good. It would be nice if you could help me with American English speaking and accent.~~

~~Edit: basically, I just need somebody to chat with me in English and correct me now and then. My languages are Uzbek and Russian.~~

~~I'm available at 7:30 pm - 9 pm and 7 am - 8:30 am New York time.~~

Edit 2: Thanks to all. I've got plenty of responses, but obviously I can't teach so many people, so pardon me if I didn't answer your DM or comment.",1771,256,uu38,2020-05-12 08:43:06,https://www.reddit.com/r/learnprogramming/comments/gi7dor/can_teach_programming_for_free/,1,learnprogramming
cv235d,"University of Helsinki publishes a free course on ReactJS, NodeJS and GraphQL!","The university of Helsinki just published a intro course on modern web development, using ReactJS, Redux, NodeJS and GraphQL!

I think this is a nice oportunity for people who want to get started with web development!

Here is an article on it:

https://wptavern.com/university-of-helsinki-publishes-free-intro-course-on-modern-javascript-based-web-development

Good luck guys!",1767,73,estebanborai,2019-08-25 01:30:41,https://www.reddit.com/r/learnprogramming/comments/cv235d/university_of_helsinki_publishes_a_free_course_on/,0,learnprogramming
rc4ytf,3 months ago I got hire as a Junior Software Engineer and today I was fired.,"three months ago I felt on top of the world and that I really could cut it. I was let go because of other members (my mentors) on the team leaving and lacking enough experience to run with tickets on my own. I'm now filled with doubt and am embarrassed. 

I really enjoyed my first programming job and after I get over the initial shock/sadness I want to get back to studying and learning. I want to become a software engineer. I would love any advice any of you might have to me on how prepare for another job and how to pick myself back up.

Edit: Thank you all for the feedback and support, I'm going to try and respond to everyone but if I can't, thank you again! I feel like I have a roadmap of next steps and a plan for how to get there. I also feel like I'm not alone in this journey. I look forward to being able to update you all on my next steps.",1765,160,username-sucks,2021-12-09 00:21:46,https://www.reddit.com/r/learnprogramming/comments/rc4ytf/3_months_ago_i_got_hire_as_a_junior_software/,0,learnprogramming
x8ed3s,31 year old fire fighter looking for a career change. Is this too late? Please help.,"Hello.

I've spent the last 10 years as a fire fighter, and I am absolutely done with it. I just can't do it anymore - the stress and PTSD is getting to me. I can't sleep well at night, I keep seeing things from the job which no-one should see. I'm honestly (excuse the pun) burned out, and I have the scars to prove it.

Work put me on sick leave, which I've been on for a month now, and I've decided I need a change. Something with less dead children, you know?

I've always been good with computers, and my mind is geared towards logical processes and problem solving. I've tried my hand at some basic HTML, which all makes complete sense.

But is 31 year old too old to enter the profession? I've had a look, and I'd like to be a full stack developer. I really have no idea where to start or what to learn though - there seems to be SO MANY languages...

I just want to make good money. What should I be doing or learning? Also, how long does it usually take from beginning to learn, to actually taking it as a profession? 

Any help, guidance or support would be greatly appreciated.",1756,553,None,2022-09-07 19:39:55,https://www.reddit.com/r/learnprogramming/comments/x8ed3s/31_year_old_fire_fighter_looking_for_a_career/,0,learnprogramming
l7vfvs,Web developers learning to code,"[https://reddit.com/r/indiewebdev](https://reddit.com/r/indiewebdev) \- web development

[https://reddit.com/r/webdev](https://reddit.com/r/webdev) \- web development

[https://reddit.com/r/webdevbuddies](https://reddit.com/r/webdevbuddies) \- find web development buddies

[https://reddit.com/r/web\_design](https://reddit.com/r/web_design) \- web design

[https://reddit.com/r/frontend](https://reddit.com/r/frontend) \- web frontend

[https://reddit.com/r/backend](https://reddit.com/r/backend) \- web backend

[https://reddit.com/r/Web\_Development](https://reddit.com/r/Web_Development) \- Web development news

&#x200B;

Learn

[https://reddit.com/r/learnprogramming](https://reddit.com/r/learnprogramming) <-- you are here

[https://www.reddit.com/r/accessibility](https://www.reddit.com/r/accessibility) \- web accessibility

[https://reddit.com/r/learnjavascript](https://reddit.com/r/learnjavascript) \- javascript frontend and backend

[https://reddit.com/r/learnpython](https://reddit.com/r/learnpython) \- python backend development

[https://reddit.com/r/learnjava](https://reddit.com/r/learnjava) \- java backend development

[https://reddit.com/r/FreeCodeCamp](https://reddit.com/r/FreeCodeCamp) \- general web development

[https://reddit.com/r/learnreactjs](https://reddit.com/r/learnreactjs) \- react frontend web development

[https://reddit.com/r/WebdevTutorials](https://reddit.com/r/WebdevTutorials) \- web tutorials

[https://reddit.com/r/learnwebdev](https://reddit.com/r/learnwebdev) \- web development

[https://reddit.com/r/djangolearning/](https://reddit.com/r/djangolearning/) \- django python backend development

&#x200B;

Help

[https://www.reddit.com/r/javahelp](https://www.reddit.com/r/javahelp) \- help with java

[https://www.reddit.com/r/PHPhelp](https://www.reddit.com/r/PHPhelp) \- help with php

&#x200B;

Languages

[https://reddit.com/r/css](https://reddit.com/r/css) \- frontend styling

[https://reddit.com/r/html](https://reddit.com/r/html) \- frontend structure

[https://reddit.com/r/html5](https://reddit.com/r/html5) \- frontend structure

[https://reddit.com/r/javascript](https://reddit.com/r/javascript) \- backend and frontend

[https://reddit.com/r/typescript](https://reddit.com/r/typescript) \- backend and frontend

[https://reddit.com/r/elm](https://reddit.com/r/elm) \- backend and frontend

[https://reddit.com/r/Clojure](https://reddit.com/r/Clojure) \- backend and frontend

[https://reddit.com/r/rust](https://reddit.com/r/rust) \- backend

[https://reddit.com/r/python](https://reddit.com/r/python) \- backend

[https://reddit.com/r/ruby](https://reddit.com/r/ruby) \- backend

[https://reddit.com/r/golang](https://reddit.com/r/golang) \- backend

[https://reddit.com/r/java](https://reddit.com/r/java) \- backend

[https://reddit.com/r/php](https://reddit.com/r/php) \- backend

[https://www.reddit.com/r/lisp](https://www.reddit.com/r/lisp) \- backend

[https://www.reddit.com/r/haskell](https://www.reddit.com/r/haskell) \- backend

[https://www.reddit.com/r/perl](https://www.reddit.com/r/perl) \- backend

[https://www.reddit.com/r/csharp](https://www.reddit.com/r/csharp) \- backend

&#x200B;

Frameworks

[https://reddit.com/r/vuejs](https://reddit.com/r/vuejs) \- frontend javascript web

[https://reddit.com/r/reactjs](https://reddit.com/r/reactjs) \- frontend javascript web

[https://reddit.com/r/sveltejs](https://reddit.com/r/sveltejs) \- frontend javascript web

[https://reddit.com/r/angular2](https://reddit.com/r/angular2) \- frontend javascript web

[https://reddit.com/r/django](https://reddit.com/r/django) \- backend python

[https://reddit.com/r/flask](https://reddit.com/r/flask) \- backend python

[https://reddit.com/r/dotnet](https://reddit.com/r/dotnet) \- backend framework

[https://reddit.com/r/blazor](https://reddit.com/r/blazor) \- frontend framework

[https://reddit.com/r/rails](https://reddit.com/r/rails) \- backend ruby

[https://reddit.com/r/node](https://reddit.com/r/node) \- backend javascript

[https://reddit.com/r/laravel](https://reddit.com/r/laravel) \- backend php

[https://reddit.com/r/springframework](https://reddit.com/r/springframework) \- backend java

[https://www.reddit.com/r/symfony](https://www.reddit.com/r/symfony) \- backend php

&#x200B;

Retro

[https://www.reddit.com/r/flash](https://www.reddit.com/r/flash)",1760,85,AttitudeSilver2004,2021-01-29 15:32:54,https://www.reddit.com/r/learnprogramming/comments/l7vfvs/web_developers_learning_to_code/,1,learnprogramming
451sd7,This sub is quite unfriendly,"An unpopular opinion since some people here do not seem to take critisism well and abuse the downvote button like crazy because they think they need special treatment and how dare you post beginners' bs here asking for help. This sub has a lot of subscribers and active users yet shit goes downhill with most of the posts that aren't happy ending stories of people succeeding. I sense a lot of bitterness among users that don't seem to grasp what learnprogramming does. Not surprised that it's infested with know it all-programmers that are ready to jump begginers for simple mistakes. Of course a lot of nice people here helping but still wtf
      
Just wanted to get most controversial post in this sub's history, don't mind me",1749,370,None,2016-02-10 08:38:41,https://www.reddit.com/r/learnprogramming/comments/451sd7/this_sub_is_quite_unfriendly/,0,learnprogramming
omd9bh,It took me over three years to create this (Free) Conversational Python Course. Excited to introduce Primer.,"Hi Everyone,

There are two widely used learning mediums for self-directed learning: **Books** and **Video Lectures.** I have been working on creating a new learning medium that is designed specifically for self-learners, or autodidacts: **Primer**

Primer is not a better MOOC, rather a better Book. You can think of it as a **book that talks**.  **Conversational Books**. I like to think of it as your **personal tutor**.

To demonstrate the capability of Primer and why is it better, I have written a **Free Python** course.

You can visit [Primerlabs](https://primerlabs.io) right away to interact with Primer. If you want to take a look at how Primer looks, you can take a look at this [twitter thread](https://twitter.com/_Wzard/status/1416500216832806912).

You have to sign up to interact with Primer. If you dislike signing up (just like me) and just want to know the Python course content, you are in luck as the course is also available as an **online book.** You can check the [online Python book here](https://primerlabs.io/books/python-i/).

The Python-1 course is actually a 430+ page book (if converted), however, on average you can complete the course within 12-15 hours. If it were a video-based course, it would have been around 60 hours of lectures.

You will find this [introductory blog post](https://primerlabs.io/blog/introducing-primer/) quite useful in getting a hang of why Primer is better than books and video lectures (in many cases).

The Python-1 course is also available as a [PDF.](https://assets.primerlabs.io/Python-1/Python-1+Book.pdf) Although, I would not want you to read that. What I want you to do instead is complete the course on Primer and generate your own **personalized notebook** in the form of a PDF, **automatically generated** from your **conversations**, **questions**, and **notes** on Primer.

While other learning websites provide you with certificates of completion, I believe that a **personalized notebook** will be much more useful for you in the long run.

Here are some additional reasons why Primer is cool:

\- You can **retrace** what you have learned. There is a dedicated mode for that- Important course **equations**, glossary **terms**, and **codes** are automatically added to the sidebar.- **Flashcards** are generated from these cards for you to review- You can create your own cards if you want. You can do so by creating notes and questions- There are **prompts** for creating notes and questions.- You can export all your cards to **Anki**\- You can update your **notebook** for life- and much more...

I am excited to hear from you, folks.

Note: I am releasing Primer Platform for the first time to such a large audience and the application is itself is still in beta. If you face any issues, please feel free to hit me up at the official [discord channel](https://discord.gg/7ZB5FU8mpp).",1752,101,geek--god,2021-07-17 21:33:26,https://www.reddit.com/r/learnprogramming/comments/omd9bh/it_took_me_over_three_years_to_create_this_free/,1,learnprogramming
9fh3d5,Programming Youtuber Attacks Me,"I don’t know if anyone else has watched any of Chris Sean’s YouTube videos, but basically he’s a front end developer who’s a walking advertisement for team tree house. That being said, I have watched many of his videos and even subscribe to him. 

Yesterday I simply commented a shortcut to the main content of his video, since he waits over 7 minutes to answer the question in the headline of his video. He quickly attacked my comment and said this —

“Lol. I wonder if you’re able to persevere long enough to even learn a language in this industry. Most likely not, but good luck because you’ll need it”

I used to think he was an okay guy, but he literally attacked me for helping people find the center point of his video. Guess he’s just hungry for ad revenue.  

*Edit*
Here is the picture of his comment

https://imgur.com/gallery/OTFAjFi",1744,329,Moye16,2018-09-13 11:17:03,https://www.reddit.com/r/learnprogramming/comments/9fh3d5/programming_youtuber_attacks_me/,0,learnprogramming
cybk7y,I took part in Google Summer of Code 2019 and for the first time developed a cross-browser extension. I was surprised to learn that it's not very complicated to develop a cross-browser extension. I am sharing the resources that have helped me during this awesome learning experience!,"Thanks to [WebExtensions API](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API), it's easy to make cross-browser extensions. In my opinion, [Mozilla docs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions) are the best out there if you need any beginner or intermediate help.

**Some notable links from Mozilla docs are**:

* [your first extension](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension): Good for getting started
* [anatomy of an extension](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Anatomy_of_a_WebExtension): Know what are the components that make up an extension
* [Porting a Google Chrome extension](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Porting_a_Google_Chrome_extension) and [Chrome incompatibilities](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Chrome_incompatibilities): Port firefox addon to chrome and know about the minor incompatibilities b/w them.

**Blog posts**

* [Things I learned from migrating a Chrome extension to Firefox using WebExtensions](https://blog.yorkxin.org/2017/09/25/things-i-learned-from-migrating-a-chrome-extension-to-firefox-using-webextensions.html): A must-read.
* [Creating My First Chrome Extension](https://24ways.org/2018/my-first-chrome-extension/)

**Video tutorials**

* Nice introduction to chrome extensions by the amazing Daniel Shiffman - [YouTube Link](https://www.youtube.com/watch?v=hkOTAmmuv_4&list=PLRqwX-V7Uu6bL9VOMT65ahNEri9uqLWfS&index=2&t=0s)
* A quick, beginner-friendly tutorial by Kyle Robinson Young - [Youtube Link](https://www.youtube.com/watch?v=Ipa58NVGs_c)
* Beginner-friendly playlist with over 40 short videos - [Youtube Link](https://www.youtube.com/watch?v=8q1_NkDbfzE&index=1&list=PLC3y8-rFHvwg2-q6Kvw3Tl_4xhxtIaNlY).

Porting Chrome extension to Opera is very easy. They literally state this fact in their [extension documentation](https://dev.opera.com/extensions/). [Here is a handy table](https://dev.opera.com/extensions/apis/) with the list of chrome APIs supported by Opera and the differences.

Do check out the [GSoC project on Github](https://github.com/creativecommons/ccsearch-browser-extension). I know I could have done some things in a better way.

I will continue to maintain and improve the extension and any feedback from you is more than welcome :)

Thanks!",1739,34,main_aisa_kyun_hoon,2019-09-01 15:49:28,https://www.reddit.com/r/learnprogramming/comments/cybk7y/i_took_part_in_google_summer_of_code_2019_and_for/,0,learnprogramming
o7eqic,To those of you doubting yourselves,"Quick background: I work at a big tech company you've probably all heard of. I'm \~3 years into my ""career"" and I just barely feel like I know what I'm doing.

I talk to a lot of high school CS students, early in career software engineers, and interns at my company. There's a common theme between almost every single person I've talked to: impostor syndrome. Some folks even ask me how get around it. My answer?

¯\\\_(ツ)\_/¯

I find it funny because impostor syndrome is something I still deal with to this day. I feel like I just normalized the feeling of being confused, and got more confidence in my ability to ""figure it out."" Take it from someone who graduated high school with a 2.3 GPA and went to a college not known for its CS program because it was affordable:

YOU CAN DO IT! It's a tough road, but its satisfying and well worth it.

Dunno why I decided to write this but I hope someone who needs to see this does. Also forcing this post out to fight my own ""perfectionism"" that does more harm than good.

Edit: Now I understand why reddit posts that blow up have an ""Edit: RIP my inbox"" lol. Expect more ""tangible"" posts from me in the future! working on a ""what to expect in a whiteboard interview"" post.",1740,127,doughnuts_dev,2021-06-25 02:42:20,https://www.reddit.com/r/learnprogramming/comments/o7eqic/to_those_of_you_doubting_yourselves/,0,learnprogramming
6v6vrz,FREE Student Development Packs,"I have grabbed a few dev packs which have helped me when I studied so I'll share them here so you guys can benefit.

**Github Student Developer Pack**

The Github Student Developer pack gives you free access to paid educational resources, web hosting, unlimited repositories and more - this is one of my favorite ones.

Link: https://education.github.com/pack
 
**Microsoft Imagine (Dreamspark)**

Free access to Microsoft Software such as Windows 10, Office 365, Visual Studio etc...

Link: https://azure.microsoft.com/en-us/pricing/member-offers/imagine/

**Pluralsight**

For those of you who don't know, you can join the Microsoft Development Essentials program which gives you a 3-month subscription to Pluralsight.

If you don't know what Pluralsight is, it's like Udemy but once you sign up you get unlimited access to all their courses.

Link: https://www.visualstudio.com/dev-essentials/

**JetBrains**

If you are a student you can sign up to the JetBrains student program and get a free license which works across all of their products.

Link: https://www.jetbrains.com/student/

I hope someone finds this useful :)",1735,115,LivingLikeASir,2017-08-21 23:09:51,https://www.reddit.com/r/learnprogramming/comments/6v6vrz/free_student_development_packs/,0,learnprogramming
mnjz2u,"Help a Fire Fighter become a code/developer, please!","Hello!

I'm a 29 year old Fire Fighter, and I desperately need a career change - last week I pulled a kid out of a smoke-logged home. He didn't survive. This job has taken its toll on me, and I have the scars, therapy and PTSD to prove it.

So I need a change. I've considered my options, and I think they're quite limited.

I've been a Fire Fighter for 9 years. Before that, I was a legal administrator, then technical support.

I know multiple languages (Chinese, English, French), am adept at learning new languages, and am an avid problem-solver. I'm quite technologically minded, and have no problem reading lines and lines and lines of information, editing and altering (I did this very proficiently in my legal role).

So I've decided to try to become a developer.

I have no university degree. I'm thinking of going for a bootcamp of some sort, but I have no idea which to pick.

I am an absolute beginner when it comes to anything to do with coding. 

I'd like to learn things which has wide-reaching career opportunities, so that I could branch out and apply to anywhere, with the possibility of being accepted. 

I really think I'd be good as any type of developer. I just need some direction and guidance.

&#x200B;

As a fire fighter in the UK, I have a LOT of free time. 6 out of 8 days, I don't work, so I have a lot of time to work a full time and still learn anything I want. Ideally, I don't want to leave my job, for financial reasons, until I'm sure about being a developer as a viable route.

Could someone help set me on a the path?",1737,313,None,2021-04-09 15:41:46,https://www.reddit.com/r/learnprogramming/comments/mnjz2u/help_a_fire_fighter_become_a_codedeveloper_please/,0,learnprogramming
jtmum5,Three tips I wish I followed when I started programming,"Here's a video I made sharing a few basic tips I wish I had stuck to a lot more when I was starting to learn programming to make things a little bit smoother in my own journey. I love sharing tips and helping out other developers, the community as a whole is really amazing and supportive and so I wanted to pitch in and hopefully add to it in a positive way.  You can check this link if you would like to check the video format, but I'll still write a quick summary down below if you don't like video formats!

[3 Tips For Beginner Developers (Youtube Link)](https://www.youtube.com/watch?v=lIsQ47knSNA)

&#x200B;

1. **At first, pick a lane and stick to it.**  Programming is amazing because it opens the door to an incalculable amount of different projects and ideas that are all within reach because of their common root in programming. It's a double edged sword as a beginner because every time you think of a new idea, or see a shiny new technology you've never used you might be tempted to jump on it right way. I believe as a beginner if you can pick a technology stack, or at least type of project and stick to it specifically at first ,you will have a much smoother journey learning programming. If you don't have to jump so much between different types of projects or stacks, you're understanding of the basics and of the core concepts are going to be much better and you will learn them much faster. Once you're a bit more experienced, you can obviously start trying out new types or projects or learning new technologies, and at that point it will be a lot easier because your fundamental understanding of programming will be better and you'll have more solid references in the technology you've been focusing on so far. 
2. **Move away from tutorial projects as soon as possible.** You've probably heard of tutorial hell and that term definitely exists for a reason. Tutorials are great at first as a way to show you what is available and what can be achieved as a programmer. They're a great way to keep up with new developments in whatever programming language or platform you're developing, and to get new ideas and inspiration for things to add in your projects. But, they can't replace the problem solving skills you need to develop to actually be able to build something from scratch and to apply those ideas to a complete project. If you're still mostly working through tutorial projects and haven't worked on something personal yet, you'll hit a wall at first, but that's normal. Start small, take your time, use those tutorials you did already as references and build something totally from scratch. Even if it just ends up being a bunch of different tutorials glued together and customized a little bit to make it your own, you'll learn a ton by doing it. 
3. **Set small intermediate goals.** Whether it's for your learning or for your personal projects, set much smaller goals when programming. This whole journey, as well as the projects you'll build along the way, should be seen as marathons. Software projects are complex and require a lot of small iterations to complete. Something that might look simple and quick on the surface might end up taking a lot more time once you actually get into it. The problem with that is, if you set milestones or goals while working on it that are too big, you'll feel like you're not progressing nearly as fast as you might want. Set smaller goals, things that can be checked off the list more quickly, so that you always feel the progress that you're making and you don't fall into the trap of thinking you've been stalling. Like I said, it's a long journey, and your biggest enemy in that journey is losing the motivation required to keep learning and keep getting better. Smaller goals will help alleviate that by giving you some quicker feedback, and hopefully make you work at it for a longer period of time.

&#x200B;

I hope this was helpful to some of you here! Feel free to add anything to it, just try to keep it positive as I'm just trying to find ways to encourage people with their journey learning programming!",1740,48,TheGreenDeveloper,2020-11-13 19:50:43,https://www.reddit.com/r/learnprogramming/comments/jtmum5/three_tips_i_wish_i_followed_when_i_started/,0,learnprogramming
bqnhyu,Another self taught success story! --I just landed my first +100k salary position as a developer!,"First off, apologies in advance for the brag/humble brag/“mom look at me” post—I’m just so happy and I want to tell someone (other than my inner circle of friends/family). For me personally, I’ve always enjoyed the encouraging/inspirational posts from other “outsiders” like me who broke into tech, the reminders that all the hard work, countless hours spent learning, internalizing, building, can actually lead somewhere—and now I get to properly make one of my own. 

Last week, after a rigorous process of vetting and interviewing, I accepted an offer from a VC funded startup in my city as a frontend developer. I’ll be part of a small team, focused primarily on UI/UX. The product is exciting, the stack (React frontend) is awesome, the design is great, and the team is friendly, sharp, and welcoming. And of course the meat of the issue; the compensation is better than I anticipated considering this is my first “official” position as a developer. 100k base, 10% performance based annual bonus, and a generous equity package. I’m as happy as a kid on Christmas.

It’s worth noting that while this *is* my first salaried developer job, It’s far from the beginning of my career—I’ve got a decade of experience as a manager and leader at various startups and small businesses so this is a career *change* for me, not the start of my career. I’ve also been moonlighting and freelancing for quite a while, building websites for small businesses, designing logos and branding packages, consulting in areas where my domain knowledge overlap with the technology, and that played a very large role in my getting such a good offer off the bat. Nonetheless, it’s still uncharted territory for me, and it feels like a major validation getting hired properly, and I’m pumped.

So what’s the point, other than the shameless bragging? 

The point is: A. Yes, you can teach yourself to code and get a six figure salary. I started putting my resume out there on LinkedIn and Angel.co about 6 weeks ago and the response was phenomenal. I had about a dozen phone interviews within the first couple weeks, made it past the technical interview with four of them, and had to cancel the other three final interviews before the offer stage when I accepted the position I did. The market is hungry, and if you’ve got the chops, the jobs are certainly there.

As far as I can tell, the most important thing you can do is just *keep on building things*. Build websites, build apps, start little micro businesses and Indie hacker type projects, deploy across a range of services and techniques (I have Digitalocean droplets, cPanel sites, Netlify sites, Github pages, etc) and try to push code to Github as close to daily as possible. Try to create projects that accurately reflect what it’s like to work in production level environments. Use fullstack solutions, contribute to big open source code bases, work with starter projects like Vulcan and Apollo Universal to get a feel for what projects at scale really look like. Constantly dig through big well designed codebases, read them, copy them, break them, modify them, whatever you have to do to grok them. Learn best practices, work with all the technologies, use your command line!! (I like iTerm and ZSH with a bunch of cool scripts and addons) Fake it til you make it—in the good way! If you keep working on projects that reflect the realities of the businesses you’re interested in working at, you will eventually be qualified to work at them by proxy. If you’re determined, and persistent, you can get where you want to go.

And one more thing—it may be cliche but I think it’s important for a lot of people to hear. It’s really never too late. If you’re worried that you’re “too old” to get into programming, don’t be. It’s a total myth (in my experience) that age is a limiting factor. Smart companies recognize that soft skills and a wealth of experience in the real world are invaluable. If you’re smart and optimistic, you can always learn the next technology, but the only way to get experience is to live it. 

Thanks for reading, I’m pumped for what comes next. I did it, and so can you!!!

EDIT: Well this got a lot more traction than I expected. Thanks to everyone for the words of encouragement, and for the questions. There were a few questions that popped up a lot so I'll just answer them here.

1. I'm 34 years old. No idea how that happened lol. 
2. I do not have a CS degree, but I do have a BS in business management.
3. I don't live in NYC or SF, but it is a tier 2 American city so it's relatively High cost of living. 100k is great to me, I am debt free, frugal, etc, but your miles may vary.  
4. I'd rather not share links to my portfolio/Github/etc, sorry!
5. Before this I was a marketing consultant for an SF startup, a manager at a small catering/restaurant/cafe, a carpenter, a professional session guitarist, a tofu manufacturer, a kombucha company co-founder, a real estate investor, a charter boat first mate, a bartender, and a half dozen other crazy things, all over the country. I have a random and eclectic background :)
6. The best resources are scattered all over the internet, but I'd start with Googling ""Github awesome lists"" or just search awesome on Github. That should give you as many links and roadmaps as you can handle to get started. Every time something intrigues or confuses you, Google dat shit! And go down a rabbit hole of links. HackerNews is a great resource, and then the best resource is al the amazing open source software on Github, and the web itself--dev tools are your friends! And finally, the obvious one I mentioned, but it bears repeating--just build stuff and deploy it! Over and over! You will improve so so fast when you simply have to get stuff out there, because you'll bump into the real problems that require real solutions. 
7. IMPORTANT CAVEAT! I'm just a guy, these are just my opinions/my advice and take it all with a grain of salt--as some commenters made clear, I have zero authority and you don't have to/shouldn't listen to a word of it if you don't want to! I am perpetually curious and always learning, and the journey is far from over for me, so I'm no authority!",1736,150,frugaltricks,2019-05-19 23:12:08,https://www.reddit.com/r/learnprogramming/comments/bqnhyu/another_self_taught_success_story_i_just_landed/,0,learnprogramming
hs9pqr,Most Basic Git Commands for Absolute Beginners,"**LONG POST - Part2**

# GIT COMMANDS FOR BEGINNERS-

**Prerequisite: Read** [**Part1**](https://www.reddit.com/r/learnprogramming/comments/hpw6u5/introduction_to_git_and_github_for_absolute/)**.**

Before you start this tutorial make sure Git is installed on your system. If you have not installed it yet, today is a good time to do so. Go on [GIT OFFICIAL](https://git-scm.com/downloads) and select the one for you OS, download and install it. Hello fellow programmers, I hope you are doing well. Today we are going to cover most basic Git Commands. I am going to cover it from the very beginning for absolute beginners, but if you find any part or command that you know, you can skip it, or read it to brush up your knowledge. Anyhow, let's get started.

# First Step:

**Open Bash/Terminal to follow up the procedure along with me.** The very first thing that we need to do when we install Git is to set our Identity so that in future if we work with multiple people, we can know who made the commit to the files etc.  To set your identity type `git config --global` [`user.name`](https://user.name/) `""Your_Name""` and press Enter. After that, we need to set our Email Address, so type `git config --global` [`user.email`](https://user.email/) `abc.mail` and hit enter again. These two commands will set your name and email globally on your system. So whatever commit we do, it will use these credentials.

# Commands:

1. `git init`: Choose a folder in which you want to enable Version Controlling. Use `cd YourFolderPath/`. Now use the command `git init` and it will initialise Git in that repository/folder.
2. `git add filename.extension`: This command is used to add files to the staging state. When we use this command, it adds the specified file for staging the changes or in simple terms, storing the changes. Example: `git add index.html`. You can use \* in place of the file name to add all the files present in the current repository.
3. `git status`: This command is used to check which files are staged and which files are modified and unstaged.
4. `git commit -m ""Message""`: After the changes are made and the files are added for staging, we need to commit in order to record the changes. The `Message` is like a comment that we add so that in future we can tell only by looking at the message, what changes we made. Example: `git commit -m ""Update the modules""`.
5. `git log`: This command is used to see all the commits that are made. It lists them all so that we can use when we need to revert back to a specific version. But more about that in a later post as this post covers the most basic commands.

These five commands are the most important and the first commands that you will want need to learn in order to master Git. There are many other commands like `push, pull, fetch or merge` etc. that I will cover in the next post as they require Github and I don' want to make this tutorial messy.

I hope you learned something from this post. See you soon in Part 3. Until then, Happy Learning.",1734,99,iamshubh_,2020-07-16 13:33:00,https://www.reddit.com/r/learnprogramming/comments/hs9pqr/most_basic_git_commands_for_absolute_beginners/,0,learnprogramming
76g2lo,500 Data Structures and Algorithms practice problems and their solutions,https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions,1735,69,sharjeelsayed,2017-10-15 01:11:36,https://www.reddit.com/r/learnprogramming/comments/76g2lo/500_data_structures_and_algorithms_practice/,0,learnprogramming
7ur708,If you have watched so many git tutorials and simply can't get it try this one.,"I tried searching on the net and also reddit for best tutorials for learning github but was mostly redirected to the official docs or the udacity one which I coulnd't get the hang of . Until I found this by 

*Derek Banas*  (while learning thru his java playlist). 
https://www.youtube.com/watch?v=r63f51ce84A&list=PLGLfVvz_LVvQHO1PfyscjIPkNJjgHsLyH

Will hardly take your 2 hours. 
4 videos and you will know everything it takes to know to get git.
And what more he also has a cheat sheet for his tutorials which are kind of like class notes for brushing up if you need them. Example :
http://www.newthinktank.com/2014/04/git-video-tutorial/

Please do checkout :). And last but not the least here is one very important feature of github which I think is not really highlighted( watch it after you have learnt github).

https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit
Thanks

Woho! So many upvotes Git is an excellent thing which takes time to get around but once you are used to it there is no going back. Thank you so much for this. I hope this helps everyone who wants to git it :)",1731,73,rogue_of_the_year,2018-02-02 13:12:59,https://www.reddit.com/r/learnprogramming/comments/7ur708/if_you_have_watched_so_many_git_tutorials_and/,0,learnprogramming
fop2i0,"Facebook, Microsoft, and other tech firms have partnered with the World Health Organisation (WHO) to conduct a global hackathon to encourage engineers to build technology-based solutions to fight Covid-19 pandemic.",Here's the official website for all details: [https://covid-global-hackathon.devpost.com/](https://covid-global-hackathon.devpost.com/),1736,89,Amr_Yasser,2020-03-25 11:58:20,https://www.reddit.com/r/learnprogramming/comments/fop2i0/facebook_microsoft_and_other_tech_firms_have/,0,learnprogramming
v2oslx,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.","SORRY, ALL THE CODES HAVE BEEN USED. I'LL POST AGAIN ON JULY 1ST. [You can still watch the first 15 of the 50 videos for free.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)


If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out):

(JUN2022FREE1 code is used up)

(JUN2022FREE2 code is used up)

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1733,156,AlSweigart,2022-06-01 19:12:14,https://www.reddit.com/r/learnprogramming/comments/v2oslx/2000_free_sign_ups_available_for_the_automate_the/,0,learnprogramming
id1pht,Here's how my brother is learning to code from jail,"Hi Reddit!

My brother got a 5 years jail sentence but is coming out soon, a few months ago he decided to learn to code with no prior experience.

I find the way he is studying very inspirational so decided to post his (simple) program.

But first, here is what he needs to go through to learn:

- We the family send him javascript and html books 
- He studies them and writes programs in pen and paper 
- He calls me so I input what he wrote on my computer and we debug it live via a phone call, he has to imagine the program in his head.

The crazy part is up until a few days ago he didn't have access to a computer. However! another inmate has an upcoming trial and because the contents of his trial contain to many papers, they provided this inmate with a simple laptop (no internet).

My brother is not allowed to touch this laptop and he can only see this inmate 1 hour a day, so he convinced the inmate to sit next to him for my brother to tell him what to type, the other inmate types in the html+js on a notepad file and this way my brother can finally see his programs on a screen after months of only imagining how to program.

Here is the program we wrote today:

https://codepen.io/throwaway0944/pen/dyMpqJq

This simple program takes 3 numbers that you type in the input elements, when you press the button it will run a function that will print the sum of those 3 numbers in the screen.

My dream is for this to get some traction so when he calls I can tell him his program has users :)",1723,198,throwaway0944111,2020-08-20 02:13:53,https://www.reddit.com/r/learnprogramming/comments/id1pht/heres_how_my_brother_is_learning_to_code_from_jail/,0,learnprogramming
11n6n7z,Using Github to write my notes has helped me retain knowledge immensely.,"So I got this idea actually from a reddit comment I saw a couple of months back when trying to research note-taking techniques and wanted to share it in case it may help others as well. 

I've started studying Java again using the textbook ""Introduction to Java Programming"" by David J. Eck, for context. 

I've always been a fan of physical notes as I find they help me retain knowledge better and settled on using the Cornell Method, which has helped me a ton in my efficiency and organization. I found this still wasn't enough, and I felt I needed something more, so I stumbled on a reddit comment about uploading their notes onto Github! 

So I found a great guide on markdown, downloaded Github Desktop, VSCode, learned the basics of Git, and this is my current studying technique:

1. Take physical notes in my book using the Cornell Method. 
2. After each section, open up VSCode and type all my notes using markdown. 
3. Upload to a public repository I created on my Github account. 

Pros:

- I've been retaining my knowledge much more and can recall new things I've learned even after having to take a break due to work. 
- I get to practice using VSCode, Github, and Markdown at the same time. 
- I'm enjoying my note-taking way more and feel really accomplished each time I upload a new section to my repository. 
- I've gotten to teach myself small little things I find really cool, like setting up markdown navigation links, how to embed photos, etc. 
- It's also helped me get the hang of setting up a Readme file, organizing my files properly, and how to troubleshoot some minor Github issues that I've run into. 

Cons:

- Takes a bit longer, I guess? 

I REALLY recommend this to anyone currently studying to try this out, if you haven't already. I've shared my repository with my friends who are only interested in a much more casual way than myself, making sure to cite my sources for them in case they want to delve deeper, and it's been positive reception so far. 

I haven't gotten nearly as much done as I'd like to, due to work, but it's been a very rewarding experience so far and makes note taking something I look forward to now.

**Update**: I appreciate all the recommendations! I've installed Obsidian and am using it along with Syncthings now so that I have a constantly updated local version of my notes on both my phone and laptop! The only issue at the moment is that Obsidian is not a recognized text editor on Github Desktop, so it's *slightly* more clunky when committing, but not a big deal at all. I'll be giving Obsidian a solid shot over the next couple months and seeing if I get any value out of it, and if so I'll be keeping it! It's very nice being able to access my notes locally on my phone without needing an internet connection, and this will let me take notes while I'm on break at work now.",1727,172,Cylvher,2023-03-09 22:52:02,https://www.reddit.com/r/learnprogramming/comments/11n6n7z/using_github_to_write_my_notes_has_helped_me/,0,learnprogramming
s3e27h,I don't have anyone else that I care about to hold me accountable. I'm going to be a software engineer in fullstack JavaScript.,"That's all. I'm gonna do this. Witness me!!!

edit: Wow, this blew up. To clarify, I will be learning HTML, CSS, Javascript, React, Node, Express, MongoDB, Postgres, and some CS theory with Leon on twitch. As far as a study plan goes, I have been spending around 5-6 hours a day going through HTML/CSS/JS so far. I've been doing this since Christmas. I have more than enough time in the day to accomplish my goals, and I live where the nearest distraction is about 50 miles away. I really don't leave the house. I needed something to stimulate my mind, and give me a goal for bettering myself and my wife. When I saw Leon's post on here, I was skeptical and started going through his youtube videos everyday. I found out that I love coding. I appreciate the witnesses to my goal, but I'm going to prove this to myself first and foremost. I will do this.",1721,188,hoobieguy,2022-01-14 00:21:08,https://www.reddit.com/r/learnprogramming/comments/s3e27h/i_dont_have_anyone_else_that_i_care_about_to_hold/,0,learnprogramming
tj4mrs,This sub isn't about learning programming anymore,"tldr: if you want to switch careers or learn programming for fun, read the FAQ or previous posts from other redditors first before posting. Only post your question if the FAQ isn't sufficient enough for you because its tiring that the same question gets asked over and over again which has already been answered before.


This is a rant. I get that people are looking for a career change but there's a reason why the FAQ exist. Post in this sub is now more on how to start with programming?, how to be this, how to be that, etc.. Most of these questions have already been answered by previous posts from years ago or the FAQ. READ THE PINNED POSTS by the mods or search on google the keywords of your question before asking here because CHANCES ARE, THEY'VE ALREADY BEEN POSTED IN THIS SUBREDDIT AND HAVE ALREADY BEEN ANSWERED. 

I was expecting this subreddit to have code posts and people asking others on how to help them with it but no. Most of the posts I see are about switching careers which isn't wrong but PLEASE PLEASE PLEASE READ THE FAQ BEFORE POSTING or go to google and search the keywords of your question before asking here. Want to get a remote job and be a front end web dev?, read the previous post by other redditors or read the FAQ. Want to learn game dev? FAQ or previous posts. You get the point, if you're going to ask a question or you want a career change then READ the FAQ or previous posts FIRST in this sub. If the FAQ is NOT SUFFICIENT enough then go post your question here.

If you can log in on reddit and type r/learnprogramming then surely you can read the FAQ or type your question on google before posting here.",1725,298,None,2022-03-21 05:45:43,https://www.reddit.com/r/learnprogramming/comments/tj4mrs/this_sub_isnt_about_learning_programming_anymore/,0,learnprogramming
cs2btq,Learn Python by Building Fun Projects,"I have been working on a video series that uses Python to build a variety of cool projects.

Few of the stuff built till date are:

1) Building your own CamScanner

2) Building and Deploying a Flask Application

3) Building your own Object detector

4) Setting up a local file server

5) Detecting Cars in a video using OpenCV

6) Sending Emails in python with SMTPLib

7) Building Decision Trees and Random Forests

8) Building a voice recognizer

9) Working with APIs, parsing JSON 

10) Building a PDF Extractor

11) OCR with Tesseract Engine

I have already put up around 20 videos revolving around these topics in the following YouTube Playlist : [Awesome Python Projects](https://www.youtube.com/watch?v=Q5W5Ag7Qv0g&list=PLr_8mLfc-HknFzWb8ibfZ0U6BKMkAsr_J) and will be uploading more content on a regular basis soon.",1717,68,adap23,2019-08-18 15:08:05,https://www.reddit.com/r/learnprogramming/comments/cs2btq/learn_python_by_building_fun_projects/,0,learnprogramming
jw4o9u,I’m 13 and want to get started in becoming a software engineer,"Heyo! As you read in the title, I’m 13 and in 8th grade. I’ve had an interest in coding for a couple of years, but haven’t really expanded on that interest until now. I got a computer in September of this year, but due to some things I haven’t been able to get too into coding. Those things aren’t in the way anymore, so I’m finally ready to begin. I’ve been researching a lot, and I have a huge interest in becoming a software engineer when I’m older. I figure that if I’m able to start now, why wouldn’t I? My father is a software engineer himself, but we don’t speak at all, so I won’t ask him for help. I’ve started a few udemy courses and python on Codecademy, but I would like to know some other resources to help me. I’d also like to know the best languages to learn for a software engineer and where the best possible places to learn them are. I have trouble reading books, so I’d rather not read some to learn. I’ve been learning a bit of Lua as well just to make my hobby of playing roblox useful by actually making games for the platform. If anyone has any techniques to help learn that’d be cool too. That’s all folks, thanks. 

TLDR: What languages are best for software engineers, where can I learn them and what are some techniques for learning programming?


EDIT: Wow. Thanks so much folks! I’m editing to let y’all know that I’ll be on in about 2 hours and I’ll read through all the comments and try and reply to them all when I’m able. That’s it for my edit, thanks again, I didn’t expect this much help, but I’m so grateful for it.",1720,361,-chesterTheCheetah,2020-11-17 23:53:04,https://www.reddit.com/r/learnprogramming/comments/jw4o9u/im_13_and_want_to_get_started_in_becoming_a/,0,learnprogramming
ue5hh6,"If everything is ultimately binary, does't that just make programs a specific number?","I did the CS50 course a while ago and they covered binary in there. I did binary back in 2006 when I was at college too so understood the logic behind it already. It's either on or off!

When a C program compiles, it goes through it's phases and compiles to assembly and then ultimately machine code i.e binary.

Let's say our program is 5,000,000 pages of 1's and 0's. All of those 1's and 0's make up a single number....albeit a super long number.

Does that mean that the entire Linux operating system, for example, can be represented by an actual number?

If so, why are we not storing programs as a number because that would take up less space than the 5,000 pages of 1's and 0's.

110101000101011111011011111110111100 = 57000443836 in decimal. So why don't we store programs in decimal and convert that to 1's and 0's in real time?

Storage would be much less. Is that how compression works?

&#x200B;

These may be crazy questions but it just entered my head earlier when thinking about what the binary of a program can represent.

&#x200B;

Even shorter than decimal is HEX.... So why don't we store programs in Hex?

&#x200B;

Any help appreciated on this one so I can wrap my head around it.",1723,348,Smooth_Measurement_1,2022-04-28 21:15:58,https://www.reddit.com/r/learnprogramming/comments/ue5hh6/if_everything_is_ultimately_binary_doest_that/,0,learnprogramming
4pgb44,I'm afraid if I say anything on Github people will laugh at me and I will die.,Who the fuck am I to open an issue on this project by someone who has literally a decade more experience than me?,1716,164,scaryPullRequest,2016-06-23 11:44:30,https://www.reddit.com/r/learnprogramming/comments/4pgb44/im_afraid_if_i_say_anything_on_github_people_will/,0,learnprogramming
a9rgkd,"Reminder for students here, you can get Github Student Developer Pack which includes a lot of useful free software","# [Link](https://education.github.com/pack)

All you have to do is sign up with your school email and wait for them to verify you!

most useful in my opinion:

* AWS - web hosting
* Digital Ocean - web hosting
* Github private repositories
* NameCheap - .me domain 1 year free
* Thinkful - front end development course free for 30 days, includes online office hours with experienced developers
* Unreal Engine - suite of game development tools

# Enjoy!",1713,128,None,2018-12-26 19:23:27,https://www.reddit.com/r/learnprogramming/comments/a9rgkd/reminder_for_students_here_you_can_get_github/,0,learnprogramming
ngu4mz,How to Plan and Build a Project - Building It,"Hi everyone,

I recorded myself building the project from [How to Plan and Build a Project](https://www.reddit.com/r/learnprogramming/comments/lfxwa4/how_to_plan_and_build_a_project/) and turned it into a free full stack cloud developer mini-course so you can learn how to build a project from idea to web application to database to cloud from scratch.

The recordings start from the idea in the post above, to how to set up the development environment, to building the full stack project (front-end, backend, database, dev ops), with the resulting MVP (minimum viable product) deployed to the cloud on Google Cloud Platform.

The mini-course is intended for beginners to mid-level and you can follow along with the videos and text instructions for each lesson and build it yourself for your own portfolio.

This is probably something you can build over a weekend even if you have little to no programming experience.

Here is the link to the mini-course:

[https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html)

Here is the link to the finished project:

[https://fullstackclouddeveloper.com/](https://fullstackclouddeveloper.com/)

Here is the link to the diagram of what we will build from the original post above:

[https://raw.githubusercontent.com/fullstackclouddeveloper/landing-page-service/course/landing\_page\_service\_tasked.png](https://raw.githubusercontent.com/fullstackclouddeveloper/landing-page-service/course/landing_page_service_tasked.png)

Here is the GitHub repo for all of it (the project and the course):

[https://github.com/fullstackclouddeveloper/landing-page-service](https://github.com/fullstackclouddeveloper/landing-page-service)

Here is the list of videos:

## Contents

1. [Introduction](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#introduction) (6:02)
2. [How to set up a Java development environment](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_setup_a_java_development_environment) (31:04)
   1. How to install Java 11 (3:12)
   2. How to install Maven (2:20)
   3. How to install Visual Studio Code (4:36)
   4. How to set up Spring Boot (5:26)
   5. Add a default response (2:53)
   6. How to set up a cloud environment
      1. Create a Google account (1:30)
      2. Install the Google Cloud SDK (6:27)
      3. Initialize gcloud (1:28)
      4. Deploy an application to the cloud (3:04)
3. [How to publish a website to the cloud](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_publish_a_website) (1:47)
4. [Use Chrome developer tools to modify a web page](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_modify_website_template) (22:06)
5. [How to send post request to the server](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_send_post_request_to_server) (17:57)
   1. Adding JavaScript to a web page (6:02)
   2. Using JavaScript to POST data to the server (2:59)
   3. Getting input field values from a form (2:21)
   4. Sending data to the server using the Fetch API (4:52)
6. [How to receive post request on the server](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_receive_post_request_on_server) (8:05)
7. [How to save a record to the database](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_save_a_record_to_the_database) (12:29)
   1. Setting up a Firestore database (8:32)
   2. Adding a collection to the database (0:36)
   3. Adding a record to a collection (3:02)
8. [How to send an email to a user](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_send_an_email_to_a_user) (19:25)
   1. Setting up an email service (9:04)
   2. Creating an email (6:23)
   3. Authenticating our domain with the email service (3:39)
9. [How to show a popup message to a user](https://fullstackclouddeveloper.com/course/full-stack-cloud-developer-mini-course/index.html#how_to_show_a_popup_message_to_a_user) (4:01)

The project stack includes:

## Front End

* HTML/CSS (presentation)
* Bootstrap (responsive CSS framework)
* JavaScript (language)

## Backend

* Java (language)
* Spring Boot (application server)
* Firestore (database)
* SendGrid (email service)
* Maven (build tool)

## DevOps

* Google Cloud Platform (cloud services)
* Google Cloud SDK (cloud tools)

I hope this helps anyone wanting to learn.

I will continue to add content to this and turn it into a project based full course that will teach you how to build projects using industry best practices as well as programming so you learn how to build full stack projects from idea to done.

I will also teach this mini course live over zoom for about 40 minutes (zoom limit) each day it takes to get through it. We might use two zoom sessions for each day because 40 minutes is kind of short. Please leave a comment in the post and sign up below if you are interested in this.

Signing up for notifications on the sample project page will also register you for notifications when zoom meetings happen with meeting links and when new videos and courses are added: [https://fullstackclouddeveloper.com](https://fullstackclouddeveloper.com/).

EDIT: Here is a YouTube playlist for this. I will add descriptions to this sometime today: https://www.youtube.com/playlist?list=PLQpnyZpvh8xXQv8_VEilQt-KYzUcCksVz",1715,62,bink-lynch,2021-05-20 07:53:41,https://www.reddit.com/r/learnprogramming/comments/ngu4mz/how_to_plan_and_build_a_project_building_it/,2,learnprogramming
gpxhsf,My god I love this community!,"Sorry this isn't a normal post and won't probably give you anything but I just wanted to appreciate all the help I got and you all gave me.

Not just reddit or stackoverflow or github.

***EVERYONE WHO HELPS ANOTHER FELLOW  DEVELOPER:***

**I LOVE YOU ALL!**

I have been learning programming for over 2 years now and I absolutely love every person who even helped someone else with one letter of code.

I have never seen a community or a field this vast and this united. I have never seen another field that has this much of open-source and free content.

I am poor and from a third world country so I can't buy courses and/or hosting etc. **but** I have found countless of free sources, codes, guides, websites, hosting, stock footage, icons, vectors...

I have been able to learn and get better at programming(web) thanks to all who volunteer to contribute to the open source and community. One day when I get good, I will certainly do so. I already started helping others on reddit and stackoverflow as much as I can.

I am really writing these with tears because a great person from the other side of the world helped me 2 hours to get my code working. No money, no favors, no nothing. Just voluntarily. I know not everybody is an angel developer but **I am so happy and proud to be a humble part of this beautiful community.**

Nothing would be the same without you all.

THANK YOU SO MUCH!

*take care, be safe, love you all <3*

*^(edit: typo)*",1710,75,hiccupq,2020-05-24 21:10:42,https://www.reddit.com/r/learnprogramming/comments/gpxhsf/my_god_i_love_this_community/,0,learnprogramming
bk9zrc,MIT's Introduction to Computer Science and Programming Using Python course is back on June 5,"MIT's popular Python course is open for enrollment. (learn Python 3.5). Over million people have taken this course, designed to help people with no prior exposure to computer science or programming learn to think computationally and write programs to tackle useful problems. Join for free.

[https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-2](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-2)",1711,137,edxsocial,2019-05-03 15:49:58,https://www.reddit.com/r/learnprogramming/comments/bk9zrc/mits_introduction_to_computer_science_and/,0,learnprogramming
gfp1fc,"Hey Reddit, just stumbled upon this free Python book (no fluff, direct PDF download link, 6.1MB, 856 pages)","Didn't want to keep it to myself - I'm starting to read this now. ;)

Direct link: [https://books.goalkicker.com/PythonBook/PythonNotesForProfessionals.pdf](https://books.goalkicker.com/PythonBook/PythonNotesForProfessionals.pdf)

&#x200B;

**Contents**

 1: Getting started with Python Language

 2: Python Data Types

 3: Indentation

 4: Comments and Documentation

 5: Date and Time

 6: Date Formatting

 7: Enum

 8: Set

 9: Simple Mathematical Operators

 10: Bitwise Operators

 11: Boolean Operators

 12: Operator Precedence

 13: Variable Scope and Binding

 14: Conditionals

 15: Comparisons

 16: Loops

 17: Arrays

 18: Multidimensional arrays

 19: Dictionary

 20: List

 21: List comprehensions

 22: List slicing (selecting parts of lists)

 23: groupby()

 24: Linked lists

 25: Linked List Node

 26: Filter

 27: Heapq

 28: Tuple

 29: Basic Input and Output

 30: Files & Folders I/O

 31: os.path

 32: Iterables and Iterators

 33: Functions

 34: Defining functions with list arguments

 35: Functional Programming in Python

 36: Partial functions

 37: Decorators

 38: Classes

 39: Metaclasses

 40: String Formatting

 41: String Methods

 42: Using loops within functions

 43: Importing modules

 44: Difference between Module and Package

 45: Math Module

 46: Complex math

 47: Collections module

 48: Operator module

 49: JSON Module

 50: Sqlite3 Module

 51: The os Module

 52: The locale Module

 53: Itertools Module

 54: Asyncio Module

 55: Random module

 56: Functools Module

 57: The dis module

 58: The base64 Module

 59: Queue Module

 60: Deque Module

 61: Webbrowser Module

 62: tkinter

 63: pyautogui module

 64: Indexing and Slicing

 65: Plotting with Matplotlibcommands

 66: graph-tool

 67: Generators

 68: Reduce

 69: Map Function

 70: Exponentiation

 71: Searching

 72: Sorting, Minimum and Maximum

 73: Counting

 74: The Print Function

 75: Regular Expressions (Regex)

 76: Copying data

 77: Context Managers (“with” Statement)

 78: The \_\_name\_\_ special variable

 79: Checking Path Existence and Permissions

 80: Creating Python packages

 81: Usage of ""pip"" module: PyPI Package Manager

 82: pip: PyPI Package Manager

 83: Parsing Command Line arguments

 84: Subprocess Library

 85: setup.py

 86: Recursion

 87: Type Hints

 88: Exceptions

 89: Raise Custom Errors / Exceptions

 90: Commonwealth Exceptions

 91: urllib

 92: Web scraping with Python

 93: HTML Parsing

 94: Manipulating XML

 95: Python Requests Post

 96: Distribution

 97: Property Objects

 98: Overloading

 99: Polymorphism

 100: Method Overriding

 101: User-Defined Methods

 102: String representations of class instances: \_\_str\_\_ and \_\_repr\_\_methods

 103: Debugging

 104: Reading and Writing CSV

 105: Writing to CSV from String or List

 106: Dynamic code execution with \`exec\` and \`eval\`

 107: PyInstaller - Distributing Python Code

 108: Data Visualization with Python

 109: The Interpreter (Command Line Console)

 110: \*args and \*\*kwargs

 111: Garbage Collection

 112: Pickle data serialisation

 113: Binary Data

 114: Idioms

 115: Data Serialization

 116: Multiprocessing

 117: Multithreading

 118: Processes and Threads

 119: Python concurrency

 120: Parallel computation

 121: Sockets

 122: Websockets

 123: Sockets And Message Encryption/Decryption Between Client and Server

 124: Python Networking

 125: Python HTTP Server

 126: Flask

 127: Introduction to RabbitMQ using AMQPStorm

 128: Descriptor

 129: tempfile NamedTemporaryFile

 130: Input, Subset and Output External Data Files using Pandas

 131: Unzipping Files

 132: Working with ZIP archives

 133: Getting start with GZip

 134: Stack

 135: Working around the Global Interpreter Lock (GIL)

 136: Deployment

 137: Logging

 138: Web Server Gateway Interface (WSGI)

 139: Python Server Sent Events

 140: Alternatives to switch statement from other languages

 141: List destructuring (aka packing and unpacking)

 142: Accessing Python source code and bytecode

 143: Mixins

 144: Attribute Access

 145: ArcPyCursor

 146: Abstract Base Classes (abc)

 147: Plugin and Extension Classes

 148: Immutable datatypes(int, float, str, tuple and frozensets)

 149: Incompatibilities moving from Python 2 to Python 3

 150: 2to3 tool

 151: Non-official Python implementations

 152: Abstract syntax tree

 153: Unicode and bytes

 154: Python Serial Communication (pyserial)

 155: Neo4j and Cypher using Py2Neo

 156: Basic Curses with Python

 157: Templates in python

 158: Pillow

 159: The pass statement

 160: CLI subcommands with precise help output

 161: Database Access

 162: Connecting Python to SQL Server

 163: PostgreSQL

 164: Python and Excel

 165: Turtle Graphics

 166: Python Persistence

 167: Design Patterns

 168: hashlib

 169: Creating a Windows service using Python

 170: Mutable vs Immutable (and Hashable) in Python

 171: configparser

 172: Optical Character Recognition

 173: Virtual environments

 174: Python Virtual Environment - virtualenv

 175: Virtual environment with virtualenvwrapper

 176: Create virtual environment with virtualenvwrapper in windows

 177: sys

 178: ChemPy - python package

 179: pygame

 180: Pyglet

 181: Audio

 182: pyaudio

 183: shelve

 184: IoT Programming with Python and Raspberry PI

 185: kivy - Cross-platform Python Framework for NUI Development

 186: Pandas Transform: Preform operations on groups and concatenate theresults

 187: Similarities in syntax, Dierences in meaning: Python vs. JavaScript

 188: Call Python from C#

 189: ctypes

 190: Writing extensions

 191: Python Lex-Yacc

 192: Unit Testing

 193: py.test

 194: Profiling

 195: Python speed of program

 196: Performance optimization

 197: Security and Cryptography

 198: Secure Shell Connection in Python

 199: Python Anti-Patterns

 200: Common Pitfalls

 201: Hidden FeaturesCreditsYou may also like 

&#x200B;

Enjoy reading! :)",1703,96,code_x_7777,2020-05-08 08:10:50,https://www.reddit.com/r/learnprogramming/comments/gfp1fc/hey_reddit_just_stumbled_upon_this_free_python/,0,learnprogramming
5pyx5t,A beginners trick I learned way too late in the game of learning to code: repetition repetition repetition,"The biggest issue I've come across in learning to code is that no matter what tutorial I've tried, there simple were never enough examples to work through to become proficient in whatever I was learning at the time. When I bring this up, it's generally met with ""you just want to be spoon fed"" or ""you need to build stuff! Go and build"" by programmers. [My last rant can be found here in response to a nice programmer who thought he was dishing out words of wisdom to noobs](https://www.reddit.com/r/learnprogramming/comments/42urli/when_you_know_the_basics_but_you_still_cant_code/); mine is the top comment.

I've learned how to fix this issue. It's extremely simple:

* Take the last exercise you were shown/taught and repeat it three times.
* **1st iteration** is to make sure you understand what the hell's going on and can repeat it, do you understand the functions, the loops, the getters, setters and constructs? You won't understand because you'll need to keep referring to your last attempt, hence doing it two more times.
* **2nd iteration** is to do the same project again but this time without referring to old code at all. It's not about memorizing. It's about understanding what you want to do next and what tool you need to slap in your code to get there and knowing how to do it...well, a little memorizing comes in handy but at a certain point you're no longer memorizing and you're more just 'knowing it'.  Can you clean up your code a bit? Can you DRY it out some?
* **3rd iteration** is to build on it. Can you add another property to the Class? If it's HTML can you add 6 columns with images instead of just 2? Just add shit to the project with what you already know. Add stuff that you learned 2-3 lessons ago but haven't touched since then.

After doing an exercise three times you'll go from **""Monkey See, Monkey Do""** all the way to **""Monkey Know!""**

**Edit:** Thanks for the gold, you handsome devil. ",1709,210,None,2017-01-24 21:27:14,https://www.reddit.com/r/learnprogramming/comments/5pyx5t/a_beginners_trick_i_learned_way_too_late_in_the/,1,learnprogramming
bbjvla,"Now, you can learn new IT related skills online for free from Microsoft","Recently, I came across a site which provides awesome online courses which you can take for free. The courses and tracks are designed and made by Microsoft. Thought I should share this with you so people who want to learn this skills can find necessary guidance made by experts working in the industry. Now, you can also skill up with the experts, and help open career doors. Things you can learn include data science, artificial intelligence, IoT and much more. Details can be found from here, [https://academy.microsoft.com/en-us/professional-program/tracks/](https://academy.microsoft.com/en-us/professional-program/tracks/)",1702,86,EnvironmentalWalrus7,2019-04-10 09:14:02,https://www.reddit.com/r/learnprogramming/comments/bbjvla/now_you_can_learn_new_it_related_skills_online/,0,learnprogramming
63l0zp,Learn algorithms and data structures (and prep for coding interviews) with interactive python coding challenges,"Hi Reddit,

I've recently overhauled the interactive Python coding challenges repo, now with more than double the original content:

https://github.com/donnemartin/interactive-coding-challenges

Included are unit tested reference implementations of various data structures and algorithms.

Each challenge has one or more reference solutions that are:

* Fully functional
* Unit tested
* Easy-to-understand

Notebooks also detail:

* Constraints
* Test cases
* Algorithms
* Big-O time and space complexities

Anki flashcards are also available.  Great for use while on-the-go!

Bonus: If you're looking to learn/practice system design or object oriented exercises, check out the sister repo, The System Design Primer:

https://github.com/donnemartin/system-design-primer

Hope this helps!

-Donne
",1704,36,donnemartin,2017-04-05 11:50:03,https://www.reddit.com/r/learnprogramming/comments/63l0zp/learn_algorithms_and_data_structures_and_prep_for/,0,learnprogramming
6bxdut,Python for Beginners - Complete Series,"A nine-part series I put together on Python Programming for Beginners. We go over the setup, data types, conditionals, loops, functions, how to import modules and explore the standard library. I hope you find them useful:

1) [Installation and Setup](https://www.youtube.com/watch?v=YYXdXT2l-Gg)

2) [Strings](https://www.youtube.com/watch?v=k9TUPpGqYTo)

3) [Integers and Floats](https://www.youtube.com/watch?v=khKv-8q7YmY)

4) [Lists, Tuples, and Sets](https://www.youtube.com/watch?v=W8KRzm-HUcc)

5) [Dictionaries](https://www.youtube.com/watch?v=daefaLgNkw0)

6) [Conditionals and Booleans](https://www.youtube.com/watch?v=DZwmZ8Usvnk)

7) [Loops and Iterations](https://www.youtube.com/watch?v=6iF8Xb7Z3wQ)

8) [Functions](https://www.youtube.com/watch?v=9Os0o3wzS_I)

9) [Importing Modules and the Standard Library](https://www.youtube.com/watch?v=CqvZ3vGoGs0)

Entire Playlist - [Here](https://www.youtube.com/playlist?list=PL-osiE80TeTskrapNbzXhwoFUiLCjGgY7)",1703,72,coreyschafer,2017-05-18 16:42:16,https://www.reddit.com/r/learnprogramming/comments/6bxdut/python_for_beginners_complete_series/,0,learnprogramming
m1ko6b,My professor recommends us making a GitHub account as soon as possible. Why should I?,"It's an honest question. His reasoning was like ""in a couple of years, when you graduate and look for a job, you'll be able to show them that you used github for the past couple of years"" and I get that. But right now I'm making programs that are too simple and that are introductory. Like create an array, print only the odd numbers from an array, write Hello world in a .txt file. Scan a .txt and count the occurences of a given word, etc. 

I don't know about github but it seems that that's not ""worthy"" of uploading. Don't get me wrong I'm not embarrased but is it a good strategy that my employer 3 years from now sees that I struggled with / learned opening files only 3 years ago? 

Is there something I'm missing?


Edit: Thanks for all the answers! I realized now that there is a private and public mode for github so I'm cool with that. See you on github!",1698,317,sdpinterlude50,2021-03-10 00:27:12,https://www.reddit.com/r/learnprogramming/comments/m1ko6b/my_professor_recommends_us_making_a_github/,0,learnprogramming
smech6,Does anyone else feel like setting up environments is harder than actually programming?,"Like when you're writing a program and to get it off the ground you have to install frameworks, configure layers of stacks on top of one another, set up enviroments, etc... All that stuff always takes me hours to do (even more if there is poor documentation) and seems to be more stressful than actually writing the program in question.",1697,286,SadGuarantee2947,2022-02-07 02:05:58,https://www.reddit.com/r/learnprogramming/comments/smech6/does_anyone_else_feel_like_setting_up/,1,learnprogramming
jcxz4a,Accepted my first offer today switching careers as a former Chef,"I accepted my first offer yesterday one month out of bootcamp. I started coding just less than a year ago . I don't want to go on and make this another tired sounding bootcamp success story as I think it's possible to do this self taught if you don't need extrinsic accountability and have godlike discipline, but I do want to share some insights to the sub that has helped me as a long time lurker.

I had a total of 3 offers. I live in the upper Midwest where the CoL is lower than the national average.

1. Agency in Milwaukee: 64k - FE dev
2. F500 fintech in WI at 78k **(accepted)** \- Fullstack dev. some react, Java BE heavy
3. Big fintech company in DC at 88k. Angular dev

I know it's not a huge amount compared to some other big baggers here, but it's a significant increase from my previous career, it's my foot in the door, it's comfortably above the median household income in my state, and it's more than enough to suit my standard of living.

My short story was that I was passionate about cuisine and working in a team environment and never thought tech was a possible option this late in my life (29 y/o), but demeaning circumstances at work along with unproportionate pay for a such a specifically skilled trade caused me to enroll in bootcamp. I was extremely lucky to get out of hospitality right before Covid hit. I had a big chunk of savings stacked to survive a minimum of 3 years without pay before needing to work again and I think having a safety net really helps mitigate a lot of problems other bootcamp students have as I was able to dedicate around 12 hours a day to uninterrupted programming. When I wasn't building, I was helping out cohort mates or lower level classmates with debugging over zoom which really helped immensely.

The first thing I wanted to share was that getting off leetcode grinds was one of the best things that I did. There's 2 sides of of cscareerquestions and I definitely want to reiterate the fact that you have to be realistic about where you are in life, what your expectations are, and set your goals accordingly. Bootcamps don't train engineers, their course is geared towards developers. Yes we have the top unicorns reaching SWE status with FAANG pay out of bootcamp but I firmly believe that unless you have an unnatural aptitude towards algos, or you have a previous STEM background, you are not going to get up to speed on whiteboarding with 4-9 months of bootcamp even if they have a CS portion. You are competing with the rising numbers of better prepared CS grads, and most problems on leetcode will not be intuitive to you even when you read the solutions, and I think developing intuition is the most key part to good whiteboarding. All that is assuming you can even land an interview at a FAANG level company during covid over 250+ applicants. I think at this stage in life, it's better to just get a developer job and work on whiteboarding alongside real experience and transition to a higher paying engineering role if that is what you desire. And maybe it's not what you desire. Maybe you love UX/UI/FE and want to get better at that, which is completely ok. There's still paths that gets you into six figures without having to be hyper code challenge inclined. It's better to strive to get an entry into the industry rather than risk a bigger job gap where you are not getting paid just for the chance to start out with more prestige.  


So with all that in mind and after after reading all the endless horror stories on skilled leetcoders who haven't been able to land a job in 8+ months, I decided that it was much more valuable to invest my time in LinkedIn, resume buffing, and real world contributions. Ultimately, if you manage to land an interview, your main job is to just get the team to like you and get them excited about working with you. To a degree it doesn't even matter how ""qualified"" you are on paper. You were already screened for qualification. I was competing with people with 3-5 YOE, but if they can't strike up chemistry with the team then you have a huge advantage. I can't stress the dating analogy enough, a job search uses almost the exact skillset that dating does to where it's shocking. Yeah, that girl on tinder might have 6ft+ listed as a requirement, and people will bitch about that all day, but if you are able to score a date (interview), then you can overcome the requirements by just being more charming and developing dynamic chemistry. Too often there's people with stellar technicals disparaging that they can't get through the process, and the harsh truth is often just that they spend all their time on technical skills, they flat out just aren't as likeable. What's most helpful at that point is to just go hang out and chill This seems to hold less weight as you have more years under your belt, but it's always a deciding factor that gives a substantial edge. Interviewers will decide whether or not they like you in the first 10-15 minutes and that alone will dictate the flow of the interview to be one where you're proactive or one where you are defensive. At the end of the day, no matter what the industry is, the most common reason people are fired is not due to incompetence, but because they don't get along with the team. Same with hiring IMO.

tldr: likability/culture over on paper qualifications, be realistic about your expectations in your first job.

Another piece of advice is, if you are a bootcamp grad and just want a job. Learn some Angular. Every single bootcamp is still on the React train and are pumping out oceans of mediocre react devs. Being honest, no one really likes Angular and there are a lot of urgent openings from enterprises who still depends on it. I know it's shitty because Angular knowledge is not as transferable as React, but at least you have typescript in a modular setting still.

As a side note. My new job is going to be Java heavy. I'm coming from JS and Python. I have done some Java and spun up mock APIs with spring but if you guys have a suggestion on good visual and project based courses on youtube or udemy, I'd love to hear it. I have until November to get up to speed for onboarding. Sorry if this got lengthy and thanks for reading.",1684,119,yuushamenma,2020-10-17 16:16:06,https://www.reddit.com/r/learnprogramming/comments/jcxz4a/accepted_my_first_offer_today_switching_careers/,1,learnprogramming
4339pn,"I did it, from zero knowledge to full-time programming job",,1688,201,boboguitar,2016-01-28 13:24:22,https://www.reddit.com/r/learnprogramming/comments/4339pn/i_did_it_from_zero_knowledge_to_fulltime/,0,learnprogramming
oqnnlx,Games for programmers,"Hello! Let me share a selection of games available in Steam in which you need to program a code. It's a small list and I hope you can suggest some games that are not in this list.

By the way, next post about [visual programming](https://www.reddit.com/r/learnprogramming/comments/ov708x/games_for_programmers_pt2_visual_programming/) is already on Reddit!

Games based on assembler-like language:

[TIS-100](https://store.steampowered.com/app/370360/TIS100/?curator_clanid=31790204), [SHENZHEN I/O](https://store.steampowered.com/app/504210/SHENZHEN_IO/?curator_clanid=31790204), [MHRD](https://store.steampowered.com/app/576030/MHRD/?curator_clanid=31790204), [functional](https://store.steampowered.com/app/1636730/functional/?curator_clanid=31790204)

Roughly the same as above, but a little simpler:

[Comet 64](https://store.steampowered.com/app/1397290/Comet_64/?curator_clanid=31790204&curator_listid=18511), [Move Code Lines](https://store.steampowered.com/app/1300310/Move_Code_Lines/?curator_clanid=31790204)

More about hacking than programming:

[Grey Hack](https://store.steampowered.com/app/605230/Grey_Hack/?curator_clanid=31790204)

Games where need write code for moving or action (character or environment)

[Screeps: World](https://store.steampowered.com/app/464350/Screeps_World/?curator_clanid=31790204) (JS), [Tanxy](https://store.steampowered.com/app/1501470/tanxy/?curator_clanid=31790204) (JS), [Adventure Land - The Code MMORPG](https://store.steampowered.com/app/777150/Adventure_Land__The_Code_MMORPG/?curator_clanid=31790204) (JS), [EXAPUNKS](https://store.steampowered.com/app/716490/EXAPUNKS/?curator_clanid=31790204), [Marvellous Inc.](https://store.steampowered.com/app/827940/Marvellous_Inc/?curator_clanid=31790204), [Robo Instructus](https://store.steampowered.com/app/1032170/Robo_Instructus/?curator_clanid=31790204), [Code World](https://store.steampowered.com/app/708190/Code_World/?curator_clanid=31790204)

And my personal favorite, hardcore game for cryptoanalitics:

[Operation Deep Magic: Cryptanalysis](https://store.steampowered.com/app/1218030/Operation_Deep_Magic_Cryptanalysis/?curator_clanid=31790204)

I hope you liked my small selection and if you want more awesome puzzle games about programming or hacking then follow my Steam [curator page](https://store.steampowered.com/curator/31790204-Games-4-Programmers/) and join to [group](https://steamcommunity.com/groups/games-for-programmers).

Good luck to everyone and happy coding/learning/gaming :)

\---

UPD. The functional game added to list of assembler-like games.

UPD2. The Grey Hack and the Screeps: World was added.

UPD3. Adventure Land - The Code MMORPG was added.",1682,184,E-Freelancer,2021-07-24 10:44:02,https://www.reddit.com/r/learnprogramming/comments/oqnnlx/games_for_programmers/,0,learnprogramming
35o9f6,Khan Academy releases new interactive SQL course,"Course: https://www.khanacademy.org/computing/computer-programming/sql

Blog post: http://cs-blog.khanacademy.org/2015/05/just-released-full-introductory-sql.html",1678,118,gits1225,2015-05-12 04:05:08,https://www.reddit.com/r/learnprogramming/comments/35o9f6/khan_academy_releases_new_interactive_sql_course/,0,learnprogramming
ohvgsc,Construction worker learning to code.,"Hi everyone I wanted to share with you where I am in regards to learning to program and the challenges that I face. Maybe you have the same challenges and want nothing more to be a programmer but holy crap what an up hill climb it can feel.  

I wear hi visibility clothing for 10 hours of the day.  Sometimes 5 days a week, sometimes 7 days a week.  We have this thing called a 24 and 4 which means you work 24 days (10 hours/day) and take 4 days off.  In between this time I am trying to teach myself to code.  I have finished Automate the Boring Stuff and I am currently enrolled in CS50 through Edx.  I think I have found a passion.  I was recently given a problem at work and I tried to break it down the way a programmer might.  I have this much time and this type of materials, I have this deadline, this many people, the weather is this, I might need meta things like ladders, lifts, fall protection etc etc and I thought to myself, I have been trying to think like a programmer and how they solve problems.  Instead of taking a problem and breaking it down into a manner a computer can use.  How can I take this problem and present it to my team.  I drew up my plans, took the time to explain it to everyone and believe it or not.....It went well, really well.

So I am now going to use these programming problem solving skills to do my job, even if it is construction to use it in some way to translate what I do daily to learning how to code.  This was just a story to tell people who might be learning to code that programming takes a special way of thinking about problems and learning these methods is very important and can be used in your day to day.  

I believe that wherever you are in your life, learning to program is a great idea.  It can teach you so much about problem solving and thinking outside the box.

If you are on a journey to learn programming I wish you all the best!",1681,103,foxpost,2021-07-11 01:46:07,https://www.reddit.com/r/learnprogramming/comments/ohvgsc/construction_worker_learning_to_code/,0,learnprogramming
xv26ar,I FINALLY got my first job,"After 8 months and hundreds of applications I finally got offered a junior dev position. It is fully remote. What advice do you have for me?

Edit: since so many have asked, I've been learning for nearly 3 years, applying for 8 months",1681,144,Anomynous__,2022-10-04 01:57:24,https://www.reddit.com/r/learnprogramming/comments/xv26ar/i_finally_got_my_first_job/,0,learnprogramming
swyczn,"Failed actor, failed chef, shitty IT support job but I received an offer for a junior DevOps role","For all of you who are struggling with learning programming or cloud technologies and wondering if it's going to amount to anything. It will.

Throughout my twenties I had a lot of failed careers/opportunities and by 28 was really in a crossroads with what the hell to do with my life. A friend of mine said that as I know a few things about computers, getting a basic help desk job shouldn't be a problem. I did this for two years at an energy company and while I was doing basic 1st line support shit, started learning about networking, powershell scripting, server management and cloud administration in my spare time.

This led me to passing my AWS SAA cert a few months ago. However after this, I realised that if I wanted to get into a DevOps role I'd need to demonstrate that I knew at least a few things about programming, APIs, databases and using AWS. Someone recommended this project: [https://cloudresumechallenge.dev/docs/the-challenge/aws/](https://cloudresumechallenge.dev/docs/the-challenge/aws/)

I couldn't recommend it more. I built it entirely from scratch and on my first interview for a Junior DevOps role showed them the entire project - especially using JS to update the website counter and python (boto3) in Lambda to trigger the APIs/update both the HTML on the frontend and DynamoDB on the backend.

I got an offer for the role a few days ago. They said that while there were more experienced candidates than me, they were impressed that I had built this project completely on my own volition.

I'm so happy I won't be doing anymore IT support stuff (fixing laptops that have consultant's baby's piss all over them will especially not be missed) and will be learning from a cool group of developers/devops people each day.

This stuff is really difficult, but you can do this. I haven't got any tech related university degrees and for many years thought I'd be way to stupid to do this.

You've got this. Good luck to all of you.",1669,67,None,2022-02-20 10:26:33,https://www.reddit.com/r/learnprogramming/comments/swyczn/failed_actor_failed_chef_shitty_it_support_job/,0,learnprogramming
qorncs,How do you learn Programming when you're depressed?,"Is there anyone who is Clinically depressed and yet has successfully completed programming courses or is a programmer? If so, how did you cope?",1666,325,Strawberry_Is_Tasty,2021-11-07 16:11:38,https://www.reddit.com/r/learnprogramming/comments/qorncs/how_do_you_learn_programming_when_youre_depressed/,1,learnprogramming
3n3tdz,Here's a list of 155 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2015),"This is not the complete list of MOOCs starting in October 2015, just the ones relevant to this community. The complete list of courses starting in October 2015 can be found over at [Class Central](https://www.class-central.com/report/mooc-course-report-october-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

BEGINNER(36)

Course Name|Start Date|Length (in weeks)|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Introduction to CSS3](https://www.coursera.org/learn/introcss)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4294/coursera-introduction-to-css3#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/course/interactivepython1)|3rd Oct, 2015|5|Coursera|★★★★★ [(2469 reviews)](https://www.class-central.com/mooc/408/coursera-an-introduction-to-interactive-programming-in-python-part-1#course-all-reviews)
[Introduction to Programming with MATLAB](https://www.coursera.org/course/matlab)|5th Oct, 2015|9|Coursera|★★★★★ [(79 reviews)](https://www.class-central.com/mooc/3396/coursera-introduction-to-programming-with-matlab#course-all-reviews)
[Programming for Everybody (Python)](https://www.coursera.org/course/pythonlearn)|5th Oct, 2015|NA|Coursera|★★★★★ [(38 reviews)](https://www.class-central.com/mooc/1957/coursera-programming-for-everybody-python#course-all-reviews)
[Code Yourself! An Introduction to Programming](https://www.coursera.org/learn/intro-programming)|5th Oct, 2015|5|Coursera|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2938/coursera-code-yourself-an-introduction-to-programming#course-all-reviews)
[Introduction to Cyber Security](http://www.futurelearn.com/courses/introduction-to-cyber-security?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|5th Oct, 2015|8|FutureLearn|★★★★☆ [(8 reviews)](https://www.class-central.com/mooc/2448/futurelearn-introduction-to-cyber-security#course-all-reviews)
[HTML5.1x: HTML5 Part 1: HTML5 Coding Essentials and Best Practices](https://www.edx.org/course/html5-part-1-html5-coding-essentials-w3cx-html5-1x)|5th Oct, 2015|6|edX|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/3444/edx-html5-1x-html5-part-1-html5-coding-essentials-and-best-practices#course-all-reviews)
[Internet History, Technology, and Security](https://www.coursera.org/learn/internet-history)|5th Oct, 2015|10|Coursera|★★★★★ [(21 reviews)](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/course/interactivepython2)|10th Oct, 2015|4|Coursera|★★★★★ [(12 reviews)](https://www.class-central.com/mooc/3196/coursera-an-introduction-to-interactive-programming-in-python-part-2#course-all-reviews)
[Usable Security](https://www.coursera.org/course/usablesec)|12th Oct, 2015|6|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1727/coursera-usable-security#course-all-reviews)
[Begin Programming: Build Your First Mobile Game](http://www.futurelearn.com/courses/begin-programming?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|12th Oct, 2015|7|FutureLearn|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/1243/futurelearn-begin-programming-build-your-first-mobile-game#course-all-reviews)
[Data to Insight: An Introduction to Data Analysis](http://www.futurelearn.com/courses/data-to-insight?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|19th Oct, 2015|8|FutureLearn|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2129/futurelearn-data-to-insight-an-introduction-to-data-analysis#course-all-reviews)
[CS101.2x: Introduction to Computer Programming, Part 2](https://www.edx.org/course/introduction-computer-programming-part-2-iitbombayx-cs101-2x-0)|20th Oct, 2015|NA|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/1651/edx-cs101-2x-introduction-to-computer-programming-part-2#course-all-reviews)
[Introduction à la programmation orientée objet (en Java)](https://www.coursera.org/course/intropoojava)|23rd Oct, 2015|7|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/441/coursera-introduction-a-la-programmation-orientee-objet-en-java#course-all-reviews)
[BJC.2x: The Beauty and Joy of Computing (CS Principles), Part 2](https://www.edx.org/course/beauty-joy-computing-cs-principles-part-uc-berkeleyx-bjc-2x)|26th Oct, 2015|7|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/2532/edx-bjc-2x-the-beauty-and-joy-of-computing-cs-principles-part-2#course-all-reviews)
[Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api)|Self paced|12|Udacity|★★★★★ [(50 reviews)](https://www.class-central.com/mooc/320/udacity-intro-to-computer-science#course-all-reviews)
[Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api)|Self paced|16|Udacity|★★★☆☆ [(10 reviews)](https://www.class-central.com/mooc/831/udacity-intro-to-java-programming#course-all-reviews)
[Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews)
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self paced|11|Stanford OpenEdx|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews)
[Make Your Own 2048](https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api)|Self paced|NA|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews)
[Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python#course-all-reviews)
[Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|★★★★☆ [(12 reviews)](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews)
[JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews)
[How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|★★★★★ [(15 reviews)](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self paced|NA|edX|★★★★★ [(36 reviews)](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews)
[Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★☆☆☆ [(2 reviews)](https://www.class-central.com/mooc/3253/udacity-intro-to-relational-databases#course-all-reviews)
[Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about)|Self paced|11|Stanford OpenEdx|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/1578/stanford-openedx-networking-introduction-to-computer-networking#course-all-reviews)
[CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced)|Self paced|6|Stanford OpenEdx|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/2175/stanford-openedx-cs101-computer-science-101#course-all-reviews)
[CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0)|Self paced|6|edX|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2954/edx-cs002x-programming-in-scratch#course-all-reviews)
[CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x)|Self paced|6|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2957/edx-cs001x-mycs-computer-science-for-beginners#course-all-reviews)
[DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0)|Self paced|3|edX|★★☆☆☆ [(5 reviews)](https://www.class-central.com/mooc/3338/edx-dev203x-introduction-to-bootstrap-a-tutorial#course-all-reviews)
[LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2)|Self paced|8|edX|★★★★☆ [(16 reviews)](https://www.class-central.com/mooc/1857/edx-lfs101x-2-introduction-to-linux#course-all-reviews)
[CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x)|Self paced|14|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3483/edx-cs005x-cs-for-all-introduction-to-computer-science-and-python-programming#course-all-reviews)
[CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0)|Self paced|9|edX|★★☆☆☆ [(10 reviews)](https://www.class-central.com/mooc/1650/edx-cs101-1x-introduction-to-computer-programming-part-1#course-all-reviews)
[COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x)|Self paced|5|edX|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1983/edx-comp102-1x-introduction-to-java-programming-part-1#course-all-reviews)
[Learn Swift Programming Syntax](https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3925/udacity-learn-swift-programming-syntax#course-all-reviews)


INTERMEDIATE(96)

Course Name|Start Date|Length (in weeks)|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Front-End Web UI Frameworks and Tools](https://www.coursera.org/learn/web-frameworks)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4240/coursera-front-end-web-ui-frameworks-and-tools#course-all-reviews)
[Hadoop](https://www.coursera.org/learn/hadoop)|1st Oct, 2015|NA|Coursera|★★★★☆ [(1 review)](https://www.class-central.com/mooc/4269/coursera-hadoop#course-all-reviews)
[Java Programming: Solving Problems with Software](https://www.coursera.org/learn/java-programming)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4305/coursera-java-programming-solving-problems-with-software#course-all-reviews)
[Using Python to Access Web Data](https://www.coursera.org/learn/python-network-data)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4343/coursera-using-python-to-access-web-data#course-all-reviews)
[iOS App Development Basics](https://www.coursera.org/learn/iosappdevelopmentbasics)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4348/coursera-ios-app-development-basics#course-all-reviews)
[Data Analysis Tools](https://www.coursera.org/learn/data-analysis-tools)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4169/coursera-data-analysis-tools#course-all-reviews)
[Rails with Active Record and Action Pack](https://www.coursera.org/learn/rails-with-active-record)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4197/coursera-rails-with-active-record-and-action-pack#course-all-reviews)
[Responsive Web Design](https://www.coursera.org/learn/responsive-web-design)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4200/coursera-responsive-web-design#course-all-reviews)
[Data structures: Measuring and Optimizing Performance](https://www.coursera.org/learn/data-structures-optimizing-performace)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4203/coursera-data-structures-measuring-and-optimizing-performance#course-all-reviews)
[The Arduino Platform and C Programming](https://www.coursera.org/learn/arduino-platform)|1st Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4206/coursera-the-arduino-platform-and-c-programming#course-all-reviews)
[Programming Mobile Services for Android Handheld Systems: Concurrency](https://www.coursera.org/course/posaconcurrency)|5th Oct, 2015|4|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/3077/coursera-programming-mobile-services-for-android-handheld-systems-concurrency#course-all-reviews)
[Statistical Inference](https://www.coursera.org/course/statinference)|5th Oct, 2015|4|Coursera|★★☆☆☆ [(10 reviews)](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews)
[Regression Models](https://www.coursera.org/course/regmods)|5th Oct, 2015|4|Coursera|★★★☆☆ [(8 reviews)](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews)
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|5th Oct, 2015|4|Coursera|★★★☆☆ [(10 reviews)](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|5th Oct, 2015|4|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews)
[Introduction to Genomic Technologies](https://www.coursera.org/course/genintro)|5th Oct, 2015|4|Coursera|★★★☆☆ [(6 reviews)](https://www.class-central.com/mooc/3472/coursera-introduction-to-genomic-technologies#course-all-reviews)
[Bioconductor for Genomic Data Science](https://www.coursera.org/course/genbioconductor)|5th Oct, 2015|4|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3475/coursera-bioconductor-for-genomic-data-science#course-all-reviews)
[Python for Genomic Data Science](https://www.coursera.org/course/genpython)|5th Oct, 2015|4|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/3476/coursera-python-for-genomic-data-science#course-all-reviews)
[Statistics for Genomic Data Science](https://www.coursera.org/course/genstats)|5th Oct, 2015|4|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3478/coursera-statistics-for-genomic-data-science#course-all-reviews)
[CS169.1x: Engineering Software as a Service (SaaS), Part 1](https://www.edx.org/course/engineering-software-service-saas-part-1-uc-berkeleyx-cs169-1x)|5th Oct, 2015|9|edX|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/443/edx-cs169-1x-engineering-software-as-a-service-saas-part-1#course-all-reviews)
[Algorithms: Design and Analysis, Part 1](https://www.coursera.org/course/algo)|5th Oct, 2015|6|Coursera|★★★★★ [(35 reviews)](https://www.class-central.com/mooc/374/coursera-algorithms-design-and-analysis-part-1#course-all-reviews)
[Introduction to Software Product Management](https://www.coursera.org/learn/introduction-to-software-product-management)|5th Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4196/coursera-introduction-to-software-product-management#course-all-reviews)
[Machine Learning](https://www.coursera.org/learn/machine-learning)|5th Oct, 2015|11|Coursera|★★★★★ [(110 reviews)](https://www.class-central.com/mooc/835/coursera-machine-learning#course-all-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|5th Oct, 2015|4|Coursera|★★★☆☆ [(90 reviews)](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews)
[R Programming](https://www.coursera.org/course/rprog)|5th Oct, 2015|4|Coursera|★★★☆☆ [(140 reviews)](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|5th Oct, 2015|4|Coursera|★★★☆☆ [(25 reviews)](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|5th Oct, 2015|4|Coursera|★★★★☆ [(14 reviews)](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|5th Oct, 2015|4|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews)
[Process Mining: Data science in Action](https://www.coursera.org/course/procmin)|7th Oct, 2015|8|Coursera|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/2445/coursera-process-mining-data-science-in-action#course-all-reviews)
[Principles of Computing (Part 2)](https://www.coursera.org/course/principlescomputing2)|10th Oct, 2015|4|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/3198/coursera-principles-of-computing-part-2#course-all-reviews)
[Algorithmic Thinking (Part 2)](https://www.coursera.org/course/algorithmicthink2)|10th Oct, 2015|4|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/3200/coursera-algorithmic-thinking-part-2#course-all-reviews)
[Software Security ](https://www.coursera.org/course/softwaresec)|12th Oct, 2015|6|Coursera|★★★★★ [(14 reviews)](https://www.class-central.com/mooc/1728/coursera-software-security#course-all-reviews)
[Cryptography](https://www.coursera.org/course/cryptography)|12th Oct, 2015|7|Coursera|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/1730/coursera-cryptography#course-all-reviews)
[M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about)|13th Oct, 2015|7|MongoDB University|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/599/mongodb-university-m101j-mongodb-for-java-developers#course-all-reviews)
[M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about)|13th Oct, 2015|7|MongoDB University|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1188/mongodb-university-m101js-mongodb-for-node-js-developers#course-all-reviews)
[M101N: MongoDB for .NET Developers](https://university.mongodb.com/courses/M101N/about)|13th Oct, 2015|NA|MongoDB University|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/3273/mongodb-university-m101n-mongodb-for-net-developers#course-all-reviews)
[M101P: MongoDB for Developers](https://university.mongodb.com/courses/M101P/about)|13th Oct, 2015|7|MongoDB University|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/600/mongodb-university-m101p-mongodb-for-developers#course-all-reviews)
[M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about)|13th Oct, 2015|7|MongoDB University|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/475/mongodb-university-m102-mongodb-for-dbas#course-all-reviews)
[M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about)|13th Oct, 2015|7|MongoDB University|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1777/mongodb-university-m202-mongodb-advanced-deployment-and-operations#course-all-reviews)
[PH525.1x: Data Analysis for Life Sciences 1: Statistics and R](https://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x)|15th Oct, 2015|4|edX|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/2960/edx-ph525-1x-data-analysis-for-life-sciences-1-statistics-and-r#course-all-reviews)
[FP101x: Introduction to Functional Programming](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0)|15th Oct, 2015|7|edX|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/2147/edx-fp101x-introduction-to-functional-programming#course-all-reviews)
[6.00.2x: Introduction to Computational Thinking and Data Science](https://www.edx.org/course/introduction-computational-thinking-data-mitx-6-00-2x-2)|20th Oct, 2015|9|edX|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/1779/edx-6-00-2x-introduction-to-computational-thinking-and-data-science#course-all-reviews)
[Cryptography I](https://www.coursera.org/course/crypto)|26th Oct, 2015|6|Coursera|★★★★★ [(25 reviews)](https://www.class-central.com/mooc/616/coursera-cryptography-i#course-all-reviews)
[Software Processes and Agile Practices](https://www.coursera.org/learn/software-processes-and-agile-practices)|26th Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4187/coursera-software-processes-and-agile-practices#course-all-reviews)
[Data Warehouse Concepts, Design, and Data Integration](https://www.coursera.org/learn/dwdesign)|29th Oct, 2015|NA|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4230/coursera-data-warehouse-concepts-design-and-data-integration#course-all-reviews)
[DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-1)|29th Oct, 2015|NA|edX|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/3339/edx-dev204x-programming-with-c#course-all-reviews)
[Algorithms, Part II](https://www.coursera.org/course/algs4partII)|30th Oct, 2015|6|Coursera|★★★★★ [(9 reviews)](https://www.class-central.com/mooc/340/coursera-algorithms-part-ii#course-all-reviews)
[Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★☆ [(9 reviews)](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews)
[Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api)|Self paced|12|Udacity|★★★★★ [(16 reviews)](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews)
[Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★☆☆ [(7 reviews)](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews)
[Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api)|Self paced|16|Udacity|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/364/udacity-intro-to-algorithms#course-all-reviews)
[Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews)
[Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews)
[Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews)
[Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api)|Self paced|16|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/592/udacity-intro-to-artificial-intelligence#course-all-reviews)
[HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self paced|10|Others|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews)
[Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★★★☆ [(8 reviews)](https://www.class-central.com/mooc/1470/udacity-intro-to-hadoop-and-mapreduce#course-all-reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews)
[Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews)
[Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews)
[Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api)|Self paced|1|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization#course-all-reviews)
[UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers#course-all-reviews)
[Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-in-java#course-all-reviews)
[Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api)|Self paced|10|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2211/udacity-developing-android-apps#course-all-reviews)
[Software Development Process](https://www.udacity.com/course/ud805)|Self paced|12|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2335/udacity-software-development-process#course-all-reviews)
[Computer Networking](https://www.udacity.com/course/ud436)|Self paced|12|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2336/udacity-computer-networking#course-all-reviews)
[Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about)|Self paced|17|Others|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2339/practical-numerical-methods-with-python#course-all-reviews)
[Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api)|Self paced|5|Udacity|★★★★★ [(6 reviews)](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews)
[Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax#course-all-reviews)
[Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api)|Self paced|7|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews)
[HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2999/udacity-html5-canvas#course-all-reviews)
[Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews)
[Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api)|Self paced|NA|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery#course-all-reviews)
[Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api)|Self paced|10|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning#course-all-reviews)
[Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3254/udacity-full-stack-foundations#course-all-reviews)
[Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/3255/udacity-responsive-web-design-fundamentals#course-all-reviews)
[JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3351/udacity-javascript-testing#course-all-reviews)
[LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about)|Self paced|15|Stanford OpenEdx|☆☆☆☆☆ [](https://www.class-central.com/mooc/2340/stanford-openedx-lpl-language-proof-and-logic#course-all-reviews)
[iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api)|Self paced|12|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3393/udacity-ios-networking-with-swift#course-all-reviews)
[Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3524/udacity-browser-rendering-optimization#course-all-reviews)
[Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3525/udacity-developing-scalable-apps-in-python#course-all-reviews)
[iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3526/udacity-ios-persistence-and-core-data#course-all-reviews)
[How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api)|Self paced|12|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3527/udacity-how-to-make-an-ios-app#course-all-reviews)
[Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3455/udacity-android-performance#course-all-reviews)
[Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/3579/udacity-android-development-for-beginners#course-all-reviews)
[Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3580/udacity-advanced-android-app-development#course-all-reviews)
[Material Design for Android Developers](https://www.udacity.com/course/material-design-for-android-developers--ud862?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3581/udacity-material-design-for-android-developers#course-all-reviews)
[Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3582/udacity-android-ubiquitous-computing#course-all-reviews)
[AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0)|Self paced|NA|edX|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/1564/edx-amrx-autonomous-mobile-robots#course-all-reviews)
[KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0)|Self paced|NA|edX|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/1836/edx-kiexplorx-explore-statistics-with-r#course-all-reviews)
[Intro to DevOps](https://www.udacity.com/course/intro-to-devops--ud611?utm_medium=referral&utm_campaign=api)|Self paced|3|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/4013/udacity-intro-to-devops#course-all-reviews)
[Configuring Linux Web Servers](https://www.udacity.com/course/configuring-linux-web-servers--ud299?utm_medium=referral&utm_campaign=api)|Self paced|1|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/4050/udacity-configuring-linux-web-servers#course-all-reviews)
[Learn Backbone.js](https://www.udacity.com/course/learn-backbonejs--ud990?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/4071/udacity-learn-backbone-js#course-all-reviews)
[How to create <anything> in Android](https://www.udacity.com/course/how-to-create-anything-in-android--ud802?utm_medium=referral&utm_campaign=api)|Self paced|4|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/4419/udacity-how-to-create-anything-in-android#course-all-reviews)
[JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api)|Self paced|6|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews)

ADVANCED(23)

Course Name|Start Date|Length (in weeks)|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Genomic Data Science with Galaxy](https://www.coursera.org/course/gengalaxy)|5th Oct, 2015|4|Coursera|★★☆☆☆ [(5 reviews)](https://www.class-central.com/mooc/3473/coursera-genomic-data-science-with-galaxy#course-all-reviews)
[Command Line Tools for Genomic Data Science](https://www.coursera.org/course/gencommand)|5th Oct, 2015|4|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3474/coursera-command-line-tools-for-genomic-data-science#course-all-reviews)
[Algorithms for DNA Sequencing](https://www.coursera.org/course/ads1)|5th Oct, 2015|4|Coursera|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/3433/coursera-algorithms-for-dna-sequencing#course-all-reviews)
[Introduction to Natural Language Processing](https://www.coursera.org/course/nlpintro)|5th Oct, 2015|12|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3332/coursera-introduction-to-natural-language-processing#course-all-reviews)
[Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/course/hiddenmessages)|12th Oct, 2015|4|Coursera|★★★★☆ [(8 reviews)](https://www.class-central.com/mooc/3289/coursera-finding-hidden-messages-in-dna-bioinformatics-i#course-all-reviews)
[Hardware Security](https://www.coursera.org/course/hardwaresec)|12th Oct, 2015|6|Coursera|★★★☆☆ [(8 reviews)](https://www.class-central.com/mooc/1729/coursera-hardware-security#course-all-reviews)
[Machine Learning Foundations: A Case Study Approach](https://www.coursera.org/learn/ml-foundations)|12th Oct, 2015|6|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/4352/coursera-machine-learning-foundations-a-case-study-approach#course-all-reviews)
[Deciphering Molecular Evolution (Bioinformatics IV)](https://www.coursera.org/course/molecularevolution)|12th Oct, 2015|5|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3555/coursera-deciphering-molecular-evolution-bioinformatics-iv#course-all-reviews)
[Comparing Genes, Proteins, and Genomes (Bioinformatics III)](https://www.coursera.org/course/comparinggenomes)|12th Oct, 2015|5|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3291/coursera-comparing-genes-proteins-and-genomes-bioinformatics-iii#course-all-reviews)
[Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★★ [(12 reviews)](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews)
[Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/326/udacity-applied-cryptography#course-all-reviews)
[Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api)|Self paced|12|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews)
[Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★★ [(3 reviews)](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews)
[Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews)
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api)|Self paced|2|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews)
[Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api)|Self paced|8|Udacity|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/3256/udacity-model-building-and-validation#course-all-reviews)
[Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api)|Self paced|5|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1016/udacity-advanced-operating-systems#course-all-reviews)
[High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api)|Self paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1018/udacity-high-performance-computer-architecture#course-all-reviews)
[Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api)|Self paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1024/udacity-computability-complexity-algorithms#course-all-reviews)
[Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api)|Self paced|7|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1025/udacity-knowledge-based-ai-cognitive-systems#course-all-reviews)
[Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems)|Self paced|NA|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1029/coursera-introduction-to-recommender-systems#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api)|Self paced|16|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3531/udacity-machine-learning#course-all-reviews)",1676,87,dhawal,2015-10-01 14:26:06,https://www.reddit.com/r/learnprogramming/comments/3n3tdz/heres_a_list_of_155_free_online_programmingcs/,0,learnprogramming
aolsa5,Two mistakes that trap new programmers,"Most aspiring programmers get trapped and fail to move forward. As a teacher, I get to observe how some programmers keep moving forward. Here's two signs you are trapped.

&#x200B;

**Trapped coders focus on anything but coding.**

Trapped programmers love to debate which language or framework is best. They spend their time figuring out what to learn and end up learning nothing at all. So let me answer all your questions.

# Learn Python.

*But what if I need to learn C#?*  
Learn C# after.

*Isn't Javascript the language of the future?*  
Learn Javascript after.

*My developer friend told me I should learn C++ because all languages are based on it.*  
Learn C++ after.

&#x200B;

New programmers fear they could be wasting time learning the ""wrong language"". *Programming is the fastest industry in history.* Good developers learn new languages and frameworks on a yearly basis. Three years from now, your knowledge will be outdated. If that scares you then find a different career.

&#x200B;

&#x200B;

**Trapped coders following directions too well.**

Trapped programmers follow tutorials like mindless robots. Copying pasting code doesn’t teach you anything. Imagine starting a python tutorial that taught you how to print “hello world”.


~~~~
print(“hello world”)
~~~~


Most people copy/paste this and move on. If you were my student, I'd push you farther.

1. Change the code so it prints “howdy”.
2. Print two alerts. One that says “whats up?” and “take care”.
3. Continue with the tutorial (usually goes to variables). After a few problems, print “hi” from mental recall.
4. Since we probably encountered variables by now, what will the code print below? Why?
    ~~~~
    greeting = “howdy”
    print(greeting)
    print(“greeting”)
    ~~~~
6. Fix the code below so it prints “hello”.
    ~~~~
    Print(hello)
    ~~~~

&#x200B;

By the end of my exercises, you would have a strong idea of how print statements work. A simple line of code can create a myriad of problems. Most people brush past it only to get stuck in the future. I always recommend finding a school or mentor for guidance. If you can't do that, be proactive with your learning and keep at it.

&#x200B;

Good luck!",1670,350,7forest,2019-02-08 22:13:47,https://www.reddit.com/r/learnprogramming/comments/aolsa5/two_mistakes_that_trap_new_programmers/,0,learnprogramming
a66t43,My project was considered by GitHub as one of the top open source projects of 2018!," Top Projects in 2018  
[https://blog.github.com/2018-12-13-new-open-source-projects/](https://blog.github.com/2018-12-13-new-open-source-projects/)

I'm writing this just to thank all of you who helped with this project, I'd like to thanks all of the 44 contributors that have contributed to the project, and for all of those who have made some constructive feedback! Thanks y'all!

I'm really proud of this project and really glad of the huge feedback that I've been receiving for the last months.

If you don't know the project yet, I'd really recommend it for all of those who want to learn more about JavaScript. If you want to contribute to the project, or just give a feedback, please feel free to do:

33 concepts every JavaScript developer should know  
[https://github.com/leonardomso/33-js-concepts](https://github.com/leonardomso/33-js-concepts)",1667,58,leonardomso,2018-12-14 17:22:04,https://www.reddit.com/r/learnprogramming/comments/a66t43/my_project_was_considered_by_github_as_one_of_the/,1,learnprogramming
o5qtj2,Guide on how to start building a portfolio site!,"Hey guys, it’s me again. I received a lot of dms and emails asking about how they should build their portfolio site, so I decided to write a guide for it. 

Check [the article](https://javascript.plainenglish.io/how-to-create-a-kick-ass-portfolio-site-that-will-wow-your-next-employer-5e5e2009222) out!",1662,56,T31K,2021-06-22 16:15:25,https://www.reddit.com/r/learnprogramming/comments/o5qtj2/guide_on_how_to_start_building_a_portfolio_site/,0,learnprogramming
5xtofd,"A List of the 20 or So Things You Need to be Able to Do in Every Programming Language You ""Know"" and Use...","At the Risk of submitting a post that has been done to death, I wanted to recruit some help to build this list of 20 programming tasks.

The goal I have is to sort of build a list that is so good, anyone new to a programming language can try to implement these 20 or so tasks and then feel confident in their knowledge of the language. 

Since there are so many languages that occupy different spaces, I think we can only have a good list if we break it up as follows: Task 1-15 should be general enough to go in any language, i.e. Input Output Redirection, File Handling, Exception Handling. There should not be anything as simple as numeric processing, i.e. add two numbers, increment a value, basic while loops. All of those can be in the context of more interesting problems. This isnt a curriculum that builds on itself. You dont have to start at the beginning either. Just 20 tasks critical to working with the machine and language. Again, IO redirection, Exceptions (might be too basic), File Handling, Network Programming (basic stuff only).
Task 15-20 can differ depending on the language if there is some specialization. So lisp might have some extra linked list processing stuff.

I think you could turn something like this into a really good programming for dummies book. Obviously you have to make attempts at actual problems to become a good programmer, but completed examples of these 20 tasks in each language along with really nice descriptions would be rocket fuel for someone looking to simply pick up language syntax and structure. I mean, how long do you think it would take you to follow along from 1-20 in your own editor?

So lets come up with a good curated list of the 20 best programming exercises for any language. Each one should be as simple as possible and easy to follow along or extend. And lets prioritize examples that can be extended (assuming some creativity on the part of the learner).

Have at it.",1659,147,woook3r,2017-03-06 15:06:21,https://www.reddit.com/r/learnprogramming/comments/5xtofd/a_list_of_the_20_or_so_things_you_need_to_be_able/,0,learnprogramming
m0xrlr,Imposter Syndrome,"My dad wasn't kidding when he said that CS is a man's world. I am afraid to ask questions because I'm afraid of guys thinking I'm stupid. I'm trying my best I really am, but it never feels enough. I really enjoy coding and genuinely think it's interesting, but it's hard when you are stuck yet everyone else knows what they are doing. There are barely any girls in my class and I feel so alone. I knew even before going to college that CS is heavily dominated by guys, but I didn't think it would affect me so much. I feel like an imposter even though I'm doing well in my classes. Every guy seems so much smarter than me. I don't know what to do.",1659,339,brandymlover,2021-03-09 03:32:58,https://www.reddit.com/r/learnprogramming/comments/m0xrlr/imposter_syndrome/,0,learnprogramming
mi0m1s,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code APR2021FREE","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: APR2021FREE

https://www.udemy.com/course/automate/?couponCode=APR2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to APR2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1657,85,AlSweigart,2021-04-01 17:39:44,https://www.reddit.com/r/learnprogramming/comments/mi0m1s/automate_the_boring_stuff_with_python_online/,1,learnprogramming
krqhln,I’m a software developer who doesn’t know enough about computers and the internet. Where do I start?,"TLDR: I can write code,  but I don’t understand how computers or the internet work (ssh? Sftp? Protocols? Chains and keys??). I want to learn. 


I took the bootcamp route a couple of years ago, and I am now in my second dev position. Before that I worked in completely non tech roles and my computer experience was stuff like the Microsoft products. I’m really confident in my code writing ability, but my new role includes a lot of other “computer” stuff and I’m feeling a bit lost. I hate that I don’t even understand enough to ask intelligent questions. 

I can follow the documented steps to ssh to another machine or upload a certificate and key in aws, but I don’t actually understand the why or how of what I’m doing and I don’t like performing steps I don’t understand. I’ve also switched from pc to Mac so that has added another layer to some of this that makes my ignorance really apparent. 

I’m looking for a course/book that can explain the big picture and the details of the words that are being thrown around: ssl certifications, ssh, sftp, http/https, and pretty much any of the other “computer/internet” ideas that are fundamental.

Anyone have any resources they recommend for a dev who is a computer noob? Free or paid.

Edit: well this is a surprise. Thanks y’all for all of the awesome resources. I’m going to spend some time compiling and reviewing and making a plan for how to fill in these knowledge gaps.",1653,119,IftruthBtold,2021-01-06 15:52:38,https://www.reddit.com/r/learnprogramming/comments/krqhln/im_a_software_developer_who_doesnt_know_enough/,0,learnprogramming
eijqqo,Google Tech Dev Guide - Google's Curated List of Resources for Learning Programming,"[Google Tech Dev Guide](https://techdevguide.withgoogle.com) is a curated collection of materials from many sources, including Google, that you can use to supplement your classwork or direct your own learning. 

Excerpted from their website, ""Whether you’re a student or an educator, newer to computer science or a more experienced coder, or otherwise interested in software engineering, we hope there’s something for you here in Google’s Guide to Technical Development. ""

I was recommended this resource by a Google Tech Recruiter in a rejection mail 😅 I really liked this resource and decided to share it here. Hope you find it useful as well :)",1661,45,Xtremilicious,2020-01-01 15:54:43,https://www.reddit.com/r/learnprogramming/comments/eijqqo/google_tech_dev_guide_googles_curated_list_of/,0,learnprogramming
7itsp9,Learn JavaScript By Coding Flappy Bird And Snake Games.,https://www.youtube.com/watch?v=9TcU2C1AACw&list=PLt4757glfbhHkfz7dqojMbnBdgUnFih4B,1652,58,th3originals,2017-12-10 13:04:32,https://www.reddit.com/r/learnprogramming/comments/7itsp9/learn_javascript_by_coding_flappy_bird_and_snake/,0,learnprogramming
k07j86,Just (beta) released my first app and I finally feel like my hard work is paying off!,"I've been self teaching from scratch this year. Bit by bit I went through Udemy courses, picked up some logic, concepts and eventually made a snake game using Python. That tiny bit of Python was also all I knew before I foolishly accepted a challenge to create an app \~3 months ago.

Flutter (dart) looked nice and seemed like a good way into understanding OOP. I took a course on that, and after spending 1 month slugging through the 300 vid marathon, I set out to program what had by then turned into a freelance contract for a cross platform app.  


During my last two months I have learned so darn much:  
\- Become somewhat comfortable with OOP  
\- Learned about and then used two different state management tools  
\- Learned to connect my app with a server, user authenticate, database interaction and some basic understanding of .JSON files  
\- Read about SSH and signing apps in general  
\- Gotten so much more intimate with my debugger  
\- Understand how to stack, frame and in general get designs from my head onto the screen  


And on and on and on..   


 I've been struggling a lot with imposter syndrome over the past few weeks, and felt worried that I was wasting most of 2020 thinking I wouldn't be able to get a useable skillset on my own..  


But here I am today after 8 straight hours of debugging and scrambling to release, and it finally built perfectly. I just made good on a promise - the first testers already have my app installed on THEIR phones and it's WORKING and I'm so so so happy! I've been tracking back and forth in my  Livingroom for at least 30 min until I realized I really wanted to share it with you guys. There is always so many motivational stories here and I thought I should chip in with my experience as well!   
tldr; I worked hard, learned a lot, and released my first app - super relieved and happy",1650,138,Refleksjon,2020-11-24 15:54:11,https://www.reddit.com/r/learnprogramming/comments/k07j86/just_beta_released_my_first_app_and_i_finally/,0,learnprogramming
8yc8ii,Insane collection of 1000+ programming PDFs (books and articles),"I just found this collection of free PDFs while browsing Github. Have to admit - it's somehow discouraging to see a Github project with so much information that a lifetime of reading would not be sufficient to fully absorb it.

[1000+ programming pdfs](https://github.com/tpn/pdfs)  
",1649,103,code_x_7777,2018-07-12 18:14:32,https://www.reddit.com/r/learnprogramming/comments/8yc8ii/insane_collection_of_1000_programming_pdfs_books/,0,learnprogramming
8a8yhw,Awesome Python Cheat Sheet,"Here is a great [cheat sheet for Python](https://perso.limsi.fr/pointal/_media/python:cours:mementopython3-english.pdf) by Laurent Pointal (whoever you are). Thanks a ton! :)

If you like this sheet, maybe you are interested in our own [cheat sheet course](https://mailchi.mp/8688e85a9125/python-cheat-sheet-course) consisting of 5 cheat sheets (keywords, basic and complex data structures, object orientation, and tricks).",1650,54,None,2018-04-06 12:07:10,https://www.reddit.com/r/learnprogramming/comments/8a8yhw/awesome_python_cheat_sheet/,0,learnprogramming
g503fz,Python 2 is dead: long live Python 3,"The last release of Python 2 has occured.  There will be no more changes or bug fixes.

https://pythoninsider.blogspot.com/2020/04/python-2718-last-release-of-python-2.html

If you are learning Python, please use Python 3 - you'll make your own life easier.  The differences are fairly small.

Next year will be Python's 30th birthday!",1641,159,99_percent_a_dog,2020-04-20 20:05:14,https://www.reddit.com/r/learnprogramming/comments/g503fz/python_2_is_dead_long_live_python_3/,0,learnprogramming
ysxi9l,"FYI: There are tons of content creators who are content creators first and developers second. Before watching someone's 10 part series on ""HOW to become a WEB developer FAST with NO degree"", look them up on linkedin and have a look at their credentials.","I've started doing this and I'm finding quite a few videos like ""Top 5 programming languages"" and ""A day in the life of a software engineer"" made by people with one internship under their belt. 

It's a judgement call if you want to trust them or not but I'm always paranoid that I'll learn a bad coding habit from some dude with four months total of professional experience, so I tend to be more picky.

What do you guys think?

**EDIT:** 
If my fellow beginners will indulge another piece of unsolicited advice: if you're still not sure where to start, just do CS50. I consider myself a medium beginner (four years of casual learning) and I've done quite a few beginner courses, but CS50 what the one I learned the most from.",1641,104,PoonaniPounder,2022-11-12 05:28:13,https://www.reddit.com/r/learnprogramming/comments/ysxi9l/fyi_there_are_tons_of_content_creators_who_are/,0,learnprogramming
iimqjw,Self learners how did you learn algorithms?,"I was reading another post about how to learn algorithms, but most of the replies seem to have some university education. Curious to know how people who learned by themselves taught themselves algorithms. It’s the biggest weakness that’s holding me back.


Edit: So many replies! Thank you. I’ll make sure to read them all.",1635,144,CodingPleaseSaveMe,2020-08-29 05:02:15,https://www.reddit.com/r/learnprogramming/comments/iimqjw/self_learners_how_did_you_learn_algorithms/,0,learnprogramming
hwht3s,Websites with interactive problems are great for learning,"I self study programming, and one of my favorite ways to learn are websites with interactive exercises. Here are some examples.

- https://regexone.com/ - Taught myself RegEx from scratch using this website a year or two ago. Now I use RegEx all the time.
- https://sqlbolt.com/lesson/select_queries_introduction - I already knew SQL when I found this site. But same great format as above.
- https://flexboxfroggy.com/ - CSS Flex. I finished this one a couple of days ago. I went from always googling when I needed to use flex boxes, to having most of it memorized now.
- https://cssgridgarden.com/ - CSS Grid. I'll do this one next.

These types of websites have three great properties.

- They dice the lessons and problems into very small, bite sized pieces.
- They give you exercises. Exercises are like doing your math homework. They're essential.
- The exercises are interactive and are easily done in the browser. No pen and paper needed. Quick, efficient, less boring.

Anyway, just wanted to share this tip with you guys. I'm not connected to the above websites in any way. I just think that websites with interactive problems are great, and I wish there were more of them.

If you know of other websites like these, please post them in the comments below. I'll probably end up doing them cover to cover :)

edit: Here's my notes on [websites mentioned below](https://ibb.co/WBPfBsb).

edit: I ended up posting this on [my blog](https://www.reddragonwebdesign.com/interactive-websites-are-great-for-learning-programming/).",1639,100,RedDragonWebDesign,2020-07-23 15:38:23,https://www.reddit.com/r/learnprogramming/comments/hwht3s/websites_with_interactive_problems_are_great_for/,0,learnprogramming
j0y5zy,Top mistakes while learning web development (and how to prevent them),"# Introduction

I've been working as a frontend web developer for the last 3 years. I'm self-taught and made a bunch of mistakes along the way. I wanted to share with you guys my thoughts on some of the most common mistakes people make while learning programming and how to avoid them. Let's get started!

# Not Setting A Timeline

Not setting a timeline or having a roadmap. Without a schedule to follow, you are going to feel less committed, time will just pass by, and you won't really have that drive to hit certain milestones (such as finish a course, build a project or start applying for jobs). Similarly, not tracking your time (you can use a Chrome extension like [Toggl](https://chrome.google.com/webstore/detail/toggl-track-productivity/oejgccbfbmkkpaidnkphaiaecficdnfn?hl=en)). Without knowing how many hours per day/week you're spending learning, time will just pass by and you'll have nothing to hold yourself accountable.

However, if you do have a roadmap and are tracking your time, you'll be much better equipped at seeing where you are, where you should be, and how much longer before you hit that next milestone.

# Trying Too Many Programming Languages Right At The Start

I'm not saying don't try different programming languages and experiment, I'm saying that once you have an idea of where you're going (""I want a job in frontend web development"", lets say), you're still bouncing around trying PHP, Java and C#.

When you're looking to get a job, specializing is key. You want to stick to one programming language, based on the job you're wanting to get. Don't get distracted by other languages. They're great and you'll get to them in time, but your focus needs to be on the core stack of the position you're after. You don't want to be a Jack of all trades, but master of none. You need to get vertical proficiency, not horizontal - and you get that by practicing that one thing, every day.

# Consistency

When learning anything, consistency is key. If you've ever tried to learn a new language, French or Spanish, you know how important it is to be immersed in it. If you're immersed, you become a sponge and absorb everything that is being thrown at you. If you aren't, you're going to have a much more difficult time. With learning programming, consistency is the first step to being immersed.

Again, this comes back to having a roadmap and sticking to the timeline that you have set for yourself.

# Not Learning How You learn

Not learning how you best learn things. There are a bunch of different ways to learn coding, whether it is video tutorials, reading documentation, books or reading through other people's code.

Everyone learns differently, so take a little bit of time just to explore different ways of learning whatever programming language you're going for. Maybe you struggle with video tutorials because it isn't hands on enough for you, so perhaps documentation or a good book would be a better fit for you. Having the right learning tool for you will really help you in the long run.

# Prioritizing Quality Over Quantity

Prioritizing quality over quantity, RIGHT when you're first starting to code. When you are first starting out, I believe you should be writing as much code as possible and just getting it to work. In time you'll learn how to make your code more elegant and optimize it, but if you are focusing on this right at the beginning, it can be very demotivating.

You need to be seeing progress, and to do that, you need to be getting your hands dirty. For example, if you're working on a to-do list app, just get it to work. Once you have it going, then write your functions better, then separate your coupled logic, then improve your CSS styling, etc etc. Once you have a strong foundational knowledge, THEN you should be trying to write clean, scalable code.

# Tutorial Hell

Tutorial hell is when you have spent all of your time watching tutorials but you've never built anything past that. You understand the content while you're watching the tutorial, but when it comes time to applying it and building something your self, you draw a blank and don't know what's going on.

The best advice I can give for this is when you watch a tutorial, to immediately afterwards start building a similar project. For example, if you're watching a tutorial on building a weather app, immediately afterwards you should be building a project with a different UI(colors and structure) and finding a different weather API (data provider) - and then use the core parts of the tutorial, like integrating the API and displaying the information. Use those core parts, but make it your own. By making the project your own, you'll form a considerably better understanding of the topics and techniques involved, and you'll have a much easier time remembering it when the time comes for you to build something new.

# Trying To Memorize Code Syntax

Trying to memorize code syntax. That is, the grammar of code. Should a semi-colon be after this bracket, should this line be indented, should I have brackets around this, should I use let or const, single or double quotes, etc.

It's funny to look back on now, but I used to handwrite out HTML on paper and memorize it, and that just turned into a complete mess, without really helping me (so don't do this). For a lot of the simpler things like semi-colons, indents and quotation marks, look into the free extension Prettier for whatever code editor you're using. It will fix all of these things for you, following best practices. Past that, it just comes down to practice. It will come to you.

# Trying To Learn A Framework Before Understanding The Core Language

Learning a framework (Angular, React or Vue), before having a strong foundational knowledge of the core language (JavaScript). This can be applied to any framework and language (Python/Django, PHP/Laravel, Java/Spring, etc). I think this stems from when we read job postings, they all say we need knowledge in these frameworks, so we think ""ok, I need to get there as quickly as possible"", and in turn you're going to skip over a lot of the more advanced features of the language. One problem with this is that you won't always be able to tell what is JavaScript vs. what is React. Also, if you skip over JavaScript and only ever master a framework, then when that framework inevitably gets replaced by another framework (as is the industry), then you're stuck in limbo. You won't be able to easily adapt to the constantly changing industry.

The solution is simple: take all the time you need to be really comfortable with your core programming language and build a bunch of projects in it without any frameworks. You'll then fully understand what's going on in the framework, and you'll be able to adapt in the industry much better, absorbing new technologies at a much faster rate.

# Giving Up

Sounds cliche, but you will inevitably hit roadblocks and when you do, you need to be able to power through them.

I'd suggest you set a timer for 30 minutes and try everything you can to understand the issue. Review your notes, check online resources like Stack Overflow, etc. If after that time, you still aren't able to understand the issue, take a break. Sometimes you'll need to allow yourself time to slowly digest it. There have been a ton of times where I've left work and not understand what I was looking at. My brain was completely fried and I was confused. However, the next day when I return to work, all of a sudden things are clicking (at least a bit more) and I'm able to visualize the problem a bit clearer.

# Conclusion

I hope this helped you understand some of the traps that are out there (some of them you may be falling into right now), and also give you some tools to navigate around them. Let me know if I missed any common mistakes and I'll add them to my list.

If you did find this helpful and would like more web development topics broken down, I have a YouTube channel called [Programming With Pax](https://www.youtube.com/c/programmingwithpax). It's mostly frontend related, along with succeeding as a self-taught developer. It would be great if you checked it out and gave me some feedback. Thanks a lot for your time, I hope you're having a great day and I'll see you in the next one!",1639,121,ProgrammingWithPax,2020-09-27 20:23:41,https://www.reddit.com/r/learnprogramming/comments/j0y5zy/top_mistakes_while_learning_web_development_and/,0,learnprogramming
mu1sk5,Oh My Git! - A trime travel themed game to learn git,"I read the other day in another sub that every programmer should know his/her way around with git. I agree. I found this cool game which may be a good resource for newcomers and those who want to harden their git knowledge:

[https://ohmygit.org/](https://ohmygit.org/)

I would love to hear your opinion if it helped you understand the concept and keywords of git better and if I should recommend it further.

//edit: btw, this is not my project. See the site for more infos about the authors and even a talk they gave abou it.",1635,49,plissk3n,2021-04-19 14:27:44,https://www.reddit.com/r/learnprogramming/comments/mu1sk5/oh_my_git_a_trime_travel_themed_game_to_learn_git/,0,learnprogramming
j7qfca,Fired for going to coding bootcamp?,"Edit: This blew up. I'm going to be fine. I'm removing the original text so my CEO doesn't see it and freak out. He's not going to sue me and I want to keep it that way. 

Thanks for all the advice and even the few offers of mentorship and unpaid work opportunities. This is an alt account so pm me if you want to talk or have other advice.

Second Edit: No one else has heard of this happening? I know one other person that this happened to years ago. His job gave him the ax when he updated his linkedin page to list the Bootcamp.",1637,581,Weed_Dood,2020-10-09 01:56:59,https://www.reddit.com/r/learnprogramming/comments/j7qfca/fired_for_going_to_coding_bootcamp/,0,learnprogramming
3i02xs,Any interest for a Reddit bot tutorial?,"Hey all,

I wanted to know if you'd have any interest in seeing a tutorial or history of someone building a Reddit bot from scratch. I think that the biggest step from beginner to intermediate programmer is really that you have to move away from focusing on language specifics and really dig into a project, but I don't really want to put in the effort on a project nobody else is going to care much for anyway.

So, I'm asking you all, the LP community. Would you like to see me undertake this? Are enough people going to benefit from this that it's worth my time? Let me know in the comments.

Thanks, and have a great day, fellow learner!

-------

EDIT, 6 P.M. New York Time:

1. /u/__baxx__ has been linking to [this tutorial](http://praw.readthedocs.org/en/latest/pages/writing_a_bot.html) which looks like a good place to start.
2. /u/RubyPinch points out in [this comment](https://www.reddit.com/r/learnprogramming/comments/3i02xs/any_interest_for_a_reddit_bot_tutorial/cuc6ort) that the tutorial is starting to show its age.
3. /u/got_mugged_in_space has a [very good comment](https://www.reddit.com/r/learnprogramming/comments/3i02xs/any_interest_for_a_reddit_bot_tutorial/cuc5r4s) linking to /r/watchpeoplecode with a search to see people who have already done this.

This is generating quite a bit of interest, which is nice to see! :)

I think I'll do an initial part of this tutorial, and emphasize more the *process* of sifting through information, knowing when to stop reading & get coding, and forming a good mental model of what the code actually does. And then we'll see if anybody actually finds it useful.

-----------

EDIT: [My first hour of researching for this project](https://www.youtube.com/watch?v=zIC6BuAByns). Just so you can poke around and see what sorts of tools I'm using, and how I gather information.",1632,96,inSearchOfLostThyme,2015-08-22 19:50:07,https://www.reddit.com/r/learnprogramming/comments/3i02xs/any_interest_for_a_reddit_bot_tutorial/,0,learnprogramming
hlm1la,Created a video to introduce beginner programmers to what debugging looks like,"One very big mistake that programming teachers on all platforms make is completely removing debugging from the curriculum of learning how to program.

This is wrong. Debugging is one of the most powerful tools any beginner can use to learn how to program. It can give you an intimate view of how your code is running and how it is that your computer deals with running your program in real time. Even now as a professional programmer I am surprised by how many junior programmers were never introduced to debugging. As such, I made this video to show everyone what the purpose of debugging is.

[https://youtu.be/SWeZw5\_LP2Y](https://youtu.be/SWeZw5_LP2Y)",1635,93,None,2020-07-05 12:44:24,https://www.reddit.com/r/learnprogramming/comments/hlm1la/created_a_video_to_introduce_beginner_programmers/,1,learnprogramming
lwh7sb,I feel like I'm on the minimum intelligence required for programming,"I have the motivation and perservence but Jesus it's sometimes embarrassing how many mini obstacles I have to hurdle over and how much time it takes for me to understand the logic behind a function or each iteration of a loop.

I can be thankful that I could at least understand most  programming concepts (at least so far), if given enough time. But that's going to be a detriment in a job setting, I really need to nail all these nuances that occur until I can be comfortable enough to write code as a career.

Any of you feel the same? like if you had just maybe 5 or 6 IQ higher it could exponentially help you drill through the logic of some programs? It's all I'm really asking for. I like a good challenge but it's no fun being stuck all the time. I need just that little boost of brain power",1632,229,JacketsPotato,2021-03-03 00:54:37,https://www.reddit.com/r/learnprogramming/comments/lwh7sb/i_feel_like_im_on_the_minimum_intelligence/,0,learnprogramming
egqs3s,Thought of sharing this treasure!! List of websites to learn coding!,"Below are websites having numbers of courses and resources you can access free of cost mostly. Happy Learning!! 

P.S- shared.

Edit:1
Thanks guys for adding more sites in comments.
People might be having lot of suggestions. Pls include those sites in URL format rather than hyperlink.

Edit:2
Understood.. This is a lot to take in for beginners. Instead of biting cheese on all plates you find, just focus on one and eat full. That way you would know the progress.

1- www.edx.org

2- www.coursera.org

3- www.udacity.com

4- www.edraak.org

5- www.class.stanford.edu

6- www.venture-lab.org

7- www.education.10gen.com

8- www.openhpi.de

9- www.ocw.mit.edu

10- www.khanacademy.org

11- www.oli.cmu.edu

12- www.oyc.yale.edu

13- www.webcast.berkeley.edu

14- www.openclassroom.stanford.eduMainFolder/HomePage.php

15- www.pythonprinciples.com/

16- www.ck12.org

17- www.udemy.com

18- www.skillshare.com

19- www.codecademy.com

20- www.p2pu.org

21- www.theodinproject.com/home

22- www.myopencourses.com

23- www.myopencampus.in

24- www.nptel.iitm.ac.in

25- www.saylor.org

26- www.nalandau.com

27- www.academicearth.org

28- www.youtube.com/education

29- www.phodphad.com

30- www.learntobe.org

31- www.floqq.com

32- www.learnerstv.com

33- http://www.coursetalk.org

34- http://www.skillacademy.com

35- http://www.mruniversity.com

36- www.alison.com

37- www.w3schools.com",1631,74,ibalaoffl,2019-12-28 13:32:35,https://www.reddit.com/r/learnprogramming/comments/egqs3s/thought_of_sharing_this_treasure_list_of_websites/,0,learnprogramming
kb96x2,What Do Software Engineers Actually Do?,"Hey guys,

I am currently a freshman CS major and am having difficulty understanding how what I’m learning (things like data structures and algorithms) apply to what would be expected of me when I get a SWE internship or job.

I can’t imagine that the job is just doing leet code style problems. I’m scared that once I get a SWE position, I won’t be able to do anything because I don’t know how to apply these skills.

I think it would really help if you guys could provide some examples of what software engineers do on a day to day basis and how the conceptual things learned in college are used to build applications.",1621,246,nokizzz,2020-12-11 19:15:07,https://www.reddit.com/r/learnprogramming/comments/kb96x2/what_do_software_engineers_actually_do/,0,learnprogramming
7pcdva,I'm teaching people with basic C++ skills how to make games in Unreal Engine 4,"You can find the series here:
https://www.youtube.com/watch?v=K8iSi1oGaBI

Keep in mind you'll need some C++ knowledge, but aside from that I assume you don't know any game programming stuff.

Hope everyone gets some use from it! Let me know what you think :)",1624,48,ReubenWard,2018-01-10 02:19:11,https://www.reddit.com/r/learnprogramming/comments/7pcdva/im_teaching_people_with_basic_c_skills_how_to/,0,learnprogramming
109y92y,Coding Dojo is a scam.,"Someone was dumb enough to sponsor me and get me enrolled in RPA bootcamp from Coding Dojo, otherwise I would have sued those scumbags for every penny I would have paid them.

To give you an idea how shitty it is, we are in the sixth week now and we haven't worked on a damn single project.

The only bots we've worked on, are ones to loop through a list, and another to check if a number is greater than 100.

The lead instructor is an idijt named Younus Baig who claims to have 5 years of experience in RPA and is working now with IBM, he's an absolute tool who can't even create a hello bot even if his life depended on it.

Half of the time he spends reading the slides, reprhasing them to make you feel as if he's adding something of substance, but he's never worked in RPA so he can't explain shit.

What about the other half of the time you say? Well, you see.. we spend it watching videos.

He plays some useless youtube video while nodding his goofy head as if he's agreeing with what is been said in the video, but if you ask him about anything mentioned in the video he starts looking as someone who's been holding his shit for three days straight and is about to unleash an earth shattering bomb.

Almost all the content in the slides as well as Learn Platform have been copied and pasted from other platforms (namely Automation Anywhere and UiPath), you're better off learning RPA from there.

I regret accpeting this scholarship/sponsorship because I've wasted so much time that I could have spent learning other stuff on my own from other free or cheap resources.",1623,294,coding_ninja69,2023-01-12 12:16:00,https://www.reddit.com/r/learnprogramming/comments/109y92y/coding_dojo_is_a_scam/,0,learnprogramming
aq2pgf,This is probably an obvious answer but I can't find it anywhere. WHERE do I code?,"A novice can open up Photoshop and start playing around. Someone new to piano can sit down at a piano. What is that equivalent for coding? I see all of these beginner tutorials talk about languages and set me up with a nice little terminal to code and see progress. Where is the terminal in real life? How do I literally start a project? I'm seriously asking. Is there a website I create my project in? Is that what Cloud9 is?  Let's say I know HTML5 and want to create a project with it. What is that next step to MAKING it? It's like everyone is so helpful figuring out what bike to choose and how to ride the bike, but for the life of me I can't find anything to teach me where to find a street to ride on.

&#x200B;

Edit #1- Wow! I woke up to so many great responses! Everyone is really friendly, encouraging, and helpful. I'm going to spend the day answering everyone's comments. Thank you!!",1614,312,All_Joking_a_Salad_,2019-02-13 04:36:40,https://www.reddit.com/r/learnprogramming/comments/aq2pgf/this_is_probably_an_obvious_answer_but_i_cant/,1,learnprogramming
emz886,I'm a software engineer with 8+ years working in SF. I'd like to host a series of AMAs for people trying to learn programming. Anyone interested?,"TLDR

Id like to host a series of AMAs for anyone learning programming. I'm a software engineer with 8+ years working in SF and would love to be able to help new programmers in whatever ways they would find useful.

When I was first starting off my career about 9-10 years ago, I found it really daunting. One of the things I would have loved at the time was to be able to talk to someone who had a lot of experience working as a dev in SF (Im from LA and was planning to move to SF). I didn't have that then and so now that I'm in the opposite position, I'd like to try and be that resource for some of you (if you would find it useful).

So, I'd like to host a couple of AMAs to talk everything and anything programming. And it honestly can be more than just programming. We can talk careers, how to land a job, programming interviews, work life balance, working remotely, etc.

I'd like the AMAs to be over google hangouts or zoom vs. a traditional reddit style AMA.  This way, it can be a bit more personable and we can have more of an in-person discussion.

A little background about me  
\- full stack engineer (mostly backend these days, but was a lead front end engineer for a while and i know enough devops stuff to be dangerous, mostly to myself)  
\- been a part of 2 startups that were successfully acquired  
\- former engineering manager  
\- have interviewed 100+ (guesstimating here) engineering candidates

I'm still working through how to run and operate the AMAs but if you'd like to participate, please sign up via the link below.  I'll be communicating and coordinating all the AMAs via email.

Link: [https://programming-ama.ck.page/9f3d8b4776](https://programming-ama.ck.page/9f3d8b4776)",1613,188,aalquiso,2020-01-10 23:35:05,https://www.reddit.com/r/learnprogramming/comments/emz886/im_a_software_engineer_with_8_years_working_in_sf/,0,learnprogramming
nyyw4k,Is it normal to be regularly checking back on previous projects to remember how to do things?,"I've started trying to learn how to code, and while I'm doing pretty well understanding the concepts, I find myself regularly checking back on previous projects to see how to do things. 

For example, I recently made a checkerboard using Python, html, and CSS where the url input could change the size of the board and colors of spaces. And several times I felt stumped on syntax and have to go back and look at previous ways I implemented similar code and rework it to fit.

Is this pretty normal among developers or should I really focus on memorizing code?",1618,123,MyloWilliams,2021-06-13 15:34:59,https://www.reddit.com/r/learnprogramming/comments/nyyw4k/is_it_normal_to_be_regularly_checking_back_on/,0,learnprogramming
ftph95,Web Development Masterclass on Udemy is free until tomorrow.,"No prior knowledge required

You can enroll now and have lifetime access :)

Link: [https://www.udemy.com/course/web-development-masterclass-complete-certificate-course/?LSNPUBID=PPkX79%2Fc\*b0&ranEAID=PPkX79%2Fc\*b0&ranMID=39197&ranSiteID=PPkX79\_c.b0-d2IxWBgN6k6AGygokabuXg&couponCode=8D5741C240C280ADE489](https://www.udemy.com/course/web-development-masterclass-complete-certificate-course/?LSNPUBID=PPkX79%2Fc*b0&ranEAID=PPkX79%2Fc*b0&ranMID=39197&ranSiteID=PPkX79_c.b0-d2IxWBgN6k6AGygokabuXg&couponCode=8D5741C240C280ADE489)",1619,182,Rokexd,2020-04-02 16:33:37,https://www.reddit.com/r/learnprogramming/comments/ftph95/web_development_masterclass_on_udemy_is_free/,0,learnprogramming
u5tmtf,Oh my god. Debugging is so much easier if you learn to not use console.log,"Apologies for the very noob realization here. Obviously like most learning programmers, if something’s not working correctly, I’d put console.log statements all over the place. First to make sure the program was actually reaching every function I wanted it to, and then to print out the values of certain variables to see how they change over the course of the program.

But then the other day I discovered that if you open up the source code in the console and click on a specific line, the program will set a breakpoint there and it’ll just… stop there. And then you can see the values of all variables in the function at that point. I set it within a loop and I could clearly see how each variable was changing at every step. Made animation so much easier— I could pause the animation at every single frame to clearly catch mistakes I couldn’t otherwise.

I know this is probably common knowledge for more experienced coders but… holy crap!! It took me 2 minutes to debug something I would’ve spent 30 minutes debugging before, because I was able to see variables I wouldn’t even think were the source of the bug… what was I thinking just console.logging like a mad person?",1621,142,None,2022-04-17 18:57:18,https://www.reddit.com/r/learnprogramming/comments/u5tmtf/oh_my_god_debugging_is_so_much_easier_if_you/,0,learnprogramming
abhjmf,I recommend watchandcode.com to anyone who wants to learn the basics of programming!,"[watch and code](https://watchandcode.com/) is a free series of short video tutorials on javascript. It is aimed at complete beginners with no prior coding experience. What makes it really stand out is the fact that during the course you learn everything by building a todo-app. This is very good as it perfectly shows you how to apply the code to build something. 

Despite the fact, that the course is taught in Javascript, it is still a very good intro to pretty much every programming language, as it shows the basics (like loops, variable, functions etc.). It also teaches you how to properly structure your code.

If you want to start your programming adventure, but you are completely unsure from which resources to learn, definitely check out [https://watchandcode.com/](https://watchandcode.com/)",1610,39,everek123,2019-01-01 11:31:18,https://www.reddit.com/r/learnprogramming/comments/abhjmf/i_recommend_watchandcodecom_to_anyone_who_wants/,0,learnprogramming
6utoal,Udemy coupon: 100% off Welcome to Bootstrap 4 Rapid web development framework HTML CSS JS,"I was looking up courses on Bootstrap 4 and randomly came across a coupon that gives us 100% off this bootstrap 4 course and thought someone would find this helpful.

Yes, it is a valid coupon as I just used it myself.

Course: https://www.udemy.com/bootstrap-4-website/learn/v4/overview

Coupon: FBAUG16

**EDIT** I have found some more 100% off coupons which are listed below 

**The Complete Ethical Hacking Course: Beginner to Advanced!**

* Coupon: WOO052816

* Link: https://www.udemy.com/penetration-testing/

**JavaScript for Beginners Welcome to learning JavaScript**

* Coupon: RTM62110

* Link: https://www.udemy.com/javascript-for-beginners-course/

**The Complete PHP MySQL Professional Course with 5 Projects**

* Coupon: 100COUPONONLY

* Link: https://www.udemy.com/the-complete-php-mysql-professional-course/?couponCode=100COUPONONLY

**Beginner Full Stack Web Development: HTML, CSS, React & Node**

* Coupon: LRNWEB

* Link: https://www.udemy.com/ultimate-web/learn/v4/overview

**Learn to Build SQL Query| Ultimate SQL and DataBase Concepts**

* Coupon: 100COUPONSONLY

* Link: https://www.udemy.com/ultimate-sql-and-database-concepts/learn/v4/overview

**Become an iOS/Android Game Developer with Unity 2017**

* Coupon: 24FCOUPON

* Link: https://www.udemy.com/iosgamedev/

**Complete HTML CSS Guide : Design and Code Responsive Website**

* Coupon: FREEWEBCOURSE2017

* Link: https://www.udemy.com/learn-how-to-design-and-code-responsive-website-from-scratch/

**EDIT** Here I have found a site that has a ton on 100% off coupons => http://udemycoupon.discountsglobal.com/coupon-category/free-2/
",1609,176,LivingLikeASir,2017-08-20 03:51:54,https://www.reddit.com/r/learnprogramming/comments/6utoal/udemy_coupon_100_off_welcome_to_bootstrap_4_rapid/,1,learnprogramming
qd5r57,Landed my first real job after teaching myself to code! Almost finished with my first week!,"I just wanted to give a big thank you to the /r/learnprogramming community for all the inspiration over the years. I have been a long-time lurker here and I can't believe I finally landed a real gig after all these hours of tutorials and research. It's very surreal to have an actual office where I get paid to code all day.

And I really have to thank Brad Traversy for his [youtube channel](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA) and [Udemy courses](https://www.udemy.com/user/brad-traversy/). Total game-changers. I know some people don't like the code-along style, but they worked for me.

I have been grinding away in earnest for about a year and a half and it finally paid off. Keep plugging away y'all, you'll make it.",1608,129,langsam_2,2021-10-22 00:58:56,https://www.reddit.com/r/learnprogramming/comments/qd5r57/landed_my_first_real_job_after_teaching_myself_to/,0,learnprogramming
aj00dn,MIT's Introduction to Programming Using Python course is back,"One of the most popular courses in edX's history - with over 1 million people enrolled - is back. Learn computer science and programming using Python from the instructors at MIT. The course is free to try:

[https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-0](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python-0)

&#x200B;

&#x200B;",1606,158,edxsocial,2019-01-23 14:05:11,https://www.reddit.com/r/learnprogramming/comments/aj00dn/mits_introduction_to_programming_using_python/,0,learnprogramming
eyzjoh,"I wrote a small study guide for new programmers, ""How to Learn How to Learn How to Program"", to prevent issues like tutorial hell and coding fatigue.","Hey all, I'm a relatively new programmer and wanted to suggest a few ways to prevent common issues we see on the subreddit.

Despite how well-resourced, structured, and informative /r/learnprogramming is, we see the same phenomenon: a disproportionate amount of noobies, like myself, wanting to program but not wanting to work very, very hard.

So I wrote a little guide that packages the work you do programming as part of a small and simple process you can replicate over and over at any level of proficiency.

I'm posting this because, thus far, it's been the only thing helping me avoid bad practices and keep good ones (technically, and mentally). We're all different, and we all have different capacities for coding off the bat, but a lot of what prevents ""the next step"" in our careers seems to be discipline.

So, [here's a little primer](https://medium.com/@christianalexanderbonilla/learning-how-to-learn-how-to-program-d3f8b9d37222).

EDIT: Yo, glad ya'll liked it. If you have problems outside of programming affecting your programming (if you know, you know), [here's a little comment](https://www.reddit.com/r/learnprogramming/comments/eyzjoh/i_wrote_a_small_study_guide_for_new_programmers/fgmnnrs?utm_source=share&utm_medium=web2x). Other than that, I'm leaving the post (m)alone. Have fun!",1606,178,brokeboi9000,2020-02-04 23:40:54,https://www.reddit.com/r/learnprogramming/comments/eyzjoh/i_wrote_a_small_study_guide_for_new_programmers/,0,learnprogramming
5sw92o,"300+ hours of free bootcamp prep work (HTML/CSS, Ruby, JavaScript)","I got tired of seeing $3000 prep courses for bootcamps and, in the spirit of The Odin Project, our team decided we should give all that material away (including a big portion of the early Viking curriculum) for free.  So, we just made a number of project-based prep courses available to anyone at https://www.vikingcodeschool.com/prep .

For the curious, they cover >300 hours of work over:

* Basic Prep: Web basics, web design for engineers, software engineering fundamentals)
* Advanced 1: Markup with HTML/CSS/SASS/Bootstrap
* Advanced 2: Programming fundamentals with Ruby
* Advanced 3: Programming fundamentals with JavaScript (Node/Express)

So, basically, don't feel like you need to pay thousands of dollars to prepare yourself unless you like the hand-holding.",1606,71,fishyofsea,2017-02-08 23:07:43,https://www.reddit.com/r/learnprogramming/comments/5sw92o/300_hours_of_free_bootcamp_prep_work_htmlcss_ruby/,0,learnprogramming
fsuhh1,Free Udemy ethical hacking course,"The maker of this
[course](https://twitter.com/thecybermentor/status/1245040120836820992) is offering it for free contingent on you, one day, paying it back. You obviously don't have to donate but your support to the aforementioned charities (in the post) would be appreciated. Good luck and stay safe.

Edit: I Suppose [this](https://www.udemy.com/course/practical-ethical-hacking/?couponCode=STAYINSIDEANDLEARN) is more useful :)

Edit 2: I appreciate all the thanks, but all the credit should go to the creator of the course. I was but a messenger.

Automate the boring stuff with python [course](https://www.udemy.com/course/automate/?couponCode=APR2020FREE): another great course from another great and helpful creator.",1610,140,hba1cmemes,2020-04-01 06:47:25,https://www.reddit.com/r/learnprogramming/comments/fsuhh1/free_udemy_ethical_hacking_course/,0,learnprogramming
c6pwlj,A quick intro to Git - for absolute beginners,"I wrote this tutorial/intro a while ago due to lack of resources written in layman's terms, explaining what git is and why you should use it.  

I took years to get around to learning it, for this reason, but I shouldn't have - it's an incredibly simple tool which you can learn the basics of by reading this post.

Hopefully, it helps some of you!

Post:- https://webtuu.com/blog/04/a-laymans-introduction-to-git",1609,68,imnos,2019-06-28 21:19:59,https://www.reddit.com/r/learnprogramming/comments/c6pwlj/a_quick_intro_to_git_for_absolute_beginners/,0,learnprogramming
oydd0f,Free web development bootcamp: Starting Aug 23rd,"I  hope this is ok to put here, I fear it may brush against rules on  shameless self promotion, as I'm shameless and this is promoting  something I'm silly proud of.

👋I'm  Jess! I'm a former teacher who has worked in tech for a million years  and I hate exploitative, high cost programming bootcamps so much. I got  so annoyed at them that I made a free web development bootcamp based on  freeCodeCamp's [Responsive Web Design](https://www.freecodecamp.org/learn/responsive-web-design) curriculum (with their permission) and MOOC principles.

We're starting on Aug 23rd and covering HTML, CSS, CSS Grid, CSS  Flexbox,  visual design, accessibility and responsive web design  principles over  the course of 3 months. We're not covering JavaScript in  this cohort,  but will look to add another cohort if there's demand from learners.

I  expected maybe 50 or 100 learners would want to join me for this course  but have had 1700 sign up this week, so I'm going to work on this  project full time for the next few months to support as many learners as  responsibly as possible. This is completely free, there's no stealth  upsell (really, there's nothing to sell, there's literally no way to pay  us) and we're measuring our program's success in how many folks we can  keep from needing to pay for expensive bootcamps.

If you wanted to read more or sign up, [here's the link](https://www.freecodecamp.org/news/free-coding-bootcamp-based-on-freecodecamp).  But if any of you have any feedback or suggestions about what more we  can do for learners on our course, I would consider it a gift!

Edit: Y'all, don't give me awards! Save your money and spend it on books or snacks or books about snacks <3",1602,224,jesslynnrose,2021-08-05 08:39:03,https://www.reddit.com/r/learnprogramming/comments/oydd0f/free_web_development_bootcamp_starting_aug_23rd/,1,learnprogramming
mox46t,Dopamine,"So recently I came to conclusion that we are constantly stimulated with media, music other distractions that makes it harder to focus and learn programming or anything at all. 

I remember that time I had pretty much 0 entertainment no media, no music, limited ability to go out somewhere or talk with someone. After a week or so I found a c++ book, I had attempted learning c++ before, but it didn't make sense, but this time it was different, it was my only source of entertainment, the only escape from reality and learning c++ was just as enjoyable as watching a great movie or listening to music. 

I hope this will help someone",1608,196,expresscost,2021-04-11 19:09:32,https://www.reddit.com/r/learnprogramming/comments/mox46t/dopamine/,0,learnprogramming
h05r0w,Don't be ashamed of asking questions with simple solutions,"So I noticed a recent help request I commented on was deleted. I am assuming the user deleted the post because the problem in their code was actually just simple user error on their end. They didn't notice their conditional statement required a capital letter for the condition to be true and they struggled to figure out what was going on and thought their was a bug in the code. I wanted to message them this directly but I think its good for all novices and beginners to understand this.

I cannot tell you enough how often I use to see students have the same exact issue mentioned above when I was a tutor at my University or others like it. However, this was nothing to be ashamed of! Its a great learning lesson for yourself to understand why a string considers ""Word"" as not equal to ""word"". Even better, you gain the knowledge that when you are accepting user input you need to ensure you are watching for capital letters in the word. All these small knowledge gains will ultimately encompass your entire array of expertise as you progress in programming. So for all you new coders out there, keep at it! Everyone went through what you are going through in the beginning. Do NOT think you're dumb for making silly mistakes, everyone does it and I constantly make silly mistakes in my code or my input all the time and I always take it as a learning experience (after I bang my head on my keyboard contemplating if I should throw my computer out the window and then laughing at myself that I passed in the wrong argument to my function and that's why it wasn't working).",1599,130,DuhCoCo,2020-06-10 07:08:14,https://www.reddit.com/r/learnprogramming/comments/h05r0w/dont_be_ashamed_of_asking_questions_with_simple/,1,learnprogramming
u72ycj,Is it just me? Its becoming harder and harder to find relevant search results on Google.,"I am not sure if its just me. But I have noticed that Google as a search engine is becoming dead day by day. Now a days when I have issue I just search on stackoverflow website, search through github issues, read documentation or straight-up just read the source code.

I feel like Google has greatly reduced search results from stackoverflow and github issues. And most search results that appear are websites that are not helpful at all. Also in past few years Google has put limit on search results. You cannot go more than 11 pages into a search query. It says it has more than a million results matching this query but shows nothing more than a hundred.

As a programmer I need anything, any forum thats discussing the issue or has matched with search query. Google putting limit on how much it can show me and also doing so called 'intelligent' search which hurts results even more because I want result that match query not what an AI thinks I might want based on my location/cookies/interpretation of query.",1601,296,ZdsAlpha,2022-04-19 11:31:20,https://www.reddit.com/r/learnprogramming/comments/u72ycj/is_it_just_me_its_becoming_harder_and_harder_to/,0,learnprogramming
5us049,Here's a tutorial I made on creating a reddit bot using Python,"I've been making reddit bots for a few years and thought others might be interested in learning how to do so. I actually learned Python by making a reddit bot and just Googling things as I went along. You can watch the video here: https://www.youtube.com/watch?v=krTUf7BpTc0

Feedback is appreciated! Let me know if you have any questions.",1600,122,busterroni,2017-02-18 11:09:41,https://www.reddit.com/r/learnprogramming/comments/5us049/heres_a_tutorial_i_made_on_creating_a_reddit_bot/,1,learnprogramming
eort21,"If you are wondering, yes, you should learn Linux","While its possible to learn to develop and write code for work or personal use on Windows or Mac with relative ease,  there are a lot of advantages that you will gain by learning Linux well. 

The biggest reason being that it a **FREE** OS that has a lot of features. Here are other reasons to learn it

1. On AWS, the biggest cloud provider. Therefore, if you plan to enter the work force, it is very likely that you will be sshing into a Linux server to do something. 

2. Hardware support has come a very long way in Linux. Nvidia and AMD both have Linux drivers for example. Its highly likely that you will have to zero setup to make a popular distribution like Ubuntu to work on your computer. If you have an older laptop, you can give it new life with a free OS. 

3. You will find that Linux has the fewest restrictions or roadblocks in letting you do more ""power user"" things. While that has a downside of also giving you ability to fuck things up (which is why system backups with TimeVault or similar are important), the upsides of not worrying about something working because you don't have permission or some config change that is not present is very handy. This will matter more and more as you get into more advanced projects.

4. Because of the above, most of the big open source libraries are written on Linux with Linux in mind, and later ported to Windows or OSX.  Its just easier to make things work on Linux when you have direct introspection of what your program is doing and how its interfacing with the operating system, and the ability to change and configure things. 

5. Free and Open Source (FOSS) software alternatives exist for most of the popular software that you use. Generally, they may be lacking features compared to commercial alternatives, but for the majority of use cases, these are not an issue or available through extensions or configuration. If you have experience in setting stuff up and configuring this software, you will be able to have the same functionality except for free. 

6. Linux UI is very configurable, and different distributions come with their own UI, and you can mix and match. Elementary OS, specifically the Pantheon desktop, is very Mac like, for example. There is also i3wm which is a tiling windows manager that makes great use of a keyboard and smaller screens on laptops. 


Some other benefits 

* Gaming on Linux is becoming more and more prominent through Proton, which is a Valve project to provide windows layer emulation, and open source Lutris, and both are getting better.  There are a few games that are have native ports to Linux. 

* Dual booting is a thing of the past. Virtual Machine software is very good these days. If you need to run Windows apps that you can't get equivalents for on Linux, VMWare Player can provide very good performance, especially if those apps aren't graphic heavy. 

* If you have a desktop with decent hardware, you can run a Windows or a Mac VM with GPU passthrough, which gives the VM direct access to a graphics card. There are some complexities involved in setting this up (namely, the VM and the host have to have its own set of hardware like monitor mouse and keyboard), but with software solutions or hardware like USB switch, you can make this all work, and then have all 3 dev environments on one computer, with very good performance. Big thing to consider if you are thinking of developing Mac Apps without having to buy a Mac. 

So yea, learn Linux. Plenty of guides out there, my general suggestion is to start with learning the file system layout and what each directory contains, learn terminal commands for various things, and then if you want to get into tweaking

EDIT: Another one I forgot to add is privacy. You can make a linux system basically be silent and not transmit anything to the internet. Windows and Mac make this impossible, as services integral to OS will send stuff out over the internet.",1603,365,None,2020-01-14 21:27:06,https://www.reddit.com/r/learnprogramming/comments/eort21/if_you_are_wondering_yes_you_should_learn_linux/,0,learnprogramming
cz7a7w,"If you have a student email, get the student developer pack from Github!","This will also work if you have a friend willing to let you add their student email to your account. It gives you all the essentials to get started and access to so many great resources all completely for free!

EDIT: forgot to include the link 

https://education.github.com/pack",1599,119,anti_anonymous,2019-09-03 16:37:16,https://www.reddit.com/r/learnprogramming/comments/cz7a7w/if_you_have_a_student_email_get_the_student/,0,learnprogramming
4407yn,Here's a list of 223 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2016),"This is not the complete list of MOOCs starting in February 2016, just the ones relevant to this community. The complete list of courses starting in February 2016 can be found over at [Class Central (650+ courses)](https://www.class-central.com/report/mooc-course-report-february-2016/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER(39)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[HTML, CSS and JavaScript](https://www.coursera.org/learn/html-css-javascript) via **Coursera**|1st Feb|3|★★★★☆ [(8)](https://www.class-central.com/r/4239)
 [Programming and the Web for Beginners](https://www.coursera.org/learn/duke-programming-web) via **Coursera**|1st Feb|4|★★★☆☆ [(5)](https://www.class-central.com/r/4256)
 [Introduction to HTML5](https://www.coursera.org/learn/html) via **Coursera**|1st Feb|3|★★★★☆ [(17)](https://www.class-central.com/r/4307)
 [Ruby on Rails: An Introduction](https://www.coursera.org/learn/ruby-on-rails-intro) via **Coursera**|1st Feb|3|★★★☆☆ [(41)](https://www.class-central.com/r/4258)
 [Code Yourself! An Introduction to Programming](https://www.coursera.org/learn/intro-programming) via **Coursera**|1st Feb|5|★★★★★ [(3)](https://www.class-central.com/r/2938)
 [Introduction to CSS3](https://www.coursera.org/learn/introcss) via **Coursera**|8th Feb|4|★★★★★ [(2)](https://www.class-central.com/r/4294)
 [Programming for Everybody (Getting Started with Python)](https://www.coursera.org/learn/python) via **Coursera**|8th Feb|7|★★★★★ [(16)](https://www.class-central.com/r/4319)
[NEW] [HTML, CSS, and Javascript for Web Developers](https://www.coursera.org/learn/html-css-javascript-for-web-developers) via **Coursera**|15th Feb|NA|☆☆☆☆☆
 [HTML, CSS and JavaScript](https://www.coursera.org/learn/html-css-javascript) via **Coursera**|15th Feb|3|★★★★☆ [(8)](https://www.class-central.com/r/4239)
 [Programming and the Web for Beginners](https://www.coursera.org/learn/duke-programming-web) via **Coursera**|15th Feb|4|★★★☆☆ [(5)](https://www.class-central.com/r/4256)
 [Ruby on Rails: An Introduction](https://www.coursera.org/learn/ruby-on-rails-intro) via **Coursera**|15th Feb|3|★★★☆☆ [(41)](https://www.class-central.com/r/4258)
 [An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/course/interactivepython2) via **Coursera**|20th Feb|4|★★★★★ [(26)](https://www.class-central.com/r/3196)
 [Internet History, Technology, and Security](https://www.coursera.org/learn/internet-history) via **Coursera**|22nd Feb|10|★★★★★ [(25)](https://www.class-central.com/r/335)
 [Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(53)](https://www.class-central.com/r/320)
 [DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php) via **Others**|Self paced|NA|★★★★★ [(9)](https://www.class-central.com/r/1010)
 [Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★☆☆ [(13)](https://www.class-central.com/r/831)
 [Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(4)](https://www.class-central.com/r/2013)
 [Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(16)](https://www.class-central.com/r/2659)
 [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(8)](https://www.class-central.com/r/2660)
 [How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(18)](https://www.class-central.com/r/2661)
 [CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x) via **edX**|Self paced|NA|★★★★★ [(41)](https://www.class-central.com/r/442)
 [Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★☆☆☆ [(2)](https://www.class-central.com/r/3253)
 [Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|11|★★★★★ [(6)](https://www.class-central.com/r/1578)
 [CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0) via **edX**|Self paced|6|★★★★★ [(4)](https://www.class-central.com/r/2954)
 [CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x) via **edX**|Self paced|6|★★★☆☆ [(1)](https://www.class-central.com/r/2957)
 [DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0) via **edX**|Self paced|22|★★★☆☆ [(6)](https://www.class-central.com/r/3338)
 [LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2) via **edX**|Self paced|8|★★★★☆ [(25)](https://www.class-central.com/r/1857)
 [CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x) via **edX**|Self paced|14|★★★★★ [(2)](https://www.class-central.com/r/3483)
 [CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0) via **edX**|Self paced|9|★★☆☆☆ [(10)](https://www.class-central.com/r/1650)
 [COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x) via **edX**|Self paced|38|★★★★☆ [(3)](https://www.class-central.com/r/1983)
 [Learn Swift Programming Syntax](https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|★★★★☆ [(2)](https://www.class-central.com/r/4049)
 [Code101x: Think. Create. Code](https://www.edx.org/course/think-create-code-adelaidex-code101x-1) via **edX**|Self paced|27|★★★★★ [(1)](https://www.class-central.com/r/3231)
 [CS101.2x: Introduction to Computer Programming, Part 2](https://www.edx.org/course/introduction-computer-programming-part-2-iitbombayx-cs101-2x-0) via **edX**|Self paced|NA|☆☆☆☆☆
 [IT.1.1x: Introduction to Programming with Java Part 1: Starting to Code with Java](https://www.edx.org/course/introduction-programming-java-part-1-uc3mx-it-1-1x-0) via **edX**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/2813)
 [DEV208x: Introduction to jQuery](https://www.edx.org/course/introduction-jquery-microsoft-dev208x-0) via **edX**|Self paced|53|★★★★☆ [(2)](https://www.class-central.com/r/4062)
 [Introduction to Databases](https://www.coursera.org/course/db) via **Coursera**|Self paced|NA|★★★★★ [(30)](https://www.class-central.com/r/303)
 [Computer Science 101](https://www.coursera.org/course/cs101) via **Coursera**|Self paced|NA|★★★★☆ [(14)](https://www.class-central.com/r/375)


INTERMEDIATE(145)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[Programming Mobile Services for Android Handheld Systems: Content](https://www.coursera.org/learn/posacontent) via **Coursera**|Feb|NA|☆☆☆☆☆
 [The Data Scientist’s Toolbox](https://www.coursera.org/learn/data-scientists-tools) via **Coursera**|1st Feb|4|★★★☆☆ [(116)](https://www.class-central.com/r/1712)
 [21W.789x: Building Mobile Experiences](https://www.edx.org/course/mobile-application-experiences-part-1-mitx-21w-789-1x) via **edX**|1st Feb|12|★★★★★ [(2)](https://www.class-central.com/r/1523)
 [R Programming](https://www.coursera.org/learn/r-programming) via **Coursera**|1st Feb|4|★★★☆☆ [(182)](https://www.class-central.com/r/1713)
 [Responsive Website Basics: Code with HTML, CSS, and JavaScript ](https://www.coursera.org/learn/website-coding) via **Coursera**|1st Feb|4|★★★★★ [(7)](https://www.class-central.com/r/4191)
 [Introduction to Big Data](https://www.coursera.org/learn/intro-to-big-data) via **Coursera**|1st Feb|3|★★★☆☆ [(20)](https://www.class-central.com/r/4164)
 [Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) via **Coursera**|1st Feb|6|★★★★★ [(5)](https://www.class-central.com/r/4212)
 [Managing Big Data with MySQL](https://www.coursera.org/learn/analytics-mysql) via **Coursera**|1st Feb|5|☆☆☆☆☆
 [Advanced Data Structures in Java](https://www.coursera.org/learn/advanced-data-structures) via **Coursera**|1st Feb|5|☆☆☆☆☆
 [Getting and Cleaning Data](https://www.coursera.org/learn/data-cleaning) via **Coursera**|1st Feb|4|★★★☆☆ [(33)](https://www.class-central.com/r/1714)
 [Practical Machine Learning](https://www.coursera.org/learn/practical-machine-learning) via **Coursera**|1st Feb|4|★★★★☆ [(11)](https://www.class-central.com/r/1719)
 [Exploratory Data Analysis](https://www.coursera.org/learn/exploratory-data-analysis) via **Coursera**|1st Feb|4|★★★★☆ [(20)](https://www.class-central.com/r/1715)
 [Statistical Inference](https://www.coursera.org/learn/statistical-inference) via **Coursera**|1st Feb|4|★★★☆☆ [(17)](https://www.class-central.com/r/1717)
 [Regression Models](https://www.coursera.org/learn/regression-models) via **Coursera**|1st Feb|4|★★☆☆☆ [(13)](https://www.class-central.com/r/1718)
 [Approximation Algorithms Part I](https://www.coursera.org/learn/approximation-algorithms-part-1) via **Coursera**|1st Feb|5|☆☆☆☆☆
 [Database Management Essentials](https://www.coursera.org/learn/database-management) via **Coursera**|1st Feb|7|★★★★☆ [(1)](https://www.class-central.com/r/4337)
 [Data structures: Measuring and Optimizing Performance](https://www.coursera.org/learn/data-structures-optimizing-performance) via **Coursera**|1st Feb|5|☆☆☆☆☆
 [Introduction To Swift Programming](https://www.coursera.org/learn/swift-programming) via **Coursera**|1st Feb|5|★☆☆☆☆ [(1)](https://www.class-central.com/r/4248)
 [Web Application Development with JavaScript and MongoDB](https://www.coursera.org/learn/web-application-development) via **Coursera**|1st Feb|4|★★★★☆ [(2)](https://www.class-central.com/r/4288)
 [Interactivity with JavaScript](https://www.coursera.org/learn/javascript) via **Coursera**|1st Feb|4|☆☆☆☆☆
 [Reproducible Research](https://www.coursera.org/learn/reproducible-research) via **Coursera**|1st Feb|4|★★★★☆ [(13)](https://www.class-central.com/r/1716)
 [Java Programming: Principles of Software Design](https://www.coursera.org/learn/java-programming-design-principles) via **Coursera**|1st Feb|4|☆☆☆☆☆
 [Developing Data Products](https://www.coursera.org/learn/data-products) via **Coursera**|1st Feb|4|★★★★☆ [(5)](https://www.class-central.com/r/1720)
 [Responsive Website Tutorial and Examples](https://www.coursera.org/learn/responsive-website-examples) via **Coursera**|1st Feb|4|☆☆☆☆☆
 [Data Management and Visualization](https://www.coursera.org/learn/data-visualization) via **Coursera**|1st Feb|4|★★★★☆ [(2)](https://www.class-central.com/r/4184)
 [Data Manipulation at Scale: Systems and Algorithms](https://www.coursera.org/learn/data-manipulation) via **Coursera**|1st Feb|4|★★★★☆ [(2)](https://www.class-central.com/r/4473)
 [Data Warehouse Concepts, Design, and Data Integration](https://www.coursera.org/learn/dwdesign) via **Coursera**|1st Feb|5|★★★★★ [(1)](https://www.class-central.com/r/4230)
 [Communicating Data Science Results](https://www.coursera.org/learn/data-results) via **Coursera**|1st Feb|3|☆☆☆☆☆
 [Rails with Active Record and Action Pack](https://www.coursera.org/learn/rails-with-active-record) via **Coursera**|1st Feb|4|★★★★☆ [(1)](https://www.class-central.com/r/4197)
[NEW] [App Design and Development for iOS](https://www.coursera.org/learn/ios-app-design-development) via **Coursera**|1st Feb|5|☆☆☆☆☆
[NEW] [Advanced Styling with Responsive Design](https://www.coursera.org/learn/responsivedesign) via **Coursera**|1st Feb|NA|☆☆☆☆☆
 [Ruby on Rails Web Services and Integration with MongoDB](https://www.coursera.org/learn/ruby-on-rails-web-services-mongodb) via **Coursera**|1st Feb|4|☆☆☆☆☆
[NEW] [Server-side Development with NodeJS](https://www.coursera.org/learn/server-side-development) via **Coursera**|1st Feb|NA|☆☆☆☆☆
[NEW] [UT.7.10x: Foundations of Data Analysis - Part 1: Statistics Using R](https://www.edx.org/course/foundations-data-analysis-part-1-utaustinx-ut-7-10x) via **edX**|2nd Feb|6|☆☆☆☆☆
[NEW] [Machine Learning for Musicians and Artists](https://www.kadenze.com/courses/machine-learning-for-musicians-and-artists/info) via **Kadenze**|3rd Feb|7|☆☆☆☆☆
 [Mobile Robots and Autonomous Vehicles](https://www.france-universite-numerique-mooc.fr/courses/inria/41005S02/session02/about) via **France Université Numerique**|8th Feb|4|☆☆☆☆☆
[NEW] [Reviews & Metrics for Software Improvements](https://www.coursera.org/learn/reviews-and-metrics-for-software-improvements) via **Coursera**|8th Feb|NA|☆☆☆☆☆
 [Hadoop Platform and Application Framework](https://www.coursera.org/learn/hadoop) via **Coursera**|8th Feb|5|★★☆☆☆ [(12)](https://www.class-central.com/r/4269)
 [Introduction to Big Data Analytics](https://www.coursera.org/learn/bigdata-analytics) via **Coursera**|8th Feb|5|★☆☆☆☆ [(5)](https://www.class-central.com/r/4216)
 [Java Programming: Solving Problems with Software](https://www.coursera.org/learn/java-programming) via **Coursera**|8th Feb|4|★★★☆☆ [(3)](https://www.class-central.com/r/4305)
 [Front-End Web UI Frameworks and Tools](https://www.coursera.org/learn/web-frameworks) via **Coursera**|8th Feb|4|★★★★☆ [(3)](https://www.class-central.com/r/4240)
 [Responsive Web Design](https://www.coursera.org/learn/responsive-web-design) via **Coursera**|8th Feb|4|★★★☆☆ [(6)](https://www.class-central.com/r/4200)
 [Multiplatform Mobile App Development with Web Technologies](https://www.coursera.org/learn/hybrid-mobile-development) via **Coursera**|8th Feb|4|☆☆☆☆☆
 [Introduction to Meteor.js Development  ](https://www.coursera.org/learn/meteor-development) via **Coursera**|8th Feb|4|★★★★★ [(2)](https://www.class-central.com/r/4328)
 [iOS App Development Basics](https://www.coursera.org/learn/ios-app-development-basics) via **Coursera**|8th Feb|5|☆☆☆☆☆
 [Data Analysis Tools](https://www.coursera.org/learn/data-analysis-tools) via **Coursera**|8th Feb|4|★☆☆☆☆ [(1)](https://www.class-central.com/r/4169)
[NEW] [Making Sense of Data in the Media](http://www.futurelearn.com/courses/media-data?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed) via **FutureLearn**|8th Feb|3|☆☆☆☆☆
 [Data Visualization and Communication with Tableau](https://www.coursera.org/learn/analytics-tableau) via **Coursera**|8th Feb|5|★★★★★ [(4)](https://www.class-central.com/r/4297)
 [Using Databases with Python](https://www.coursera.org/learn/python-databases) via **Coursera**|8th Feb|5|★★★★★ [(1)](https://www.class-central.com/r/4272)
 [Java Programming: Arrays, Lists, and Structured Data](https://www.coursera.org/learn/java-programming-arrays-lists-data) via **Coursera**|8th Feb|4|☆☆☆☆☆
 [Python Data Structures](https://www.coursera.org/learn/python-data) via **Coursera**|8th Feb|7|★★★★☆ [(12)](https://www.class-central.com/r/4174)
 [Using Python to Access Web Data](https://www.coursera.org/learn/python-network-data) via **Coursera**|8th Feb|6|★★★★★ [(6)](https://www.class-central.com/r/4343)
[NEW] [Web Application Development: Basic Concepts](https://www.coursera.org/learn/webapps1) via **Coursera**|9th Feb|NA|☆☆☆☆☆
[NEW] [Getting Started: Agile Meets Design Thinking](https://www.coursera.org/learn/getting-started-agile) via **Coursera**|9th Feb|NA|☆☆☆☆☆
 [Front-End JavaScript Frameworks: AngularJS](https://www.coursera.org/learn/angular-js) via **Coursera**|15th Feb|4|★★★★★ [(1)](https://www.class-central.com/r/4292)
 [Cryptography I](https://www.coursera.org/learn/crypto) via **Coursera**|15th Feb|NA|★★★★★ [(30)](https://www.class-central.com/r/616)
 [Bioinformatics: Introduction and Methods 生物信息学: 导论与方法](https://www.coursera.org/learn/bioinformatics-pku) via **Coursera**|15th Feb|14|☆☆☆☆☆
[NEW] [3D Graphics for Web Developers](http://www.futurelearn.com/courses/3d-graphics-web-programmers?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed) via **FutureLearn**|15th Feb|5|☆☆☆☆☆
 [Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) via **Coursera**|15th Feb|6|★★★★★ [(5)](https://www.class-central.com/r/4212)
 [Python for Genomic Data Science](https://www.coursera.org/learn/python-genomics) via **Coursera**|15th Feb|4|★★★☆☆ [(8)](https://www.class-central.com/r/3476)
 [Introduction to Genomic Technologies](https://www.coursera.org/learn/introduction-genomics) via **Coursera**|15th Feb|4|★★★☆☆ [(7)](https://www.class-central.com/r/3472)
 [Statistics for Genomic Data Science](https://www.coursera.org/learn/statistical-genomics) via **Coursera**|15th Feb|4|☆☆☆☆☆
 [Bioconductor for Genomic Data Science](https://www.coursera.org/learn/bioconductor) via **Coursera**|15th Feb|4|☆☆☆☆☆
[NEW] [INF.1x: The Software Architect Code: Building the Digital World](https://www.edx.org/course/software-architect-code-building-digital-uc3mx-inf-1x) via **edX**|16th Feb|10|☆☆☆☆☆
 [Algorithmic Thinking (Part 2)](https://www.coursera.org/course/algorithmicthink2) via **Coursera**|20th Feb|4|★★★★★ [(4)](https://www.class-central.com/r/3200)
 [Principles of Computing (Part 2)](https://www.coursera.org/course/principlescomputing2) via **Coursera**|20th Feb|4|★★★★☆ [(5)](https://www.class-central.com/r/3198)
 [Machine Learning](https://www.coursera.org/learn/machine-learning) via **Coursera**|22nd Feb|11|★★★★★ [(143)](https://www.class-central.com/r/835)
[NEW] [Algorithmic Toolbox](https://www.coursera.org/learn/algorithmic-toolbox) via **Coursera**|22nd Feb|NA|☆☆☆☆☆
 [Cryptography](https://www.coursera.org/learn/cryptography) via **Coursera**|22nd Feb|7|★★★★☆ [(5)](https://www.class-central.com/r/1730)
 [ISE101x: Knowledge Management and Big Data in Business](https://www.edx.org/course/knowledge-management-big-data-business-hkpolyux-ise101x-0) via **edX**|23rd Feb|6|★★★★☆ [(2)](https://www.class-central.com/r/3642)
 [Introduction à la programmation orientée objet (en C++)](https://www.coursera.org/course/intropoocpp) via **Coursera**|26th Feb|7|☆☆☆☆☆
[NEW] [Toward the Future of iOS Development with Swift](https://www.coursera.org/learn/iosswift) via **Coursera**|29th Feb|NA|☆☆☆☆☆
 [Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(10)](https://www.class-central.com/r/323)
 [Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(16)](https://www.class-central.com/r/324)
 [Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(7)](https://www.class-central.com/r/325)
 [Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★☆☆☆ [(3)](https://www.class-central.com/r/364)
 [Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★★ [(6)](https://www.class-central.com/r/365)
 [Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(3)](https://www.class-central.com/r/457)
 [Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/455)
 [Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★★☆ [(8)](https://www.class-central.com/r/592)
 [HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(4)](https://www.class-central.com/r/551)
 [Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html) via **Others**|Self paced|10|★★★★☆ [(2)](https://www.class-central.com/r/366)
 [Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(10)](https://www.class-central.com/r/1470)
 [CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1021)
 [Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(8)](https://www.class-central.com/r/1480)
 [Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/1479)
 [Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(13)](https://www.class-central.com/r/1478)
 [UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(2)](https://www.class-central.com/r/2212)
 [Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(1)](https://www.class-central.com/r/2215)
 [Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★★ [(2)](https://www.class-central.com/r/2211)
 [Software Development Process](https://www.udacity.com/course/ud805) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/2335)
 [Computer Networking](https://www.udacity.com/course/ud436) via **Udacity**|Self paced|12|★★★★★ [(3)](https://www.class-central.com/r/2336)
 [Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about) via **Others**|Self paced|17|★★★★★ [(2)](https://www.class-central.com/r/2339)
 [Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(8)](https://www.class-central.com/r/2658)
 [Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/2997)
 [Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|★★★☆☆ [(3)](https://www.class-central.com/r/2898)
 [HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/2999)
 [Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★★ [(4)](https://www.class-central.com/r/2861)
 [Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★☆ [(2)](https://www.class-central.com/r/2998)
 [Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★☆ [(7)](https://www.class-central.com/r/2996)
 [Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(4)](https://www.class-central.com/r/3255)
 [JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/3351)
 [UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|15|☆☆☆☆☆
 [iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(1)](https://www.class-central.com/r/3524)
 [Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(1)](https://www.class-central.com/r/3525)
 [iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(4)](https://www.class-central.com/r/3579)
 [Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Material Design for Android Developers](https://www.udacity.com/course/material-design-for-android-developers--ud862?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3584)
 [DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0) via **edX**|Self paced|22|☆☆☆☆☆
 [AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0) via **edX**|Self paced|NA|★★★☆☆ [(3)](https://www.class-central.com/r/1564)
 [Xcode Debugging](https://www.udacity.com/course/xcode-debugging--ud774?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Big Data, Cloud Computing, & CDN Emerging Technologies](https://www.coursera.org/learn/big-data-cloud-computing-cdn) via **Coursera**|Self paced|3|★★★☆☆ [(3)](https://www.class-central.com/r/3931)
 [KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0) via **edX**|Self paced|8|★★★★☆ [(9)](https://www.class-central.com/r/1836)
 [Intro to DevOps](https://www.udacity.com/course/intro-to-devops--ud611?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(1)](https://www.class-central.com/r/4013)
 [Learn Backbone.js](https://www.udacity.com/course/learn-backbonejs--ud990?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|☆☆☆☆☆
 [Statistical Computing with R - a gentle introduction](https://extendstore.ucl.ac.uk/product?catalog=UCLXR) via **Others**|Self paced|NA|☆☆☆☆☆
 [SPD1x: Systematic Program Design - Part 1: The Core Method](https://www.edx.org/course/systematic-program-design-part-1-core-ubcx-spd1x-0) via **edX**|Self paced|7|★★★☆☆ [(4)](https://www.class-central.com/r/3465)
 [How to create <anything> in Android](https://www.udacity.com/course/how-to-create-anything-in-android--ud802?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [DAT204x: Introduction to R Programming](https://www.edx.org/course/introduction-r-programming-microsoft-dat204x-0) via **edX**|Self paced|4|★★★★☆ [(16)](https://www.class-central.com/r/3928)
 [Software Architecture & Design](https://www.udacity.com/course/software-architecture-design--ud821?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/3418)
 [PH525.1x: Data Analysis for Life Sciences 1: Statistics and R](https://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x) via **edX**|Self paced|4|★★★★☆ [(6)](https://www.class-central.com/r/2960)
 [2D Game Development with LibGDX](https://www.udacity.com/course/2d-game-development-with-libgdx--ud405?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-1) via **edX**|Self paced|NA|★★★★☆ [(7)](https://www.class-central.com/r/3339)
 [Designing RESTful APIs](https://www.udacity.com/course/designing-restful-apis--ud388?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Intro to Data Analysis](https://www.udacity.com/course/intro-to-data-analysis--ud170?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Web Tooling & Automation](https://www.udacity.com/course/web-tooling-automation--ud892?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [M101x: Introduction to MongoDB using the MEAN Stack](https://www.edx.org/course/introduction-mongodb-using-mean-stack-mongodbx-m101x) via **edX**|Self paced|58|☆☆☆☆☆
 [Interactive Computer Graphics](https://www.coursera.org/learn/interactive-computer-graphics) via **Coursera**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/2067)
 [SPD2x: Systematic Program Design - Part 2: Arbitrary Sized Data](https://www.edx.org/course/systematic-program-design-part-2-ubcx-spd2x) via **edX**|Self paced|5|☆☆☆☆☆
 [Firebase Essentials For Android](https://www.udacity.com/course/firebase-essentials-for-android--ud009?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [DAT206x: Analyzing and Visualizing Data with Excel](https://www.edx.org/course/analyzing-visualizing-data-excel-microsoft-dat206x) via **edX**|Self paced|57|★★★★☆ [(2)](https://www.class-central.com/r/4480)
 [CSE167x: Computer Graphics](https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-0) via **edX**|Self paced|NA|★★★★☆ [(5)](https://www.class-central.com/r/548)
 [JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3082)
 [EX101x: Data Analysis: Take It to the MAX()](https://www.edx.org/course/data-analysis-take-it-max-delftx-ex101x-0) via **edX**|Self paced|8|★★★☆☆ [(10)](https://www.class-central.com/r/2916)
[NEW] [Offline Web Applications](https://www.udacity.com/course/offline-web-applications--ud899?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
[NEW] [JavaScript Promises](https://www.udacity.com/course/javascript-promises--ud898?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆

ADVANCED(39)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[NEW] [Deep Learning](https://www.udacity.com/course/deep-learning--ud730?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
[NEW] [Machine Learning: Clustering & Retrieval](https://www.coursera.org/learn/ml-clustering-and-retrieval) via **Coursera**|1st Feb|NA|☆☆☆☆☆
 [Machine Learning Foundations: A Case Study Approach](https://www.coursera.org/learn/ml-foundations) via **Coursera**|1st Feb|6|★★★★☆ [(19)](https://www.class-central.com/r/4352)
 [Machine Learning With Big Data](https://www.coursera.org/learn/machinelearningwithbigdata) via **Coursera**|1st Feb|4|★★☆☆☆ [(6)](https://www.class-central.com/r/4238)
 [Practical Predictive Analytics: Models and Methods](https://www.coursera.org/learn/predictive-analytics) via **Coursera**|1st Feb|4|☆☆☆☆☆
 [Relational Database Support for Data Warehouses](https://www.coursera.org/learn/dwrelational) via **Coursera**|1st Feb|5|☆☆☆☆☆
[NEW] [Machine Learning: Classification](https://www.coursera.org/learn/ml-classification) via **Coursera**|1st Feb|NA|☆☆☆☆☆
[NEW] [Graph Analytics for Big Data](https://www.coursera.org/learn/graph-analytics) via **Coursera**|8th Feb|NA|★☆☆☆☆ [(1)](https://www.class-central.com/r/4249)
 [Machine Learning: Regression](https://www.coursera.org/learn/ml-regression) via **Coursera**|8th Feb|6|★★★★★ [(6)](https://www.class-central.com/r/4289)
 [Regression Modeling in Practice](https://www.coursera.org/learn/regression-modeling-practice) via **Coursera**|12th Feb|4|☆☆☆☆☆
 [Algorithms for DNA Sequencing](https://www.coursera.org/learn/dna-sequencing) via **Coursera**|15th Feb|4|★★★★☆ [(14)](https://www.class-central.com/r/3433)
 [Genomic Data Science with Galaxy](https://www.coursera.org/learn/galaxy-project) via **Coursera**|15th Feb|4|★★☆☆☆ [(8)](https://www.class-central.com/r/3473)
 [Command Line Tools for Genomic Data Science](https://www.coursera.org/learn/genomic-tools) via **Coursera**|15th Feb|4|★★☆☆☆ [(5)](https://www.class-central.com/r/3474)
[NEW] [Games, Sensors and Media](https://www.coursera.org/learn/games) via **Coursera**|22nd Feb|NA|☆☆☆☆☆
[NEW] [Approximation Algorithms Part II](https://www.coursera.org/learn/approximation-algorithms-part-2) via **Coursera**|29th Feb|4|☆☆☆☆☆
 [Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(16)](https://www.class-central.com/r/319)
 [Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/326)
 [Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/549)
 [Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/552)
 [Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/550)
 [Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1847)
 [Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1848)
 [Reinforcement Learning](https://www.udacity.com/course/reinforcement-learning--ud600?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/1849)
 [Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(1)](https://www.class-central.com/r/3000)
 [Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(3)](https://www.class-central.com/r/3256)
 [Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(4)](https://www.class-central.com/r/1016)
 [High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1018)
 [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1024)
 [Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|☆☆☆☆☆
 [Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems) via **Coursera**|Self paced|8|★★★★☆ [(14)](https://www.class-central.com/r/1029)
 [Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Introduction to Computer Vision](https://www.udacity.com/course/introduction-to-computer-vision--ud810?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [GT - Refresher - Advanced OS](https://www.udacity.com/course/gt-refresher-advanced-os--ud098?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Introduction to Operating Systems](https://www.udacity.com/course/introduction-to-operating-systems--ud923?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [High Performance Computing](https://www.udacity.com/course/high-performance-computing--ud281?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [DAT203x: Data Science and Machine Learning Essentials](https://www.edx.org/course/data-science-machine-learning-essentials-microsoft-dat203x-0) via **edX**|Self paced|20|★★★★☆ [(5)](https://www.class-central.com/r/3954)
 [Machine Learning for Trading](https://www.udacity.com/course/machine-learning-for-trading--ud501?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Intro to Information Security](https://www.udacity.com/course/intro-to-information-security--ud459?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [Machine Learning](https://www.udacity.com/course/ud262) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1020)
",1597,65,dhawal,2016-02-03 15:16:47,https://www.reddit.com/r/learnprogramming/comments/4407yn/heres_a_list_of_223_free_online_programmingcs/,0,learnprogramming
r8b16m,Clean Up Your github,"Just a PSA

I'm a senior dev doing lots of interviews these past few weeks. On more than one occasion I've pulled up a candidates GitHub and seen super unprofessional stuff. 

Today's candidate had ""fuck"" written in commit messages. 

I'm just a regular dude and curses don't offend me. I even use them everyday! But someone else is DEFINITELY going to be offended by that. 

Just left a bad taste in my mouth and I had to post it. We do actually look.",1598,189,noodle-face,2021-12-03 22:46:14,https://www.reddit.com/r/learnprogramming/comments/r8b16m/clean_up_your_github/,0,learnprogramming
c7w0wc,I got told I’m not good enough and demoted.,"Just happened. I feel crushed and kind of numb at the same time. I’d been working so hard for so long to keep getting better. And I was getting better everyday. 

My boss called me into his office and basically said I’m not good enough to be a developer, even a Jr. developer, and that I’ll be transferred to a different department. 

I feel like giving up all together. I feel like I want to die. Feels like everything I’ve worked so hard for and stressed over so much over was all for nothing. 

I make less than 40k already and I’m already struggling financially, I don’t know what to do other than give up. Feels like there’s no point anymore.

Edit: Thanks to everyone who responded, I am down and very demotivated, but I’m going to keep practicing in my free time like I have been. If you have any extra advice or anything else helpful I’d really appreciate it.


Edit 2: First off I want to say thank you to everyone for your words of encouragement and your advice. It’s really awesome that you all care so much about this community. 

Today has been a real rollercoaster. So this morning I felt broke down and really wanted to give up, but then about 40 minutes ago I got a phone call from that company I had mentioned in the comments that I had been interviewing with and they made me an offer for double what I’m currently making. 

Words cannot describe how much better I felt. When he told me they wanted to make me an offer I almost started crying. I thought they had called to say I had been rejected. 

So thank you all again. I’m still not feeling 100% from what happened earlier today, but I do feel a lot better and I am a lot more hopeful.


Edit 3: Please don’t attack my boss, ultimately I don’t think this is what he wanted to happen, he was very nice and supportive since I’ve been there and I think if it was up to him he’d pay everyone lots of money and just help them continue to grow as developers. 
I think it’s just how “business” is, if that makes sense. It really sucks but if one of his workers isn’t doing as good as they expect his boss is going to be on his ass for that. He could have just went ahead and fired me but instead said I could just be transferred to QA. It still doesn’t feel good but I don’t blame him for the decision.
 I wish the circumstances were better but mostly I was disappointed in and upset with myself when I made this post.

Final Edit: Thanks again for all the kind words and advice everyone. 

I really appreciate it. I’m feeling a lot better than when I made this post this morning.

I was feeling a lot of things at once and was having a hard time thinking clearly, but after I got that phone call I started to feel a lot more like myself. 

I’m sorry I can’t respond to everyone but there’s just too many comments now, but I have read them all and will keep reading them as they come. 
I am very grateful you took the time out to comment.

I had to remove some identifying information.",1599,312,Derfrosty,2019-07-01 17:14:02,https://www.reddit.com/r/learnprogramming/comments/c7w0wc/i_got_told_im_not_good_enough_and_demoted/,1,learnprogramming
j3qq4r,An underrated resource - Take Up Code,"At 13 years old, my dad taught me the basics of c++ through the process of making simple games like tic tac toe, a milestone for any beginner programmer. I recognized that his lessons came from both a passion for coding, and a passion for teaching others about what he loves to do. 

Since then, he’s carried on with that drive and has aimed to help people learn to code. In order to do so, he’s compiled his almost 3 decades of coding experience into 300 free podcast episodes and articles. 

I believe my dad’s work is a good resource to help anyone achieve their programming goals, which is why I decided to post here about it. My dad has always been genuinely interested in guiding people along their programming path, so feel free to reach out to him as well. Alongside his free podcast, he has recently put out an ebook that teaches beginners c++ through game making, just like he taught me. I hope people find this resource and his knowledge useful: 
[https://www.takeupcode.com](https://www.takeupcode.com)",1596,82,None,2020-10-02 08:14:19,https://www.reddit.com/r/learnprogramming/comments/j3qq4r/an_underrated_resource_take_up_code/,0,learnprogramming
nzje2i,So many people are scared of breaking their apps when they start learning. That’s the WRONG mindset.,"So I’ve been struggling for a year learning web development. I have a junior job now (frontend) and have built my first full stack app (it’s small as hell and full of holes and bugs) but after all of this I’m finally learning.

The feeling of success that comes from building things is only sweet because of the hardships we go through to get there.

Every time your code breaks, that is an *opportunity* to learn something new. Something that will make the process smoother next time.

Don’t give up. Keep going. We will all get there.",1588,78,None,2021-06-14 10:03:34,https://www.reddit.com/r/learnprogramming/comments/nzje2i/so_many_people_are_scared_of_breaking_their_apps/,0,learnprogramming
twuf18,"Name one programming/comp sci concept you never understood and if you understand it, try to explain it to them","Name a programming concept such as virtual functions, pointers, certain algorithms, etc that you always had a hard time understanding and why. 

Someone else who reads yours and does understand it, try to explain it to them to help them learn",1589,742,Temporary-Warthog250,2022-04-05 13:00:57,https://www.reddit.com/r/learnprogramming/comments/twuf18/name_one_programmingcomp_sci_concept_you_never/,0,learnprogramming
gb15p1,I've completed my bachelor's in computer science but i don't know anything about programming.,"This is my first post so please forgive me if I it was hard to read.

To begin with, I really liked computers and thought to myself I'm going to be the best programmer ever(lol) but after starting college,I really didn't connect with any of the classes they taught. The professors would come and read the contents off of the screen and walk away. I thought that this is the start and it's supposed to be like that and after 4 years that's what they did all the time. They would assign projects and everyone in the class would copy/paste the code found on the internet(some of them had submitted the code found literally on the first link of the search) and the professors would accept it without a second guess, so a piece of shit like myself did the same thing.

After the 2nd year of college passed, I thought maybe I'll learn by myself from the internet. So, everytime I would apply for a few online courses and everytime(I never felt it was difficult) but I'd just get demotivated and never complete it and go hangout with my friends.

I should've been an unemployed graduate by now but due to the current situation I'm at home and have only my finals left to complete and soon I'll be unemployed as I have no skills whatsoever.

None of my friends with whom I attended highscool with went to college, they're working at their dad's shops(retail stores) and they're happy with that, they tell me to do the same thing(my dad also owns a retail store) but I don't want to do that. I'm not disrespecting them or the profession but I don't want to be someone that stays under my father's shadows forever and i want to make something out of myself.

I get depressed thinking about the future and what will I do next and my friends say that I'm not as fun to hangout with as I once was.I slowly started to isolate myself and just don't want to talk with anyone no more.

The really worst part is I still feel like i really want to pursue programming as a career but I feel like I'll continue to do the same thing i did in college and waste further of my time and end up going nowhere.

TL;DR I've completed my bachelor's in computer science and i don't know anything in programming but i still feel like I want to pursue a career in programming.",1588,329,None,2020-04-30 18:21:55,https://www.reddit.com/r/learnprogramming/comments/gb15p1/ive_completed_my_bachelors_in_computer_science/,0,learnprogramming
vsv2s0,YSK about Exercism.org if you're learning to program," [Exercism](https://exercism.org/) is a great site for learning any of 59 different programming languages, all for free. Some languages have more, longer and better tutorials than other languages, but at least the main languages are pretty filled. 

The learning is challenge-focused, which each lesson being a certain topic (e.g. ""Tuples"" or ""Expression Bodied Members"", and then you have to write functioning code using it to pass to more advanced lessons.",1582,63,Swampberry,2022-07-06 17:12:01,https://www.reddit.com/r/learnprogramming/comments/vsv2s0/ysk_about_exercismorg_if_youre_learning_to_program/,0,learnprogramming
8bf7pa,"Is it normal to feel like, the more you learn, the more you realize you've only scratched the surface of an iceberg that just grows bigger everytime you learn something new?",It's pretty discouraging to be honest. Even the stuff I learned before gets forgotten when I don't use it and there's so much stuff on the need-to-know basis when you want to make anything real.,1589,205,Fl333r,2018-04-11 07:18:00,https://www.reddit.com/r/learnprogramming/comments/8bf7pa/is_it_normal_to_feel_like_the_more_you_learn_the/,0,learnprogramming
11l74xn,Is it normal as a junior programmer..,"To spend hours looking over the same block of code, trying to sort out ‘why the f*ck isn’t this working!?’, only to realize the error you made is so monumentally, and stupidly obvious that it leaves you feeling like a completely useless moron? Lol",1585,301,Total-Subject2763,2023-03-07 18:30:32,https://www.reddit.com/r/learnprogramming/comments/11l74xn/is_it_normal_as_a_junior_programmer/,0,learnprogramming
rzlt50,"Started with zero experience a week ago, and now I finished my first project from scratch.","\*\*\*\*UPDATE AT THE BOTTOM\*\*\*\*

01/09/2022

Let me just share what to me is an important milestone in my web dev journey.

Around Christmas time, I purchased a Udemy web development course, but I wasn't able to start it until the new year because I got covid. Since then, I've been dedicating around 6-8 hours everyday (breaks included) to do my Udemy course, aiming to finish at least 1 module (including the projects and exercises) per day. I'm now about to start the 13th module (out of 33\~), and I decided to do a simple project using the HTML, CSS, and Javascript I've learned so far.

Not gonna lie, I didn't expect for starting from scratch to be so complicated. I think I spent a good 80% of my time organizing my thoughts and doing the CSS. I had to scrap my entire code a couple of times because I was getting confused about everything, and I almost quit the project. Granted, it is a VERY simple project, but I guess my lack of experience just took over me. After around half a day (time spent on snack breaks, naps, and blankly staring into space included), I finally finished my project and I uploaded it to GitHub.

Earlier in the day, I was running into complications with things that I didn't think I'd even have problems with. It definitely made me question, considering that I was having trouble with such basic things (e.g., centering stuff), if I really could do this whole web dev thing. Well, last night, I turned off my laptop after a day's worth of frustrations and moments of demotivation, I lied down on my bed, then I opened my project on my phone. Seeing my work out there, I felt a surge of contentment and excitement that I have never felt before. I couldn't stop smiling while looking at the project that I did....from scratch(!!!), and that's when I knew in myself that, at the very least, this whole thing is worth trying.

So to anyone out there who's just starting out without any prior coding experience, like me, just know that it gets better. I know it sounds cliché, but it's cliché for a reason.

[Link to my project](https://tienramos.github.io/dice-randomizer/index.html)

[Github Repository](https://github.com/TienRamos/dice-randomizer)

PS - Please feel free to make comments on my code/any issues or bugs that may arise while using the site. Thank you!!

\-------UPDATE--------

01/11/2022

Thank you all so much for all the wonderful feedback and suggestions on my first web dev project! You all seriously encouraged me so much to continue learning and creating projects this early on. It really warms my heart seeing all the people whom I inspired to either start or continue learning. 

With all that said, may I present to you [an updated version of my Dice Randomizer project](https://tienramos.github.io/dice-randomizer-v2/). I tried to take as much of your feedback as possible, especially the regarding the functionalities and the use of for loops. I know it's not the cleanest code out there, and I could probably refactor my CSS and JS code to make them more a lot more concise and DRY (I admit, a lot of my CSS code got repeated over and over), but I think I'll just move on to do another project right now. As some of you may know, I'm currently on a semestral break in college, so I'm trying to get as much experience as possible of out my short break. And I think moving onto another project is the best way to do that. 

I hope you will all enjoy using my little project as much as I enjoyed coding it. Cheers!

[GitHub Repo](https://github.com/TienRamos/dice-randomizer-v2)

&#x200B;",1586,117,javaricedev,2022-01-09 06:59:05,https://www.reddit.com/r/learnprogramming/comments/rzlt50/started_with_zero_experience_a_week_ago_and_now_i/,2,learnprogramming
kjhc3v,Learning to program at 57 yrs old,"Always loved tech but never learned to program. If I learned at this old age, is there any chance of getting hired if I learned?",1582,234,ketoatl,2020-12-24 15:36:25,https://www.reddit.com/r/learnprogramming/comments/kjhc3v/learning_to_program_at_57_yrs_old/,0,learnprogramming
mn8mnm,"At 39, I'm quitting my job and going back to Uni.","I've been studying web-development for almost two years now. I love it. I could build all day every day. I got granted permanent residency in Australia not long ago and given how easy it is to study over here, I've decided to quit my dance teacher job and pursue my passion. Also I don't think my prospects for finding a tech job at my age would be very bright without any experience or a tech degree, so I'll do whatever it takes, and Uni is part of that plan. 

My decision to quit teaching was based on the fact that the future isn't bright for a dance teacher and it consumes your life. I'm literally all day thinking of growing and maintaining the dance community I'm part of, which is a big part of the job. And obviously planning classes, training, etc. All of that was affecting my studies and I often caught my thoughts drifting to my other job as I'm coding/studying. 

Fortunately I'm able to make more than enough money to support myself and pay my share of the fees by driving for Uber Eats. It's easy work and I don't have to think about it at all once I leave the car.  My mind is free to study in the rest of the day. 

As a back up plan I can always find a job in some warehouse/supermarket in case I can't drive an Uber anymore. 

I'm not sure I'm allowed to post a link here but if you want to follow my new journey, [have a look at my blog.](https://cappuccinocodes.wordpress.com/)

Any suggestions on how to prepare for Uni?",1584,139,CappuccinoCodes,2021-04-09 03:31:33,https://www.reddit.com/r/learnprogramming/comments/mn8mnm/at_39_im_quitting_my_job_and_going_back_to_uni/,0,learnprogramming
50azpi,FYI today is the start date for MIT's online Intro to CS and Programming course. It will be the first edition of the class using Python 3.5,https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-8,1584,227,tacoproject,2016-08-30 13:01:57,https://www.reddit.com/r/learnprogramming/comments/50azpi/fyi_today_is_the_start_date_for_mits_online_intro/,0,learnprogramming
rvd3hz,"I backed into being a successful programmer, here is what happened and what I've learned over the past 25 years.","# My Career

I'm 47. Around 25ish years ago, I tried to get a CS degree, but I realized I wasn't that good at the higher math classes. I just could not connect the dots given the way the math was taught and there was no Internet to give me a different perspective. People that got it, just got it and that was it.

So, I got a Bachelor of Science in Management Information Systems instead. At the time this involved your basic business classes with the addition of learning HTML, configuring a Microsoft Access Forms DB and learning some Cobol among other things. I'd also taken the CS 100 and 101 classes where you learned Pascal and C.

I had no idea what I was going to do when I got out of school with this degree. People were going into project management with it, but I didn't want to do that. There was no Internet to speak of back in 1996. I ended up living with some friends from college and we all went into mid-range IT consulting. I was doing helpdesk work at first, which sucked, but paid $25 an hour and since I paid around $300 a month for rent, this wasn't bad. Then as Y2K approached I got into Y2K remediation for a little more money, say around $27 an hour. This also sucked as it wasn't fixing Y2K bugs in software, it was going through all the third party software the corporation used and finding out whether there were Y2K bugs. This was a tedious process pre-Internet as we know it now.

The consulting companies that found these jobs for us were nothing more than headhunters that collected money from the companies (usually about 3x what we were paid) and sent us a paycheck and at the end of the year a W2. They did nothing else.

I lived in an area where there were basically three big employers that needed IT resources and right around the year 2000 I had worked in one or another consulting job for all of them.

The last job I did was a computer install for a military hospital. I initially got lowballed into taking $15 an hour because I needed the money as I'd been slacking off (decompressing) using my savings for eight months and doing nothing except getting really good at Quake II. You can do that sort of thing when your rent is $300 and you have no wife or kids.

When I got to the location I met up with the system admin for the whole place and then met the person that was supposed to be leading the team of people that were doing the install (I was to be one of these people). He was younger than me and was obviously not socially skilled. He had worn the same dress clothes two days in a row to the job and the system admin upon meeting me immediately called the consulting company and said I should lead the team of people.

The consulting company called me to tell me this and I agreed to do it with the caveat that they would pay me $25 an hour instead of $15 and after squawking a bit they agreed. There were four people including the guy that was originally there that I led to get the job done.

After that, I realized I hated doing this stuff. I didn't care about setting up PCs or doing installations of software, it was easy and boring. I hated being the new guy at each place. I hated learning basically nothing at each job.

I did learn that being able to give the busy work to other people was better than having to do it myself.

I found a headhunter that actually seemed to care about what I was looking to do and I managed to articulate that I wanted to do something more creative with the degree I had and the basic skills I had available. I had taught myself some more HTML basics and some VBScript/ASP from books (made of paper) during this time frame and this headhunter found me a job doing front end development using HTML/CSS at a startup.

I moved halfway across the state at the end of 2000 and started at that job taking a pay cut to around $45,000 a year to do it.

It was the best decision I could have made at that time. This company didn't care that my skills were crap. We were churning out web pages for big corporate customers and they needed people that could push out front end code. I learned how to build the best web pages you could produce at the time. My HTML and CSS became second to none (though quite honestly CSS was poorly supported and sometimes you still used FONT tags, ew). People were still mostly on dial-up so optimizing the front end on web pages was a big thing, but also because browsers were so terribly lacking in standards you spent a lot of time making sure the thing looked good in all of them.

Things went great for about a year and then I watched the company blow a load of money on office furniture from Herman Miller while at the same time cannibalizing its actual revenue source (web page development) in an effort to become a video streaming server hardware provider (remember, 90+% of people still on dial-up at this time). I witnessed the foosball table arrive in the office and knew the end was near.

I sat through a day of layoffs where I and one other person were the only ones left in my business area. I realized myself and the other person were the lowest paid of the bunch and that's why we weren't laid off. I went looking for a new job.

Still 2001, I found a new job with another Internet startup that had a better business model and that appreciated my (quite good) markup programming skills and that I could (barely) code in VBScript and ASP and ignored that I had no idea what Object Oriented Programming (OOP) meant at all.

I made $55k a year there starting and received a few stock options.

I spent 9 years with that company churning out web based marketing solicitations that relied heavily on the wide latitude given to Internet payment processing and card transfers of the times. Microsoft created the .NET Framework and the company started using it around 2003, so I learned how to program in C#. I built utility software that made my job easier and started backing my way into OOP via books (paper!) because the Internet still had nothing. I did more work with SQL queries and DB access.

Primarily I learned how to solve problems with software, which is basically the same way you solve any problem with a complex system, you break it down into smaller pieces in a process of elimination to isolate the actual problem source. This also meant I started to understand each piece of the system and how they contributed to the whole. This job is where I became a full stack developer.

The company was sold around 2008 and I got about $5k from the stock options. The principles were delighted with this outcome since they all made millions and got to continue running the thing and getting paid by the buyers.

I made around $90k a year by 2010 having been given decent raises and market adjustments based on my evolution into a full stack developer.

The government changed the laws around the particular marketing scheme my company and many others were notorious for using and this caused the whole business model to implode. This and the fact that I'd been ""the new guy"" since I was hired and there is an obvious ceiling that I had reached made me look for another job.

The next job was horrid.

I took the next job at $105k a year and found out soon after getting in there that the place was a shitshow. The guy I worked for and his boss both try to screw with me for crazy reasons. I found a new job and quit giving no notice after about eight months. I never spoke to these people again.

I started the next job (my current one) for $115k. I was jumping at shadows expecting to get screwed over by people, but finally realized everybody is pretty cool and the work life balance is good.

Using the .NET Framework I helped rewrite the massive software application the company sells. I spent about six months rewriting a major ASP/VBScript app in AngularJS with a .NET backend. Two years before the pandemic hit I was able to start working full time from home.

\---------------

I grossed $190k last year, $140k + $50k bonus and the company gave me 1100 shares of company stock that vest over 3 years time (1/3 each year) to keep me around. I did not know they could just do things like that. Apparently they can and yet it's a completely opaque process and I have no idea what triggered them giving me the stock or whether I will get more. I have no debt except my mortgage now and I can save money and do things that I want to do (that mostly don't involve leaving the house in recent years, but still...).

I've spent 11 years developing and refining the software products the company offers and I know everything from top to bottom about the product line I support. I lead a team of six people that develop software that I help design and architect.

I now possess the following skills.

* I'm an expert at developing web and script applications using technologies and frameworks such as JavaScript, HTML, CSS, ASP, VBScript, [ASP.NET](https://ASP.NET), [ASP.NET](https://ASP.NET) MVC, [ASP.NET](https://ASP.NET) Web API, jQuery, AngularJS, Angular and PowerShell among other things.
* I'm an expert in developing middle tier applications using C#, but also develop sometimes in Python, Java and C++ by necessity. I have a firm grasp on the concept of test driven development and using SOLID principles for OOP development.
* I can write complex and efficient SQL queries and understand how to install, run and integrate with most of the major consumer database products in use today including but not limited to Oracle, SQL Server and MySQL. I also can use NoSQL DBs like MongoDB, ElasticSearch, etc.
* I know how to integrate with and have developed applications for deployment on cloud services such as AWS and Azure.
* I am a DevOps expert. I am well versed in source control solutions like Subversion and Git and recently led the migration of our application code from Subversion to Git integrating with Gitlab. I create and maintain build and deployment solutions using Teamcity, Artifactory, Cloudformation, MSI, Installshield, Wix and Octopus Deploy among other things.
* I can solve problems in complex multi-tiered distributed systems at any level, be it presentation layer, middleware, database or interactions between them whether on-premise or on the cloud. Because of this I'm called to troubleshoot production software issues that may come up regardless of whether I have had involvement in the release and regardless of whether it's a problem with software I have developed.
* I'm a master of creating understandable internal and external documentation for various processes. I've created dozens of wiki pages on the internal company site documenting how certain common problems are solved. This is mostly because I have solved so many problems that I often forget what the solutions were as applied to my own products. It's also because I hate repeating myself.
* I perform estimates for work with the business and take monolithic business problems and break them into manageable chunks that my team can then work on. I've spent a lot of time in recent years working on getting the developers and QA on my team up to my level mostly so that I don't have to keep doing the same things.

I still work 40 hours a week at most. Sometimes less. It can be feast or famine depending on what the business has prioritized. I told them three years ago we should move to Git and then three months ago... ""We need to move to Git in three months!""

# What have I learned?

**Keep learning the craft**

You need to have some interest in making software in different ways and the processes around that. Luckily, there are a lot of things that go into making software, not just programming and for that matter there are a lot of programming aspects that go into the ancillary aspects of making software, like testing and deployment.

Most often you will get hired at a place because you have a certain skill they want, but because of how software works there are going to be numerous opportunities to pick up skills in other connected software pieces. I went from doing front end development to doing full stack development. Markup to OOP. It was a process, but take the options where you find them. If you don't find them, then move on. If you learn OOP in one language then you can learn OOP in another language.

Being cynical, lots of people are sick of doing what you have not yet done and are willing to teach you how to do it if they no longer have to keep plugging away at it. The less cynical version is that there are a lot of programmers that are more than willing to share their knowledge, if you ask.

**Find a decent market for your skills**

If you aren't finding jobs in your area, move. Today this is less important because you can get remote jobs. Personally, I find remote software dev jobs are great and anyone that says you need to work in an office doing software development is full of crap. Going to an office for this work never made sense to me ever.

The only caveat to working from home is that you need to make sure you get out of the chair and do something outside of the house once in a while.

**Network even though you hate networking**

Be friendly with people that you work with. You don't necessarily have to be friends with them, but at least make sure you know their name and they know your name. Connect with coworkers on LinkedIn and other work related social media. Do not connect with coworkers on non-work related social media unless you are actually close friends with them and you can be sure your dank memes won't offend them.

Make sure people know your skillset. People who like your work will want to work with you again and there will inevitably be people you know that get to a place where they can sometimes pick who they want to work with.

Don't connect on social media with recruiters unless they find you a job.

**Move along if things aren't working out**

Between consulting and full time jobs I'm probably at a dozen things I could put on my resume. No one cares. No one really cares how long you are at a job either. Always lie (or omit the full truth) if the reason you left the last job was because they were terrible in some way. Just say you accomplished what you wanted to there and decided to move on or make up some other generic bullshit. You can tell them how horrible the last place was after you get hired and you know them well enough to see how revealing that info would be taken.

**Get more money when you change jobs or take on more responsibility**

Unless you really need an out or you make huge money already you should get more money when you move to another job. You should always do that, because most places do not give good raises over time. Getting more money includes if you change jobs within an organization. Don't take a different position with more responsibilities for the same money. I don't supervise six people for the same amount of money I made as a sole contributor.

**Don't worry about your degree**

If you have one, great. If it isn't a CS degree and you want to get one I've heard it can help, but I don't see it as a big deal. I have people that work with me that don't have degrees that are far better programmers than myself. They usually have some issue that makes traditional schooling something they don't really gibe with.

**Don't sacrifice your life for the job**

Some programming jobs are real burnout positions. They want you blasting out code 60 hours a week for unreasonable deadlines. Avoid these jobs. If you must do these jobs, don't do them for very long. It's not worth it in general.

I intentionally ask in the interview how many hours they expect me to work on a regular basis. For most burnout places this is an automatic fail of the interview and I'm fine with that. I interviewed with Blizzard (a position making internal support tools, not games) and by the time I got to this question I kind of knew the answer already.

**Focus on what you like doing**

Don't become a manager or an architect because people say that's the only way you're going to move up the ladder. Managing people is an entirely different skillset from programming. Architect is for when you understand the whole system and are tired of someone else telling you what to use to write each piece and you don't really want to write each piece, just prototype the pieces and hand them over to the developers to finish. :-D

You can do plenty as a sole contributor and make good money.

For that matter don't feel like you need to learn all of everything. If you're a front end programmer and don't care about back end programming there are plenty of things to occupy you on the front end, but cover as many of those front end bases as you can.

Personally, I've found the boundaries between the two have become much less opaque over the years and the tools and concepts have developed along similar lines.

**Never sell yourself short**

Everyone feels like an imposter at some point in their career. I still feel that way sometimes. There are many times that you will know more about the job than the people hiring you, but they won't give you the right consideration because you don't check all their buzzword boxes. Be confident, but not arrogant.",1581,133,MrBleah,2022-01-03 21:53:00,https://www.reddit.com/r/learnprogramming/comments/rvd3hz/i_backed_into_being_a_successful_programmer_here/,0,learnprogramming
82g4yu,32 Yr Old Programmer Who Started From Scratch,"Hi everyone! I've been a lurker here for about 3 years and have read a number of posts from people, like me, that changed their career path at some point along the way because they needed something better for themselves. The posts have often been inspiring and promoted conversation about helping others. I'm happy that I'm finally at a place where I feel I can share my experience with all of you and hopefully serve as a beacon of hope for anyone that started out as I did, full of self-doubt and terrible anxiety about the future.

**My Reasons:** At the age of 29, I had bounced between a couple of jobs in an attempt to increase my take home pay to something that would allow me to manage my hefty student loans. Over $100k if you're wondering. My family has a couple of programmers currently and a number of my peers are programmers. My love for video games initially lead me down this path but once it became apparent that Audio Engineer jobs are few far and between, I decided I would learn the programming side, which eventually just morphed into web development programming. 

**The Struggles:** Being a 29 year old deciding to go back to school isn't the worst thing in the world. You're certainly at an age where your life is somewhat flexible if you haven't laid any roots down. Suffice it to say, I had not. However I had also bounced between a few bad relationships and as we'll see, was about to bounce out of yet another relationship over the course of earning this degree.

Ageism is a real thing though so for anyone without a baby face or fully functioning liver, going back to a traditional college can be somewhat frightening. Lucky for me I worked at the college already so I knew a number of students when I started my new degree. I also had the luxury of already knowing a number of the professors through my interactions with them at work. However, if you're not in that same fortuitous situation, know that younger students are mostly open to talk and help you. There are hopefully resources for non-traditional students that you can utilize to reach out for help and a sense of belonging along the way. 

Taking math..... after an 11 year hiatus..... I was always good in math class but I knew it was going to take some hard work to get back into that groove. I made frequent use of tutors for this. I would go to the tutor center for an hour after class and work on homework. The great thing about this was that not only was it helping me get through the material, but I was meeting other students that were having the same struggles. We had something in common which gave us something to talk about and made me feel more at ease and less of a weirdo old dude in class. I highly recommend not being shy about using a tutor or going to your campuses' tutor center. 

Juggling work, life, and school. Throughout the entirety of earning this degree, life has only sped up. When I started, I was in a horrible relationship. Absolutely terrible. Without getting into all the details, I can tell you it ended with her sleeping with a co-worker and me peacing out of the house we owned together to go back to living with my parents. That all went down in the middle of a 4 weeks summer course so while I was learning data structures, I was also learning about mortgage laws!! Yay!! But other life events would occur, most of them for the better. Leaving my easy University job to pick up a programming contractor gig, meeting my now fiancee who I'll be marrying in July, my father and grandmother getting cancer, my sister getting married, the list goes on. What all of this has meant is that I've relied on a heavily on a support system of my friends, peers, and family. I could not have gotten through it all without them. Make sure you keep your support group. It will help you more than you'll ever know. Thank them. I personally will work the rest of my life thanking those who helped me keep myself up and pay it forward. 

**The Programming:** Here's the part that I think everyone is usually most interested in. What it's like learning programming and getting to a point that you feel comfortable calling yourself a programmer. Well, I'll say the same thing I've seen in this sub multiple times and that is, you're already a programmer. Define yourself that way. You are what you make yourself and if you tell yourself you're a programmer, then by golly you're a programmer. You may not be a very *good* programmer yet, but you're a programmer none the less. You belong here because you want to be here and as long as you want to be here, you'll find people that are willing to help you get better at programming.

Focus on learning over quality at first. Your code is going to stink. It's going to be messy. It's going to flow all over the place. Until you've written code with other people and had it reviewed by others who have been programming for awhile, it's going to seem like spaghetti and that's okay. Focus on learning the fundamentals and eventually the theory behind development. Your thoughts and code will become more organized over time as you begin to see the larger picture. I admittedly beat myself up for writing code what I think is sloppy because I see someone else write it a better way. I think that's fine too because it means I want to challenge myself to get better and if you don't challenge yourself then you'll never improve. You have to be open to feedback and criticism though. Don't take it personally. Be open to learn from it. Most importantly, it's okay to get down on yourself. To feel like you don't belong or that you're not a programmer. It's how you handle those feelings though that matter in the end. I've had numerous times I didn't think I was a good enough programmer. I've had several breakdowns crying to myself because I wasn't able to deliver or handle the workload. But once the crying or the screaming or the anxiety passed, I gathered myself, looked at my end goal, and refocused. There are many paths in this journey, not all will take you where you thought they would. Know however, that where one dead end begins, another turn exists. You just have to be willing to move past that dead end. I cried to a manager at an internship one time because I had completely burned myself out trying to do a part time internship, 40 hours of full time work, and take two classes all at the same time. I had to realize I couldn't deliver on the work and that I had over committed myself. That sucked. But it made me learn my limits of how much work I could take on and I've been able to better manage my side coding projects and any extra work. So there's always tomorrow. Always another way. Tell yourself today that you're not a programmer because you're terrible at it. Then tell yourself tomorrow that you're a new programmer who's going to continue getting better at it.

**Conclusion:** So here I am. 10 weeks from graduating with my 2nd Bachelor Degree. This time it'll be a BS in Computer Science with an emphasis on Web Development. I quit my University job and after my 6 week contractor gig was up I accepted an internship offer over the summer last year. I was able to continue on part time with that internship all through the school year leading up to now. Just yesterday, they gave me a full time job offer as a Software Engineer. I'll continue as an intern until I graduate, at which time I'll be reclassified to my full time position. I will be getting married in July.  To anyone else here, struggling, worrying, feeling utterly anxious... there's a light at the end of the tunnel. I look back over this time and I see many dark days, but many good days. Keep your chin up and keep at it. You'll get there and when you do, it's going to feel amazing. I'm happy to answer any questions about my experience. Tools I've used, methods, etc... It's my turn to pay it forward. 


**EDIT** - Thank you everyone for the warm felt responses and your questions. I just got to work and will be done in about five or six hours. I'll answer all your questions and replies when I'm back in front of a real keyboard where I can give you my full attention instead of trying to do it on mobile at work. You're all awesome.

**EDIT 2** - All I can say right now is wow. I'm speechless. I did not imagine this blowing up as much as it has. I've been reading all of your responses and questions throughout the day and I'm happy that my experience could reach out to so many people. I promise I'll get to answering questions. It so happens that my plan to do so was thwarted by my lovely fiance's plan to celebrate the job offer by surprising me with dinner and a movie. Thank you all for your kind comments and questions. I'm looking forward to answering and responding. 

**EDIT 3** - It's about quarter to one in the morning. Sorry if I didn't get to your question yet but hopefully some of the responses I've made so far are helpful. I'll continue answering questions tomorrow. Thank you all and have a great night! :) ",1579,276,AcousticArmor,2018-03-06 16:04:17,https://www.reddit.com/r/learnprogramming/comments/82g4yu/32_yr_old_programmer_who_started_from_scratch/,0,learnprogramming
4ot69a,[Tutorial] Learn to make a game in C++!,"Hello fellow game developers!

My main goal for this series is to share my game development knowledge with you. Watching this will not only teach you how to make a game from scratch in C++, but it will also more than likely teach you a thing or two about programming in general. You should be able to walk away from this tutorial with enough knowledge to create your own game in C++ and SDL2.

These tutorials are very beginner-friendly because in each video, you will see me write every single line of code from scratch. I also explain all of the classes, functions, and algorithms that I implement throughout the series.

Also, all of the updated source code can be found on Github by following the link at the bottom of this post!

The series is currently finished. I may decide to continue with it and produce more content in the future, but as of right now, I do not know when that may happen. Still, feel free to provide me with any feedback you may have.

[For information on my current project, Lime2D, click here!](http://patreon.com/limeoats)

Here is a list of each episode in the series:

* [Episode 1 - Introduction](https://www.youtube.com/watch?v=ETvApbD5xRo)
* [Episode 2 - Creating the game window](https://www.youtube.com/watch?v=cD3-NZzO2Ao)
* [Episode 3 - The game class and input](https://www.youtube.com/watch?v=TX3ovZgIrbo)
* [Episode 4 - Drawing our character](https://www.youtube.com/watch?v=yq_00MAp0Xw)
* [Episode 5 - Animating our sprites](https://www.youtube.com/watch?v=NirBu24-U8w)
* [Episode 6 - The player class](https://www.youtube.com/watch?v=7wIXNdOBVeQ)
* [Episode 7 - The level class - Part 1](https://www.youtube.com/watch?v=CA0wIfvLs1Y)
* [Episode 8 - The level class - Part 2](https://www.youtube.com/watch?v=nI_LjBDMVEA)
* [Episode 9 -  The level class - Part 3](https://www.youtube.com/watch?v=Qn2D6lq08gk)
* [Episode 10 - The level class - Part 4](https://youtu.be/iZG3G58r8n4)
* [Episode 11 - Slopes](https://www.youtube.com/watch?v=Sx0q1nh9oBs)
* [Episode 12 - Animated Tiles](https://youtu.be/6TNvxXHOg3c)
* [Episode 13 - Looking up and down](https://youtu.be/FQhtUpSUUG4)
* [Episode 14 - The HUD - Part 1](https://youtu.be/3Ro4LaAuFmE)
* [Episode 15 - The HUD - Part 2](https://youtu.be/QW4UVpmOc9o)
* [Episode 16 - Doors](https://youtu.be/YUo8NRBodQ0)
* [Episode 17 - Enemies](https://www.youtube.com/watch?v=lTRWEDN5kTM)
* [Episode 18 - Enemies - Part 2](https://www.youtube.com/watch?v=zMSwNVW5ehY)

And here are some other important links:

* [My website](http://www.limeoats.com)
* [Twitter](http://twitter.com/limeoats)
* [Twitch](http://twitch.tv/limeoats)
* [Discord](https://discord.gg/0g6ksoTuyf4TJKqh)
* [/r/limeoats](http://reddit.com/r/limeoats)
* [Github](http://www.github.com/limeoats/cavestory-development)

Thanks for checking it out and I hope you enjoy. Make sure to contact me with any questions or suggestions!
",1576,53,Limeoats,2016-06-19 12:48:31,https://www.reddit.com/r/learnprogramming/comments/4ot69a/tutorial_learn_to_make_a_game_in_c/,0,learnprogramming
lce63x,I built a collaborative list of resources for developers,"Hi everyone! 👋

I'm so excited to share with you what I've been creating, but let me start by explaining how Dev Resources came to be.

DR started as my personal compilation of resources for development. After a few years of (messy) bookmarking, I decided it was time to put everything in one place, categorized and most importantly, available for everyone.

Since its release (October 2020), many devs have contacted me to add their own creations and favourites, increasing, even more, the number of resources.

With that said, you can already guess: DR has all the things I like and find important for software development, but it can also have what you want.

Here's a brief of what you can find there:

🛠 tools

🧩 assets

🧪 learning

👨‍💻 jobs

💰 product offers

➕ and a lot more

But you know what makes it even better?

The resources list is now open source, so everyone can contribute and be a part of it! 🤝

I hope that together we can create the biggest repository of resources for developers, so we can easily find what we need, share our creations and stay updated with new releases.

I'm planning a few more things for the next months:

📬 newsletter with trending resources, deals and updates (already on the making)

⬆️ upvoting to help amazing projects stand out

🔖 bookmarking for a more personalised experience

☎️ communication between devs and makers

🔥 and whatever else you guys find useful, after all, Dev Resources is made from us to us

I launched it on Product Hunt today, and I'd love your feedback on it. It's my first time launching something there, and I've postponed it many times, always trying to get some more things done, but I think the current state is already good enough for a launch.

Anyway, I'd love to hear what you think of it!

Dev Resources: [https://devresourc.es](https://devresourc.es)

Resouces list and public API: [https://github.com/marcelscruz/dev-resources](https://github.com/marcelscruz/dev-resources)

Product Hunt: [https://www.producthunt.com/posts/dev-resources](https://www.producthunt.com/posts/dev-resources)

That's it, have a nice day and enjoy Dev Resources! 🤘",1567,90,marcelscruz,2021-02-04 12:00:36,https://www.reddit.com/r/learnprogramming/comments/lce63x/i_built_a_collaborative_list_of_resources_for/,1,learnprogramming
byr9kt,"1 year ago I didn't know how to code, last week I released my first project, here's what advice I have for everyone learning to program","  

Hello everyone, Kyle here.

My friend and I have been working on [Hypevertise | Free Instagram Auditor](https://hypevertise.com/), our first big side project, for the past couple of months and we just launched it last week. The craziest part is that we didn’t even know how to write code 1 year ago. While we’re definitely not experts, I think there are a few pieces of advice I can pass down to everyone on their learning journey, hopefully you can find some motivation out of this post as well. 

**Quick Background**

My friend and I are fortunate enough to go to school to learn programming, but there was still a lot of self-learning required to complete this project, about 90% of the technologies used in our project weren’t even mentioned in school. I think anyone learning to program, whether in school or alone, will find the following advice useful. So, here are the main pieces of advice I’d like to give someone hoping to launch their own side project some day:

**Persistance**

Persistence. It sounds corny but there’s a reason I put it first, without persistence you’ll never finish any task you set out to do. In the world of programming, persistence is key, you need to be absolutely relentless on breaking through any barrier that gets in your way when it comes to writing code. When you run into a problem, be sure to exhaust all of your resources, I’m certain someone will be able to help you. Here are some good places to look for help when you feel stuck:

* Reddit
* Slack/Discord channels for that specific technology
* YouTube
* Forums
* Meetups (good for networking too)

There are far too many barriers when programming, so if you’re not persistent you will never see a task through to the end. Break big problems into smaller sub problems, research the sub problems and piece together the puzzle, by using this approach you will not only be able to solve your problem, but you’ll also leave with an in depth understanding of the problem so when it happens again you know what to do.

**Limiting Mindset**

Stop putting a mental ceiling on yourself, a lot of people stop before they even start. When you have an idea for a side project, instead of convincing yourself that the idea is above your skillset, approach the problem systematically and just worry about one feature at a time. By focusing on one small feature at a time you will be able to actually begin your project and slowly build on top of your code feature-by-feature. Just because your teacher at school didn’t teach a specific concept or technology does not mean you cannot use it. When working with a new technology a good approach would be to google, copy code, study the code, modify the code and move on to the next feature, eventually all the moving parts will make sense. Limiting yourself to what was taught in the curriculum will only leave you being just as good as the next guy.

**Organization/Planning a Project**

This seems like a big deal, but it’s really not. Don’t spend months planning your project, how it’s going to make you money, etc… Just figure out what you want as a minimum viable product (MVP) and roadmap the rest of the features for future implementation. This will allow you to start building right away, because no matter how much planning you end up doing, you’re still going to run into roadblocks. Spend some time on figuring out which technologies you will need in order to get started and just start building, chances are you will start replacing code and optimizing your early work as you continue with the project.

Also, don’t worry about using the newest bleeding edge technologies, just build with what you can and learn as you go.

**Networking**

A lot of people think that networking is something you only need to do when looking for a job, but the truth is you should be doing this every day. By networking with people in the industry you’re going to find people that are more experienced, this will allow you to build a circle of people that you can reach out to whenever you need technical advice or help. Networking doesn’t have to be in person, meet people online, at local meetups, etc… This will be an invaluable resource as a lot of these people have probably encountered technical challenges that you will encounter along the way as well. Now you have a circle of people you can reach out to when you’re stuck.

**Conclusion**

I wanted to keep this post non-technical for the most part as there is already tons of solid technical advice on this subreddit already. Programming is a very mental game, and I think applying the advice above should get you in a good position to accelerate your learning process. 

Like I said above, I’m not claiming to be an expert and I’m sure there is a lot more that can be added to this but these are just a couple things that myself and my friend have learned throughout the process of building our first real-world project.

If you made it this far, thanks for reading, and feel free to add your advice/suggestions below!",1573,96,Hypevertise,2019-06-10 00:32:20,https://www.reddit.com/r/learnprogramming/comments/byr9kt/1_year_ago_i_didnt_know_how_to_code_last_week_i/,0,learnprogramming
p5y1au,"""Don’t be scared if you get to a project and you feel like you haven’t retained or memorized anything. That’s natural and happens to everyone."" -The Odin Project","I've bounced off of learning programming 3 or 4 times now, and this has been one of the biggest reasons why. It's so discouraging when I struggle to remember simple syntax that I was just using a couple days ago. Well I'm jumping back on the saddle after another 6 months of no learning and this resonated with me so much that I have to ask.

How true do actual programmers think this quote is?

Edit: This received a lot more attention than I was expecting. I appreciate all of your feedback so much!",1574,77,unkelrara,2021-08-17 06:07:52,https://www.reddit.com/r/learnprogramming/comments/p5y1au/dont_be_scared_if_you_get_to_a_project_and_you/,0,learnprogramming
12m4fs8,I'm 39 and I'm learning programming amid talk that programming is dying.,"I know that odds are not in my favor. I'm 39, with a wife and two kids. I'm learning alone (what they call self-taught). I have a job that has nothing to do with programming, so I code in my spare time. 

Occasionally I hear opinions that programming is dying because of chatgpt and whatnot. And yet I keep going because of the kick I get out of solving problems. I don't expect to become a professional software engineer, but maybe I will, who knows. 

So what I want to say, I guess, is **keep grinding** if this is your thing. 

Ignore the noise.",1571,524,valvasss,2023-04-14 17:19:03,https://www.reddit.com/r/learnprogramming/comments/12m4fs8/im_39_and_im_learning_programming_amid_talk_that/,0,learnprogramming
gkro5d,Do you need a coding buddy?,"Hey folks!

I'm a software engineer. Recently I got a job at Amazon but couldn't join due to the outbreak, they pushed back my start day 3 months from now. I'd like to spend this time helping people prepare for coding interviews, for free (for fun). If you want a coding buddy, pls, let me know. I can teach you ""how to leetcode"". I'm not an expert but I'll do my best, and you can help me practice English.

How it might look:

\- I'll give you a set of problems in a Google.Sheets file (or probably you already have one if you're leetcoding)

\- you'll be solving the problems on public GitHub, we discuss everything in the comments, review the code & meet in zoom once a week for a coding session, where we discuss your solutions in details and I suggest mine and try to identify what exactly you're struggling with

\- let's record them & publish on YouTube so other folks can learn and motive themselves to keep grinding Leetcode

It's FREE! I'm not trying to sell anything (some people might think that), I'm not sure it'll work out. Seriously. I'm Just trying to keep myself sane during the quarantine :-)

Let me know if you're interested in such an activity (DM is fine). Especially if you're into algorithms & DS and leetcoding on a regular basis trying to get into FAANG (so you can benefit) and if you're a native English speaker (then I'll be learning from you!).

If you think it's a bad idea and doesn't make any sense, that's also fine :-) Thanks!",1565,206,vitkarpov,2020-05-16 09:08:13,https://www.reddit.com/r/learnprogramming/comments/gkro5d/do_you_need_a_coding_buddy/,0,learnprogramming
9il0od,"""Learn You Some Code"" Humble Bundle is out! Get programming ebooks for $1 while helping charities.","https://www.humblebundle.com/books/learn-you-some-code-books

Books at each tier:

$1 or more:

* Automate the Boring Stuff with Python
* The Linux Command Line
* The Book of F#
* Learn Java the Easy Way
* Perl One-Liners
* No Starch Sampler

$8 or more

* Ruby Under a Microscope
* Learn You Some Erlang for Great Good!
* Learn You A Haskell for Great Good!
* Clojure for the Brave and True
* Land of Lisp: Learn to Program in Lisp, One Game at a Time!

$15 or more:

* Python Crash Course: A Hands-On, Project-Based Introduction to Programming
* Python Playground: Geeky Projects for the Curious Programmer
* Think Like a Programmer
* The Book of R
* Wicked Cool Shell Scripts

For $15 you get ALL of these books while helping code.org teach kids to program!
",1564,216,AlSweigart,2018-09-24 19:29:52,https://www.reddit.com/r/learnprogramming/comments/9il0od/learn_you_some_code_humble_bundle_is_out_get/,0,learnprogramming
8uglyv,Hands down the best place to learn Javascript for beginners.,"[javascript.info](https://javascript.info)  I have tried learning JS from a lot of places online but when I came across this site everything changed for me. All of the contents are well curated and topics are explained in simple terms along with figures sometimes to explain the concept.

**edit:**
The complete course on Javascript is open source.

You can contribute to it from here: 
[Github Page for Javascript.info](https://github.com/iliakan/javascript-tutorial-en)
",1557,94,yankexe,2018-06-28 05:27:39,https://www.reddit.com/r/learnprogramming/comments/8uglyv/hands_down_the_best_place_to_learn_javascript_for/,0,learnprogramming
tb5l5m,"you didn't come in for ""help"" with your programming class, did you?","So I work as an IT Tutor at a community college. One of the classes I tutor for is the Introduction to Programming concepts class. It's a 16-week class that is meant to introduce students to the broad concepts involved in programming. Things like declaring/updating a variable, using If/elses, loops, objects, etc. I had a student come into my office for help with the class yesterday. Now one of the challenges with tutoring this class is the student may be having a problem with the code itself (using the wrong code, setting it up incorrectly, not closing something, etc), they could be having a problem with the overall concept and be unsure of what the assignment is asking for, or they could be having difficultly with one particular piece of the assignment. Perhaps they don't know the formula for calculating the area of a circle for instance or don't understand that dictionaries are not inherently ordered the ways lists are.

So whenever I have a student come in for programming help, I try to spend 3-4 minutes asking them questions to try and pin down where they are actually having the problem.  This also helps me differentiate students that are just hitting a rough point and might need some emotional support or additional instruction, from those that are just hoping they can get me to do their assignment for them.

Please remember we are on week 7 of this class. They've had chapter projects on declaring/updating/referencing variables, taking input from the user, displaying things on the console, working with ints versus float versus string, and making decisions. So while it's possible a student may have missed the specific definition of ""int"" versus the definition of ""float"", or not remember the actual term 'function'

Opening 15 minutes of a recent appointment:

* Me: Okay, so when it says to ""define a function called *mean""*, do you know what that means?
   * them: No.
* Me: If I refer to something that is a section of code to achieve a specific result, that you refer to by name, do you know what I am talking about?
   * them: No.
* Me: Alright... when it says to compile the values into a list, do you know what that means?
   * them: No.
* Me: Alright, can you explain what a 'list' is?
   * them: No.
* Me: If I tell that un-like primitive data types, a list can hold multiple values, do you know what I mean?
   * them: No.
* Me: Okay. when it says 'prompt the user to input their numbers' do you know what that means?
   * them: No.
* Me: Okay, do you know what the concept of 'input' means?
   * them: No.
* Me: hmmm okay... if I say 'use a loop to iterate through a series of items' do you know what I am referring to?
   * them: No.
* Me: Okay... do you know what 'iterate' means?
   * them: No.
* Me: Okay... do you know what a *loop* is?
   * them: *draws circle in the air with finger tip*
* Me: Okay... you're not wrong, but that's not what I'm asking. Do you know what a loop is in programming?
   * them: No.
* Me: Okay... if I told you to 'declare a variable and assign it the value of 5', would you know how to do that?
   * them: No.
* Me: Okay... if I ask you to explain the difference between a 'float' and an 'int', could you do that?
   * them: No.
* Me: Can you name any of the primitive data types?
   * them: the what?
* Me: Have you heard any of the following terms: *Int*, *String*, *Char*, *float*, or *boolean*?
   * them: No.
* Me: Can you tell me what a *variable* is?
   * them: No.

&#x200B;

The remaining 30 minutes of the appointment was actually worse. I actually cut the appointment short by 5 minutes because I just wasn't getting any indication that the student was putting any effort into the material what-so-ever and was just trying to get me to do the assignment for them. That really gets under my skin and in a big way. If the student is honestly trying, and just not understanding the material the way the book or exercises present it, I will bend over backward while turning myself inside out to find other ways to explain it. I've drawn pictures, I've made animated power points, I've used handouts, I've drawn stuff on whiteboards, I've used note cards. Heck, I had one student where I used [DnD books and materials to explain things](https://www.reddit.com/r/learnpython/comments/aw0au0/why_study_programming_when_you_can_just_play_an/?utm_source=share&utm_medium=web2x&context=3). If I thought it would help a particular student I would use costumes and finger puppets.

But the students gotta put the effort in to at least try first. I will do anything and everything in my power and ability to help a student, but I am not doing the class for them.

&#x200B;

Ugh... sorry. Just needed to vent a bit.  I know it's not exactly ""programming"" but it's adjacent to it I guess and it is related to ""Learning programming"".",1563,238,TorroesPrime,2022-03-10 18:45:34,https://www.reddit.com/r/learnprogramming/comments/tb5l5m/you_didnt_come_in_for_help_with_your_programming/,0,learnprogramming
obl2d0,What do you wish you knew at the beginning of your programming journey?,What are some advices derived from your experience which you could give to a programming newbie?,1559,529,mrko900,2021-07-01 12:44:42,https://www.reddit.com/r/learnprogramming/comments/obl2d0/what_do_you_wish_you_knew_at_the_beginning_of/,0,learnprogramming
aa1oa8,"I started programming a year ago thanks to this community and today i made this : A SMART GLOVE which helps mute people speak, blind people walk ( obstacle detection ) and blind people type in any computer without using keyboard ! (Bonus feature : Computer control using gestures)","Project demonstration VIDEO LINK : [https://www.youtube.com/watch?v=UXHk9XybZmU](https://www.youtube.com/watch?v=UXHk9XybZmU)

My first raspbery pi project (All feedback and suggestions are welcome :)

Our project targets physically challenged (specifically mute and blind) people. Our glove has four modes - one for mute people and the other three for blind people.

MODES FOR BLIND PEOPLE :

1.Obstacle Detection: To make it easier for blind people to walk safely, our glove uses proximity sensor and a buzzer to alert the user if he is too close to an obstacle. He can get a sense of his surroundings using the glove. Also, we have taken care to avoid false alarms (like when an insect flies by the sensor, buzzer will not beep) by taking an average of the last five values recorded.

2.Hand Typing: This enables the blind man to type in his computer by touching the fingertips of the glove by his other arm. We are using binary encoding scheme to interpret different combinations. This feature is helpful as it is difficult for a blind person to adjust to different keyboard layouts, especially if there is no one to guide him.

3.Computer/Music player control: Using hand gestures, the blind person can move to next song in playlist, fast forward by a fixed number of seconds in song, increase volume etc. in his laptop / PC.

MODES FOR MUTE PEOPLE

4.Talking Glove: This feature enables a mute person to convey his message to other people by making different signs using his fingers for different audio messages which are played using a speaker on the glove

&#x200B;

Title edit : Actually its 1.5 years of experience

&#x200B;",1562,115,bulletz4breakfastt,2018-12-27 18:22:50,https://www.reddit.com/r/learnprogramming/comments/aa1oa8/i_started_programming_a_year_ago_thanks_to_this/,0,learnprogramming
11aevv4,"Less than a year into my first dev job, I've just experienced the classic dev curse.","After practicing on and off for years, I lucked into a hybrid-remote web dev job in April of 2022. I thought I knew, relatively, what I was doing and would be prepared. My first project was to re-work the dashboard & widgets, as they were still in proof-of-concept phase and were essentially static. Lucky for me, things went well and at the time I thought I was doing pretty damn good for a fresh junior with no formal education or work experience.

Until today.

It's insane how much you learn in a professional environment, coding for work. Today I was asked to revisit that section of the app and re-work it into something more fitting with our future plans, and holy god damn - it was a nightmare!

I look at this code I wrote ~10 months ago and at best, I can describe it as a hodgepodge of gum and duct tape holding this whole fragile house of cards upright. It is as spaghettified as code can be. Inefficient, difficult to read and understand, and even more difficult to make any changes without breaking something else in a completely different file!

 I now see just how much better it could be written for the sake of myself and any one else who may have to look at this later down the line. I still have an immense amount to learn, and I'm sure in another year or so I'll have similar complaints about some of the code I'm writing today, but it's really exciting to see the progress I've made.

It's also exciting to finally relate to the jokes about your Monday-self wanting to strangle your Friday-self.

Anyway, just wanted to share that. Learning, making mistakes, growing every day! A big thanks to this community for all the help I've received here over the years.",1557,110,daBEARS40,2023-02-24 01:30:13,https://www.reddit.com/r/learnprogramming/comments/11aevv4/less_than_a_year_into_my_first_dev_job_ive_just/,0,learnprogramming
5q57ph,Veteran's beware: vetswhocode.io is a scam that is only in it for donations and not helping vets.,"TLDR: 

Their website has no information on what their program is or how it works. The only thing on their website that they talk about is donations. It has absolutely nothing on what they actually do.

They don't return phone calls, voicemails, or emails.

Their Twitter has nothing about the program or cause. 

Google has nothing on their organization or what it's about

Cant find success stories or mentions about this program from real people anywhere on the Internet

The only qualifying factor for getting into the program is: ""what's your favorite MRE?""

And they don't even have a curriculum for the program.

In a Reddit thread, they refuse to answer any of our questions, and they claim that it's not their fault that we couldn't find any information on their organization and that we should've listened to the podcast that talks about their cause. Which they advertise nowhere on their website that they even have podcasts. He talks about his one success story that they paraded around Silicon Valley and that's it.

This is a scam of an organization stealing money that is meant for veterans. 

https://www.reddit.com/r/learnprogramming/comments/5mgect/has_anyone_had_any_experience_with_vetswhocodeio/?st=IYDBQICD&sh=5d5f1d90

Update 1: how funny, I just ""coincidentally"" I received an email back just now after that conversation in the posted thread stating: ""Sorry to say you are not qualified for our program. Have a great day!""

Update 2: just got a call from the CEO pissed about the ""allegations"" and started yelling at me before I hung up.

Update 3: he then took my personal information and posted it on reddit, which the mods removed.

Update 4: his twitter is hilarious. He even goes as far as saying: ""and thinking about how entitled this white male veteran was"" 

So now he wants to make it a race thing.

He is also calling me a coward for hanging up on him while he screamed at me on the phone. 

Oh and he might sue me. Lol

Update 5: u/caosborne shared his experience with them. Here it is. 

So OP I have had a somewhat dealing with this turd. I graduated from General Assembly in Austin and few other Vets who have graduated as well created a Vets that Code meetup (yes very similar name). So this dude reached out and threatened us with copyright infringement because of our meetup name. We did our due diligence and he didn't have any Trademarks filed and approved for anything relating close to it so we were happy to keep the name. Besides its a fucking meetup. 

He then told us we could work together and use that meetup name but we'd get his resources and we'd have to pay a yearly fee and if we made any money we'd have to pay a royalty fee to him. We literally laughed at him and told him to go pound sand. So shortly after that he contacted his contacts at the New York General Assembly because that is where the CEO (more than likely the same user that responded to you) learned to code. The New York GA contacted the Austin GA and mentioned something to us about it and said we were stealing IP from him and we told them what he tried to do. They laughed as well. So yeah he and his organization is very scummy. 

Update 6: after being a 3 week old post, a 3 hour old account shares their ""positive experiences"" because that's obviously not a throwaway made by vetswhocode trying to save face.

Update 7: One thing he mentioned in his Twitter, is that I am an entitled white male. And also I'm doing this because I didn't get into the program. 

So let's get something straight, I didn't get the rejection email until after this whole thing happened, which you can see from my update #2. So this has absolutely nothing to do with the rejection. This has to do with the shadiness of their company and the possibility of them stealing money that belongs to veterans

Update 8: he deleted his Twitter post saying he might sue. I got a screenshot of it though.

update 9: this is from /u/Merc_Drew:

Since this one is the same as the one posted later I thought I would copy what in wrote on that post to...

Always google a company...

I mean their website is raising red flags immediately... their donation page shows $35,000 exact? 99% of the time that is going to have it down to the dollars and cents... especially being an open non-profit...

Their media page has no links to the actually media they are talking about...

Their contact page is just a phone number and a ""contact us"" form to fill out
Copyright © #VetsWhoCode 2016. FRAGO, doing business as #VetsWhoCode, is an exempt organization as described in Section 501(c)(3) of the Internal Revenue Code. Our EIN is 47-3555231.

When you look up the EIN it is for Frago Digital Education for Veterans
That group doesn't have a website

When I looked up the address they filed with the IRS last known address the organization provided to the IRS 2558 PLUM CREEK DR CORDOVA TN 38016-0108

It is a house...

Straight up scam

Update 10: according to his Twitter, he still believes I'm doing this because I ""angry and didn't get an interview""

Let me remind you that this thread was made prior to the what was obviously going to be a ""rejection email."" Hell, as soon as we started talking about the shadiness of his business 3 weeks ago, I knew that I wouldn't be accepted, nor did I want to be. But there's no need to take my word for any of it, the time stamps of this thread and your email tells all.  

But it was a nice try though attempting to shift blame to me. Doesn't really work though when I made the thread before I received the email and call. It would be a whole different story if he sent that letter prior to me making this thread, but alas, he didn't.

Update 11: I've been informed by a concerned Veteran that the FBI has been notified and was told that apparently they've been notified several times and have reason to look into an investigation

Update 12: /u/caosborne provides proof of his interaction with vetswhocode with their threat to sue if they didn't change their meetup name: https://imgur.com/a/8uKkW",1555,136,Tyrantt_47,2017-01-25 19:18:39,https://www.reddit.com/r/learnprogramming/comments/5q57ph/veterans_beware_vetswhocodeio_is_a_scam_that_is/,0,learnprogramming
3fvz78,Here's a list of 156 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2015),"This is not the complete list of MOOCs starting in August 2015, just the ones relevant to this community. The complete list of courses starting in August 2015 can be found over at [Class Central](https://www.class-central.com/report/mooc-course-report-august-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

BEGINNER(34)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Creative Programming for Digital Media & Mobile Apps](https://www.coursera.org/course/digitalmedia)|Aug 3rd|6 weeks|Coursera|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/529/coursera-creative-programming-for-digital-media-mobile-apps#course-all-reviews)
[Creative Coding](http://www.futurelearn.com/courses/creative-coding?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|Aug 3rd|6 weeks|FutureLearn|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/1850/futurelearn-creative-coding#course-all-reviews)
[Usable Security](https://www.coursera.org/course/usablesec)|Aug 10th|6 weeks|Coursera|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1727/coursera-usable-security#course-all-reviews)
[6.00.1x_7: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x7)|Aug 26th|NA|edX|★★★★★ [(37 reviews)](https://www.class-central.com/mooc/1341/edx-6-00-1x_7-introduction-to-computer-science-and-programming-using-python#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/course/interactivepython1)|Aug 29th|5 weeks|Coursera|★★★★★ [(2116 reviews)](https://www.class-central.com/mooc/408/coursera-an-introduction-to-interactive-programming-in-python-part-1#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/course/interactivepython2)|Aug 29th|4 weeks|Coursera|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/3196/coursera-an-introduction-to-interactive-programming-in-python-part-2#course-all-reviews)
[Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(44 reviews)](https://www.class-central.com/mooc/320/udacity-intro-to-computer-science#course-all-reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews)
[Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|★★★☆☆ [(9 reviews)](https://www.class-central.com/mooc/831/udacity-intro-to-java-programming#course-all-reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-all-reviews)
[Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews)
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self Paced|11 weeks|Stanford OpenEdx|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews)
[Making Sense of Data](https://datasense.withgoogle.com/preview)|Self Paced|3 weeks|Others|★★★☆☆ [(7 reviews)](https://www.class-central.com/mooc/1821/making-sense-of-data#course-all-reviews)
[Make Your Own 2048](https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews)
[Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python#course-all-reviews)
[Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(9 reviews)](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews)
[JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews)
[How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★★ [(13 reviews)](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self Paced|NA|edX|★★★★★ [(23 reviews)](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews)
[Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3253/udacity-intro-to-relational-databases#course-all-reviews)
[Internet History, Technology, and Security](https://www.coursera.org/course/insidetheinternet)|Self Paced|NA|Coursera|★★★★★ [(18 reviews)](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews)
[Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about)|Self Paced|11 weeks|Stanford OpenEdx|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/1578/stanford-openedx-networking-introduction-to-computer-networking#course-all-reviews)
[CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced)|Self Paced|6 weeks|Stanford OpenEdx|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/2175/stanford-openedx-cs101-computer-science-101#course-all-reviews)
[CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0)|Self Paced|6 weeks|edX|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2954/edx-cs002x-programming-in-scratch#course-all-reviews)
[CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x)|Self Paced|6 weeks|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2957/edx-cs001x-mycs-computer-science-for-beginners#course-all-reviews)
[DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0)|Self Paced|3 weeks|edX|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/3338/edx-dev203x-introduction-to-bootstrap-a-tutorial#course-all-reviews)
[LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2)|Self Paced|8 weeks|edX|★★★★☆ [(13 reviews)](https://www.class-central.com/mooc/1857/edx-lfs101x-2-introduction-to-linux#course-all-reviews)
[CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x)|Self Paced|14 weeks|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3483/edx-cs005x-cs-for-all-introduction-to-computer-science-and-python-programming#course-all-reviews)
[CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0)|Self Paced|9 weeks|edX|★★☆☆☆ [(8 reviews)](https://www.class-central.com/mooc/1650/edx-cs101-1x-introduction-to-computer-programming-part-1#course-all-reviews)
[COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x)|Self Paced|5 weeks|edX|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1983/edx-comp102-1x-introduction-to-java-programming-part-1#course-all-reviews)
[Learn Swift Programming Syntax](https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3925/udacity-learn-swift-programming-syntax#course-all-reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|★★★★★ [(25 reviews)](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-all-reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|★★★★☆ [(11 reviews)](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-all-reviews)
INTERMEDIATE(95)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Statistical Inference](https://www.coursera.org/course/statinference)|Aug 3rd|4 weeks|Coursera|★★☆☆☆ [(8 reviews)](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews)
[Regression Models](https://www.coursera.org/course/regmods)|Aug 3rd|4 weeks|Coursera|★★☆☆☆ [(7 reviews)](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews)
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(8 reviews)](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|Aug 3rd|4 weeks|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews)
[Introduction to Genomic Technologies](https://www.coursera.org/course/genintro)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/3472/coursera-introduction-to-genomic-technologies#course-all-reviews)
[Bioconductor for Genomic Data Science](https://www.coursera.org/course/genbioconductor)|Aug 3rd|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3475/coursera-bioconductor-for-genomic-data-science#course-all-reviews)
[Python for Genomic Data Science](https://www.coursera.org/course/genpython)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/3476/coursera-python-for-genomic-data-science#course-all-reviews)
[Statistics for Genomic Data Science](https://www.coursera.org/course/genstats)|Aug 3rd|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3478/coursera-statistics-for-genomic-data-science#course-all-reviews)
[Concepts in Game Development](https://www.open2study.com//node/1537)|Aug 3rd|4 weeks|Open2Study|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1176/open2study-concepts-in-game-development#course-all-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(71 reviews)](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews)
[R Programming](https://www.coursera.org/course/rprog)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(115 reviews)](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Aug 3rd|4 weeks|Coursera|★★★☆☆ [(22 reviews)](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Aug 3rd|4 weeks|Coursera|★★★★☆ [(13 reviews)](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|Aug 3rd|4 weeks|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews)
[M101P: MongoDB for Python Developers](https://university.mongodb.com/courses/M101P/about)|Aug 4th|7 weeks|MongoDB University|★★★★★ [(1 review)](https://www.class-central.com/mooc/600/mongodb-university-m101p-mongodb-for-python-developers#course-all-reviews)
[M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about)|Aug 4th|7 weeks|MongoDB University|★★★★★ [(3 reviews)](https://www.class-central.com/mooc/1188/mongodb-university-m101js-mongodb-for-node-js-developers#course-all-reviews)
[M101N: MongoDB for .NET Developers](https://university.mongodb.com/courses/M101N/about)|Aug 4th|NA|MongoDB University|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/3273/mongodb-university-m101n-mongodb-for-net-developers#course-all-reviews)
[M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about)|Aug 4th|7 weeks|MongoDB University|★★★★☆ [(9 reviews)](https://www.class-central.com/mooc/599/mongodb-university-m101j-mongodb-for-java-developers#course-all-reviews)
[M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about)|Aug 4th|7 weeks|MongoDB University|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/475/mongodb-university-m102-mongodb-for-dbas#course-all-reviews)
[M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about)|Aug 4th|7 weeks|MongoDB University|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1777/mongodb-university-m202-mongodb-advanced-deployment-and-operations#course-all-reviews)
[DAT204x: Introduction to R Programming](https://www.edx.org/course/introduction-r-programming-microsoft-dat204x)|Aug 4th|NA|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3928/edx-dat204x-introduction-to-r-programming#course-all-reviews)
[Software Security ](https://www.coursera.org/course/softwaresec)|Aug 10th|6 weeks|Coursera|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/1728/coursera-software-security#course-all-reviews)
[Cryptography](https://www.coursera.org/course/cryptography)|Aug 10th|7 weeks|Coursera|★★★★★ [(3 reviews)](https://www.class-central.com/mooc/1730/coursera-cryptography#course-all-reviews)
[Algorithms, Biology, and Programming for Beginners](https://www.coursera.org/course/algobioprogramming)|Aug 17th|8 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/2291/coursera-algorithms-biology-and-programming-for-beginners#course-all-reviews)
[CSE167x: Computer Graphics](https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x)|Aug 17th|6 weeks|edX|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/548/edx-cse167x-computer-graphics#course-all-reviews)
[Cloud Computing Applications](https://www.coursera.org/course/cloudapplications)|Aug 24th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/2738/coursera-cloud-computing-applications#course-all-reviews)
[ISE101x: Knowledge Management and Big Data in Business](https://www.edx.org/course/knowledge-management-big-data-business-hkpolyux-ise101x)|Aug 25th|6 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3642/edx-ise101x-knowledge-management-and-big-data-in-business#course-all-reviews)
[Principles of Computing (Part 1)](https://www.coursera.org/course/principlescomputing1)|Aug 29th|5 weeks|Coursera|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/1724/coursera-principles-of-computing-part-1#course-all-reviews)
[Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews)
[Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(14 reviews)](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews)
[Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews)
[Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/364/udacity-intro-to-algorithms#course-all-reviews)
[Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews)
[Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews)
[CSCI 1730 - Introduction to Programming Languages](http://www.cs.brown.edu/courses/cs173/2012/OnLine/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/458/csci-1730-introduction-to-programming-languages#course-all-reviews)
[Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews)
[Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/592/udacity-intro-to-artificial-intelligence#course-all-reviews)
[HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews)
[Datenmanagement mit SQL](https://open.hpi.de/courses/sql)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/777/openhpi-datenmanagement-mit-sql#course-all-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews)
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-all-reviews)
[Applied Data Science: An Introduction](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_276927_1)|Self Paced|NA|CourseSites|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1806/coursesites-applied-data-science-an-introduction#course-all-reviews)
[Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/1470/udacity-intro-to-hadoop-and-mapreduce#course-all-reviews)
[Big Data applications and Analytics](https://bigdatacourse.appspot.com/)|Self Paced|NA|Others|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/1948/big-data-applications-and-analytics#course-all-reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews)
[Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews)
[Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews)
[Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(10 reviews)](https://www.class-central.com/mooc/1478/udacity-data-analysis-with-r#course-all-reviews)
[Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1701/openhpi-parallel-programming-concepts#course-all-reviews)
[Ada: Overview](http://university.adacore.com/courses/overview/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2109/ada-overview#course-all-reviews)
[Ada: Basic Concepts](http://university.adacore.com/courses/basic-concepts/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2110/ada-basic-concepts#course-all-reviews)
[Ada: Programming in the Large](http://university.adacore.com/courses/programming-in-the-large1/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2111/ada-programming-in-the-large#course-all-reviews)
[Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api)|Self Paced|1 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization#course-all-reviews)
[UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers#course-all-reviews)
[Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-in-java#course-all-reviews)
[Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2211/udacity-developing-android-apps#course-all-reviews)
[Software Development Process](https://www.udacity.com/course/ud805)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2335/udacity-software-development-process#course-all-reviews)
[Computer Networking](https://www.udacity.com/course/ud436)|Self Paced|12 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2336/udacity-computer-networking#course-all-reviews)
[Knowledge Engineering with Semantic Web Technologies](https://open.hpi.de/courses/semanticweb2014)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/2038/openhpi-knowledge-engineering-with-semantic-web-technologies#course-all-reviews)
[Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about)|Self Paced|17 weeks|Others|★★★★★ [(1 review)](https://www.class-central.com/mooc/2339/practical-numerical-methods-with-python#course-all-reviews)
[Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(6 reviews)](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews)
[Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax#course-all-reviews)
[Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews)
[HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2999/udacity-html5-canvas#course-all-reviews)
[Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews)
[Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery#course-all-reviews)
[Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning#course-all-reviews)
[Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3254/udacity-full-stack-foundations#course-all-reviews)
[Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3255/udacity-responsive-web-design-fundamentals#course-all-reviews)
[Health Informatics in the Cloud](https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3288/udacity-health-informatics-in-the-cloud#course-all-reviews)
[JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3351/udacity-javascript-testing#course-all-reviews)
[UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3350/udacity-uikit-fundamentals#course-all-reviews)
[LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about)|Self Paced|15 weeks|Stanford OpenEdx|☆☆☆☆☆ [](https://www.class-central.com/mooc/2340/stanford-openedx-lpl-language-proof-and-logic#course-all-reviews)
[Responsive Images](https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3352/udacity-responsive-images#course-all-reviews)
[Machine Learning](https://www.coursera.org/learn/machine-learning)|Self Paced|NA|Coursera|★★★★★ [(93 reviews)](https://www.class-central.com/mooc/835/coursera-machine-learning#course-all-reviews)
[iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3393/udacity-ios-networking-with-swift#course-all-reviews)
[Authentication & Authorization: OAuth](https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3523/udacity-authentication-authorization-oauth#course-all-reviews)
[Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3524/udacity-browser-rendering-optimization#course-all-reviews)
[Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3525/udacity-developing-scalable-apps-in-python#course-all-reviews)
[iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3526/udacity-ios-persistence-and-core-data#course-all-reviews)
[How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3527/udacity-how-to-make-an-ios-app#course-all-reviews)
[Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3455/udacity-android-performance#course-all-reviews)
[Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/3579/udacity-android-development-for-beginners#course-all-reviews)
[Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3580/udacity-advanced-android-app-development#course-all-reviews)
[Android Design for Developers](https://www.udacity.com/course/android-design-for-developers--ud862?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3581/udacity-android-design-for-developers#course-all-reviews)
[Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3582/udacity-android-ubiquitous-computing#course-all-reviews)
[Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3583/udacity-google-play-services#course-all-reviews)
[Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3584/udacity-gradle-for-android-and-java#course-all-reviews)
[DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0)|Self Paced|6 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3343/edx-dev201x-introduction-to-typescript#course-all-reviews)
[DEV202.1x: Building Cloud Apps with Microsoft Azure – Part 1](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-1x-0)|Self Paced|4 weeks|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3348/edx-dev202-1x-building-cloud-apps-with-microsoft-azure-part-1#course-all-reviews)
[DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-0)|Self Paced|6 weeks|edX|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/3339/edx-dev204x-programming-with-c#course-all-reviews)
[AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0)|Self Paced|NA|edX|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/1564/edx-amrx-autonomous-mobile-robots#course-all-reviews)
[PH525.1x: Statistics and R for the Life Sciences](https://www.edx.org/course/statistics-r-life-sciences-harvardx-ph525-1x)|Self Paced|4 weeks|edX|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/2960/edx-ph525-1x-statistics-and-r-for-the-life-sciences#course-all-reviews)
[KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0)|Self Paced|NA|edX|★★★☆☆ [(5 reviews)](https://www.class-central.com/mooc/1836/edx-kiexplorx-explore-statistics-with-r#course-all-reviews)
[JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews)
ADVANCED(27)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Genomic Data Science with Galaxy](https://www.coursera.org/course/gengalaxy)|Aug 3rd|4 weeks|Coursera|★★☆☆☆ [(4 reviews)](https://www.class-central.com/mooc/3473/coursera-genomic-data-science-with-galaxy#course-all-reviews)
[Command Line Tools for Genomic Data Science](https://www.coursera.org/course/gencommand)|Aug 3rd|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3474/coursera-command-line-tools-for-genomic-data-science#course-all-reviews)
[Algorithms for DNA Sequencing](https://www.coursera.org/course/ads1)|Aug 3rd|4 weeks|Coursera|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/3433/coursera-algorithms-for-dna-sequencing#course-all-reviews)
[DAT202.1x: Processing Big Data with Hadoop in Azure HDInsight](https://www.edx.org/course/processing-big-data-hadoop-azure-microsoft-dat202-1x)|Aug 3rd|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3917/edx-dat202-1x-processing-big-data-with-hadoop-in-azure-hdinsight#course-all-reviews)
[Modeling Discrete Optimization](https://www.coursera.org/course/modelingoptimization)|Aug 3rd|8 weeks|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/3692/coursera-modeling-discrete-optimization#course-all-reviews)
[Hardware Security](https://www.coursera.org/course/hardwaresec)|Aug 10th|6 weeks|Coursera|★★★☆☆ [(5 reviews)](https://www.class-central.com/mooc/1729/coursera-hardware-security#course-all-reviews)
[Deciphering Molecular Evolution (Bioinformatics IV)](https://www.coursera.org/course/molecularevolution)|Aug 31st|5 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3555/coursera-deciphering-molecular-evolution-bioinformatics-iv#course-all-reviews)
[Genome Sequencing (Bioinformatics II)](https://www.coursera.org/course/assembly)|Aug 31st|4 weeks|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/3290/coursera-genome-sequencing-bioinformatics-ii#course-all-reviews)
[Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/course/hiddenmessages)|Aug 31st|4 weeks|Coursera|★★★★☆ [(8 reviews)](https://www.class-central.com/mooc/3289/coursera-finding-hidden-messages-in-dna-bioinformatics-i#course-all-reviews)
[Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(11 reviews)](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews)
[Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/326/udacity-applied-cryptography#course-all-reviews)
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|7 weeks|openHPI|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management#course-all-reviews)
[Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews)
[Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews)
[Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-all-reviews)
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-all-reviews)
[Machine Learning 3—Reinforcement Learning](https://www.udacity.com/course/ud820)|Self Paced|4 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1849/udacity-machine-learning-3-reinforcement-learning#course-all-reviews)
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews)
[Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/3256/udacity-model-building-and-validation#course-all-reviews)
[Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1016/udacity-advanced-operating-systems#course-all-reviews)
[High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1018/udacity-high-performance-computer-architecture#course-all-reviews)
[Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1024/udacity-computability-complexity-algorithms#course-all-reviews)
[Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1025/udacity-knowledge-based-ai-cognitive-systems#course-all-reviews)
[Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems)|Self Paced|NA|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1029/coursera-introduction-to-recommender-systems#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3531/udacity-machine-learning#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/ud262)|Self Paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1020/udacity-machine-learning#course-all-reviews)",1562,75,dhawal,2015-08-05 15:53:22,https://www.reddit.com/r/learnprogramming/comments/3fvz78/heres_a_list_of_156_free_online_programmingcs/,0,learnprogramming
cf50qu,"You don't know JavaScript, but you could (for free)","The 'You Don't Know JS' (by Kyle Simpson) books are in my opinion one of the best resources to learn JavaScript. The language is [full of quirks and other 'interesting' design decisions](https://www.destroyallsoftware.com/talks/wat) that can result in weird behavior, especially if you are a first-time programmer.

What I really like about this series is the in-depth approach to elusive concepts like closures, prototype-based inheritance, and scope. If you have the time and discipline to follow them, I think you'd be in better shape than 90% of the JS programmers out there.

Because I've received some messages asking for JS resources, I thought that it could be useful for someone if list them here. The books can be found in Amazon for very very cheap, but you don't need to buy them, you can read them online for free here:

[Book 1: Up & Going](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/up%20%26%20going)

[Book 2: Scope & Closures](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/scope%20%26%20closures)

[Book 3: this & Object Prototypes](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/this%20%26%20object%20prototypes)

[Book 4: Types & Grammar](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/types%20%26%20grammar)

[Book 5: Async & Performance](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/async%20%26%20performance)

[Book 6: ES6 & Beyond](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/es6%20%26%20beyond)",1556,85,juanorozcov,2019-07-19 08:34:38,https://www.reddit.com/r/learnprogramming/comments/cf50qu/you_dont_know_javascript_but_you_could_for_free/,1,learnprogramming
lyh2p3,Just got accepted to do a MSc in Computer Science!,"I'm doing the MSc for Computer science at the university of Liverpool! A very good university here in the UK. My previous degree is in chemistry and I also have a postgraduate teaching qualification.

This last year has shown me that teaching isn't for me and now I can move into a different industry. I'm so happy!

The offer was unconditional. Absolutely amazing.

I didn't know where else to vent as my family disagrees with me moving careers.",1554,153,link6112,2021-03-05 17:31:40,https://www.reddit.com/r/learnprogramming/comments/lyh2p3/just_got_accepted_to_do_a_msc_in_computer_science/,0,learnprogramming
7bqdkm,10 Beginner Courses to Introduce You to Coding,http://blog.teamtreehouse.com/10-beginner-coding-courses,1550,32,lbonillaii,2017-11-09 02:24:43,https://www.reddit.com/r/learnprogramming/comments/7bqdkm/10_beginner_courses_to_introduce_you_to_coding/,0,learnprogramming
564ikk,Learn (Python) programming with a beginner-friendly IDE,"I've taught introductory programming course in University of Tartu for 7 years and I've seen that students, who don't have good understanding how their programs get executed, struggle the most with programming exercises.

That's why I created Thonny (http://thonny.org/ ). It is a Python IDE for learning programming. It can show step-by-step how Python executes your programs.

I suggest you to take a look and ask a question here (or in https://groups.google.com/forum/#!forum/thonny ) if something needs clarification.",1552,123,aivarannamaa,2016-10-06 09:03:44,https://www.reddit.com/r/learnprogramming/comments/564ikk/learn_python_programming_with_a_beginnerfriendly/,0,learnprogramming
6z2buo,Detailed Guide to Git,"Hello All!

I recently completed a detailed guide to doing your first git repo, with explanations as to how git is supposed to work in practice. Its slow and steady, but very thorough.

https://medium.com/learn-git-today/the-ultimate-git-guide-to-creating-your-first-repo-b50762a6ab00

If anybody has any comments or questions on this post or other git related help, please feel free to reach out to me!

Notice: I've updated the guide to eliminate some spelling mistakes, added and moved around content for footnotes to make for smoother reading, and now have it mirror [on my own website](http://learngit.today/)",1552,86,sheepsneck,2017-09-09 15:36:35,https://www.reddit.com/r/learnprogramming/comments/6z2buo/detailed_guide_to_git/,0,learnprogramming
lmy969,Coding and 8 hour work days,"I'm going to be honest, I struggle with motivation. But I need to get this off my chest. I spend 8 1/2 hours of my day dealing with the hell that is customer service, then I come back to a home life that isn't particularly great. I'm doing my best to try and practice when I can, but some days, I'm just mentally done after work. It's honestly hard for me to get into the mindset where I can focus on coding.

Tell me if this is the wrong place and I'll remove it, but I honestly need some help here. I know this is the route I want to go with my career, but at the end of the day, I'm just tired.",1554,285,saxxy_assassin,2021-02-18 21:48:30,https://www.reddit.com/r/learnprogramming/comments/lmy969/coding_and_8_hour_work_days/,0,learnprogramming
w5ayue,You should be watching YouTube videos that actually teach coding concepts,"(Assuming you’re not just watching for entertainment or on spare time)

I’ve made this mistake a bit at first watching advice videos and while helpful after seeing one or two good ones you’re just tricking yourself into thinking you’re being productive. 

I know most of you have heard of tutorial hell, where you watch tutorials over and over but once you’re on your own you don’t know how to piece things together and draw blanks. Well at least tutorials teach you things even if you’re not good enough to fully build things yet.
       You may end up a level below tutorial hell, General Advice Hell lol.

To be clear they’re not bad videos it’s just after a few you don’t practically need to see any more. Especially for those of you saying you only have like a few hours each week to study you’d really be wasting your time imo.",1552,166,RevenantFlash,2022-07-22 13:42:54,https://www.reddit.com/r/learnprogramming/comments/w5ayue/you_should_be_watching_youtube_videos_that/,0,learnprogramming
vg36px,What language are missiles programmed in?,Just saw top gun and i started wondering what language missiles and all types of air defence programmed in?,1547,356,rartedw,2022-06-19 19:56:03,https://www.reddit.com/r/learnprogramming/comments/vg36px/what_language_are_missiles_programmed_in/,0,learnprogramming
kwhgia,"I help inmates get resources behind bars, and I'm looking for a good coding book you think would be the most instructive for people who don't have access to computers","The book would have to show examples of the code (because they don't have computers), and be written in simple enough terms for regular people to understand.

Any ideas?

EDIT: thank you for offering your advice. Someone mentioned learn level [https://towardsdatascience.com/how-to-teach-programming-to-people-in-prison-without-computers-c455baca7f19](https://towardsdatascience.com/how-to-teach-programming-to-people-in-prison-without-computers-c455baca7f19)

I spoke with the director / co-founder there after ya'll mentioned it and if you want to help in this cause generally, please visit their website they are producing programming material that's boiled down in simple terms and easy to learn without computers [https://learnlevel.org/](https://learnlevel.org/)",1548,160,None,2021-01-13 14:27:55,https://www.reddit.com/r/learnprogramming/comments/kwhgia/i_help_inmates_get_resources_behind_bars_and_im/,1,learnprogramming
ccaia7,I created a video for watching experienced engineers add features to real codebases they've never seen before!,"***TLDR:*** [*Here's*](https://www.simplybusiness.co.uk/about-us/tech/2019/07/working-with-legacy-code-e01/) *a video of an experienced engineer adding a feature to a codebase they've never seen before. It's an open source clone of medium, and it's less about the code they write and more about the process they go through (e.g. how do they find where to add the code, what questions do they ask themselves, when do they start thinking about design).* 

&#x200B;

I've been subscribed to /r/learnprogramming for a couple of years now when I started to learn to program and have found the content very useful. Since then, I career switched into being a software developer about a year ago. I'm posting on a new account as I'd like to keep my main private. 

&#x200B;

I really enjoy video content and learnt so much from places like youtube (e.g. [Traversy Media](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA)), thoughtbots [free upcase](https://thoughtbot.com/upcase), [devtube](https://dev.tube/) or udemy courses. Watching experienced devs code and talk through their process really works for me.   


**Why I created this video:** Something I've tried to find online quite a few times (unsuccessfully) are videos of devs adding features to real code bases that they've never seen before. I really wanted to see how they navigate it (e.g. how do they find where they need to make the code?) and learn about what process they go through (e.g. what questions do they ask? When do they start thinking about design?) .  


**What this video is about:** I'm in the video along with a colleague (experienced engineering lead) James. I ask James to add a simple feature to a codebase he's never seen before (an open source clone of Medium, called [stories](https://github.com/hibiken/stories)). It's less about the code he writes and more about watching his process, with me doing my best to stop him and explain why he's doing what he's doing. 

&#x200B;

**I hope that by watching this you'll get a few things:**   
1. You'll see that experienced devs don't magically know where everything is, they have to go through a process of investigation and digging, just like you. It's actually quite simple steps and you can replicate them easily. 

2. You'll get to see what a real codebase actually looks like. This isn't a particularly complex codebase, but it's a fully functioning site. In the next one I think I'm going to use a bigger app that has a massive amount of complexity. 

3. Hopefully you'll get some practical tips on how to navigate a codebase you have never seen before, and some insight into what kind of questions you might want to ask yourself/your colleagues. 

&#x200B;

This is just the first video and I'm really keen for feedback. I couldn't find this content online and I hope to start providing more of it, and the more constructive feedback I get the better I can make it :) What did you find useful? What would you like more/less of? What would you like to see in the next one? 

&#x200B;

[HERE's](https://www.simplybusiness.co.uk/about-us/tech/2019/07/working-with-legacy-code-e01/) the link to the post. It's a blog post that has a summary and the video itself.",1548,59,robf101,2019-07-12 12:57:04,https://www.reddit.com/r/learnprogramming/comments/ccaia7/i_created_a_video_for_watching_experienced/,1,learnprogramming
an42uu,MIT Hacker Tools: a lecture series on programmer tools,"Hi all! We (@anishathalye, @josejg, and @jonhoo) have long felt that while university CS classes are great at teaching specific topics, they often leave it to students to figure out a lot of the common knowledge about how to actually _use_ your computer. And in particular, how to use it _efficiently_.

There's just no class in the undergrad curriculum that teaches you how to become familiar with the system you're working with! Students are expected to know about, or figure out, the shell, editors, remote access and file management, version control, debugging and profiling utilities, and all sorts of other useful tools on their own. Often times, they won't even know that many of these tools exist, and instead do things in roundabout ways or simply be left frustrated about their development environment.

To help mitigate this, we decided to run [a short lecture series at MIT](https://hacker-tools.github.io/) during the January Independent Activities Period that we called ""Hacker Tools"" (in reference to ""hacker culture"", not hacking computers). Our hope was that through this class, and the resulting lecture materials and videos, we might be able to bootstrap students' knowledge about the tools that are available to them, which they can then put to use throughout their time at university, and beyond.

We've shared both the lecture notes and the recordings of the lectures in the hopes that people outside of MIT may also find these resources useful in making better use of their tools. If that turns out to be true, we're also thinking of re-doing the videos in screen-cast style with live chat and a proper microphone when we get the time. If that sounds interesting to you, and if you have ideas about other things you'd like to see us cover, please leave a comment below; we'd love to hear from you!

We're sure there are also _plenty_ of cool tools that we didn't get to cover in this series that you all know and love. Please share them below along with a short description so we can all learn something new!

Anish, Jose, and Jon

PS: There are also a number of good comments on [/r/programming](https://www.reddit.com/r/programming/comments/an3xki/mit_hacker_tools_a_lecture_series_on_programmer/) and [Hacker News](https://news.ycombinator.com/item?id=19078281).",1543,55,Jonhoo,2019-02-04 17:39:53,https://www.reddit.com/r/learnprogramming/comments/an42uu/mit_hacker_tools_a_lecture_series_on_programmer/,1,learnprogramming
jcl725,Finally found my calling....now to climb that mountain,"I'm a F58 who has just been accepted into a data science bootcamp. I took a diploma Programmer/Analyst in 93 and spent a couple of years in the field. Then came family. I've spent the last 20 years working in admin (my son has special needs and I needed the lightweight day job), and it's been a soul-crushing grind. the work- not my son, he's awesome.  This stay-at-home year I started studying python. Loved it. Then I did the admission challenge. LOVED IT SO MUCH. I haven't had such fun in ages. I can get a one-time-in-life training scholarship from EI(ikr?). Stuck on getting those magic info interviews, though. Am I delusional to think I can carve out a career at my age?
Update: In school, it is challenging but I am enjoying it!",1548,137,NorthfacingV,2020-10-17 00:05:35,https://www.reddit.com/r/learnprogramming/comments/jcl725/finally_found_my_callingnow_to_climb_that_mountain/,2,learnprogramming
r0sznz,What are 10 programs you should write in a language you're trying to learn?,"Let's say you're an intermediate or advanced-level programmer trying to learn a new language. The best way to learn a language is to actually write something with it. But what programs should you write? There are so many to choose from! Choice overload can be overwhelming.

So my open question to the community: If you had to suggest 10 familiar-feeling programs to lift someone from complete beginner to comfortable novice, what would those 10 programs be?

Of course, the features of the language will matter. Is it object oriented? Is it functional? But for simplicity's sake, let's ignore specific language quirks and just stick to programs that can be written in most mainstream programming languages.

I was trying to come up with an answer to this question. Here are my 10. Feel free to critique.

1. Hello world (printing)
2. Fizzbuzz (control flow)
3. Text file reader/writer (file I/O)
4. Text-based blackjack (randomization, loops, user input)
5. Text-based battleship (2d arrays, functions)
6. Linked list (data structures, encapsulation)
7. Binary search tree (more data structures, recursion)
8. Quicksort (non-trivial algorithms)
9. Djikstra's shortest path (graphs)
10. Conway's Game of Life (most of the above skills)",1546,106,pugets,2021-11-24 01:36:01,https://www.reddit.com/r/learnprogramming/comments/r0sznz/what_are_10_programs_you_should_write_in_a/,0,learnprogramming
nuhzht,Git-Cheat-Sheet, Very useful one from Gitlab: [https://about.gitlab.com/images/press/git-cheat-sheet.pdf](https://about.gitlab.com/images/press/git-cheat-sheet.pdf),1544,45,AdminThetips4you,2021-06-07 17:18:29,https://www.reddit.com/r/learnprogramming/comments/nuhzht/gitcheatsheet/,0,learnprogramming
ani7nb,PSA: Many of Berkeley's courses have lectures and materials free online,"You can get the entire core of the cs degree for free, the equivalent of an associate's degree, and there are probably more courses. Only courses not available are math so I replaced that with MIT's.

### UC Berkeley

| Math  |  EE  |  CS  |
|-------|------|------|
|Math 1A|      |CS 10 |
|Math 1B|EE 16A|CS 61A|
|       |EE 16B|CS 61B|
|CS 70  |      |CS 61C|

**Math**

1. Math 1A (prerequisite: Precalculus) 
   1. [18.01.1x - Calculus 1A: Differentiation - MIT edX](https://www.edx.org/course/calculus-1a-differentiation)
   2. [18.01.2x - Calculus 1B: Integration - MIT edX](https://www.edx.org/course/calculus-1b-integration)
2. Math 1B (prerequisite: Math 1A)
   - [18.01.3x - Calculus 1C: Coordinate Systems & Infinite Series](https://www.edx.org/course/calculus-1c-coordinate-systems-infinite-series)
3. [CS 70 - Discrete Mathematics and Probability Theory - UC Berkeley](http://www.eecs70.org/) (prerequisite: Math 1A-B, CS 61A-B)

**Electrical Engineering**

1. [EE 16A - Designing Information Devices and Systems I - Spring 2017 - UC Berkeley](https://inst.eecs.berkeley.edu/~ee16a/sp17/) (prerequisite: Math 1A. corequisite: Math 1B, CS 61A)
2. [EE 16B - Designing Information Devices and Systems II - Fall 2015 - UC Berkeley](https://inst.eecs.berkeley.edu/~ee16b/fa15/) (prerequisite: EE 16A)

**Computer Science**

1. [CS 10 - Beauty and Joy of Computing - UC Berkeley](https://bjc.edc.org/)
2. [CS 61A - Structure and Interpretation of Computer Programs - Spring 2018 - John DeNero - UC Berkeley](https://inst.eecs.berkeley.edu/~cs61a/sp18/) (prerequisite: equivalent experience to CS 10. corequisite: Math 1A)
3. [CS 61B - Data Structures - Spring 2018 - Josh Hug - UC Berkeley](https://sp18.datastructur.es/) ([github](https://github.com/Berkeley-CS61B/skeleton-sp18)) (prerequisite: CS 61A)
4. [CS 61C - Machine Structures - Spring 2015 - UC Berkeley](http://inst.eecs.berkeley.edu/~cs61c/sp15/) ([Lectures](http://www.infocobuild.com/education/audio-video-courses/computer-science/cs61c-spring2015-berkeley.html)) (prerequisite: CS 61A-C)",1547,77,Alaharon123,2019-02-05 20:16:57,https://www.reddit.com/r/learnprogramming/comments/ani7nb/psa_many_of_berkeleys_courses_have_lectures_and/,1,learnprogramming
de59yg,I made a GitHub repo for data structures and algorithms in Python to help in interview prep,"[https://github.com/prabhupant/python-ds](https://github.com/prabhupant/python-ds)

During my interview prep I used this subreddit a lot and it helped me. Now its my time to give something back. Feel free to contribute, raise issues and suggest improvements :)

Contributions are super welcomed :)",1538,54,kernelslayer,2019-10-06 16:12:23,https://www.reddit.com/r/learnprogramming/comments/de59yg/i_made_a_github_repo_for_data_structures_and/,0,learnprogramming
a34sws,Codecademy (Finally) Launched Learn C++!,"Sonny from Codecademy here. Over the last year, we've conducted numerous surveys where we asked our learners for languages/frameworks that they'd love to see in our catalog; C++ has consistently been the number one on the list.

And so I started to build one!

Some information about me: Before joining the team, I taught CS in the classroom at Columbia University and Lehman College. I've been using Codecademy since 2013 - always loved the platform but also felt that there is major room for improvement in terms of the curriculum. While designing and writing this course, I wanted to drastically improve and redefine the way we teach the programming fundamentals.

**TL;DR Today, I am so happy to announce that Learn C++ is live:**

[https://www.codecademy.com/learn/learn-c-plus-plus](https://www.codecademy.com/learn/learn-c-plus-plus)

Please let me know if there is any way to make the course stronger. I'm open to all feedback and I'll be iterating until it's the best C++ curriculum on the web.  

---

P.S. And more content is coming:

* **Mon, Dec 10th:** Conditionals & Logic
* **Mon, Dec 17th:** Loops

And the real fun stuff comes after New Years :)",1537,111,sonnynomnom,2018-12-04 20:58:12,https://www.reddit.com/r/learnprogramming/comments/a34sws/codecademy_finally_launched_learn_c/,0,learnprogramming
11ypssu,I made it! I am officially a professional developer!,"I, a self taught web developer, got my first junior web developer role!

There are no words to express how grateful I am that it finally happened. I had started to feel that, while I had continuously been learning new things, it had no actual impact in my life. 

I want to thank this sub, this is where it all started, almost one year ago. While studying, I kept visiting this sub just to keep believing that I as well could make it one day. So, thank you everyone!

My path until today: 

About a year ago, I started fooling around in freecodecamp. At the time a covid infection had me in the house for about two weeks. So I visited the site I had bookmarked many years ago, but never visited. I really liked the web development thing, so I joined r/learnprogramming to find my way around the self learning route.

Fast forward to the summer of 2022, when I started the Odin project. Took me about 1-2 months to get through the foundations, then continued with the JavaScript path. Still not finished!

After the Todo app, I started integrating typescript into my other projects, sass too. I have some experience with Java and I was missing the static typing. Also, skipped a few JavaScript projects since I am familiar with DSA & analysis. At the battleship project, I never finished it. Once I had written many tests and I got the hang of it, I moved on. I took my time before moving to React around January. Also took 2-3 months break, cause of burnout. I am doing other things as well in my day. 

In the React section, I almost completely ignored the Odin project. From the first link to the React documentation, I just read everything in the main concepts (not the advanced ones). I implemented the form of the CV app, checked back with the Odin project, and I was basically doing the things that were asked and a bit more without the guidance. 

So I started applying to jobs. Most of the applications were not even replied. Two of them asked for an interview. The first one was ok, but they went with another applicant. Second one, local company, was moved by my determination and self motivation. They gave me a task to complete, then an offer was made. Obviously, I accepted!

I will continue the Odin project, still have a lot to learn! But probably just the backend lessons, as an introduction.

Conclusion:

I am sorry if this was tiring/short/badly written. I tried to keep to the point. If anyone wants to ask something, I will answer, even if it takes a few days. 

I mostly want to share my success with you, and remind you that all these success stories tou read about could be you one day, only if you keep at it! Take a break when you don't feel like it, but make sure to come back! You can do it! And the best part: it is all free, the internet has infinite resources on coding stuff! So keep progressing, and happy coding! Cheers!",1530,173,sunrrat,2023-03-22 17:19:36,https://www.reddit.com/r/learnprogramming/comments/11ypssu/i_made_it_i_am_officially_a_professional_developer/,1,learnprogramming
m0en2y,Failed a coding challenge at my dream company,"I’ve been a self taught developer for nearly a year now. Last week I failed a coding test for an internship at my dream company and I’ve been depressed ever since. I prepared a lot and it feels even worse that this was just an internship position and not a full time role. The worst part is I could have had 100 more hours and probably still wouldn’t be able to solve the challenge. 

On average, how often do people fail coding screening tests for intern/junior level positions? How can I improve? 

I thought I preferred coding tests to take home assignments as they are way less time consuming, but I don’t know anymore if I can really become a software developer.",1536,304,Beautiful-Daikon-370,2021-03-08 12:26:35,https://www.reddit.com/r/learnprogramming/comments/m0en2y/failed_a_coding_challenge_at_my_dream_company/,0,learnprogramming
4syftj,"Hey /r/learnprogramming, my name's Tim and I want to teach you to build products using javascript. For free.","Hi /r/learnprogramming!

As the title says - I want to teach you to build products in javascript. My motivation is pretty simple - there’s a ton of different courses, articles, tutorials, etc. on how to program in javascript. But none of them actually tell you how to build a product.

It happens so that I've been doing exactly that for past 10+ years and now have to teach some students to do it as well. So, I thought - why not make an online course and share it with the world? The focus mostly will not be on programming itself, but rather on high-level concepts, tools and approaches that I am using as a developer in my daily work.

Oh, and I'll be releasing everything under nonrestrictive licenses, for free with no ads or any other monetization. Feel free to fork, improve and remix any parts of it :)

If that sounds interesting, you can find a bit more text on what's going on [medium](https://medium.com/@yamalight/i-want-to-teach-you-to-build-products-using-javascript-for-free-8900dc836961#.c10kwzny6).

Or, you can go straight to the [first video on youtube](https://www.youtube.com/watch?v=vkuKW_wuFq4).

I would absolutely love to get any feedback you might have. And I'll be happy to answer any questions too, of course.

Note: this is a [cross-post](https://www.reddit.com/r/javascript/comments/4sujup/hey_rjavascript_my_names_tim_and_i_want_to_teach/) from /r/javascript, thought some people here might be interested as well :)",1532,196,yamalight,2016-07-15 10:15:54,https://www.reddit.com/r/learnprogramming/comments/4syftj/hey_rlearnprogramming_my_names_tim_and_i_want_to/,0,learnprogramming
udh5o5,"4,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.","EDIT: The May codes are up.

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book: MAY2022COUPON1 and MAY2022COUPON2 (each has 1,000 sign ups, use the other one if one is sold out):

https://www.udemy.com/course/automate/?couponCode=MAY2022COUPON1

https://www.udemy.com/course/automate/?couponCode=MAY2022COUPON2

(The April codes are now used up.)

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1528,191,AlSweigart,2022-04-27 23:37:59,https://www.reddit.com/r/learnprogramming/comments/udh5o5/4000_free_sign_ups_available_for_the_automate_the/,1,learnprogramming
rq68m1,Taking extremely detailed notes while learning has been a game changer for me.,"For the past couple of months, I've developed a habit of writing very detailed notes of just about everything I've learnt. I type my notes in Google docs and include example code snippets too. It might sound simple, but I can't emphasize enough how much this has helped me. I no longer have to worry that I'll forget a concept I've learnt. In fact, the mere act of writing notes in my own words significantly reinforces my learning, and I rarely forget anything I've learnt anymore. Even if I do, I can easily recall just with a quick glance at my notes.

The language I use in my notes is very precise and specifically tailored to the way I best understand. Basically, whenever I jot down notes, I imagine I'm writing for my ""future self"" who has forgotten everything and I need to write in a way to make my future self understand. For me, this involves very detailed language and plenty of example code snippets. I try to make my notes detailed enough that I can recall all the concepts I've learnt from my notes alone, without needing to go digging on the internet. Only you know the best way you learn, and your notes should reflect that.

Whenever I follow a course on FreeCodeCamp or Hyperskill, I jot down notes for *every* topic I come across in my own words. I do concede that this is a very slow process, but it's totally worth it in my opinion. Through detailed note taking, I always retain everything I've learnt and have reference material tailored for me in case I need it.

[Here's an example of my notes in case anyone's curious](https://pdfhost.io/v/D5YeKePrV_Java_Notes).

Just sharing my experience in case it helps someone. Cheers!",1524,157,illbashu,2021-12-28 04:05:21,https://www.reddit.com/r/learnprogramming/comments/rq68m1/taking_extremely_detailed_notes_while_learning/,0,learnprogramming
n21trb,Got an A in my latest Java exam!,"I recently had to change my career trajectory due to Covid (was previously training to be a pilot) and decided to begin self-learning some programming. I then decided to enroll in a postgraduate course which essentially functions as a 12 week (1 semester) long bootcamp. 

I've had so much help from this page over the self-learning phase and throughout my course so far, it's been a tough ride but receiving this mark has given me huge confidence that I can do this. It also reinforces the study techniques I'm implementing are working and the hard yards are paying off.

I just thought I'd share this, for anyone else with self doubt, all it takes is a little perseverance and you will start seeing some major results. It's often easy to experience imposter syndrome when learning to code but it's 100% normal and I know others who have felt the exact same way. If I can do it, so can you.

You've got this, fellow beginners!",1530,69,None,2021-04-30 19:47:58,https://www.reddit.com/r/learnprogramming/comments/n21trb/got_an_a_in_my_latest_java_exam/,0,learnprogramming
1c12nz8,Almost 4 years in software engineering and that's what I have learned.,"1. The cost of time and engineering is more higher than that of servers.
2. Developer productivity and a technology's ecosystem are more valuable than a runtime's efficiency or the raw speed of a programming language.
3. Programming languages that are often considered slow and criticized for technical deficiencies or poor design are usually the most used and favored for building real-world software, from small to large scale, due to the flexibility they provide to engineers.
4. The choice of a tech stack, often said to depend on project requirements, is misleading and untrue; in reality, it depends on the expertise of the senior engineer and team.
5. Real agile teams don’t follow agile practices rigidly; instead, they develop their processes to maintain agility.
6. Best practices are often biased.
7. Healthy communication is key to a team’s success.
8. GitHub is the best tool for tracking and managing software development.
9. The first priority is to make it work.
10. Mastery of the basics makes you advanced.",1525,181,muneebh1337,2024-04-11 01:31:37,https://www.reddit.com/r/learnprogramming/comments/1c12nz8/almost_4_years_in_software_engineering_and_thats/,0,learnprogramming
lgqoyd,"Projects with high-quality designs to practice your HTML, CSS, JS... skills","Hi,  
Me (ex Lead Frontend Developer) and UX/UI Designer are working on free projects to practice/improve your skills. We're trying to provide high-quality designs after a technical review, there are some tips on how to start, recommended technologies, user stories, and more... 

We're trying to reach around 15 projects and sort them in difficulty level order, each of the projects should teach some real-world concepts and after completing all of them, you should have a strong Full-stack (Frontend/Backend) understanding of the modern technologies in your pocket.  


For now, there are 4 projects, mostly Frontend related (Notes App could be extended with some Backend), we should get to 10 of them around March\~ 👀

Link: [https://bigsondev.com/projects/](https://bigsondev.com/projects/)

Hope you find this useful!",1523,77,BigsonDev,2021-02-10 10:11:59,https://www.reddit.com/r/learnprogramming/comments/lgqoyd/projects_with_highquality_designs_to_practice/,0,learnprogramming
sya49w,Self taught programmer. Just got my first full time programming job. Happy to answer questions!,"In a nutshell, my first real exposure to python was October 2019, when I had to learn python to teach students with hearing impairment and prepare them for academic exams in computer science. I loved it so much that I started using it to build my own teaching resources. During lockdown, I had some extra time, so I smashed it, kept teaching everyone I could and looked for opportunities to build new things for myself and other people. The projects I build got more and more complicated until I met a guy through teaching his kids who asked me to be involved in a project he was building.

Basically, he was an entrepreneur, building things for himself and acting as a product owner for other clients' projects. He payed me for my work, and at this point, my teaching contract had ended, so I decided to take a few more months to upskill myself and complete the project I was working on before looking for jobs seriously. I applied half heartedly for a few jobs, getting interviews in the mean time, one of which was for a really interesting local job. The interviewers loved that I was able to show them some of the things I'd built (I took my laptop) and talk about the code in some depth. They made me an offer, and I accepted the role!

I know I put the time into learning and building things, but a lot of things aligned to make this happen. Just want to be clear that I'm not blowing my own trumpet here. I feel really fortunate and like   my deity was backing me on this!

As in the title, happy to answer any questions and offer any encouragement I can from my perspective.

EDIT: A little blown away by the response to this.

So many people have asked to see my resume that I decided to include 

 

# Here's the resume I had when I got my first role as a self-taught (informally educated!) programmer

This is what I had in my resume when I got the interview which ended up being my first full time programming job (last November). I also had 3 other interviews from it.

Specific locations and employers redacted.

Hope it's useful \^\_\^

Profile

Proven Python developer. Experienced in developing Django web-stacks with Postgres or SQLite backends and custon, HTML, CSS and JavaScript frontends with Jinja. Experienced in implementing Django REST framework, task scheduling and using external APIs. Familiar with Visual Studio Code, Vim and Python's IDLE amongst others. Some experience with C#, R, MySQL, and Prolog.

Experienced in deploying, updating and maintaining Django projects on Amazon Web Services, DigitalOcean and PythonAnywhere. Familiar with Nginx, Gunicorn, Apache, Linux Terminal, Windows command line, Git and Github.

Experienced in developing and delivering custom scripts to business operatives to automate clerical and accounting tasks. Skilled in transcribing data between csv, xslx and pdf file formats using string manipulation and regular expressions in python.

Over 500 hours experience teaching programming, networking and computer science principles to working professionals, A-level candidates, primary and secondary age children. Track record of helping students with special educational needs including hearing impairment and autistic spectrum disorder achieve exam outcomes in A-level computer science.

Experienced in preparing and delivering objective focused sessions and courses for adult participants. Skilled in course design, assessment and training groups and individuals.

Skilled in search engine optimisation and digital marketing as owner of a business and several related media channels. Successfully maintained business website ranking number one on Google search for over three years, with my other platforms usually dominating the top three spots. Experienced with Wordpress framework, maintaining sites for business and brand promotion purposes.

Working knowledge of Google platforms including YouTube, Adsense, Adwords and Google Trends. Currently managing a channel averaging 10k views per day. Strong knowledge of Facebook and Instagram, including analytics and ads.

Skilled in capturing, editing, producing, broadcasting and distributing video and image content for use in digital marketing and entertainment settings using Shotcut and Adobe Premier Pro (video editing), Canva and Gimp (image manipulation), Audacity (audio editing) and Open Broadcaster Software (streaming).

Fluent in German

Work experiencePython Developer

NOTE: I included all projects I could which were genuinely useful to myself or another human being. I didn't get paid to build all of these, but as long as it was useful and demonstrated I could use a skill, I included them, and listed the specific tech or libraries used.

Freelance November 2019 to Present

Projects:Forex trading alert app for Android and iOS (private client) May 21 - ongoing

* Responsible for writing project specification, developing concept and deploying prototype on DigitalOcean with Gunicorn and Nginx on Ubuntu.
* Planned responsibility for developing server-side Django backend, including database interfacing, background scheduling, API calls to third party data provider and REST APIs linking server with client.
* Stack: Django, Postgress, Nginx, Gunicorn and custom CSS/HTML/JS with jquery.

Examquestiongenerator.com – Nov 19 –ongoing

* Bespoke education resource generating practise exam questions for GCSE, A-level and professional certifications.
* Responsible for full stack development, testing, deployment, standardising legacy modules, maintaining central project repository and deploying regular update.
* Stack: Django with Python3, custom frontend (Bootstrap, HTML, CSS, JS) on AWS with Apache.

Army Cognitive Test practise app (private client) April 21 - August 21

* Full responsibility for Django and custom front end development, testing and deployment
* Libraries: Django, jquery, html/js/css

Secure one-page app to coordinate volunteer activity (private client) Mar 21

* Django back-end with responsive custom front-end
* Full responsibility for development, testing, deployment and support
* Libraries: Django, sqlite, tilt.js, jquery

Financial Market data web scraping script (private client) Jan 21

* Script automates hourly collection of around 200 share options data points
* Libraries: Selenium, csv, pandas, time, datetime, regex

Online form used to report leaks () Sep 20

* Custom front-end guides user through data input process and document upload
* Django backend processes user data and uploaded documents
* App emails copies of completed form and evidence to staff and users
* User data encrypted and secured throughout
* Libraries: Django, pypdf2, smtplib, jquery, bootstrap

Script to process sales and receipt data for online retailer (private client) Aug 20

* Python script collating disparate PDF receipts and CSV sales data into xlsx file
* Libraries: csv, openpyxl, pypdf2, datetime, regex

business owner

Nerf Parties

Responsible for generating leads, SEO, SCO of several Wordpress sites, content creation for YouTube and other social media outlets and conducting marketing activities. Responsible for recruiting, training and managing employees.

A-Level Computer Science Teacher and Coding Instructor

City Council and Private clients - September 2018 to August 2021

Responsible for preparing candidates with SEN (hearing impairment, ASD) for computer science and STEM  A-levels, Compia and Python certifications. Responsible for delivering training to adults developing competencies in linux terminal, command prompt, core python, Django, Flask, SQL, HTML, CSS, JavaScript, networking, network layering and internet protocols. Private clients include working professionals, university students (Engineering, Computer Science) and business owners developing and maintaining own sites.

Lead ICT Teacher NOTE: didn't involve coding

January 2018 to August 2018Curriculum lead for ICT in school catering for EBD, ADHD, ASD students in full time care. Responsible for engaging secondary age students presenting with high level, challenging behaviours in learning.

Teacher of EBacc and Assistant Year Tutor

September 2013 to December 2017Full class responsibility for KS4 English and Physics classes, and KS5 English Language. Pastoral responsibilityas assistant year tutor for Year 10 pupils facing challenging circumstances at outside of school and inside of school. Also employed to offer Maths and MFL (German) in addition to the above academic subjects. Ran introductory German course for year 8 student at end of ear. Other roles include coaching basketball and supporting DofE participants on excursions.

Relevant work experience ends here

Education:

PGCE Physics with Maths

Bsc Hons Psychology

Python Certified Associate Programmer (python institute - free course paid exam. Also plan on doing PCPP1 and 2 eventually...)

IBM Python data science certificate (edx paid course online because I was exploring what I could use python for. Also paid a few quid for a udemy Cyber security with python course, but that didn't come with a certificate!)

&#x200B;",1524,280,justajolt,2022-02-22 01:07:09,https://www.reddit.com/r/learnprogramming/comments/sya49w/self_taught_programmer_just_got_my_first_full/,0,learnprogramming
3deheo,"A jpg file I have is 1,407kb large. I open up the jpg in Sublime and copy all the code in it to a blank new jpg file that I just created called new.jpg. Why is new.jpg 3,607kb large instead of the same size as the original jpg file?",,1526,82,Hawk_Blue,2015-07-15 17:16:17,https://www.reddit.com/r/learnprogramming/comments/3deheo/a_jpg_file_i_have_is_1407kb_large_i_open_up_the/,0,learnprogramming
pgod9t,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code SEP2021FREE","https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: SEP2021FREE

https://www.udemy.com/course/automate/?couponCode=SEP2021FREE

This promo code works for 3 days (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to SEP2021FREE2 in 3 days, and that code will work for another 3 days.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1517,98,AlSweigart,2021-09-02 19:02:12,https://www.reddit.com/r/learnprogramming/comments/pgod9t/automate_the_boring_stuff_with_python_online/,2,learnprogramming
zakp3g,"A new way to learn: I asked OpenAI ""Explain Quicksort in the style of Dr. Seuss""","Once upon a time in a place far away,  
There was a little algorithm named Quicksort, okay?

Quicksort was a clever little guy,  
He knew just what to do when numbers came by.

He'd pick a number, big or small,  
And use it to divide and conquer all.

The numbers less than the one he chose,  
He'd put them in one pile, without any foes.

The numbers greater than the one he picked,  
He'd put them in another pile, nice and quick.

Then he'd take the two piles, big and small,  
And sort them just like he did before, that's all.

Quicksort kept on sorting, left and right,  
Until all the numbers were in order, just right.

And when the job was done, and the numbers were sorted,  
Quicksort was quite pleased with himself, he was exalted.

So if you have a pile of numbers, big or small,  
Just call on Quicksort, he'll get them all.",1514,194,fuck_all_cars,2022-12-02 12:22:15,https://www.reddit.com/r/learnprogramming/comments/zakp3g/a_new_way_to_learn_i_asked_openai_explain/,0,learnprogramming
fse88h,"For the next 45 days, all OCI certifications and Oracle Autonomous Database certifications can be taken for free by anyone"," Oracle is offering free access to online learning content and certifications for a broad array of users for Oracle Cloud Infrastructure and Oracle Autonomous Database. This program kicks off on Monday, March 30, 2020, and will be available until May 15, 2020.

https://www.oracle.com/corporate/blog/free-certifications-oracle-oci-autonomous-033020.html",1516,99,oculusshift,2020-03-31 14:50:27,https://www.reddit.com/r/learnprogramming/comments/fse88h/for_the_next_45_days_all_oci_certifications_and/,0,learnprogramming
hpbrl3,I got my first internship as a web developer!,"It really feels like a dream come true! 
On October 2019 I finished my bachelors in Geoinformatics engineering. Had almost zero knowledge about programming. I didn't know where to start! 
Started with theory, Java  fundamentals,DB, Java EE,  and then I started doing a small project implementing CRUD Operations.
During the learning phase I applied for a intern position and I made it through the first interview,but not in the second technical interview.
I knew that it was early for me to apply, but I felt really pessimistic, and until yesterday I had no hope for a web dev position.
During these past few months, I was just learning new things and implementing into my small project. 
But I was into that loophole, where whenever I did something right , I felt that I could become Steve Jobs, and whenever I could fix a bug, I felt like I was the dumbest person in the world. Ups and extreme downs. Because the Covid situation, in my country (eastern europe) , intership are non-existent, and yeah that was another downside for me. But just last week I read an internship opportunity in a good company. I applied but with no hope. For my surprise, I got a call from the company. I was going to be tested for my logical/maths skills, and I got a 80%! Next interview went great, I was really confident and chill! And that was the story of how I got my first internship! 
I am happy and hoping for the best!",1513,75,kleaxy,2020-07-11 15:23:36,https://www.reddit.com/r/learnprogramming/comments/hpbrl3/i_got_my_first_internship_as_a_web_developer/,0,learnprogramming
4oljp8,Calling out all seeders. I've been uploading a few Coursera courses for the past 10 days on kat.cr and more are coming. Contribute by either seeding or downloading the other courses from Coursera.,"**To the MODS:**  This is completely for educational purposes. Please do not delete this thread. These courses are extremely valuable for a programmer.  :)



**Here is what's happening:**   https://www.reddit.com/r/learnprogramming/comments/4ofngk/many_programming_courses_are_about_to_be_gone/

**How to download from Coursera:**

Use this chrome plugin:   https://chrome.google.com/webstore/detail/coursera-downloader/blbnibajlpdhhicnnhgpfkganncmghmk

OR

Use this python script to download quiz+assignments+videos  :  https://github.com/Chillee/coursera-dl-all  


**Big list of courses that will be gone:**

Please use this link to track which courses are being downloaded. I took it from class-central's site and tweaked a little:

https://docs.google.com/spreadsheets/d/1oTmD5K560U2oBbLlerXq-HMSYMXkpiKQyHneZs7SiWQ/edit?usp=sharing

Compiled by class-central.com

**already uploaded the following:**

* Princeton Algo I
* Princeton Algo II
* Stanford's Compilers
* Learn to Program: The Fundamentals (University of Toronto)
* Introduction to Mathematical Thinking: https://class.coursera.org/maththink-2012-001
* Learn to Program: Crafting Quality Code: https://class.coursera.org/programming2-001/lecture
* Natural Language Processing:  https://class.coursera.org/nlangp-001/
* Computer Architecture: https://class.coursera.org/comparch-003
* The hardware / software interface : https://class.coursera.org/hwswinterface-002/auth
* Cryptography I by Dan Boneh: https://kat.cr/coursera-cryptography-i-by-dan-boneh-t11879894.html
* Coding the Matrix: Linear Algebra through Computer Science Applications, Brown University
* Heterogeneous Parallel Programming, University of Illinois at Urbana-Champaign
* Designing and Executing Information Security Strategies, University of Washington


**MEGA UPLOAD SOON**

/u/dxkillr has downloaded a lot of the courses and we will soon get torrent links. For now he will post them on google drive. More info here:  https://www.reddit.com/r/DataHoarder/comments/4ope4q/i_had_promised_to_upload_coursera_courseswell/


I'm uploading individual courses. After June 30, I'll compile all the .torrent files from other users as well and upload them in a separate torrent.

**Directory structure I'm following:**

rootDirectory/

.....lectures/

.....assignments/

.....resources/

.....README.txt



**Some of the assignments are html files with images in them. You can download the file with images in a single html file with this command on linux:**

wget -E -H -k -p [URL]

example:  wget -E -H -k -p http://spark-public.s3.amazonaws.com/programming1/a1/a1.html

**Use these trackers:**

udp://tracker.coppersurfer.tk:6969

udp://tracker.leechers-paradise.org:6969

udp://explodie.org:6969/announce

udp://tracker.opentrackr.org:1337/announce


**Try to include the assignments in the torrent too because without assignments the lecture videos are just theory with nothing to practice. Some of the courses do not have the assignment files available anymore.**

And please do not compress the files. Let the user decide which files to download or not.


You can find my uploaded courses here:   https://kat.cr/user/eru_melkor/uploads/


I didn't think that this many people would care about the courses being lost. Otherwise, I would have uploaded more frequently.


Edit: typos. and course list being updated

**Edit 1:** Thanks for the gold

**Edit 2:**  Kat.cr has been taken down. THe owner has been arrested. So here is all the torrents uploaded by me:  https://drive.google.com/folderview?id=0B8w4z36MO4IGSlM0YkVic2lGZ0k&usp=sharing       If a torrent is not working, then edit the trackers. I've also included a tracker.txt file. Thanks!",1509,276,None,2016-06-17 21:38:20,https://www.reddit.com/r/learnprogramming/comments/4oljp8/calling_out_all_seeders_ive_been_uploading_a_few/,2,learnprogramming
jlmeiy,How exactly do programmers know how to code?,"Let me elaborate, I can go on stack Overflow and search up my problems on there, but how do the people who answer know the answer? Like I’m assuming they got it from their teachers and or other resources. So now the question is how did those teachers/resources know how to do it? Is there like a whole code book that explains each and every method or operator in that specific coding language? I’m guessing the creators of the language had rules and example on how it all works, right? This probably seems like a dumb question but I’m still new to programming.",1511,293,lil_tumors,2020-10-31 17:29:58,https://www.reddit.com/r/learnprogramming/comments/jlmeiy/how_exactly_do_programmers_know_how_to_code/,0,learnprogramming
av3jmm,Some basic tips for newer programmers when it comes to optimizing your code for speed.,"As someone who works in a field where squeezing every last bit of efficiency out of your code.  Speed optimization is a pretty important for me.  I work in computational physics where I am often working with molecular dynamics, monte carlo, etc. codes that can run for hours using up a 200 CPU cores in a single job.  Thus for me 1% inefficiencies are measured in terms of hours. 

I originally told some of these tips in a more verbal format to some newer physics students, but I thought posting a shorter text version of would be good for some newer programmers. 

**1. Make sure you need optimization in the first place.**

A common mistake among beginners is that they attempt to optimize a piece of code when they really don't need to. 

A general rule of thumb.  Speed optimization only becomes important when the time it takes to write the code is much smaller than the time it takes to run the code. When it's the other way around, then comprehensive speed optimization is generally not required and at that point you should prioritize readability, simplicity, and good code organization more than optimization.  

It doesn't matter if it takes 2ms vs 1ms to run your Python script if you are only going to use it a few times.   You could use the script 10,000 times a day and that optimization will only save you 3560 seconds a year (About an hour) in the long run.  So if it takes you more than an hour to make said optimization, it isn't worth it. 

Typically if your total run time is in the range of seconds or less don't worry. Now if it is in the range hours, days, weeks, etc. then it can be worth it.  That's where a lot of my codes land and thus optimization is important for me. 

An exception might be if you are writing code for something that must complete it's job within a specific amount of time in order to function properly. For example micro-controler programming might be an area this can be important. 

**2.  Learn your profiler tools**

This will vary depending on which language you use, but pretty much all of the modern programming languages have some some sort of profiling tool or compiler options that allow you to figure out how smoothly your code is running.  Compiled languages for example often have compiler flags you can use to output time analytics. 

This will tell you where the bottle necks are which is important to actually improving run times. Always keep in mind. If a part of the code consumes 20% of the total run time of the program, then optimizing that part of the code will generally give you at best a 20% speed up.  Though in practice it is often a much lower return than that since 100% optimization isn't always possible.  So make sure to focus on the most time consuming parts first. 

If no part of the code is particularly more time consuming than the other then optimization may not be feasible or at least not easy to do. 

**3.  Learn your language specific optimization tools.**

So if you get through 1 and 2 and realize you do indeed need to optimize your code. The next step is to first ensure you are using the common tools that are easily available to you.  These are often libraries that can perform common tasks using well written algorithms.  These are usually much better than you can probably come up with on your own since in many cases it is written by people who study these things for a living. 

Compiled languages usually have optimization flags at compile time, Python has libraries such as Numpy to help speed up certain operations, etc.  For common operations like matrix opperations common libraries like BLAS, LAPACK, etc. can be helpful.  Your language's standard library can have a lot of useful tools for things like sorting arrays or performing search opperations.

In addition if you are working with languages that allow you to manage your memory.  Learning things such as matrix ordering (IE Row Major vs Column Major) can give massive speed ups.  For example in many C languages they have a row major ordering.  IE this

     for  i=0; i < N 
         for j=0;  j < N 
              A(i, j) = BLAH
         end for
     end for
 
is often faster than this

     for  j=0; j < N 
         for i=0;  i < N 
              A(i, j) = BLAH
         end for
     end for

Where as in other languages (Fortran for example) it is inverted. This has to do with how memory is physically stored and sent to your processor's cache on your computer.  If you are working with a language where you have to manually manage your memory, learning these practices can be helpful. 

**4.  Macro before Micro.**

Now let's say you get through the easy premade optimization tools and still want to squeeze more out of your code.  The next thing to do is to ensure that before you start doing small optimizations, you first ensure you are writing the most efficient algorithms to begin with. An example of a micro change might be something like changing 

              rsq = rx**2 + ry**2 + rz**2

to

              rsq = rx*rx + ry*ry + rz*rz

This can give a small speed up sometimes if the compiler or interpreter doesn't substitute the exponent function with multiplication (a cheaper operation), but in practice it's usually only a little bit of a speed up. The best way to improve speed is to improve your algorithm at a macro level first and making sure you aren't performing unnecessary calculations. 

For example, let's say you need to compute the distances between thousands of points which is common in physics engines.  You could simply write a loop such as this

      for  i=0, i<N-1 
         for j=i+1,  j<N 
              rx = posx(i) - posx(j)
              ry = posy(i) - posy(j)
              rz = posz(i) - posz(j)
              rsq = rx*rx + ry*ry + rz*rz
              #Do other stuff
         end for
     end for

Which would indeed give you all the distance pairs in the system. However this naive way of doing it is not very good for a huge number of objects. This naive algorithm grows at a rate of O(N^2 ) and thus will blow up in your face the more objects you have. If you only care about say a situation where two objects smash into each other (game physics for example) then you only need to care when the distances are small enough to cause a collision. If the objects will only interact if they get within a few meters of each other, then it makes little sense to be computing distances when the two objects at several hundred kilometers away from each other.  Instead you might use an algorithm like a cell list.

https://en.wikipedia.org/wiki/Cell_lists

Which goes through and assigns each object to a bin based on their location in the world (an O(N) operation) and then you only need to compute the distances of the objects that are in the same bin or in neighboring bins.  This gives a run time that is closer to O(NxM) where M is the number of objects inside of a bin which is usually much much smaller than N.  These algorithms perform exceptionally well when the world is sparse (IE most objects are scattered across a large area) and there's even more fancy ones you can find for your purpose.

Plus if you know that an object isn't going to leave a bin in the next set of calculations (Example a car isn't going fast enough to exit one bin in a single frame.) you only need to update the list periodically instead of every step.

In general picking better algorithms at a macro level will net the best results in efficiency than making micro-optimizations.  Efficiency is like playing a game of golf.  You are trying to find the best way to the cup in the least amount of strokes.  

**5.  All else fails, look into parallelization if applicable**

Creating parallel codes is another option to improve performance if improving single threaded performance is a dead end for you.  This can be a pretty open ended study so I probably won't go into too much detail here, but common libraries such as MPI, OpenMP, CUDA, and also the various language specific platforms can help you run your job across multiple threads.

If you are in need of some serious performance, looking into how to use that expensive GPU you got or that 32 core threadripper in your computer can be helpful. 

Be warned though, it is a lot more intensive to learn how to write good parallel code. But the flip side is also there are job positions for people who are experts in it.  So it can be good to have on a resume. 

**6.  It's ok to make micro optimizations, but don't do so at the cost of making your code completely unreadable**

Even in highly optimized codes, readability is still important. When making more minor changes always make sure you can still read the code at the end of the day and also make sure the micro changes actually give a good speed up. Sometimes what you might think will improve the speed of the code doesn't because the interpreter/compiler does things behind the scene you didn't know about. Always check and compare speeds for any changes you make.  Plus make sure you do so in a statistical manner (IE run it more than once and get a good average) 

Making an optimal mess should be avoided unless there simply is no other way.  Which in my experience, is rare. 

Plus always remember, if writing the code is consuming more time than the time saved running the code then it probably isn't worth it.  At the end of the day the whole purpose of speeding up your code is to save time.  But you aren't saving time if you are wasting it writing the code!


Hope that helps.


(Edit: Removing some redundant points)",1503,67,LoyalSol,2019-02-26 19:37:54,https://www.reddit.com/r/learnprogramming/comments/av3jmm/some_basic_tips_for_newer_programmers_when_it/,1,learnprogramming
ut8vbt,Junior developer roughly 5 months in and im on the verge of a mental breakdown," I'm working part time in my first ever developer job and I'm also attending university for my Computer Science degree and I've been miserable, depressed because I feel so overwhelmed all the time, every single task I get given takes so much time for me to even begin to comprehend and I keep falling behind in work, I find even asking coworkers questions hard because it takes me literally an hour or two sometimes to formulate my question in a way that makes sense because I struggle to comprehend my tasks and my assigned tasks are starting to pile up more and more and I have no idea how I'm going to solve them. Everything about the job would be amazing if I was more capable at solving tasks faster but I barely get anything done and it takes me forever, I've started to put in hours off the clock to try and get somewhere and it feels like all I do is work every day and im miserable, should I just call it quits and accept that maybe software development just isn't for me? I don't know what other career path to go down, but I feel like I just can't handle the stress that comes from deadlines and constant complicated tasks being thrown at me one after another and the constant anxiety, fear that everything will come crumbling down on me when I just simply can't get anything done.",1507,140,othxq,2022-05-19 17:44:30,https://www.reddit.com/r/learnprogramming/comments/ut8vbt/junior_developer_roughly_5_months_in_and_im_on/,0,learnprogramming
4h8itj,12 free games to learn programming.,I stumbled upon [12 Free Games to Learn Programming](https://medium.com/@Mybridge/12-free-resources-learn-to-code-while-playing-games-f7333043de11#.ic9fyhgae) on Medium. I think this is a great way for kids and even for adults to learn to code. What are your thoughts? I’m actually thinking about building a game that teaches people to code.,1502,56,amitjyothie,2016-05-01 10:12:33,https://www.reddit.com/r/learnprogramming/comments/4h8itj/12_free_games_to_learn_programming/,0,learnprogramming
g349wq,Advice from my senior developer,"I learned something new today about how VS does things. I said ""OH! I had no idea that was there!""

His response:

>Yeah. Programming is like having a toolbox and once you know what is in there and how to use it the world changes.  Until that point you put many holes in the wall with your head.

I just thought I would pass this on. I like to explain to others that this is 90% knowing that there is something that can be done and 10% memorizing the code for it to be done. No one is ever going to be 100% memorization.

His explanation is a lot better.",1495,136,Krogg,2020-04-17 15:34:47,https://www.reddit.com/r/learnprogramming/comments/g349wq/advice_from_my_senior_developer/,0,learnprogramming
er0jiy,"UPDATE POST: Recruiter told me position I was interviewing for was a Javascript role, turns out she meant Java. I have three days to prepare.","Original post [here](https://www.reddit.com/r/learnprogramming/comments/eldkxh/recruiter_told_me_position_i_was_interviewing_for/). TL;DR: I was preparing over the christmas holidays for an interview that was supposedly going to be in Javascript, but was actually Java.

So I got a lot of good advice from people on this sub on the technical side of learning Java as well as advice on how to do well in the interview process. I actually contacted the recruiter and asked if it were possible to have an extension on the interview to sharpen my Java skills and she said it was fine, so I had a bit less than a week in the end to prepare.

I'm happy to say I got the job! :)

In the end the interview was actually really chill. It was my first ever proper ""whiteboard"" interview and I expected some animosity from the intervewer however that couldn't be further from the truth. She actually guided me through the tasks and it felt like we were working together on the problems as opposed to it being a clinical assessment of my skills.

If I can give any advice to other new grads looking to land their first gig it is to **remember the human aspect of the process**. I think a lot of people look at a technical interview similar to a school exam where if you just memorise certain formulas you are guaranteed to pass. The reality is that the interviewer is looking for so much more than your ability to regurgitate DFS and Quicksort - they want to see who you are as a person. How you respond to criticism, how you attack a problem, your listening skills, your communication skills are all things that you're going to be judged on. In the few hours you'll have in the company of the interviewer you need to be aware of how you're projecting these characteristics.

Anyway, thanks for the help!",1497,97,CriticalImpress,2020-01-19 19:02:48,https://www.reddit.com/r/learnprogramming/comments/er0jiy/update_post_recruiter_told_me_position_i_was/,0,learnprogramming
cqa5ed,A web-scraping guide for beginners,"Having worked in the web scraping industry for a few years I know how easily troublesome it can be to write, maintain and even begin web scraping.

I am currently writing a series of beginners guide about the topic that will hopefully cover every aspect of web scraping.

Part 1 is about many tool and concepts you need to know and understand in order to [begin to scrape without getting blocked](https://www.daolf.com/posts/avoiding-being-blocked-while-scraping-ultimate-guide/).

Part 2, coming out by the end of the week, will be a bottom to top approach about scraping in python with more code. 

Please let me know if you'd like some topic to be covered and if this topic interests you.",1501,117,pijora,2019-08-14 14:06:39,https://www.reddit.com/r/learnprogramming/comments/cqa5ed/a_webscraping_guide_for_beginners/,1,learnprogramming
4vyhca,Here's a list of 450+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2016),"Unfortunately I couldn't fit all the courses here because of Reddit's 40,000 character limit. So I removed older self-paced courses from the list. These courses are always open for registration.

They can be found here:

**[~300 Self Paced Programming and Computer Science courses](https://www.class-central.com/courses/selfpaced?subject=cs%2Cprogramming-and-software-development)**

I have also started categorizing the courses listed here by the programming language they are taught in. You can find the list here:

**[~250 MOOCs categorized by Programming Language](https://www.class-central.com/programming-online-courses)**


This is not the complete list of MOOCs starting in August 2016, just the ones relevant to this community. The complete list of courses starting in August 2016 can be found over at [Class Central (1300+ courses)](https://www.class-central.com/report/mooc-course-report-august-2016/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

NOTE: Unfortunately Coursera has converted many of its courses to 'Premium Grading'. Which basically means that you need to pay if you want to access graded assignments :(. You can also apply for Financial Aid - https://learner.coursera.help/hc/en-us/articles/209819033-Apply-for-Financial-Aid

***BEGINNER(21)***

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [Web Accessibility](https://www.udacity.com/course/web-accessibility--ud891) via **Udacity**|Self paced|NA|NA
[NEW] [Java Programming Basics](https://www.udacity.com/course/java-programming-basics--ud282) via **Udacity**|Self paced|NA|NA
 [How To Create a Website in a Weekend! (Project-Centered Course)](https://www.coursera.org/learn/how-to-create-a-website) via **Coursera**|1st Aug|3|[5★ (1)](https://www.class-central.com/r/5815)
 [Ruby on Rails: An Introduction](https://www.coursera.org/learn/ruby-on-rails-intro) via **Coursera**|1st Aug|3|[3.1★ (48)](https://www.class-central.com/r/4258)
 [Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course)](https://www.coursera.org/learn/build-a-computer) via **Coursera**|1st Aug|6|[4.8★ (11)](https://www.class-central.com/r/3234)
 [Creative Coding](http://www.futurelearn.com/courses/creative-coding) via **FutureLearn**|1st Aug|6|[3.8★ (6)](https://www.class-central.com/r/1850)
 [HTML, CSS, and Javascript for Web Developers](https://www.coursera.org/learn/html-css-javascript-for-web-developers) via **Coursera**|1st Aug|5|[5★ (3)](https://www.class-central.com/r/4270)
 [HTML, CSS and JavaScript](https://www.coursera.org/learn/html-css-javascript) via **Coursera**|1st Aug|3|[4.1★ (13)](https://www.class-central.com/r/4239)
 [Introduction to HTML5](https://www.coursera.org/learn/html) via **Coursera**|1st Aug|3|[4.2★ (28)](https://www.class-central.com/r/4307)
 [Introduction to the Internet of Things and Embedded Systems](https://www.coursera.org/learn/iot) via **Coursera**|1st Aug|4|[3.8★ (5)](https://www.class-central.com/r/4338)
 [Creative Programming for Digital Media & Mobile Apps](https://www.coursera.org/learn/digitalmedia) via **Coursera**|1st Aug|NA|[4★ (10)](https://www.class-central.com/r/529)
 [Introduction to CSS3](https://www.coursera.org/learn/introcss) via **Coursera**|8th Aug|4|[4.6★ (7)](https://www.class-central.com/r/4294)
 [Internet History, Technology, and Security](https://www.coursera.org/learn/internet-history) via **Coursera**|8th Aug|10|[4.7★ (27)](https://www.class-central.com/r/335)
 [Big Data: from Data to Decisions](http://www.futurelearn.com/courses/big-data-decisions) via **FutureLearn**|8th Aug|2|NA
 [Programming and the Web for Beginners](https://www.coursera.org/learn/duke-programming-web) via **Coursera**|8th Aug|4|[3.8★ (9)](https://www.class-central.com/r/4256)
 [Code Yourself! An Introduction to Programming](https://www.coursera.org/learn/intro-programming) via **Coursera**|15th Aug|5|[4.3★ (6)](https://www.class-central.com/r/2938)
 [CODAPPS: Coding mobile apps for entrepreneurs](https://www.coursera.org/learn/codapps) via **Coursera**|15th Aug|8|[5★ (1)](https://www.class-central.com/r/4333)
 [An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/learn/interactive-python-2) via **Coursera**|22nd Aug|4|[4.8★ (40)](https://www.class-central.com/r/3196)
 [Usable Security](https://www.coursera.org/learn/usable-security) via **Coursera**|22nd Aug|7|[2.9★ (8)](https://www.class-central.com/r/1727)
 [An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/learn/interactive-python-1) via **Coursera**|22nd Aug|5|[4.9★ (2815)](https://www.class-central.com/r/408)
 [Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-8) via **edX**|30th Aug|10|[4.6★ (81)](https://www.class-central.com/r/1341)

***INTERMEDIATE(127)***


Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [Google Maps APIs](https://www.udacity.com/course/google-maps-apis--ud864) via **Udacity**|Self paced|NA|NA
 [Concurrency](http://university.adacore.com/courses/concurrency-in-ada/) via **Others**|Self paced|NA|NA
 [Client-Server Communication](https://www.udacity.com/course/client-server-communication--ud897) via **Udacity**|Self paced|NA|NA
 [Data Science Essentials](https://www.edx.org/course/data-science-essentials-microsoft-dat203-1x) via **edX**|Self paced|NA|NA
 [Intro to Progressive Web Apps](https://www.udacity.com/course/intro-to-progressive-web-apps--ud811) via **Udacity**|Self paced|NA|NA
 [Android Basics: Multi-screen Apps](https://www.udacity.com/course/android-basics-multi-screen-apps--ud839) via **Udacity**|Self paced|NA|[4★ (1)](https://www.class-central.com/r/6549)
 [Principles of Machine Learning](https://www.edx.org/course/principles-machine-learning-microsoft-dat203-2x) via **edX**|Self paced|NA|NA
[NEW] [Android Basics: Networking](https://www.udacity.com/course/android-basics-networking--ud843) via **Udacity**|Self paced|NA|NA
 [Responsive Website Basics: Code with HTML, CSS, and JavaScript ](https://www.coursera.org/learn/website-coding) via **Coursera**|1st Aug|4|[3.9★ (20)](https://www.class-central.com/r/4191)
 [Responsive Website Tutorial and Examples](https://www.coursera.org/learn/responsive-website-examples) via **Coursera**|1st Aug|4|[5★ (1)](https://www.class-central.com/r/4356)
 [Biology Meets Programming: Bioinformatics for Beginners](https://www.coursera.org/learn/bioinformatics) via **Coursera**|1st Aug|4|[5★ (5)](https://www.class-central.com/r/745)
 [C++ For C Programmers, Part A](https://www.coursera.org/learn/c-plus-plus-a) via **Coursera**|1st Aug|5|NA
 [Advanced Data Structures in Java](https://www.coursera.org/learn/advanced-data-structures) via **Coursera**|1st Aug|5|NA
 [Algorithms on Graphs](https://www.coursera.org/learn/algorithms-on-graphs) via **Coursera**|1st Aug|NA|[4★ (1)](https://www.class-central.com/r/5479)
 [The Raspberry Pi Platform and Python Programming for the Raspberry Pi](https://www.coursera.org/learn/raspberry-pi-platform) via **Coursera**|1st Aug|4|[3.5★ (2)](https://www.class-central.com/r/4334)
 [Java Programming: Principles of Software Design](https://www.coursera.org/learn/java-programming-design-principles) via **Coursera**|1st Aug|4|[4.7★ (3)](https://www.class-central.com/r/4323)
 [Data Structures Made Easy](https://www.coursera.org/learn/data-structures-optimizing-performance) via **Coursera**|1st Aug|5|[5★ (3)](https://www.class-central.com/r/4203)
 [Ruby on Rails Web Services and Integration with MongoDB](https://www.coursera.org/learn/ruby-on-rails-web-services-mongodb) via **Coursera**|1st Aug|4|[4.8★ (4)](https://www.class-central.com/r/4321)
 [Bioinformatics: Introduction and Methods 生物信息学: 导论与方法](https://www.coursera.org/learn/bioinformatics-pku) via **Coursera**|1st Aug|14|NA
 [App Design and Development for iOS](https://www.coursera.org/learn/ios-app-design-development) via **Coursera**|1st Aug|5|[3★ (2)](https://www.class-central.com/r/4175)
 [Games, Sensors and Media](https://www.coursera.org/learn/games) via **Coursera**|1st Aug|4|NA
 [Foundations of Objective-C App Development](https://www.coursera.org/learn/objective-c) via **Coursera**|1st Aug|4|[3★ (2)](https://www.class-central.com/r/4268)
 [Big Data Modeling and Management Systems](https://www.coursera.org/learn/big-data-management) via **Coursera**|1st Aug|NA|NA
 [Interfacing with the Arduino](https://www.coursera.org/learn/interface-with-arduino) via **Coursera**|1st Aug|4|[4★ (4)](https://www.class-central.com/r/4325)
 [Rails with Active Record and Action Pack](https://www.coursera.org/learn/rails-with-active-record) via **Coursera**|1st Aug|4|[4★ (1)](https://www.class-central.com/r/4197)
 [Text Retrieval and Search Engines](https://www.coursera.org/learn/text-retrieval) via **Coursera**|1st Aug|4|[3.2★ (5)](https://www.class-central.com/r/2734)
 [Web Application Development: Basic Concepts](https://www.coursera.org/learn/web-app) via **Coursera**|1st Aug|NA|NA
[NEW] [Dealing With Missing Data](https://www.coursera.org/learn/missing-data) via **Coursera**|1st Aug|NA|NA
 [Web Application Development with JavaScript and MongoDB](https://www.coursera.org/learn/web-application-development) via **Coursera**|1st Aug|4|[4.2★ (5)](https://www.class-central.com/r/4288)
 [Data Manipulation at Scale: Systems and Algorithms](https://www.coursera.org/learn/data-manipulation) via **Coursera**|1st Aug|4|[2.5★ (4)](https://www.class-central.com/r/4473)
 [Interfacing with the Raspberry Pi](https://www.coursera.org/learn/raspberry-pi-interface) via **Coursera**|1st Aug|4|[1★ (1)](https://www.class-central.com/r/4265)
[NEW] [Agent-Based Modeling in Netlogo](http://abm.complexityexplorer.org/) via **Complexity Explorer**|1st Aug|NA|NA
 [Python for Genomic Data Science](https://www.coursera.org/learn/python-genomics) via **Coursera**|1st Aug|4|[2.4★ (11)](https://www.class-central.com/r/3476)
 [Framework for Data Collection and Analysis](https://www.coursera.org/learn/data-collection-framework) via **Coursera**|1st Aug|NA|[3.5★ (2)](https://www.class-central.com/r/6085)
 [Software Security ](https://www.coursera.org/learn/software-security) via **Coursera**|1st Aug|6|[4.7★ (20)](https://www.class-central.com/r/1728)
 [Introduction to Genomic Technologies](https://www.coursera.org/learn/introduction-genomics) via **Coursera**|1st Aug|4|[2.7★ (10)](https://www.class-central.com/r/3472)
 [Getting Started: Agile Meets Design Thinking](https://www.coursera.org/learn/getting-started-agile) via **Coursera**|1st Aug|5|[5★ (1)](https://www.class-central.com/r/5502)
 [Best Practices for iOS User Interface Design](https://www.coursera.org/learn/ui) via **Coursera**|1st Aug|4|[5★ (1)](https://www.class-central.com/r/4251)
 [Introduction to Python for Data Science](https://www.edx.org/course/introduction-python-data-science-microsoft-dat208x-2) via **edX**|1st Aug|38|[3.8★ (8)](https://www.class-central.com/r/5683)
 [Introduction to R for Data Science](https://www.edx.org/course/introduction-r-data-science-microsoft-dat204x-1) via **edX**|1st Aug|35|[4.1★ (21)](https://www.class-central.com/r/3928)
 [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) via **Coursera**|1st Aug|7|[4.8★ (43)](https://www.class-central.com/r/422)
 [Advanced Styling with Responsive Design](https://www.coursera.org/learn/responsivedesign) via **Coursera**|1st Aug|4|[4.7★ (3)](https://www.class-central.com/r/4190)
 [VLSI CAD Part I: Logic](https://www.coursera.org/learn/vlsi-cad-logic) via **Coursera**|1st Aug|10|[5★ (3)](https://www.class-central.com/r/428)
 [Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) via **Coursera**|1st Aug|6|[4.8★ (10)](https://www.class-central.com/r/4212)
 [Data Warehouse Concepts, Design, and Data Integration](https://www.coursera.org/learn/dwdesign) via **Coursera**|1st Aug|5|[5★ (1)](https://www.class-central.com/r/4230)
 [R Programming](https://www.coursera.org/learn/r-programming) via **Coursera**|1st Aug|4|[2.7★ (209)](https://www.class-central.com/r/1713)
 [The Data Scientist’s Toolbox](https://www.coursera.org/learn/data-scientists-tools) via **Coursera**|1st Aug|4|[3.2★ (141)](https://www.class-central.com/r/1712)
 [Getting and Cleaning Data](https://www.coursera.org/learn/data-cleaning) via **Coursera**|1st Aug|4|[3.4★ (47)](https://www.class-central.com/r/1714)
 [Practical Machine Learning](https://www.coursera.org/learn/practical-machine-learning) via **Coursera**|1st Aug|4|[3.4★ (20)](https://www.class-central.com/r/1719)
 [Exploratory Data Analysis](https://www.coursera.org/learn/exploratory-data-analysis) via **Coursera**|1st Aug|4|[3.8★ (32)](https://www.class-central.com/r/1715)
 [Regression Models](https://www.coursera.org/learn/regression-models) via **Coursera**|1st Aug|4|[2.6★ (27)](https://www.class-central.com/r/1718)
 [Statistical Inference](https://www.coursera.org/learn/statistical-inference) via **Coursera**|1st Aug|4|[2.7★ (26)](https://www.class-central.com/r/1717)
[NEW] [Advanced Algorithms and Complexity](https://www.coursera.org/learn/advanced-algorithms-and-complexity) via **Coursera**|1st Aug|NA|NA
 [Reproducible Research](https://www.coursera.org/learn/reproducible-research) via **Coursera**|1st Aug|4|[3.7★ (22)](https://www.class-central.com/r/1716)
 [Build Your First Android App (Project-Centered Course)](https://www.coursera.org/learn/android-app) via **Coursera**|1st Aug|5|[3★ (1)](https://www.class-central.com/r/5719)
[NEW] [Big Data Integration and Processing](https://www.coursera.org/learn/big-data-integration-processing) via **Coursera**|1st Aug|NA|NA
 [Managing Big Data with MySQL](https://www.coursera.org/learn/analytics-mysql) via **Coursera**|1st Aug|5|[3.8★ (5)](https://www.class-central.com/r/4181)
 [Statistics for Genomic Data Science](https://www.coursera.org/learn/statistical-genomics) via **Coursera**|1st Aug|4|[2★ (2)](https://www.class-central.com/r/3478)
 [Data Structures](https://www.coursera.org/learn/data-structures) via **Coursera**|1st Aug|4|[2★ (2)](https://www.class-central.com/r/5475)
 [Toward the Future of iOS Development with Swift](https://www.coursera.org/learn/iosswift) via **Coursera**|1st Aug|4|NA
 [The Arduino Platform and C Programming](https://www.coursera.org/learn/arduino-platform) via **Coursera**|1st Aug|4|[3.3★ (7)](https://www.class-central.com/r/4206)
 [Data Visualization](https://www.coursera.org/learn/datavisualization) via **Coursera**|1st Aug|4|[3.3★ (14)](https://www.class-central.com/r/2737)
 [Functional Program Design in Scala](https://www.coursera.org/learn/progfun2) via **Coursera**|1st Aug|NA|NA
 [Computer Architecture](https://www.coursera.org/learn/comparch) via **Coursera**|1st Aug|11|[4.5★ (4)](https://www.class-central.com/r/342)
 [Managing an Agile Team](https://www.coursera.org/learn/agile-team-management) via **Coursera**|1st Aug|NA|[2★ (1)](https://www.class-central.com/r/5564)
 [Server-side Development with NodeJS](https://www.coursera.org/learn/server-side-development) via **Coursera**|1st Aug|4|[5★ (1)](https://www.class-central.com/r/4229)
 [Cloud Computing Concepts, Part 1](https://www.coursera.org/learn/cloud-computing) via **Coursera**|1st Aug|5|[2.6★ (17)](https://www.class-central.com/r/2717)
 [Genomic Data Science with Galaxy](https://www.coursera.org/learn/galaxy-project) via **Coursera**|1st Aug|4|[1.8★ (11)](https://www.class-central.com/r/3473)
 [Introduction to Spreadsheets and Models](https://www.coursera.org/learn/wharton-introduction-spreadsheets-models) via **Coursera**|1st Aug|4|[4.7★ (3)](https://www.class-central.com/r/5451)
 [Interactivity with JavaScript](https://www.coursera.org/learn/javascript) via **Coursera**|1st Aug|4|[4.3★ (6)](https://www.class-central.com/r/4295)
 [M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about) via **MongoDB University**|2nd Aug|7|[4.5★ (15)](https://www.class-central.com/r/599)
 [M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about) via **MongoDB University**|2nd Aug|7|[4.4★ (8)](https://www.class-central.com/r/1188)
 [M101P: MongoDB for Developers](https://university.mongodb.com/courses/M101P/about) via **MongoDB University**|2nd Aug|7|[4.8★ (8)](https://www.class-central.com/r/600)
 [M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about) via **MongoDB University**|2nd Aug|7|[4.5★ (8)](https://www.class-central.com/r/475)
 [M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about) via **MongoDB University**|2nd Aug|7|[5★ (4)](https://www.class-central.com/r/1777)
[NEW] [Engineering Maintainable Android Apps](https://www.coursera.org/learn/engineeringandroidapps) via **Coursera**|7th Aug|NA|NA
[NEW] [Agile Planning for Software Products](https://www.coursera.org/learn/agile-planning-for-software-products) via **Coursera**|8th Aug|4|[3★ (2)](https://www.class-central.com/r/4235)
 [Database Management Essentials](https://www.coursera.org/learn/database-management) via **Coursera**|8th Aug|7|[4.3★ (3)](https://www.class-central.com/r/4337)
 [Java Programming: Arrays, Lists, and Structured Data](https://www.coursera.org/learn/java-programming-arrays-lists-data) via **Coursera**|8th Aug|4|[4.3★ (3)](https://www.class-central.com/r/4362)
 [Cryptography](https://www.coursera.org/learn/cryptography) via **Coursera**|8th Aug|7|[4.2★ (6)](https://www.class-central.com/r/1730)
 [Front-End JavaScript Frameworks: AngularJS](https://www.coursera.org/learn/angular-js) via **Coursera**|8th Aug|4|[4★ (3)](https://www.class-central.com/r/4292)
 [Mastering the Software Engineering Interview](https://www.coursera.org/learn/cs-tech-interview) via **Coursera**|8th Aug|4|[5★ (1)](https://www.class-central.com/r/4261)
 [Algorithms on Strings](https://www.coursera.org/learn/algorithms-on-strings) via **Coursera**|8th Aug|NA|NA
 [Responsive Web Design](https://www.coursera.org/learn/responsive-web-design) via **Coursera**|8th Aug|4|[3.3★ (10)](https://www.class-central.com/r/4200)
 [Process Mining: Data science in Action](https://www.coursera.org/learn/process-mining) via **Coursera**|8th Aug|6|[4.3★ (12)](https://www.class-central.com/r/2445)
[NEW] [Client Needs and Software Requirements ](https://www.coursera.org/learn/client-needs-and-software-requirements) via **Coursera**|8th Aug|4|[4.6★ (5)](https://www.class-central.com/r/4302)
 [Introduction To Swift Programming](https://www.coursera.org/learn/swift-programming) via **Coursera**|8th Aug|5|[1.3★ (4)](https://www.class-central.com/r/4248)
[NEW] [Reviews & Metrics for Software Improvements](https://www.coursera.org/learn/reviews-and-metrics-for-software-improvements) via **Coursera**|8th Aug|4|NA
 [Data Management and Visualization](https://www.coursera.org/learn/data-visualization) via **Coursera**|8th Aug|4|[2.4★ (5)](https://www.class-central.com/r/4184)
 [Running Product Design Sprints](https://www.coursera.org/learn/running-design-sprints) via **Coursera**|8th Aug|5|NA
 [Data Analysis Tools](https://www.coursera.org/learn/data-analysis-tools) via **Coursera**|8th Aug|4|[3★ (3)](https://www.class-central.com/r/4169)
 [Managing Data Analysis](https://www.coursera.org/learn/managing-data-analysis) via **Coursera**|8th Aug|1|[1.8★ (6)](https://www.class-central.com/r/4388)
 [Machine Learning](https://www.coursera.org/learn/machine-learning) via **Coursera**|8th Aug|11|[4.8★ (203)](https://www.class-central.com/r/835)
 [Introduction to Big Data](https://www.coursera.org/learn/big-data-introduction) via **Coursera**|8th Aug|3|[2.6★ (27)](https://www.class-central.com/r/4164)
 [Cloud Computing Concepts: Part 2](https://www.coursera.org/learn/cloud-computing-2) via **Coursera**|8th Aug|5|[4.8★ (4)](https://www.class-central.com/r/2942)
 [Cloud Computing Applications, Part 1](https://www.coursera.org/learn/cloud-applications) via **Coursera**|8th Aug|5|[3.4★ (7)](https://www.class-central.com/r/2738)
 [Algorithmic Toolbox](https://www.coursera.org/learn/algorithmic-toolbox) via **Coursera**|8th Aug|5|[4.7★ (6)](https://www.class-central.com/r/5471)
 [Data Visualization and Communication with Tableau](https://www.coursera.org/learn/analytics-tableau) via **Coursera**|8th Aug|5|[4★ (7)](https://www.class-central.com/r/4297)
 [iOS App Development Basics](https://www.coursera.org/learn/ios-app-development-basics) via **Coursera**|8th Aug|5|[4★ (2)](https://www.class-central.com/r/4348)
 [Algorithms: Design and Analysis, Part 1](https://www.coursera.org/learn/algorithm-design-analysis) via **Coursera**|8th Aug|6|[4.7★ (51)](https://www.class-central.com/r/374)
 [Testing with Agile](https://www.coursera.org/learn/agile-development) via **Coursera**|8th Aug|NA|NA
 [Cryptography I](https://www.coursera.org/learn/crypto) via **Coursera**|8th Aug|7|[4.7★ (38)](https://www.class-central.com/r/616)
 [Algorithms: Design and Analysis, Part 2](https://www.coursera.org/learn/algorithm-design-analysis-2) via **Coursera**|8th Aug|6|[4.8★ (16)](https://www.class-central.com/r/426)
 [Java Programming: Solving Problems with Software](https://www.coursera.org/learn/java-programming) via **Coursera**|8th Aug|4|[3.3★ (8)](https://www.class-central.com/r/4305)
[NEW] [Introduction to Software Product Management](https://www.coursera.org/learn/introduction-to-software-product-management) via **Coursera**|8th Aug|2|[4.1★ (9)](https://www.class-central.com/r/4196)
 [Software Processes and Agile Practices](https://www.coursera.org/learn/software-processes-and-agile-practices) via **Coursera**|8th Aug|4|[4.3★ (9)](https://www.class-central.com/r/4187)
 [A developer's guide to the Internet of Things (IoT)](https://www.coursera.org/learn/developer-iot) via **Coursera**|8th Aug|NA|[4★ (1)](https://www.class-central.com/r/6040)
 [Introduction to Meteor.js Development  ](https://www.coursera.org/learn/meteor-development) via **Coursera**|8th Aug|4|[5★ (3)](https://www.class-central.com/r/4328)
 [Hadoop Platform and Application Framework](https://www.coursera.org/learn/hadoop) via **Coursera**|8th Aug|5|[1.9★ (19)](https://www.class-central.com/r/4269)
 [Front-End Web UI Frameworks and Tools](https://www.coursera.org/learn/web-frameworks) via **Coursera**|8th Aug|4|[4.3★ (6)](https://www.class-central.com/r/4240)
 [The Nature of Code](https://www.kadenze.com/courses/the-nature-of-code-ii/info) via **Kadenze**|9th Aug|5|[5★ (6)](https://www.class-central.com/r/3777)
 [Java for Android](https://www.coursera.org/learn/java-for-android) via **Coursera**|9th Aug|4|NA
 [Big Data Analysis with Apache Spark](https://www.edx.org/course/big-data-analysis-apache-spark-uc-berkeleyx-cs110x) via **edX**|10th Aug|5|[4.4★ (39)](https://www.class-central.com/r/3026)
 [Programming Mobile Applications for Android Handheld Systems: Part 2](https://www.coursera.org/learn/android-programming-2) via **Coursera**|15th Aug|5|[4.5★ (12)](https://www.class-central.com/r/3076)
 [Approximation Algorithms Part I](https://www.coursera.org/learn/approximation-algorithms-part-1) via **Coursera**|15th Aug|5|[5★ (2)](https://www.class-central.com/r/5026)
 [Software Architecture for the Internet of Things](https://www.coursera.org/learn/iot-software-architecture) via **Coursera**|15th Aug|NA|NA
 [Beginning Game Programming with C#](https://www.coursera.org/learn/game-programming) via **Coursera**|15th Aug|12|[3.5★ (15)](https://www.class-central.com/r/1031)
 [Programming Mobile Applications for Android Handheld Systems: Part 1](https://www.coursera.org/learn/android-programming) via **Coursera**|15th Aug|5|[4.1★ (35)](https://www.class-central.com/r/1178)
 [Introduction to Neurohacking In R](https://www.coursera.org/learn/neurohacking) via **Coursera**|22nd Aug|NA|NA
 [Algorithmic Thinking (Part 1)](https://www.coursera.org/learn/algorithmic-thinking-1) via **Coursera**|22nd Aug|4|[4.1★ (13)](https://www.class-central.com/r/1725)
 [Global Warming II: Create Your Own Models in Python](https://www.coursera.org/learn/global-warming-model) via **Coursera**|22nd Aug|5|[2★ (1)](https://www.class-central.com/r/5704)
[NEW] [Single Page Web Applications with AngularJS](https://www.coursera.org/learn/single-page-web-apps-with-angularjs) via **Coursera**|22nd Aug|NA|NA
 [Interactive Computer Graphics](https://www.coursera.org/learn/interactive-computer-graphics) via **Coursera**|22nd Aug|8|[3.5★ (2)](https://www.class-central.com/r/2067)
 [Principles of Computing (Part 2)](https://www.coursera.org/learn/principles-of-computing-2) via **Coursera**|22nd Aug|NA|[4.3★ (14)](https://www.class-central.com/r/3198)
 [Principles of Computing (Part 1)](https://www.coursera.org/learn/principles-of-computing-1) via **Coursera**|22nd Aug|5|[4.6★ (24)](https://www.class-central.com/r/1724)
 [Algorithmic Thinking (Part 2)](https://www.coursera.org/learn/algorithmic-thinking-2) via **Coursera**|22nd Aug|NA|[4.4★ (8)](https://www.class-central.com/r/3200)
 [Developing Intelligent Apps](https://www.edx.org/course/developing-intelligent-apps-microsoft-dat211x) via **edX**|29th Aug|NA|NA

***ADVANCED(22)***

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [Bioconductor for Genomic Data Science](https://www.coursera.org/learn/bioconductor) via **Coursera**|1st Aug|4|[3.3★ (3)](https://www.class-central.com/r/3475)
 [Introduction to Natural Language Processing](https://www.coursera.org/learn/natural-language-processing) via **Coursera**|1st Aug|NA|[3.8★ (6)](https://www.class-central.com/r/3332)
 [Genome Sequencing (Bioinformatics II)](https://www.coursera.org/learn/genome-sequencing) via **Coursera**|1st Aug|4|[5★ (3)](https://www.class-central.com/r/3290)
 [Probabilistic Graphical Models](https://www.coursera.org/learn/probabilistic-graphical-models) via **Coursera**|1st Aug|11|[4.4★ (10)](https://www.class-central.com/r/309)
 [Machine Learning With Big Data](https://www.coursera.org/learn/big-data-machine-learning) via **Coursera**|1st Aug|4|[1.8★ (10)](https://www.class-central.com/r/4238)
 [Relational Database Support for Data Warehouses](https://www.coursera.org/learn/dwrelational) via **Coursera**|1st Aug|5|NA
 [Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/learn/dna-analysis) via **Coursera**|1st Aug|4|[4.5★ (16)](https://www.class-central.com/r/3289)
 [Algorithms for DNA Sequencing](https://www.coursera.org/learn/dna-sequencing) via **Coursera**|1st Aug|4|[4.5★ (16)](https://www.class-central.com/r/3433)
 [Modeling Discrete Optimization](https://www.coursera.org/learn/modeling-discrete-optimization) via **Coursera**|1st Aug|8|[4.8★ (4)](https://www.class-central.com/r/3692)
 [Graph Analytics for Big Data](https://www.coursera.org/learn/big-data-graph-analytics) via **Coursera**|1st Aug|4|[2.4★ (5)](https://www.class-central.com/r/4249)
 [Machine Learning Foundations: A Case Study Approach](https://www.coursera.org/learn/ml-foundations) via **Coursera**|1st Aug|6|[4.2★ (29)](https://www.class-central.com/r/4352)
 [Practical Predictive Analytics: Models and Methods](https://www.coursera.org/learn/predictive-analytics) via **Coursera**|1st Aug|4|[2.5★ (2)](https://www.class-central.com/r/4341)
 [Hardware Security](https://www.coursera.org/learn/hardware-security) via **Coursera**|1st Aug|6|[3★ (9)](https://www.class-central.com/r/1729)
 [Parallel programming](https://www.coursera.org/learn/parprog1) via **Coursera**|1st Aug|NA|NA
 [Machine Learning: Regression](https://www.coursera.org/learn/ml-regression) via **Coursera**|8th Aug|6|[4.7★ (13)](https://www.class-central.com/r/4289)
 [Text Mining and Analytics](https://www.coursera.org/learn/text-mining) via **Coursera**|8th Aug|4|[3.7★ (6)](https://www.class-central.com/r/2736)
 [Machine Learning: Clustering & Retrieval](https://www.coursera.org/learn/ml-clustering-and-retrieval) via **Coursera**|8th Aug|NA|[4.5★ (2)](https://www.class-central.com/r/4313)
 [Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems) via **Coursera**|8th Aug|8|[3.6★ (19)](https://www.class-central.com/r/1029)
 [Machine Learning for Data Analysis](https://www.coursera.org/learn/machine-learning-data-analysis) via **Coursera**|8th Aug|4|[3★ (3)](https://www.class-central.com/r/4354)
 [Approximation Algorithms Part II](https://www.coursera.org/learn/approximation-algorithms-part-2) via **Coursera**|15th Aug|4|NA
 [Machine Learning: Classification](https://www.coursera.org/learn/ml-classification) via **Coursera**|22nd Aug|7|[4.8★ (6)](https://www.class-central.com/r/4219)
 [Pattern Discovery in Data Mining](https://www.coursera.org/learn/data-patterns) via **Coursera**|29th Aug|4|[2.2★ (19)](https://www.class-central.com/r/2733)",1488,68,dhawal,2016-08-03 13:30:02,https://www.reddit.com/r/learnprogramming/comments/4vyhca/heres_a_list_of_450_free_online_programmingcs/,1,learnprogramming
nnz93x,Programming as a bedridden quadriplegic...,"Hello everyone. 

I am a lifelong tech enthusiast and even owned my own tech support business at one point. The business failed simply because people weren't comfortable with a severely physically disabled person working on their equipment. This was about 15 years ago. Since then my disability has become more severe, to the point where I am bedridden and control my computer entirely with my eyes. This has made many aspects of tech support, gaming, graphic design, and other tasks extremely difficult to impossible. However, my love for technology still remains, and I have nothing but time on my hands, now more than ever. 

I have been looking for a new hobby/skill to learn that can provide me with something fun and interesting to pass the time while also keeping my brain active. Programming continues to come to mind, as it also has potential for monetary gain down the road if everything goes well. I just recently found this subreddit, and have been reading quite a few inspiring success stories from others who, like myself, began with zero prior knowledge in the coding/programming/development fields. 

I think I am going to give it a shot. The worst that can happen is I don't enjoy it. Before I do, I would like to ask this awesome community a few questions and get some additional feedback that will get my journey off on the right foot. 

1. Do you think typing speed is **CRITICALLY** important? Remember, all my typing is done by looking at an on-screen keyboard. I'm not extremely slow, but I definitely wouldn't be considered fast by any means.
2. I have found myself having some decision paralysis (no pun intended), and can't decide where to start. I have read numerous articles, posts, and watched YouTube videos discussing the ""best"" path, but they either contradict each other or give the generalized ""just pick your favorite and go for it!"", which further exasperates my problem. **ANY REAL WORLD EXPERIENCE FEEDBACK WOULD BE APPRECIATED.** Web Development to Python to Java is what I'm slightly leaning towards. I already purchased courses for each on Udemy, but I'm open to other options.
3. What are your tried and true learning platforms, tips, tricks, and etc.? **DO YOU HAVE A FAVORITE TEACHER?** 

I guess that's it for now. If you can think of any additional suggestions, recommendations, questions, or anything else that I failed to mention above, please don't hesitate to comment below or shoot me a DM. Any and all communication is greatly appreciated! Thank you for your time and assistance. Enjoy your weekend! 

\-Dizz05",1491,196,Dizz05,2021-05-29 23:55:04,https://www.reddit.com/r/learnprogramming/comments/nnz93x/programming_as_a_bedridden_quadriplegic/,0,learnprogramming
qvau4j,"I quit my career to go to a bootcamp, and just started a full-time dev job. For anyone else trying to get into Programming careers, I believe in you! Here's my stats.","**Disclaimer:**

* This post is just meant to encourage people who are trying to get into a Programming career with non-traditional backgrounds, and fight any survivorship bias. I'll be sharing my experiences and stats through the job application process, and stuff I think could help.
* My point-of-view will be described from getting into Full Stack Web Development. Feel free to AMA!

**About Me:**

* I quit my job in March to totally switch up careers and go to a bootcamp, with hopes of getting a job ASAP. My career before I quit was Executive Assistance, with 9 YoE, TC was $67.5k salary.
* Though I have my AAS, it's from 2009 and I've *literally never* held a job in a CS field, nor had any formal Software Development schooling before this year, but I acknowledge it's benefit on paper. Before this year, I had taken some some courses on Codecademy.
* I'm 33 y/o, live in major city in Northern Midwest USA, and attended a local bootcamp program that started in late-March. I graduated from it in mid-August, and started a full-time dev job at the start of November.
* Current TC is $55k salary for a 3-month probationary period, then $60k salary after.

**The Job Hunt:**

* It was tough. I would agree with the sentiment that the new grad/entry-level hiring field is saturated -- but I could be biased, as I see my school churn out new grads every two months.
* I applied to over 220 postings over the ~~2.5~~ 3.5 month period before I accepted an offer.  Edit: I started applying to jobs a month before graduation.  Out of that, I had roughly 20 series of interviews (not counting initial phone screenings, only video meetings/etc.), and roughly 8 take-home assessments/challenges/etc. There was probably 4-5 interview series where I made it to the final stages but wasn't selected.  Nobody asked me to do any white board solves.
* I'm about in the middle of my graduating class to get employed -- I know people who've done it faster, and people who are still looking.
* The job I accepted was the first and only 'real' offer I received  (meaning it's a wage I considered acceptable and from a legit company).  I did receive a couple of lowball and/or sketchy offers, some from predatory places, some pretty comical, that I rejected.

**Things That Helped Me:**

* These are obvs specific to me and my scenario, but wanted to share them anyways.
* Part-time gig: My school links us with clients and one of the capstone graduation projects is building a live application for them in real-world use for their needs (for free). After my team graduated, our client 'hired' us on as contractors to keep the app going and add new features. I quote 'hired' because since we're fresh grads, we quote our work at dirt cheap prices, but it's a great resume builder. Basically I can say I'm 'freelance team lead' since graduation, when it's actually only been like 50 hours of work over three months.
* Part-time Gig: I also accepted a part-time gig (\~4 hours or less a week) in October doing contract Code Review for their current students code. Again, a great resume builder.
* Volunteer Work: I'm in a mentorship program with my school. It's only one hour a night every other week, and it's cool to see how fresh students are doing. Again, a great resume builder.
* I'm continuing to do all of the above in addition to my FTE.

**Things I Know ""Pretty Well"":**

* Web development & Restful API's.
* React/Redux/Saga, PostgreSQL, Material-UI, and GitHub.
* Documentation and written skills. Helped my resume and portfolio stand out, IMO.
* Relaxed and friendly teamwork.

**Experience That Would've Helped the Job Hunt:**

* Object-oriented programming (TypeScript, C#, etc.).
* All forms of testing (unit, integration, automated, etc.).
* Cloud services (AWS, Azure, etc.).

**My Advice To Other Junior/Entry-Level/New Grad Developers:**

* Find a way to make yourself different from the rest of your classmates, and fast! IMO the best way to do that would be learning different/other in-demand tech stacks or languages, but it could very well be a good story for why you're here now too.
* Keep your LinkedIn, resume, portfolio, and GitHub ***polished and in-sync!*** If you don't have each one of those things, I'd recommend building them out. Every new application I built goes onto my Portfolio and GitHub profile. All new experience goes onto my LinkedIn and resume. Make sure your written skills convey what you want to!
* Apply, apply, apply! When you're fresh outta school, it's a numbers game. Hit every posting on the job sites, but if it's a job you ***really want***, also go to the company's direct website and look at their careers page to apply there. Hundreds of people hit the Indeed posting, but maybe only tens hit the careers page, so you'll have better odds.
* Do small things that can help build your resume and portfolio. Take small gigs, volunteer to mentor other grads, build small projects, just do whatever to show people you're out there learning and coding.
* Lean on your alumni community! Go to the meet-ups, network, and make friends who are in similar situations or careers. It's not always *what* you know, but *who* you know that could be the deciding factor.

**My Questions To Experienced Developers:**

* Do you get annoyed with your companies tech stack, or rather, do you wish they'd use something you really like and/or newer? If so, how do you handle that?

Of course, take everything I have to say with a grain of salt. Skills, luck, and determination will play a lot more into your search than my stories could. Thanks for reading, and good luck!

&#x200B;

Edit:  Thank you all for the awards!  It's my first time ever being awarded something on Reddit, I really appreciate it! <3",1493,171,UnoMaas,2021-11-16 15:53:25,https://www.reddit.com/r/learnprogramming/comments/qvau4j/i_quit_my_career_to_go_to_a_bootcamp_and_just/,0,learnprogramming
bcsncm,does anyone else alternate between the mindset of “wow I suck at this ill never find a job” vs “hey im not that bad”?,"Hi everyone.

First let me say I am so proud of where I started at the beginning of my programming journey to where I am now. I’ve actually managed to create a crud application, a rest application, a game of blackjack app, and a weather tracker. 

So i think of the things Ive made and go “hey. you know what, im pretty good. I can definitely find a job”

But then I start looking at job offers online and I start to feel intimidated and think “I wont even be called for an interview im not ready yet”. Its like this constant battle between self confidence and doubt.

has anyone else experienced this and how have you dealt with it?",1491,131,Slayriah,2019-04-13 17:04:29,https://www.reddit.com/r/learnprogramming/comments/bcsncm/does_anyone_else_alternate_between_the_mindset_of/,0,learnprogramming
lohqyq,Looking to coach/mentor on discord (for free) students who are trying to get hired as developers.,"Hi. I'm a security guard. Or, I was...

I got my degree in criminal justice, and then did nearly 8 years in retail loss prevention for a mega-corp retailer.

It sucked. I do not recommend it.

I taught myself to code through udemy, self-study, and a lot of hard work.

I got my first job as full stack dev in PHP/mySQL in 2018, and now I work full time as a front end developer in Angular, Node, firebase, etc for a major sports media company.

I have this really dumb idea that I want to help other people get a job as developers too.

===

Where my dumb idea came from:

My job is hiring for a junior front end dev. And we are getting a TON of applicants, over 60 a week! But we keep rejecting them for being just 20% short of the goal.

These are smart candidates who are just missing that last 20% that sets them above the pack.

===

Are you applying to jobs? Are you not getting calls back? Are you attending interviews but not getting the job? Do you have a portfolio/github we can look at together? Are you willing to share it sorta-publicly?

Are you a dumb security guard, tired of making $17/hour, and willing to do anything it takes? You can come too.

If any of this sounds like you... come hang. Lets get your ass a job.

[https://discord.gg/Xgs6MgKx](https://discord.gg/Xgs6MgKx)",1489,153,None,2021-02-20 21:57:41,https://www.reddit.com/r/learnprogramming/comments/lohqyq/looking_to_coachmentor_on_discord_for_free/,0,learnprogramming
f1v0yv,Started my first dev job today,"Always been self taught. Three years ago, looking at a scary future with a new boss that totally hated my guts, I chose (at the ripe old age of 41) to start attending evening classes at a business school in Copenhagen to “learn programming for real”.

Last year I got canned (predictably, he REALLY hated my rational look on things) and started going all in.  Learned a lot about the craft of developing more than the “let’s start here and see where this takes us” approach. 

I got into some projects with classmates, did reasonably well in class and I’m due to finish an associates degree this summer. 

After looking for a job for 14 months I got 2 interviews in one week, and (apparently) aces both. The first place (okayish job on front end) invited me for a second interview, but the second company (dream job on backend, ASP.NET Core) called me 2 hrs after the interview and offered, I accepted on the spot and cancelled the second interview at the first place. 

Just started today, and let me tell you... it feels like coming home. Not just the job itself, but the chatter in the team room, the (EPIC) conversation at lunch, down to the clothes people wore. Nerd heaven I tell you.

Edit; thanks for all the support I’ve received since posting this. I’m on my way to work right now and although I couldn’t sleep last night I’m SO ready for day 2. 

Also on my English skills; I’m a huge geek - dice and paper role playing, modded Minecraft and electronics - and most of geek culture in Denmark is not translated so it’s kind of a prerequisite ;-)",1484,141,Tureni,2020-02-10 19:03:37,https://www.reddit.com/r/learnprogramming/comments/f1v0yv/started_my_first_dev_job_today/,0,learnprogramming
o0uoyn,Finally got a Job in 2 years! Don't give up!,"Just wanted to remind those who have been practicing and trying I'll tell you stick with it and you'll eventually get a job. I know it's hard and disheartening and will make you want to give up and work at the local fast food place. It took 2 long hard years on my mental health and it also hurt my pride a bit. 

&#x200B;

But I coded anytime I could while taking care of my newborn till he now and he's 2 and half. I also was lucky enough to have a girlfriend now fiance to have my back.

I eventually got let go at the company I worked with for 2 years cause the new manager said he couldn't rely on me in the busy season if I got a Job as a programmer. I was Scared shitless. 

But my family had my back and if you have a nice support system that believes in you GO FOR IT! Believe in them as they Believe in you!

Also Thank you r/learnprogramming r/django r/learnjavascript these communities are the most helpful People on the web! The information and kindness you guys offer I could never repay you.

So don't get disheartened if you haven't found a job in 3 months or 6 months I know you see a lot of those posts and Though I'm happy for them and I'm sure a lot of you are too that are learning programming. But know those are rare and usually you get connections either from friends or family a coding bootcamp co-ed. 

&#x200B;

You do You and don't give up. This is your journey and your pace. and Apply to jobs everyday when you first wake up.",1490,83,Penispump92,2021-06-16 02:33:10,https://www.reddit.com/r/learnprogramming/comments/o0uoyn/finally_got_a_job_in_2_years_dont_give_up/,0,learnprogramming
m5fz6w,Resources to learn web development with awesome github repositories,"Github repositories for Web Development

- Awesome cheat-sheets for [popular programming languages, frameworks and development tools](https://github.com/LeCoupa/awesome-cheatsheets)

- A collection of all the resources github author use to [keep up with the latest in front-end web development](https://github.com/tommcgurl/frontend-resources)

- Curated list of [project-based tutorials](https://github.com/tuvtran/project-based-learning)

- A collective list of [free APIs for use in software and web development.](https://github.com/public-apis/public-apis)

- Collection of [helpful tips and tricks for VS Code](https://github.com/microsoft/vscode-tips-and-tricks)

- Free resources for [learning Full Stack Web Development](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer)

- Everything that makes [working with databases easier](https://github.com/mgramin/awesome-db-tools)

- The best [design tools and plugins](https://github.com/goabstract/Awesome-Design-Tools)

**Ref**:  [Link to Pratham's original Twitter post.](https://twitter.com/Prathkum/status/1370736249657511938?s=19)


**Edit:**    
    Thank you for  helpful award(s)

Genuinely appreciated. Glad you find these references useful. 

Thankful to all Github repositories authors which are listed here and Special thanks to Twitter.com @Prathkum the reference tweet.

- **More Edit**    
    Thank you stranger for wholesome award, being helpful medal. 

- **Edit plus plus**    
    Thank you for silver medals.

- **Edit Platinum**    
    Thank you for a platinum medal.


- ###Personal Loud Thoughts of gratitude.   


    Truly genuinely sincerely honestly appreciate you all are receiving these curated learning resources and may find it very educational and practical useful. 

    All of you here now together sincere appreciation for your continuous learning drive, engaging comments and contribution to grow these learning  material with resources you already know. Thank you.     

You r/LearnProgramming community are the best. Sending positive vibes to you all knowledge seeker, resource sharer and growth mindset fellow learners. Please stay inspired, light the path with your authenticity and mark this world lovable collaborative kindness filled with your steps. 

Thank you,",1482,36,reddit007user,2021-03-15 08:19:25,https://www.reddit.com/r/learnprogramming/comments/m5fz6w/resources_to_learn_web_development_with_awesome/,0,learnprogramming
ppu8cc,"10 year UI/UX developer fails another ""Code Challenge"" Current record 2-5","I hope this post helps somebody out there who is down about not passing that ""code challenge"" you were given as the last step before you were supposed to get hired. I have 10 years doing all kinds of front-end, UI/UX work and have consistently failed a majority of the code challenges I have faced.

I decided to post all my failings (and meager winnings) so you have an idea of how companies put these together, what they look for and why I have failed or succeeded in them. Even if you get a little bit of good advice out of this, it will be well worth it.

Also, as a bonus, I will be including the actual mockups, directions, and repo's I used for these challenges so you have hard proof of what I've experienced and can pour over the decay of these long since past failures.

The Nerdery - first attempt

**Directions**: They give you a mock and you're supposed to code it up so that its ""pixel perfect"". This was during the heady days of responsive design just coming into popularity. The directions just said to code it so that its static, and make sure its ""pixel perfect"" and make sure the image gallery at the top works since they will test it with JS turned off. You had 7 days from the time they send you the email to get it done and get it back to them.

This was a google place before everybody wanted to be like google. Free Red Bull, food, video games, etc. As cool a place as you'd want to work. They boasted their acceptance rate of developers was lower than Harvard admissions and just as hard to get in - apparently.

**What I did**: Static? Shit bro, I've been doing responsive design for two years, fuck that - I'm making this baby responsive and impress all you elitist bro's over there! Bad move. Struggled getting it to be responsive. Rushed it, failed hard core. Got a really nasty email from a senior dev who reviewed it, which was spot on.

**What I learned**: Follow directions, don't try and impress anybody, concentrate on what they are looking for. Classic blunder on my part to just do what they wanted instead of going off script

Here's an image of the mock they give you: [https://github.com/ohNegative/theNerderyChallenge](https://github.com/ohNegative/theNerderyChallenge)

**SCORE - 0-1**

&#x200B;

The Nerdery - second attempt

**Directions**: Same as above. Had completely written them off after the first epic failure. By chance, I had a Nerdery recruiter call me up and say they saw my file and wondered if I wanted to try the code challenge again since they were impressed with the two interview I did prior. She said I would skip the interviews and just do the code challenge.

**What I did**: Knew what to do. Coded it up strictly static, used a Photoshop overlay to make sure everything from the menus, to the fonts, to the gradient was ""pixel perfect"". I took three days to go over the whole thing with a fine toothed comb. Looked perfect, worked perfect, was stoked to feel like I was going to pass.

**What I learned**: Recruiter called and said I had passed the challenge. Then she started talking about salary. Then she started out by pimping all their ""freebies"" then ended with an offer that was literally $30K less than what I was making. She tried to sell me on the whole ""The is the Google of the Midwest, its a huge deal to have our company on your resume!"". I was like, ""Yeah, I gotta think about it and get back to you."" Two days later, get an email from a senior dev saying I failed the challenge because I happened to use a few div id's and they only use classes. My sprites were 1 pixel off and they wanted it to be ""pixel perfect"" so I failed.  I learned sometimes when you win, you still lose.

**SCORE - 0-2**

&#x200B;

Small Web Agency (their name has been lost to the sands of time)

**Directions**: Last interview. I had two previous interviews and the agency was looking for a front-end developer. Standard HTML/CSS and jQuery stuff. The bigger JS frameworks were just coming out, but very few places had started using them. Last interview in a starkly dark, huge conference room with one of their senior devs. Go through all the technical stuff for about 45 minutes. Then tells me to go up the whiteboard and write out a constructor function. I'm like, ""What? I know what you're talking about, but I use jQuery for UI/UX stuff. We just talked for 20 minutes about this."" Insisted I do it anyways.

**What I did**: Stared at him with a blank stare after asking me to do it. I couldn't do it and came back and sat down. He didn't even offer any hints or suggestions or ask me to write it with pseudo code. This was the ""pass or fail"" part of his interview process.

**What I learned**: After I sat back down dejected, he didn't say anything, and I finally stood up and started packing up my stuff and he said, ""I'm looking for a full stack Javascript developer, I'm sorry."" and I said, ""Yeah, me too, thanks for wasting my time thinking you wanted someone with more UI/UX experience."" Learned sometimes it's not you, the company just doesn't know what they're looking for.

**SCORE - 0-3**

&#x200B;

Ameriprise Corporate

**Directions:** Went through three previous interviews, last step was an in person code challenge. I was told by two senior devs you get brought into an office and they essentially give you a component and you have roughly 45 minutes to get as far as you can with it. I was warned not to go for the Bootstrap or framework approach, because you'll fail right away. Its a challenge to see how well you can code from scratch.

**What I did:** They gave me the design. A navigation item with four icons and text underneath the icons. Has to be responsive and have multiple breakpoints for mobile. I got to work and they also told me about 15 minutes in they wanted me to use the data icon attribute approach for the icons and took a few minutes to show me how it works since I had never used that approach. Did my best with the crappy laptop they gave me and struggled for a bit before finally get two of the four done and had been using flexbox so no media queries needed. They said I actually got farther than most candidates and I shouldn't be discouraged, I did a great job.

**What I learned:** Got the call a few days later. They took another dev over me but were impressed enough with me that they actually contacted me about 8 months later and offered me an open position they had. I had just started a new contract so I had to turn them down. I consider this a win, even though I did initially lose the job to another dev.

Here is the repo: The challenge is the index page. I added some other flexbox stuff for fun: [https://github.com/ohNegative/flexbox-fun](https://github.com/ohNegative/flexbox-fun)

**SCORE - 1-3**

&#x200B;

Olson Advertising which is now ICF Olson

**Directions:** Went through a quick phone screen before an in person interview. This was a short-term contract for their holiday stuff they were doing for Target's online sales and at the time, they were betting on landing their now defunct Canadian division so I was told it could very well turn into something way more lucrative and a possible contract to hire opportunity. Went through all the questions and I really wasn't taking this very seriously. I had other offers I was mulling and went in cold. Towards the end, the woman manager shows me a product landing page. Asks me to go up to the white board and show me in pseudo code how I would code this particular layout.

layout was similar to this page: [https://www.target.com/c/gift-ideas-for-men/-/N-x738m](https://www.target.com/c/gift-ideas-for-men/-/N-x738m)

**What I did:** I go up the whiteboard and start laying out columns, how wide they would be (I created a fluid layout first with percentages, then another responsive layout) with a 12 column grid with some quick media queries. She asked a few questions about the layout and brought in one of their devs. Responsive design was still fairly new so this guy really had no idea what he was looking at or if the code would even work and said as much. I kind of asked him, ""You're not using responsive design yet?"" and he kind of blankly started at me and said, ""No, we're using jQuery mobile so at a certain width, it just goes straight to a mobile layout."" He started asking more about responsive and it got a little tense (me championing responsive while he sat and defended their mobile approach) until the manager said he could go, that's all she needed. They she said they would be in contact with me and thanked me for coming down.

**What I learned:** Recruiter called the next day and asked what happened and I told her it got a little tense, but not a big deal. Recruiter said the manager was worried I was too much of an ""alpha developer"" and she would have problems with me - so they passed. I learned to just stay in my lane, don't act like you know everything and just go along with whatever technology they're using and don't try to come off like you know everything.

**SCORE - 1-4**

&#x200B;

Korterra Underground Utility Company

**Directions:** Went through two phone screens and was told you had to do a code challenge and then one final interview with the entire team and owner. The challenge was pretty specific. They had a list of JSON data you had to make an http call to, put the data in a table, then have a search function and oh yeah, it has to be responsive.

**What I did:** I got the directions and they gave me two days to get it done. I had been dabbling with Angular and thought this was a perfect use of it. I could use the http service to make the call, then use their filter to do the search. I could use bootstrap to make it responsive and then use Chris Coyier's approach to responsive tables ( [https://css-tricks.com/responsive-data-tables/](https://css-tricks.com/responsive-data-tables/) ). I had it working pretty quickly. Their JSON data had some minor issues I had to correct, but once it was coming in ok, the rest was pretty easy.

They brought me in for the final interview. Recruiter came with. I was being submitted at $95K for an FTE spot. Went through the final interview with the team which was laid back and pretty easy. Softball question like, ""Tell me what you think about fixing bugs."" stuff like that. Final interview is boss level. Sit down with the owner and after a few questions, takes a big sigh and says, ""We can't bring you in for $95K, sorry."" I used to be in sales, I get it, its the lowball approach. I ask him to give me some numbers. He brings in his other right hand guy. He says, ""Let's talk numbers then."" go back and forth between owners office and this other guy's office. Trying to get a number out of either is like pulling fucking teeth. They say they can offer me $70K and then start telling me they don't want me using this as a stepping stone to a better salary somewhere else. All the devs here are lifers, most have been there 10 years plus. We expect the same of you if we're going to hire you full-time.

**What I learned:** Another one of these when you win you still lose situations. I was already making $85K so I'm thinking I'm at the top of my game. I can get more somewhere else, no way I'm taking a $15K pay cut for this job. After quite a bit of back and forth, I said I'd call them. They I let the recruiter have it. Four fucking interviews previously and four hours wasted with all the back and forth that day. He said they knew what he submitted me at, he got screwed too. Considering where I ended up going and the last 8-9 years, I'm kind of regretting I didn't take this gig to be honest.

Here's the JSFIddle with the code I wrote: [http://jsfiddle.net/733rf/](http://jsfiddle.net/733rf/)

**SCORE - 2-4**

&#x200B;

Camping World

**Directions:** Went through two phone screens. One was a general one, then the other was semi-technical. The other UI/UX person wasn't around so I got the server guy asking me questions. After the second interview, I get the assessment on a Friday at like 4pm. It's SUPER vague about what they want me to do. They sent over a full blown website mock with these directions:

*The goal here is for him to take 2-3 sections of this page (for instance, The Additional Standard Features, Why Customers are Choosing, About Section) and convert it into a webpage. He can submit the HTML to us and we will review. The ask is intentionally vague, with much more to do with this site if he chooses.*

Since this was pretty recent, if you want the link to the mock, I'll share it with you.

**What I did:** I had to go out of town for the weekend. Suddenly the recruiter is all over me, asking when I'm going to be done with it. Tell her I'm out of town. She keeps emailing me. Get back Sunday night, take a look at the mock and start deciding how to go about this. I'm already working full-time and carving out time for this is going to be hard. I whip through it, I separate each section out into its own component, use a minimal framework and blast through it in two days. Meanwhile, recruiter still riding my ass about when I can get it back to them. I figured separating the components out on their own page qualifies for what they're looking for. I code all three components from scratch with a 12-col grid and its completely responsive. I email them back with some short description about what I did and how I tested it. I have little or no confidence in what I did and honestly at this point, IDGAF since I've been burning the midnight oil straight for two days - not getting much sleep.

**What I learned:** If you have any doubt, ask for more specifics. Don't phone it in like I did. Once I told the recruiter it was done, but not really my best work, suddenly she said I could have more time, or as much time as I needed. It was enough to piss me off and just say to send it to them anyways. Predictably, I didn't pass. The best feedback was a dev who said it wasn't ""responsive"" then adds that it works fine on mobile, but not on tablet resolutions. Gave me a good laugh tbh. I honestly thought the exercise was more about how well I could code from scratch. They wanted a full blown single page mock where someone took their design and made a full page site out of it and ran with css animations and other cool stuff.  Honestly, my heart wasn't in it for several reasons, one of which would've been the $30K pay cut I would've taken in order to accept this job.

**FINAL SCORE - 2-5**

&#x200B;

There you go. All my failures, detailed out for you peeps. Like I said, I hope this helps someone when they get their next code challenge and this helps them some way to get over the hump and get that offer they deserve. I've never been a fan of these things, but they're becoming more and more common, so I hope this helps.

Feel free to IM me if you have any questions. If you wanna be blunt and hammer me for something, feel free, I know some of these I screwed up for various reasons for which I'm 100% responsible.

If you got this far, thanks for reading my diatribe.

&#x200B;

EDIT: Thanks for the all the positive feedback! I really appreciate the comments, I didn't think this would take off, but it felt good after failing another challenge to turn it around and hopefully help someone. ",1482,115,corruptedOverdrive,2021-09-17 05:38:01,https://www.reddit.com/r/learnprogramming/comments/ppu8cc/10_year_uiux_developer_fails_another_code/,1,learnprogramming
10ucf9q,Update: I did 70% of the JavaScript of TheOdinProject,"hi everyone! you probably don't remember me but I was the 15 year old (now 16 🥳) who posted on here 7 months ago talking about me finishing the foundations for The Odin Project. 

I just wanted to come back and give an update, I finished around 70% of the JavaScript section of the Odin Project! I completed the final JavaScript project awhile ago and I just wanted to share my journey so far!

I've decided to pause Odin for now and continue to build projects that aren't directly inspired by the curriculum. 

Thanks to everyone that supported me on my original post, you all were an inspiration to me and I hope this post can inspire others too.

Come check out the portfolio that I created too! 
https://alexi.life

It has my favorite projects that I've built with the help of the Odin Project! Let me know what you think of them :)

EDIT: I can't edit the title 😭 I meant 70% of the JavaScript section on the Odin Project.

EDIT 2: Had to make my portfolio projects read-only because you can't have shit on the internet without it getting fucked with :/ Can still look and try them though.",1485,164,alexionreddit,2023-02-05 13:26:24,https://www.reddit.com/r/learnprogramming/comments/10ucf9q/update_i_did_70_of_the_javascript_of/,0,learnprogramming
pndaba,"I know Python basics, what next?","What to do next after learning Python basics is an often asked question. [Searching for `what next` on /r/learnpython](https://www.reddit.com/r/learnpython/search?q=what+next&restrict_sr=on) gives you too many results. Here's some wonderful articles on this topic:

* [I know how to program, but I don't know what to program](https://www.devdungeon.com/content/i-know-how-program-i-dont-know-what-program)
* [Things you might encounter in your programming journey](https://www.techinasia.com/talk/27-things-started-programming)
* [Techniques for Efficiently Learning Programming Languages](https://www.flyingmachinestudios.com/programming/learn-programming-languages-efficiently/)

## Exercises and Projects

I do not have a simple answer to this question either. If you feel comfortable with programming basics and Python syntax, then exercises are a good way to test your knowledge. The resource you used to learn Python will typically have some sort of exercises, so those would be ideal as a first choice.

I'd also suggest using the below resources to improve your skills. If you get stuck, reread the material related to those topics, search online, ask for clarifications, etc  — in short, make an effort to solve it. It is okay to skip some troublesome problems (and come back to it later if you have the time), but you should be able to solve most of the beginner problems. Maintaining notes and cheatsheets will help too, especially for common mistakes.

* [Exercism](https://exercism.org/tracks/python/exercises), [Practicepython](https://www.practicepython.org/), [Edabit](https://edabit.com/challenges/python3) — these are all beginner friendly and difficulty levels are marked
* [100 Page Python Intro exercises](https://github.com/learnbyexample/100_page_python_intro/blob/main/exercises/Exercises.md) — exercises from my introductory guide
* [Codewars](https://www.codewars.com/), [Adventofcode](https://adventofcode.com/), [Projecteuler](https://projecteuler.net/) — more challenging
* [Checkio](https://py.checkio.org/), [Codingame](https://www.codingame.com/start), [Codecombat](https://codecombat.com/) — gaming based challenges
* [/r/dailyprogrammer](https://www.reddit.com/r/dailyprogrammer) — not active currently, but there's plenty of past challenges with discussions

Once you are comfortable with basics and syntax, the next step is projects. I use a 10-line program that solves a common problem for me — adding `body { text-align: justify }` to `epub` files that are not justify aligned. I didn't know that this line would help beforehand. Found a solution online and then automated the process of unzipping `epub`, adding the line and then packing it again.

That will likely need you to lookup documentation and go through some stackoverflow Q&A as well. And once you have written the solution and use it regularly, you'll likely encounter corner cases and features to be added. I feel this is a great way to learn and understand programming.

* [Practice Python Projects](https://learnbyexample.github.io/practice_python_projects/) — my book on beginner to intermediate level projects
* [Projects with solutions](https://github.com/karan/Projects-Solutions) — algorithms, data structures, networking, security, databases, etc
* [Project based learning](https://github.com/practical-tutorials/project-based-learning#python) — web applications, bots, data science, machine learning, etc
* [Pytudes by Peter Norvig](https://github.com/norvig/pytudes) — Python programs, usually short, of considerable difficulty
* Books:
    * [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/)
    * [Tiny Python Projects](https://www.manning.com/books/tiny-python-projects)
    * [Impractical Python Projects](https://nostarch.com/impracticalpythonprojects) and [Real world Python](https://nostarch.com/real-world-python)
* [/r/learnpython: What do you automate with Python at home?](https://www.reddit.com/r/learnpython/comments/k5k1h0/what_do_you_automate_with_python_at_home/)

## Debugging

Knowing how to debug your programs is crucial and should be ideally taught right from the beginning instead of a chapter at the end of the book. [Think Python](https://greenteapress.com/wp/think-python-2e/) is an awesome example for such a resource material.

Sites like [Pythontutor](http://www.pythontutor.com/visualize.html#mode=edit) allow you to visually debug a program — you can execute a program step by step and see the current value of variables. Similar feature is typically provided by IDEs like [Pycharm](https://www.jetbrains.com/pycharm/) and [Thonny](https://thonny.org/). Under the hood, these visualizations are using the [pdb module](https://docs.python.org/3/library/pdb.html). See also [Python debugging with pdb](https://realpython.com/python-debugging-pdb/).

Debugging is often a frustrating experience. Taking a break helps (and sometimes I find the solution or spot a problem in my dreams). Try to reduce the code as much as possible so that you are left with minimal code necessary to reproduce the issue. Talking about the problem to a friend/colleague/inanimate-objects/etc can help too — known as [Rubber duck debugging](https://rubberduckdebugging.com/). I have often found the issue while formulating a question to be asked on forums like stackoverflow/reddit because writing down your problem is another way to bring clarity than just having a vague idea in your mind. Here's some more articles on this challenging topic:

* [What does debugging a program look like?](https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/)
* [How to debug small programs](https://ericlippert.com/2014/03/05/how-to-debug-small-programs/)
* [Debugging guide](https://uchicago-cs.github.io/debugging-guide/)
* [Problem solving skills](https://ryanstutorials.net/problem-solving-skills/)

Here's an interesting snippet (paraphrased) from a collection of [interesting bug stories](https://stackoverflow.com/q/169713/4082052).

>A jpeg parser choked whenever the CEO came into the room, because he always had a shirt with a square pattern on it, which triggered some special case of contrast and block boundary algorithms.

See also [this curated list of absurd software bug stories](https://500mile.email/).

## Testing

Another crucial aspect in the programming journey is knowing how to write tests. In bigger projects, usually there are separate engineers (often in much larger number than code developers) to test the code. Even in those cases, writing a few sanity test cases yourself can help you develop faster knowing that the changes aren't breaking basic functionality.

There's no single consensus on test methodologies. There is [Unit testing](https://en.wikipedia.org/wiki/Unit_testing), [Integration testing](https://en.wikipedia.org/wiki/Integration_testing), [Test-driven development](https://en.wikipedia.org/wiki/Test-driven_development) and so on. Often, a combination of these is used. These days, machine learning is also being considered to reduce the testing time, see [Testing Firefox more efficiently with machine learning](https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/) for example.

When I start a project, I usually try to write the programs incrementally. Say I need to iterate over files from a directory. I will make sure that portion is working (usually with `print` statements), then add another feature — say file reading and test that and so on. This reduces the burden of testing a large program at once at the end. And depending upon the nature of the program, I'll add a few sanity tests at the end. For example, for my [command_help](https://github.com/learnbyexample/command_help) project, I copy pasted a few test runs of the program with different options and arguments into a separate file and wrote a program to perform these tests programmatically whenever the source code is modified.

For non-trivial projects, you'll usually end up needing frameworks like built-in module `unittest` or third-party modules like `pytest`. Here's some learning resources.

* [Getting started with testing in Python](https://realpython.com/python-testing/)
* [Python testing style guide](https://blog.thea.codes/my-python-testing-style-guide/)
* [calmcode: pytest](https://calmcode.io/pytest/introduction.html)
* [TDD in Python with pytest](https://www.thedigitalcatonline.com/blog/2020/09/10/tdd-in-python-with-pytest-part-1/)
* [obeythetestinggoat](https://www.obeythetestinggoat.com/) — TDD for the Web, with Python, Selenium, Django, JavaScript and pals
* [Modern Test-Driven Development in Python](https://testdriven.io/blog/modern-tdd/) — TDD guide, has a real world application example

## Intermediate to Advanced Python resources

* [Official Python docs](https://docs.python.org/3/index.html) — Python docs are a treasure trove of information
* [Calmcode](https://calmcode.io/) — videos on testing, code style, args kwargs, data science, etc
* [Practical Python Programming](https://dabeaz-course.github.io/practical-python/Notes/Contents.html) — covers foundational aspects of Python programming with an emphasis on script writing, data manipulation, and program organization
* [Beyond the Basic Stuff with Python](https://inventwithpython.com/beyond/chapter0.html) — Best Practices, Tools, and Techniques, OOP, Practice Projects
* [Fluent Python](https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/) — takes you through Python’s core language features and libraries, and shows you how to make your code shorter, faster, and more readable at the same time
* [Serious Python](https://nostarch.com/seriouspython) — deployment, scalability, testing, and more
* [Practices of the Python Pro](https://www.manning.com/books/practices-of-the-python-pro) — learn to design professional-level, clean, easily maintainable software at scale, includes examples for software development best practices

**Algorithms and Design patterns**

* [Problem solving with algorithms and data structures](https://runestone.academy/runestone/static/pythonds/index.html) 
* [Classic Computer Science Problems in Python](https://livebook.manning.com/book/classic-computer-science-problems-in-python/about-this-book/) — deepens your knowledge of problem solving techniques from the realm of computer science by challenging you with time-tested scenarios, exercises, and algorithms
* [GitHub: Collection of design patterns and idioms](https://github.com/faif/python-patterns)
* [Architecture Patterns with Python](https://www.cosmicpython.com/book/preface.html) — Enabling TDD, DDD, and Event-Driven Microservices

## Handy cheatsheets

* [Python Crash Course cheatsheet](https://ehmatthes.github.io/pcc_2e/cheat_sheets/cheat_sheets/)
* [Comprehensive Python cheatsheet](https://gto76.github.io/python-cheatsheet/)
* [Scientific Python cheatsheet](https://ipgp.github.io/scientific_python_cheat_sheet/)
* [Common beginner errors](https://pythonforbiologists.com/29-common-beginner-errors-on-one-page/) — use the pdf link

## More Python resources

Inspired by this post, I made a [Python learning resources repository](https://learnbyexample.github.io/py_resources/) which is categorized (beginner, intermediate, advanced, domains like web/ML/data science, etc) and includes a handy search feature.

I hope these resources will help you take that crucial next step and continue your Python journey. Happy learning :)",1487,60,ASIC_SP,2021-09-13 11:11:33,https://www.reddit.com/r/learnprogramming/comments/pndaba/i_know_python_basics_what_next/,1,learnprogramming
q99g7q,Can anyone get a bachelor degree level understanding of computer science online without paying for it?,"I have been learning to web development and mobile development for the past 2 years online via many different routes.  I am really interested in a deeper understanding of how programs work. How algos work, architecture, speed, best practices, and anything else id need to learn to be able to build programs and algos from scratch.  
i have been looking at online colleges that are roughly around 40k for a 4 year bachelors degree in CS.  
I know there are CS50 courses through MIT that are free online but i think thats just for foundational knowledge, is there a bachelors equivalent  amount of knowledge online that anyone can learn without having to pay for college?",1481,256,Negative-Coach2914,2021-10-16 10:31:09,https://www.reddit.com/r/learnprogramming/comments/q99g7q/can_anyone_get_a_bachelor_degree_level/,0,learnprogramming
fo5nnl,"I created 22 short interactive tutorials, in 4 series, to learn programming and create a simple yet fully working game","I created these tutorials for microStudio, my free environment to learn programming and create games.

[https://microstudio.dev](https://microstudio.dev)  (click Tutorials from the main menu)

This is all free and you can use all the tutorials and create your game without even registering an account (choose ""Create as guest"").

The tutorials are divided into 4 series: microStudio, programming, drawing with code, creating a simple game. They are nicely integrated in microStudio, showing you where to click in the environment and making it easy to navigate in your project while reading the tutorial. Also microStudio lets you change your program while it is running, which is a great way to understand what you are doing.

I tried to keep the tutorials very simple, sometimes maybe too simplistic and I am interested in your feedback in that regard. Also if you find glitches, problems with my English or have any other feedback about how to improve the tutorials, I will be more than happy to read you!

Stay at home, learn programming, create games and help me improve these tutorials if you wish!",1474,41,pmgl_io,2020-03-24 14:06:02,https://www.reddit.com/r/learnprogramming/comments/fo5nnl/i_created_22_short_interactive_tutorials_in_4/,0,learnprogramming
12toqjr,"I strongly disagree with rule 12 of this subreddit (""don't ask questions that can be googled"").","**Edit:**

So I think my concerns were misdirected towards the rule itself. If I could change the title I would. To clarify, I'm referring to people in the comments who rudely dismiss an inexperienced OP without any help.

I agree with some of your points, and disagree with some others. I have changed my mind a bit about things. People should demonstrate what work they have done and not expect to be asked about it. However I maintain that people are not perfect, often don't think to do this, or maybe already have done research and need more help.

I only wish that this community would be less rude and more empathetic towards others.

**Original post:**

Yes, I understand the rationale. There's no need to explain it to me. Just hear me out instead.

There are two types of people who ask questions that can easily be found online. There are (1) people who are completely new to a topic and literally have no idea what they're doing, and (2) people who are a little bit familiar with a topic and have *already tried looking it up* before asking for further help.

Consider the first group. If you were new to, say, learning Spanish, you might head over to r/learnspanish and ask ""is \_\_\_ a correct translation?"" And if the people over there were to act like the people do here, all you would get in response is ""look it up. If you want to learn Spanish, you need to know how to find the correct translation yourself.""

Do you think this is a good way to help some *learn* something in a community where, supposedly, the purpose is to *teach* others? All you're doing is discouraging someone from making progress because of some arrogant belief that asking for help implies that one is incompetent. It doesn't.",1479,305,None,2023-04-21 03:19:15,https://www.reddit.com/r/learnprogramming/comments/12toqjr/i_strongly_disagree_with_rule_12_of_this/,0,learnprogramming
103bviu,Does anybody want to learn Computer Science??,"I see a lot of newbies asking ""What's the best language to learn?"" or ""How do I program in this new tool I discovered?""

**Can we have a discussion about learning computer science fundamentals?** Ya know, the things that will make you a better programmer no matter which language you choose? Things like logic, basic computer architecture, what a program is, types of memory, data structures, what an API is, etc... 

I just think a lot of beginners are asking the wrong questions. Curious to hear your guy's thoughts..",1470,244,leoariel,2023-01-04 19:04:23,https://www.reddit.com/r/learnprogramming/comments/103bviu/does_anybody_want_to_learn_computer_science/,0,learnprogramming
j4jvi5,"Didn’t do very well in my first interview, but happy nonetheless!","Hi guys, I’m a self taught developer & been a long time lurker here. It’s always great to read motivational/success posts, especially when I’m feeling down so here’s one for u guys. 

After six months of self-learning, got my first interview today (with a startup). I didn’t spend much time preparing bcos I was sort of burned out from working on my projects the weeks before, so I just read up &  did some research on the company, and brush up some basic JS knowledge.  

It was really nerve-wrecking at first,  because it was a 3 to 1 interview. The tech lead, co-founder & HR.
They started with simple get to know u questions, and then it was time for the technical interview. 

The tech lead briefly asked about my background & summary of my skills. He then proceeded to ask me concept questions (eg. async await , multithreading, event loops), and then gave me a “simple” coding question, of which I couldn’t solve. After which, we talked abit about my projects (design decisions/ project structure / deployment decisions). 

I was definitively very nervous, and had my mind go blank at several instances. I was honest and told them it was my first technical interview & they laughed it off.  

Overall, I don’t think I did very well & to be very honest I am obviously not knowledgeable enough. But it was a really great experience, and it definitely showed me what I don’t know, and where I should be improving moving further. 

I have a lot of work to be done, but I feel like this is a good milestone! So for those of u out there who’s frustrated after long hours of coding. Take a break, grab a beer, watch some movies & let’s keep grinding!

Edit: wow thanks for all the response! I feel the love
Here’s the coding question: 

Given a list(array) of distinct n numbers, you need to randomly pick k distinct numbers from the list but you are only given k chances to pick the number. Note: Time complexity maximum: o(k), number of random() call: k, you are not allowed to have temporary storage(like another list).

Eg: [1,6,5,3] n=4, k=2

Result: [1,6] or [1,5] or [5,6] etc",1474,177,T31K,2020-10-03 18:13:47,https://www.reddit.com/r/learnprogramming/comments/j4jvi5/didnt_do_very_well_in_my_first_interview_but/,0,learnprogramming
esdpkg,Python For Finance + Stock Trading,"I have just started a python for finance Youtube series where I share how I have created programs to scan stocks, back test strategies, and manage your portfolio. These are high quality code with me tutorials which will explore the capabilities of pandas, numpy, and your ingenuity!

Even if you have never programmed python I take it step by step and explain as much as I can.

So far I have made 2 videos, the first is a walk-through of how to download python and then how to access and manipulate stock data to create simple moving averages. 

[https://www.youtube.com/watch?v=myFD0np9eys&list=PLPfme2mwsQ1FQhH1icKEfiYdLSUHE-Wo5&index=2&t=0s](https://www.youtube.com/watch?v=myFD0np9eys&list=PLPfme2mwsQ1FQhH1icKEfiYdLSUHE-Wo5&index=2&t=4s)

The second video teaches you how to back test strategies. The program simulates entering and exiting trades based on criteria you choose (such as a close above or below a moving average) Then it calculates key statistics that identify how effective that trading method is including batting average and total return.

[https://www.youtube.com/watch?v=eYK2SNygAog&list=PLPfme2mwsQ1FQhH1icKEfiYdLSUHE-Wo5&index=3&t=0s](https://www.youtube.com/watch?v=eYK2SNygAog&list=PLPfme2mwsQ1FQhH1icKEfiYdLSUHE-Wo5&index=3&t=2s)

My next video will be about how to create a powerful and adaptive stock screener to quickly sort through thousands of stocks.

Feel free to check it out and any feedback about what python videos I should make or how I can improve these videos is welcome! Have a great day!",1469,81,Rmogo21,2020-01-22 15:40:10,https://www.reddit.com/r/learnprogramming/comments/esdpkg/python_for_finance_stock_trading/,1,learnprogramming
6uegud,Learn how to code a discord chat bot using python 3.6,"Check out this video I put together showing from start to finish what you need to do to make a basic discord chat bot. Setting up the app on the discord website, getting a client ID, adding the bot to your server and then reading and sending messages and also how to store a quote file so your friends can store funny quotes or youtube videos or whatever else you want and call it back later.

https://www.youtube.com/watch?v=aFI1SItR8tg",1474,39,ITConnected,2017-08-18 00:59:55,https://www.reddit.com/r/learnprogramming/comments/6uegud/learn_how_to_code_a_discord_chat_bot_using_python/,0,learnprogramming
semnxn,"I'm starting to get the hang of programming, and can finish any project so far, here's my secret","Lately, I've found I've been able to successfully make whatever I'm attempting in any language I'm trying to.  Without failure.

Am I smart?  Well, in school I was a C to D average student.  F in math.  I was a big quitter because most things just seemed too hard for me.

Now I've never worked on a team, my projects are not hugely scaled yet and I'm not claiming to be an expert in this field.. I'm not, so take my advice with a grain of salt... or try it for yourself risk-free.... but here's the formula that has been working for me.  Any tips, advice or criticism on my simplistic view is welcome... I'd love to hear from some experienced developers:

&#x200B;

1.  Start with a visual reference of your project or at least the scope of what you're working with.
2. Pick one thing at a time to work on in your project. (for a web developer it might be a button, or game developer maybe the player's jump method)  Simple task board might help with this.
3. Break that down to one instruction / one step at a time and code it that way. Anyone is capable of understanding a single instruction.  And even complexed systems are built piece by piece. 

Now there is much more involved in being a great programmer I'm sure, but I've yet to come across a problem I couldn't solve, or something I couldn't create while adhering to those 3 principles.  Don't make it too hard for yourself, especially when, you're just starting out.... or if you're constantly getting stuck and frustrated. You'll learn better when you aren't stressed.  I also recommend immersing yourself in the environment (watch a random developer video for fun sometimes, not just to make something work!)

I also left out that after step 3 there will is tons of debugging and tweaking until you get your desired outcome.  You'll always have to debug, but it's way more often at first, especially as a beginner when you're forgetting things like semi-colon, what the different operators do, and what code goes in which curly brackets.

Hopefully someone finds this useful, and keep working towards your goals!",1472,133,Scary_Objective6718,2022-01-28 09:13:06,https://www.reddit.com/r/learnprogramming/comments/semnxn/im_starting_to_get_the_hang_of_programming_and/,0,learnprogramming
f3pnc3,Python Full Course - Learn Python in 12 Hours | Python Tutorial For Beginners," [https://www.youtube.com/watch?v=WGJJIrtnfpk](https://www.youtube.com/watch?v=WGJJIrtnfpk) 

&#x200B;

Thought this might be really useful for others, it's fairly new but I apologise if it's a repost.  


Good luck!",1471,80,None,2020-02-14 09:07:03,https://www.reddit.com/r/learnprogramming/comments/f3pnc3/python_full_course_learn_python_in_12_hours/,0,learnprogramming
4xze32,[Tutorial] Learn to make a game in C++,"Hello fellow game developers!

My main goal for this series is to share my game development knowledge with you. Watching this will not only teach you how to make a game from scratch in C++, but it will also more than likely teach you a thing or two about programming in general. You should be able to walk away from this tutorial with enough knowledge to create your own game in C++ and SDL2.

These tutorials are very beginner-friendly because in each video, you will see me write every single line of code from scratch. I also explain all of the classes, functions, and algorithms that I implement throughout the series.

Also, all of the updated source code can be found on Github by following the link at the bottom of this post!

Feel free to provide me with any feedback you may have.

[Click here for the playlist containing all of the videos in the series!](https://www.youtube.com/playlist?list=PLNOBk_id22bw6LXhrGfhVwqQIa-M2MsLa)

----

And here are some other important links:

[For information on my current project, Lime2D, click here!](http://patreon.com/limeoats)

* [My website](http://www.limeoats.com)
* [Twitter](http://twitter.com/limeoats)
* [Discord](http://www.limeoats.com/discord)
* [Twitch](http://twitch.tv/limeoats)
* [/r/limeoats](http://reddit.com/r/limeoats)
* [Github](http://www.github.com/limeoats/cavestory-development)

Thanks for checking it out and I hope you enjoy. Make sure to contact me with any questions or suggestions!
",1475,66,Limeoats,2016-08-16 13:07:00,https://www.reddit.com/r/learnprogramming/comments/4xze32/tutorial_learn_to_make_a_game_in_c/,0,learnprogramming
g7s1q7,"Self taught programmers, what gave you the most success?","For those out there that became who they are by mostly teaching yourself, what did you feel was the best tool you used? 

What was your best success throughout the process? 

Is self-teaching really sustainable for trying to get into the CS career world?



Edit: 
Just wanted to throw in a comment here because I can't believe how much this took off!

 Thank you to everyone for this overwhelming contribution. 

I originally started this post and asked these questions as a means to gain information from those who were self made and hopefully bring up a discussion for others as well.

I am currently working full time and looking to change into a computer science career on my own, over time. I can't afford to go back to college again for 4 years nor do I want to give up full time work/benefits etc.  Everyone's been really helpful. Thank you.",1468,298,mntbiker17,2020-04-25 11:31:03,https://www.reddit.com/r/learnprogramming/comments/g7s1q7/self_taught_programmers_what_gave_you_the_most/,0,learnprogramming
zdzhy8,What are some must reads for every programmer?,"I know there is plenty of information online, but I still like to read a physical book every now and then.

Do you own any books that you can recommend?",1468,162,Technical-Bee-9999,2022-12-06 07:38:58,https://www.reddit.com/r/learnprogramming/comments/zdzhy8/what_are_some_must_reads_for_every_programmer/,0,learnprogramming
oers8p,13 Udemy (100% off Coupons) Programming Courses [Limited Time]," Good Evening everyone,

Love Learning, Just found some of the top courses to learn programming on Udemy. Some of the instructors are giving 100% off coupons due to the quarantine. Grabbed most of them from [r/FreeUdemyCoupons](https://www.reddit.com/r/FreeUdemyCoupons/) and some from the Facebook group. Might help some of you out. Let's learn together

Once you enrol on this course you can get lifetime updates

&#x200B;

1. [The Python Developer Essentials 2021 Immersive Bootcamp](https://www.udemy.com/course/new-python-programming-the-complete-guide-2021-edition/?couponCode=664A6FAF33960470641D)
2. [Data Analysis Real world use-cases- Hands on Python](https://www.udemy.com/course/data-analysis-real-world-use-cases-hands-on-python/?couponCode=JULY_SALE)
3. [R Programming:For Data Science With Real Exercises](https://www.udemy.com/course/r-language-with-hands-on-experience/?couponCode=66B8D2FC818C3E712A95)
4. [Artificial Intelligence (AI) in the Classroom](https://www.udemy.com/course/artificial-intelligence-in-the-classroom/?couponCode=A74C93416C5C2C97CE09)
5. [Python Programming Beyond The Basics & Intermediate Training](https://www.udemy.com/course/python-programming-beyond-the-basics-intermediate-training/?couponCode=4FA88DC6479682803EA7)
6. [The Python Programming A-Z Definitive Diploma in 2021](https://www.udemy.com/course/the-ultimate-python-programming-a-z-masterclass/?couponCode=BEBC438CBC07E299757B)
7. [The Intensive 2021 Python & Data Analysis Libraries Diploma](https://www.udemy.com/course/mastering-python-data-handling-analysis-and-visualization/?couponCode=493411D8BF8F1759FB6F)
8. [The Python Programming Comprehensive Bootcamp](https://www.udemy.com/course/the-python-programming-v39-comprehensive-bootcamp/?couponCode=0719C8AB6B767B5E0D15)
9. [Intermediate Python Immersive Training | Boost your career](https://www.udemy.com/course/the-intermediate-python-training-boost-your-python-skills/?couponCode=B846EE612CFC68B99CD4)
10. [SQL Masterclass for Data Analysis with BigData](https://www.udemy.com/course/sql-masterclass-for-data-analysis/?couponCode=SQLMASTERCLASS)
11. [Typescript with React quick start - with Jest testing](https://www.udemy.com/course/typescript-with-react-jest-testing/?couponCode=FREEJUL2021)
12. [Advanced Java programming with JavaFx: Write an email client](https://www.udemy.com/course/advanced-programming-with-javafx-build-an-email-client/?couponCode=FREEJUL2021)
13. [House Price Prediction using Linear Regression and Python](https://www.udemy.com/course/house-price-prediction-using-linear-regression-and-python-examturf/?couponCode=EXAMTURF1)",1467,201,jobsinanywhere,2021-07-06 09:52:30,https://www.reddit.com/r/learnprogramming/comments/oers8p/13_udemy_100_off_coupons_programming_courses/,0,learnprogramming
d00vja,"This is pretty embarrassing, but do you guys have any resources for just.. general computer literacy?","I've never admitted this to anyone IRL, so bear with me a bit.

I'm alright when it comes to programming.  I got into a decent university and am getting pretty good marks in all of my CS courses, but compared to the people around me it seems that there's so much about simply *using* a computer (at least at a level appropriate for someone looking to get into the field) that I just don't understand.

Simple things are fine and if there's something I don't know how to do I can usually figure it out, but I don't quite 'get' how it all works.  Google (and maybe a bit of Zachtronics) was pretty helpful in understanding the barebones low-level stuff (clocks, logic, and all that jazz), but things like networking and drivers are all completely alien.

I installed linux because I like the idea of just being able to write a bit of code and make your computer do something (free, open-source things are nice too), but I've hit a wall in that I genuinely, despite using it for years, have *no idea* *what my computer is capable of*.  How do I connect to a network other than by just ""clicking on the wifi thingy""?  Once I've done that, what then? what can I actually do?  How do I set up a server?  Why on earth does ubuntu hate audio programming and how can I work my way around it?  How am I supposed to automatically sort through emails if I can't even access them without a dedicated UI?

The other people in my class (at least the loud ones) seem to get all of this crap, and it's pretty demoralizing.  There are 12-year-olds setting up Minecraft servers and my university-level ass doesn't even know how a browser works.

It's embarrassing, and I want to fix it.  I just don't know where to start.

EDIT: holy wow, reddit can be amazing sometimes.  This was truly a joy to wake up to.  Everyone is being incredibly helpful in completely different ways, and while I probably can’t thank everyone individually at this point I’m really grateful to all of you.  Quite a few comments are using acronyms that I don’t entirely understand, but after this I’m confident that I should be able to figure it out eventually, even if it takes a while.  Thank you again everyone",1464,162,nebulaeandstars,2019-09-05 13:32:37,https://www.reddit.com/r/learnprogramming/comments/d00vja/this_is_pretty_embarrassing_but_do_you_guys_have/,0,learnprogramming
qfv3se,Top Down Programming - Advice that has helped my mentees,"I think I've mentored 30+ people in programming now. This is something that most mentees have needed to hear, and has lead to the most rapid improvements.

\---

Programming well is about communicating complicated things in the simplest way you can.

Beginners often learn to program by writing and adjusting lines of code until the result is correct, and maybe improving readability after. This doesn't scale well to harder problems, and often misses the simplest solution even on simple problems.

The trick is to find the simplest explanation first, and then turn that into code. ""Top down"" rather than ""bottom up."" This applies to every level of programming.

# Naming

I think naming is easy to learn when you know how. If someone reading your code asked ""what's `img_data`?"" what would you tell them?

You might say something like ""a 2d array of the pixel values."" That explanation should more or less be the name, like `pixel_array`.

* If a name needs 3 or 4 words to be clear, use those 3 or 4 words - autocomplete makes it easy.
* If you need a comment to say what a variable is, turn that explanation into a name.

# Function Decomposition

People often learn that functions are ""a way to use a piece of code repeatedly,"" which is incomplete. Putting code in a function gives that code a name and a fixed scope. It organizes the details of the function's action out of view, so can think at a higher level. It's like saying ""drive home"" rather than ""take a right on east avenue and then...""

When thinking top down, this kind of decomposition happens almost automatically, because we already think in terms of simple decompositions.

I often give a practice problem of ""make a function that prints the first 100 prime numbers,"" and most people come up with a single messy function to do the entire task.

To solve it top down, first think of how you'd solve it yourself, or how you'd teach a child to do it. Something like ""Get an empty list for prime numbers. While its less than 100 long, check if the current number is prime. If it is, add it to the list. The current number should start at 2 and increase each loop."" That easily translates to:

    def get_first_100_primes():
    	primes = []
    	current_number = 2
    	while len(primes) < 100:
        	    if is_prime(current_number):
    	        primes.append(current_number)
                current_number += 1
    	return primes

The high level description just says ""check if the current number is prime,"" as a single step, automatically decomposing into smaller parts. Now you can define `is_prime(number)` the same way, finding a high level solution and converting to code. You keep decomposing until you can clearly express the last function(s) using built-in code and existing functions.

# Class Structure

Larger projects often have a web of interconnected objects, like a site with users and posts, or a game with units and spells. When these aren't organized well, work can become very painful, as changes to one class causes bugs in another, or massive objects get tangled up in themselves.

The top down method involves looking at what objects and relations intuitively exist in the problem space (also known as domain, or ontology).

To make Tetris, I'd start by literally writing down words that exist in Tetris, on paper.

* Nouns: Board, rows and columns, squares, blocks, block **types**, a player, score, frames, etc.
* Verbs: Falling, clearing a line, increasing the score, losing the game, spawning a block, etc

I'd connect and rearrange the words to try to represent their structure and relationships.

Simple nouns like score would just be an integer, but nouns that own other words are more likely objects.

* A player owns a score.
* A block is one of the block types, and is made of squares.

Verbs are functions, and can sometimes be harder to place. I usually place them last, and in a way that minimizes how much parts need to know about the bigger picture. That makes them easier to change later on.

* ""fall"" is something a block does, and involves the board. However, it's simpler for the board to see what's inside it, and the block to not know anything about the board. So I'd think for a while and probably change from `block.fall(board)` to `board.apply_gravity(block)`.

When everything is connected, look at what objects need to know about other objects. Other than those intuitively necessary dependencies, the objects shouldn't communicate or see each other. Done carefully that gets you the simplest possible architecture for the problem.

\---

I hope this is helpful to you. By starting with an image of the simplest solution in mind, you can find your code is easier to write, read, and change, and less bug prone.

Edit: I had posted broken code - Thanks boojit!",1464,101,qazzquimby,2021-10-26 01:07:13,https://www.reddit.com/r/learnprogramming/comments/qfv3se/top_down_programming_advice_that_has_helped_my/,0,learnprogramming
x7j2g5,Python for Serious Beginners - Free PDF,"If anybody's interested in learning Python, the book covers from the absolute basics to more advanced topics, including OOP and pattern matching (3.10).

The book title: Python for Serious Beginners - A Practical Introduction to Modern Python with Simple Hands-on Projects. Here's the link:

https://www.codeandtips.com/download/python-for-beginners-review-copy-20220907.pdf

The book is (often) updated. Welcome any feedback or suggestions. 👍👍👍

EDIT: thanks for the feedback. Fixed some typos, and uploaded a new version. 20220907. 🙏",1461,133,codingai,2022-09-06 19:14:00,https://www.reddit.com/r/learnprogramming/comments/x7j2g5/python_for_serious_beginners_free_pdf/,0,learnprogramming
qhm4wm,Two unlikely sources that really helped my programmings skills,"# Factorio

**TL;DR: it's a giant system design simulator and it doesn't even know it.**

[Factorio](https://www.factorio.com/) is a video game about building factories that process materials that can be used in other factories with the ultimate goal of building a spaceship. Sounds odd but it's more addictive than crack once you get sucked in.

It's also, unintentionally, a giant systems design sandbox that has helped really solidify some fundamental system design concepts.

Your iron processing area grew so large that you can only expand it over where the iron ore is because you built them too close? Maybe you *coupled* the ore and the furnaces too early and should have been thinking about *scale* from the beginning. A better solution would have been to have a processing plant much further away from where resources are, and send them in via train. This seems like overkill at the beginning of the game, but once you scale it will save your bacon.

This is the exact same thing I've seen happen with a monolithic frontend and backend combo. Once a product hits a certain size you're going to need to break off the backend into APIs with a separate frontend to digest it all.

This is one example of so, so many. It really helped me understand why certain patterns exist and what dependency really is. I'd highly recommend it!

&#x200B;

# Murder shows

**TL;DR: turns out finding a murderer and finding bugs is pretty similar.**

Shows that follow real-world detectives around trying to solve real-world murders: The First 48, for example.

Who did it? Why did they do it? Where did it happen? How did it happen?

Who asks these questions? ~~homicide detectives~~ software engineers trying to fix bugs.

I kid you not, watching hours of detective breaking down the information they have at hand, trying to link it to a motive and a suspect, and knowing when they need to go out and get more information, did more for my debugging skills than I realized.

I think good debugging comes from asking the right questions: how, why, when, etc. Turns out homicide detectives have to do this *a lot*, and with much higher stakes.

Seriously, watch some shows and take note of how they break down a crime scene, how they try to draw conclusions, and how they test those conclusions. It's the same kind of problem, I swear!",1461,111,LowLvlLiving,2021-10-28 12:40:55,https://www.reddit.com/r/learnprogramming/comments/qhm4wm/two_unlikely_sources_that_really_helped_my/,0,learnprogramming
65oz29,I did it! I got a job!,"It took me almost exactly 1 year to go from zero programming experience to full time 100% remote employment.

[I wrote about my experience in this medium article](https://medium.com/@codyloyd/from-0-to-employed-in-one-year-45e3787d1b50)",1464,185,codyloydl,2017-04-16 12:56:55,https://www.reddit.com/r/learnprogramming/comments/65oz29/i_did_it_i_got_a_job/,0,learnprogramming
vha8kk,LeetCode is ruining baby programmers - change my mind.,"1. LeetCode encourages bad code. You win a cookie if your code produces the required results. Nothing else matters. Formatting, naming, structure are irrelevant. 
2. LeetCode teaches that code has no life cycle. When your submission is correct, you move on. No one revisits their submissions for maintenance. 
3. LeetCode hides most of the the test cases. In the real world everyone knows the test cases as they become available. They are not top secret.  
4. LeetCode teaches that code is written in little snippets with no overall connection to a project. 
5. LeetCode encourages no prior learning or studying. If you can delete a node from a linked list, you get the cookie: it doesn't matter if you can't explain why or how.",1461,305,liquidInkRocks,2022-06-21 10:32:24,https://www.reddit.com/r/learnprogramming/comments/vha8kk/leetcode_is_ruining_baby_programmers_change_my/,0,learnprogramming
6dz1pi,Do you want to be an iOS Developer? Maybe even work as one? Here's a checklist I made and many useful resources I've found.,"I used this for myself, but it's still not fully complete for me but [here](https://drive.google.com/open?id=0B3ho42Yzgl11blBFX2otUjc4S1k) is a Word document (checklist) that I've made for things that you should know to get a job in the industry. I haven't gotten a job yet (currently accepted a job as an iOS instructor), but I've received many job offers and I've used some of the job requirements to add to the list. In case you're wondering, besides the extras, I've got my checklist almost 93% filled.

List of resources I've used:

[Apple's Swift Documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/). This is what I used to learn Swift in 2014 when it came out.

[Hacking with Swift](https://www.hackingwithswift.com/). Be exposed to what iOS has to offer.

I've used Udemy mostly for building clone apps. I recommend [Devslope's Course](https://www.udemy.com/devslopes-ios10/), which has over 71.5 hours of videos. Some of the sections are better than others. Has extras such as Objective-C, Sketch, Protocol Oriented Programming, and app clones as well.

[Ray Wenderlich](https://www.raywenderlich.com/). Amazing tutorials and their books have A LOT of knowledge about iOS that you probably didn't know existed. I've bought all of their books.

I know Youtube has some great instructors but I don't use Youtube at all. I do however recommend if you got time to look at Apple's developer conference videos.

Extras: 

[Google's Material Design](https://material.io/guidelines/), more specifically, their [Color Style Guide](https://material.io/guidelines/style/color.html). I've used it to get colors for my apps. I've also used Pinterest to get ideas.

[AppCode IDE](https://www.jetbrains.com/objc/). Amazing IDE for editing your Xcode projects. It's not free, but you can get it free for a year if you're a student. You'll need Xcode to use it.

[Sketch Digital Design](https://www.sketchapp.com/). I use it to make my app designs and also allows you to export to multiple dimensions for icons. Powerful once you learn to use it.

[PaintCode](https://www.paintcodeapp.com/). Allows you to draw objects and gives you back Objective-C or Swift code.

[NSHipster](http://nshipster.com/). Always comes up when I'm googling for a solution or knowing the difference between things.

[Little Bites of Cocoa](https://littlebitesofcocoa.com/). Tips and techniques for iOS and macOS development.

[Free Programming Books](https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#c). Got it from a Redditor.

[Free IT Books](http://www.allitebooks.com/). Got it from a Redditor.

[Trello iOS Mastery Path](https://trello.com/b/gvzEgkw4/ios-path-to-mastery-for-ios-development). Got it from a Redditor.

[How to break into the Tech Industry](http://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/). Forgot where I found it.

[Eli the Computer Guy](https://www.youtube.com/user/elithecomputerguy). Found out about him from a Redditor and saw [this](https://www.youtube.com/watch?v=6G3kQyqMFpQ) video of him explaining why you shouldn't worry if you don't meet all the job requirements.

And of course, /r/Swift and /r/iOSProgramming subreddits.
",1451,107,None,2017-05-29 08:00:54,https://www.reddit.com/r/learnprogramming/comments/6dz1pi/do_you_want_to_be_an_ios_developer_maybe_even/,0,learnprogramming
17c7ata,Why are some programmers so arrogant and mean?,"Don't get me wrong most of the community is super helpful and nice. Irl whenever I ask a programmer something they seem more than happy to clear my doubt. But often when I post a question online I always see one comment about how stupid my question is and the classic ""if you don't even know then you should just quit"". I normally do get my answer but there's always that one person. I had someone tell me that they were gonna report my query on stackoverflow because it was ""too stupid"". I'm not perfect but I'm trying to learn and someone telling me I'm dumb is not helping. And it's not like my questions are crazy and too easy, I see people saying they have a similar issue. Why the hate then?",1453,737,Potential-Oil-7005,2023-10-20 09:40:30,https://www.reddit.com/r/learnprogramming/comments/17c7ata/why_are_some_programmers_so_arrogant_and_mean/,0,learnprogramming
uwgpc2,"I'm a dad (30yo) working a crappy retail job, going to school for Computer Science and trying to learn programming. In need of advice.","Basically what the title says. I have a three year old, a wife, a full time job, and going to school full time. In my free time which is next to nonexistent, I try to learn to code. I'm picking it up quickly, the problem is time. I'm desperate to learn so that I can continue to progress through this. I usually do it at night, but my son is having trouble trying to get to sleep lately and that's exhausting in itself.

If you've been here, done this and made it to the other side...any advice on how to make time to practice/learn/build? What was your schedule like? 

I'm at the end of my rope. There are not enough hours in the day and I am exhausted. But desperate to do this.

Thanks in advance.

EDIT: Wow thank you all so much. I did not expect this much help and kindness. I'm reading each and every one and will try to reply when I can.

Also, I typed the title in a hurry. To clear up confusion, I am majoring in Computer and Information Systems with a concentration of Application Developer. It includes software engineering.

Again, thank you. I really appreciate it all.",1458,242,throwawayjunk00,2022-05-24 02:33:44,https://www.reddit.com/r/learnprogramming/comments/uwgpc2/im_a_dad_30yo_working_a_crappy_retail_job_going/,0,learnprogramming
b7o8tq,My full stack web development programming notes (GitHub),"Hello again! I'm back with even more programming notes.  

https://github.com/8483/notes

They depict my learning journey and they are written in a ""human"" way for easy understanding.

My old notes can be found [here](https://www.reddit.com/r/learnprogramming/comments/4iewun/my_programming_notes_141_pages_summaries_of/) (2016) and [here](https://www.reddit.com/r/learnprogramming/comments/5opg9k/my_programming_notes_275_pages_summaries_of/) (2017) as a PDF file.

Here's a [phenomenal video](https://youtu.be/gVXcqO9A1vo) describing the whole web development ecosystem.

Below is the content of the notes to see if you find anything useful.

---
# Programming

### Javascript

-   Javascript
-   ES6
-   OOP
-   DOM
-   Async
-   FP

### Frontend

-   CSS
-   React
-   Electron
-   Virtual DOM
-   Elm

### Backend

-   Node
    -   Express
-   MySQL
-   nginx
-   C#

### Version Control

-   Git

### Tooling

-   Babel
-   Webpack
-   Typescript
-   Caching

### Architecture

-   Architecture
-   Use Cases
-   RESTful

### Concepts

-   File Organization
-   Authentication
-   Security
-   Testing
-   Binary base

### Useful

-   Algorithms
-   Excel

### Mobile

-   Overview

### IDE

-   VS Code

# Linux

### Administration

-   basics
-   filesystem
-   users
-   config
-   systemd

### Tools

-   bash
-   tmux
-   vim
-   ssh
-   compression

# DevOps

### Virtualization

-   VM
-   Vagrant

### Containerization

-   Docker

### Configuration Management

-   Ansible

# Networking

-   Networking

# Electronics

### Gadgets

-   Raspberry Pi
-   Arduino
-   NodeMCU

### Theory

-   Electronics
-   Electricity

---

**Hope you will find something helpful and please ask anything that might interest you. Also, any feedback is welcomed.**
",1451,126,8483,2019-03-31 14:20:35,https://www.reddit.com/r/learnprogramming/comments/b7o8tq/my_full_stack_web_development_programming_notes/,0,learnprogramming
cfxxcd,Machine Learning (Get started with Python Programming),"2 months ago, I created and posted videos from a Python Machine Learning basics course on the this subreddit. So far they have been received very well! But as some videos were never posted I decided to include them all in this updated post for people in need of the new videos or for those who where not around when the first ones where posted.  (All Implementation is done using the Python 3 programming language)

* **Part 1 - Machine Learning For Beginners - Basics**

[https://youtu.be/E3l\_aeGjkeI](https://youtu.be/E3l_aeGjkeI)

* **Part 2 - MI environment**

[https://youtu.be/HqyrqxyDwPU](https://youtu.be/HqyrqxyDwPU)

* **Part 3 - Python Decision Tree (Theory)**

[https://youtu.be/8isUCINSmys](https://youtu.be/8isUCINSmys)

* **Part 4 - Python Decision Tree (Coding)**

[https://youtu.be/24mxQzd3EsU](https://youtu.be/24mxQzd3EsU)

* **Part 5 - Python Decision Tree (Graphiviz)**

[https://youtu.be/aVEfKRfWjHc](https://youtu.be/aVEfKRfWjHc)

* **Part 6 - Knn(Friend Recommender)**

[https://youtu.be/LK0zgA6Mr6k](https://youtu.be/LK0zgA6Mr6k)

* **Part 7- 5-Fold Cross Validation**

[https://youtu.be/Zx5cz8pXnOM](https://youtu.be/Zx5cz8pXnOM)",1452,39,lukescriptwalker,2019-07-21 11:11:26,https://www.reddit.com/r/learnprogramming/comments/cfxxcd/machine_learning_get_started_with_python/,0,learnprogramming
fxhmg2,Wanted urgently: People who know a half century-old computer language so states can process unemployment claims,"[https://www.cnn.com/2020/04/08/business/coronavirus-cobol-programmers-new-jersey-trnd/index.html](https://www.cnn.com/2020/04/08/business/coronavirus-cobol-programmers-new-jersey-trnd/index.html)

Guys, time to learn COBOL!",1447,355,emilio911,2020-04-08 23:45:23,https://www.reddit.com/r/learnprogramming/comments/fxhmg2/wanted_urgently_people_who_know_a_half_centuryold/,0,learnprogramming
jdtoed,I built a Twitter bot and successfully deployed it to a remote server,"7 weeks of Python later... my first meaningful project: a bot that tweets a Rilke quote every 12 hours. 

I spent 6 hours on it yesterday and 3 today. This involved building/editing a set of Rainer Rilke quotes that were EDIT: 280 characters or less, building the bot, deploying it to Heroku. Took 7 builds for it to run properly on Heroku, uuughhh, they were dumb little mistakes.

I followed [this](https://realpython.com/twitter-bot-python-tweepy/) tutorial for the most part. 

It feels so good. It's 7:45 pm right now and I'm glad I finished in time to go to bed early.",1449,70,aimhighswinglow,2020-10-19 02:42:59,https://www.reddit.com/r/learnprogramming/comments/jdtoed/i_built_a_twitter_bot_and_successfully_deployed/,0,learnprogramming
m9xq1s,Was feeling super confident about my programming abilities until I opened up cracking the coding interview,"I was doing fricken great (went the self-study route). I’ve been proudly building my own full-stack personal projects, learning concepts left and right, and started to feel like I’m close to being where I need to be to get a job. Then I opened up cracking the coding interview and now I feel like I’m still a year+ away from understanding all of these concepts. 

Obviously not every job requires all of this knowledge because there’s no way people learn all this in 3 months at bootcamp, but now I’m starting to feel like going to big-tech is just so far out of reach still. Maybe I’ll get there someday. Not really anything else to this post, just wanted to share what was on my mind.",1442,149,katsuthunder,2021-03-21 14:24:15,https://www.reddit.com/r/learnprogramming/comments/m9xq1s/was_feeling_super_confident_about_my_programming/,0,learnprogramming
eda44k,I wrote a thing AND IT WORKS! WOO!,"Two weeks ago I decided to finally start learning the basics of programming using Automate the Boring Stuff and Python. Being a chemist and reasonably good with computer hardware clearly isn't nerdy enough. The aim was to be able to write small scripts and programs to make my work easier.

Last friday, after fiddling with it for two days, I finished my first little project of writing a script that reformats data exported from one of the instruments we have here. The device supports simultaneous data acquisition on multiple channels and, when exporting the data, the resulting ASCII files have all the intensity data of all channels in one column. The x-axis is ommitted entirely. It's a bit of a pain to work with, frankly.

The script I wrote takes data from those ASCII files, splits them by channel based on total measurement time as well as measurement frequency, and it adds an x-axis. It probably is the most inelegant, horrifically inefficient piece-of-shit code you have ever seen - but it seems to work just fine. Beats doing this shit manually, at any rate.

The process of getting it to work was really quite fun, as was reading the book. Mind you, I'm a total beginner and have no desire to become a programmer. But being a chemist capable of programming basic stuff? I can dig it. Certainly makes me appreciate people doing this for a living more.

Now excuse me while I have this thing loop through 300k lines of single-column data over 30ish data files.

Edit: https://imgflip.com/s/meme/Castaway-Fire.jpg is an accurate representation of me whenever some part of the script started working.",1448,71,tetchip,2019-12-20 13:20:20,https://www.reddit.com/r/learnprogramming/comments/eda44k/i_wrote_a_thing_and_it_works_woo/,0,learnprogramming
iulzja,What coding means to me... TLDR I’ve had a very sick child and coding is my escape!,"For some folks programming is just a hobby for others it’s a good paying career and that’s okay but it’s those things and much more to me. It’s my escape from life’s claws in more ways than one. 

It’s a financial escape for my family and myself or at least it will be once I land my first role as a dev. I grew up in an abusive home and everything was chaotic I was never taught to have any aspirations and never even thought about going to college. When I was a teenager I was much more likely to go to prison as I had turned to dealing as a means to support addictions. I was arrested four times before the age of 20! This left me with little social or hard skills that I could use in life without crime. By means of newfound religious beliefs I overcame the addiction and left my gang banging behind me. 

I was now a 20 something year old that had gotten married but had no skills to provide, we began having children. Working crappy jobs to provide as best as I could. Then the real trouble came. All in about a years time my wife slipped into a deep depression, I severely injured my lower back and to beat it all we had a handicapped baby! Our second child was diagnosed with Spina bifida and hydrocephalus. This was crushing, she had her first back surgery at about 10 hrs old. Over the next 9 months she would quit breathing twice and have brain, back and bladder surgeries. She’s had five in total and is facing another now. 

Starting to realize my need to pick up skills to take off financial pressure. Because the pressures of life have just been to much I decided to try to learn how to code. At first it was out of pure motivation to make more money. But as I started to practice more and more it became an escape. I would log on freecodecamp and codecademy and forget about everything going on around me and fell in love with that! I guess I just enjoy the feeling of creating and and solving problems. I cannot get my little girl normal legs to walk, I wish I could. But I can buy her the handicap van she so desperately needs and a get us a decent home so she can not get stuck in the hallway in her wheelchair because it’s so small. 

That’s why I’m so passionate about programming! And I’m going to keep doing it until someone finally gives me a chance to do it professionally. I just honestly needed to get all of this off of my chest. Hopefully it encourages someone about to give up.
 
Edit:

Some have asked what my current skills are. So far I’ve managed HTML, Css, Bootstrap and Javascript and hope to learn React, node and sql soon. Since things have calmed down some I’ve started putting in 5 hrs a day. So hopefully I can progress quickly. I never expected such a response, thanks so much for the kind words everyone!",1437,112,Ok-Bed7273,2020-09-17 15:42:57,https://www.reddit.com/r/learnprogramming/comments/iulzja/what_coding_means_to_me_tldr_ive_had_a_very_sick/,0,learnprogramming
bfork2,A brief intro to git - for absolute beginners,"I wrote an article on git because it was one of the tools I didn't bother to learn for far too long, mostly because every time I tried, I found the resources were highly technical, not written for beginners, and as such, did a poor job of explaining the very basic function that git serves - saving stuff.  

I came to the (wrong) conclusion that it was yet another tool in the endless list of crap that I had to learn to be a developer.  It turns out, however, that it's one of the most important ones.

If you don't know git or have been struggling to understand it, I hope this intro lets you get over that initial hurdle - https://webtuu.com/blog/04/a-laymans-introduction-to-git

Feedback/comments on improvements or otherwise welcome!

**UPDATE:** This post was super well received, so I've written a follow-up post here - [Git Basics - Branching, Merging & Pushing to Github](https://webtuu.com/blog/04/git-basics-branching-merging-push-to-github)",1439,67,imnos,2019-04-21 13:24:50,https://www.reddit.com/r/learnprogramming/comments/bfork2/a_brief_intro_to_git_for_absolute_beginners/,1,learnprogramming
8zcpd9,"For People who have trouble learning to use git,a few months back I was one of you. Here's how I changed it.","An  [xkcd](https://xkcd.com/1597/) , this sums up my experience with git before reading the progit book. Yes you would have heard about The progit book, The book is amazing, I like learning via books because it seems like one step at a time and all the information is right there. Before finding this book i've tried many tutorials I was lost at half way through the jargon of remotes,local branches,remote branches, local  branches that track a remote branch. It was overwhelming. This book literally takes one step at a time, first they talk about basic stuff staging area, diff's,logs, gitignore, tagging etc. Then they get into branching the killer feature. They talk about all the strategies merging,rebasing, tracking remote branches. They give you an intuition about whats going on unlike most of the tutorials that give you a bunch of commands to type in the shell. Once you have read till branching. Digest stuff, you are more than capable to use git on a daily basis, test all the interesting features you have learned so far. Then you can go to the advanced chapters. The book does not assume anything about your knowledge of git, it starts with setting up your environment. Trust me and try this.

Sorry If mentioned before. You don't become an expert after reading the book right way, I still have the 'Aha moments' from time to time. You look at git like a kind friend that's helping you rather than a flat-track bully messing with your life. All the best!

Link: [Here you go](https://git-scm.com/book/en/v2)",1433,88,None,2018-07-16 17:10:10,https://www.reddit.com/r/learnprogramming/comments/8zcpd9/for_people_who_have_trouble_learning_to_use_gita/,0,learnprogramming
pqzh4a,Self-taught for one year and just landed a position!,"First of all, shout out to all the positive and helpful voices in this subreddit. Because of you, I learned what I needed to do to land a position and keep up my confidence. I want to give back in this way as well in the hope that it helps someone else.

I have a non-technical degree from a no-name college. Almost exactly one year ago I began learning how to program with the goal of developing an app one day while working in management. As I learned I realized I really enjoyed programming and that it would take a lot more effort than I originally planned to develop an app. After a few months, I decided to pursue a career in tech. 

I learned the basics with books, created projects, took courses from Udemy and Coursera. I began sending out applications even when I knew I was woefully unprepared. I did this to get a feel of the competitiveness of the field. I studied an average of 3-4 hours per day and as I improved I saw that my response rate would rise higher and higher. Eventually, I left my previous job to pursue my studies full-time when I felt I was getting close. After 2 months I got an offer and I probably sent out anywhere from 200-300 applcations and had several interviews. 

These are my opinions for anyone on a similar path, but keep in mind there are many approaches to arrive at the same place.

1. Udemy is amazing. There are some top-quality courses on there that can take you from beginner to advanced in a few months if you are consistent. Angela Yu and her courses I would highly recommend. Once I put these courses on my resume I noticed a significant increase in response rates as well.
2. These are the technologies that I noticed were highly sought after in job descriptions. MERN, MEAN, Java, PHP, and .Net. If I were to do it over again I would have laser eye focus on the MERN stack. There are a ton of jobs for this stack. My choice was Django/React, but the only Django positions I saw were for those with 5+ years of experience. I ultimately switched to the MERN stack plus an SQL based database. This is the stack I got a position in. 
3. Send out applications before you feel ready. Even now after landing a position I don't feel ready. But by doing this I recieved valuable data on how to improve my resume and my interviewing approach. Expect to send out lots of applications. Some companies flat out throw out your application because you don't meet some arbitrary criteria, others use ATS services that block out resumes and are never seen by human eyes, and you just won't be a fit for a lot of them. But know you are a good fit for a lot of companies as well. Keep at it.
4. Lastly, no short cuts. Know your basics well and build from there. After that build at least 2 moderately complex applications. Full-stack if you can. Make them look top notch with clean code, useful comments, and proper file structure. Build a portfolio website as well. Especially if you are frontend focused. 

One final thought. The labor market is awesome for job seekers right now. That is what gave me the confidence to leave my previous position. Act fast! That's it from me. If there are questions I'll try to answer.

Edit: For those asking about the resume check out this one: https://ibb.co/RBpcTDG

I based my resume off of this one and it really helped.

This post gained so much more attention than Id ever expect. I wanted to make clear that the journey is very difficult. Probably the most difficult thing Ive ever done but it is doable. Learn what you need to learn from this subreddit but then go and focus on what you need to do. Learn the basics with books or courses, then create projects by following tutorials or from scratch then learn enough leetcode to pass those annoying tests. After that polish your resume, update it as you see what employers want. Practice interviewing with friends and family. Along the way keep working on projects. I didnt do this but you could also use LinkedIn to network. I did it once or twice and actually got a good response. I would be ecstatic if I could help others along this path. Reach out to me if you want to connect.",1437,178,MaximusDM22,2021-09-19 02:20:51,https://www.reddit.com/r/learnprogramming/comments/pqzh4a/selftaught_for_one_year_and_just_landed_a_position/,0,learnprogramming
dtuonc,"Some free Udemy Courses whose promo periods end in the next few days: Python, JavaScript, Bootstrap, & PHP, Setup a Virtual Web Server, Learn PowerShell Scripting","Read the rules and did a quick search, these didn't seem to be listed.

* [JavaScript, Bootstrap, & PHP - Certification for Beginners](https://www.udemy.com/share/10275cA0IccF1RQHo=/) Code=33EFFB8403B0DE501B5E  
* [Setup a Virtual Web Server using Linode or Digital Ocean](https://www.udemy.com/share/101JiGA0IccF1RQHo=/) Code=EDC029188C537715875E  
* [Quick Guide: Setup a Local Testing Server using WAMP or MAMP](https://www.udemy.com/share/101ME7A0IccF1RQHo=/) Code=21E359A0FD69ABE91A28  
* ~~[Learn PowerShell Scripting](https://www.udemy.com/share/102coAA0IccF1RQHo=/) Code=1AF3C627D975C3EB5EB7~~  
* [An Introduction to Python Programming](https://www.udemy.com/share/101IoIA0IccF1RQHo=/) No Code Needed 

They all expire in a day or so, some as little as 15 hours at the time of this post.",1437,124,GameStunts,2019-11-09 11:13:14,https://www.reddit.com/r/learnprogramming/comments/dtuonc/some_free_udemy_courses_whose_promo_periods_end/,0,learnprogramming
u3t51m,I got my first software developer job and I'm floundering.,"I went to a coding bootcamp and graduated this February. I definitely wasn't the best student in my class, I was middling at best. I can learn this stuff but it doesn't come quickly and naturally to me like it does with other people, but I needed a well paying job with healthcare and learning to code seemed like a good way to get there. Miraculously (retail/bartending experience make you know how to be charming in an interview), I was able to find a well-paying junior developer job with a large household-name-type company. They didn't ask me a single coding question during the interview process it was all about my personality/what kind of learner I am. Well, I started Monday and I am feeling like this whole thing was the biggest mistake of my life.   

I have no idea what anyone is talking about. Ever. It's all in C# which I don't know AT ALL. Today I was setting up my environment with my team lead and was such a bundle of nerves I forgot everything I knew and needed guidance on the most basic stuff. It's all on windows, I haven't touched anything but a mac in 8 years. I felt like such a fool. I know they want me to ask a lot of questions but I'm so confused all the time I don't even know what to ask. This role is usually filled by people with 4 year CS degrees so I know I don't have the knowledge level they're expecting. I'm just.. lost and regretful. Does anyone have any tips for how I can not fuck this up? I feel like this is my only opportunity for a well-paying career and I am absolutely terrified that they are going to realize how clueless I am and tell me to get out.",1438,262,ughish,2022-04-14 22:28:13,https://www.reddit.com/r/learnprogramming/comments/u3t51m/i_got_my_first_software_developer_job_and_im/,0,learnprogramming
c0x8rb,Congratulations r/learnprogramming on one million subscribers!,Congratulations!,1436,41,troyc9977,2019-06-15 13:23:31,https://www.reddit.com/r/learnprogramming/comments/c0x8rb/congratulations_rlearnprogramming_on_one_million/,0,learnprogramming
g0vubg,"Dear all, take your time","Please for your own sake, don't take ANY topic/issue for granted.

Take as much time as you need to understand certain task, play with it after you're done watching a tutorial.  Open your editor, write and experiment with simple lines of code to get a better grasp on it. Usually while watching other people code everything looks easy, but once you start a projcet things get complicated. Move on only when you feel comfortable enough with what you've learnt.

This applies for anything - lay the foundations solid.

Having not spent enough time, I guarantee , you will find yourself going back.

&#x200B;

Edit: Glad to see you all discussing. To clarify I didn't mean get to know whole issue in 100%, because that can be really hard  Usually the more in depth you go the more you find, always. What I meant is get comfortable and don't rush. Some things require more time then others and it's completely fine.",1430,87,shaypser1,2020-04-14 01:07:32,https://www.reddit.com/r/learnprogramming/comments/g0vubg/dear_all_take_your_time/,0,learnprogramming
q15v59,"My teacher told us that software development will go extinct really soon because of ""no code/ zero code"" us that true?","M worried that by the to me I graduate there will be no jobs left, or the market will be really saturated. Should I consider a career change before it's too late?",1430,688,shadowhunter2468,2021-10-04 13:52:29,https://www.reddit.com/r/learnprogramming/comments/q15v59/my_teacher_told_us_that_software_development_will/,0,learnprogramming
2rjefl,Here's a list of 120 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2015),"This is not the complete list of MOOCs starting in Jan 2015, just the ones relevant to this community. The complete list of courses starting in Jan 2015 can be found over at [Class Central (273 courses)](https://www.class-central.com/report/mooc-course-report-jan-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)


BEGINNER(30)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2)|Jan 5th|NA|edX|[4.2](https://www.class-central.com/mooc/1857/edx-lfs101x-2-introduction-to-linux#course-all-reviews) (6 reviews)
[6.00.1x: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0)|Jan 7th|9 weeks|edX|[4.6](https://www.class-central.com/mooc/1341/edx-6-00-1x-introduction-to-computer-science-and-programming-using-python#course-all-reviews) (18 reviews)
[Introduction to Computer Programming](https://janux.ou.edu/course.cs1323-spring2015.html)|Jan 12th|16 weeks|Janux|[NA](https://www.class-central.com/mooc/1586/janux-introduction-to-computer-programming#course-all-reviews) 
[Usable Security](https://www.coursera.org/course/usablesec)|Jan 19th|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/1727/coursera-usable-security#course-all-reviews) 
[Introduction to Cyber Security](https://www.futurelearn.com/courses/introduction-to-cyber-security?utm_source=FL_blog&utm_medium=blog&utm_campaign=FL_blog)|Jan 26th|8 weeks|FutureLearn|[NA](https://www.class-central.com/mooc/2448/futurelearn-introduction-to-cyber-security#course-all-reviews) 
[CS 101: Building a Search Engine](http://www.udacity.com/overview/Course/cs101)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/320/udacity-introduction-to-computer-science#course-all-reviews) (33 reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|NA|openHPI|[4](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews) (1 review)
[UNSW Computing 1 - The Art of Programming](https://www.openlearning.com/courses/unsw/computing1)|Self Paced|12 weeks|OpenLearning|[NA](https://www.class-central.com/mooc/553/openlearning-unsw-computing-1-the-art-of-programming#course-all-reviews) 
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|[4.5](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-all-reviews) (2 reviews)
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/640/program-arcade-games-learn-computer-science#course-all-reviews) 
[Semantic Web Technologies](https://open.hpi.de/courses/semanticweb)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/615/openhpi-semantic-web-technologies#course-all-reviews) 
[Introduction to Programming in Java](https://www.udacity.com/course/cs046)|Self Paced|10 weeks|Udacity|[3.8](https://www.class-central.com/mooc/831/udacity-introduction-to-programming-in-java#course-all-reviews) (5 reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|[4](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-all-reviews) (2 reviews)
[Introduction to Salesforce App Development](https://www.udacity.com/course/ud162)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/1481/udacity-introduction-to-salesforce-app-development#course-all-reviews) 
[Mobile Web Development](https://www.udacity.com/course/cs256)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews) 
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self Paced|11 weeks|Stanford OpenEdx|[4.3](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews) (3 reviews)
[Making Sense of Data](https://datasense.withgoogle.com/preview)|Self Paced|3 weeks|Others|[3.7](https://www.class-central.com/mooc/1821/making-sense-of-data#course-all-reviews) (6 reviews)
[Make your own 2048](https://www.udacity.com/course/ud248)|Self Paced|NA|Udacity|[1](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews) (1 review)
[Programming Foundations with Python: Learn Object-Oriented Programming](https://www.udacity.com/course/ud036)|Self Paced|4 weeks|Udacity|[4](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python-learn-object-oriented-programming#course-all-reviews) (2 reviews)
[Introduction to Internetworking with TCP/IP](https://open.hpi.de/courses/internetworking2014)|Self Paced|NA|openHPI|[4](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews) (1 review)
[An Introduction to SAP HANA](https://open.sap.com/course/hanaintro1)|Self Paced|4 weeks|openSAP|[NA](https://www.class-central.com/mooc/1894/opensap-an-introduction-to-sap-hana#course-all-reviews) 
[Introduction to Programming in C](https://onlinecourses.nptel.ac.in/iitk_cs_101/preview)|Self Paced|NA|NPTEL|[1](https://www.class-central.com/mooc/2486/nptel-introduction-to-programming-in-c#course-all-reviews) (1 review)
[Cambridge GSCE Computing Online](http://www.cambridgegcsecomputing.org/)|Self Paced|NA|Cambridge University Press|[5](https://www.class-central.com/mooc/2780/cambridge-university-press-cambridge-gsce-computing-online#course-all-reviews) (1 review)
[Intro to HTML and CSS](https://www.udacity.com/course/ud304)|Self Paced|3 weeks|Udacity|[NA](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews) 
[JavaScript Basics](https://www.udacity.com/course/ud804)|Self Paced|3 weeks|Udacity|[NA](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews) 
[How to Use Git and GitHub](https://www.udacity.com/course/ud775)|Self Paced|3 weeks|Udacity|[4](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews) (1 review)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self Paced|NA|edX|[4.5](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews) (10 reviews)
[Internet History, Technology, and Security](https://www.coursera.org/course/insidetheinternet)|Self Paced|NA|Coursera|[4.8](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews) (13 reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|[4.8](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-all-reviews) (24 reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|[4.3](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-all-reviews) (8 reviews)
INTERMEDIATE(73)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Regression Models](https://www.coursera.org/course/regmods)|Jan 5th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews) 
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|Jan 5th|4 weeks|Coursera|[2](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews) (1 review)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|Jan 5th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews) 
[Image and video processing: From Mars to Hollywood with a stop at the hospital](https://www.coursera.org/course/images)|Jan 5th|9 weeks|Coursera|[3.7](https://www.class-central.com/mooc/462/coursera-image-and-video-processing-from-mars-to-hollywood-with-a-stop-at-the-hospital#course-all-reviews) (3 reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Jan 5th|4 weeks|Coursera|[2.7](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews) (10 reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Jan 5th|4 weeks|Coursera|[2.8](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews) (4 reviews)
[Cryptography I](https://www.coursera.org/course/crypto)|Jan 5th|6 weeks|Coursera|[4.6](https://www.class-central.com/mooc/616/coursera-cryptography-i#course-all-reviews) (14 reviews)
[Concepts in Game Development](https://www.open2study.com//node/1254)|Jan 5th|4 weeks|Open2Study|[4.1](https://www.class-central.com/mooc/1176/open2study-concepts-in-game-development#course-all-reviews) (8 reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Jan 5th|4 weeks|Coursera|[2.3](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews) (19 reviews)
[R Programming](https://www.coursera.org/course/rprog)|Jan 5th|4 weeks|Coursera|[2.6](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews) (43 reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Jan 5th|4 weeks|Coursera|[2.7](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews) (10 reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Jan 5th|4 weeks|Coursera|[2.8](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews) (4 reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|Jan 5th|4 weeks|Coursera|[4](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews) (2 reviews)
[Statistical Inference](https://www.coursera.org/course/statinference)|Jan 5th|4 weeks|Coursera|[1.5](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews) (2 reviews)
[CS169.2x: Software as a Service](https://www.edx.org/course/engineering-software-service-part-2-uc-berkeleyx-cs169-2x)|Jan 6th|6 weeks|edX|[4.7](https://www.class-central.com/mooc/558/edx-cs169-2x-software-as-a-service#course-all-reviews) (3 reviews)
[M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about)|Jan 6th|7 weeks|MongoDB University|[4.5](https://www.class-central.com/mooc/599/mongodb-university-m101j-mongodb-for-java-developers#course-all-reviews) (4 reviews)
[M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about)|Jan 6th|7 weeks|MongoDB University|[5](https://www.class-central.com/mooc/475/mongodb-university-m102-mongodb-for-dbas#course-all-reviews) (2 reviews)
[M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about)|Jan 6th|7 weeks|MongoDB University|[NA](https://www.class-central.com/mooc/1777/mongodb-university-m202-mongodb-advanced-deployment-and-operations#course-all-reviews) 
[M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about)|Jan 6th|7 weeks|MongoDB University|[NA](https://www.class-central.com/mooc/1188/mongodb-university-m101js-mongodb-for-node-js-developers#course-all-reviews) 
[M101P: MongoDB for Python Developers](https://university.mongodb.com/courses/M101P/about)|Jan 6th|7 weeks|MongoDB University|[NA](https://www.class-central.com/mooc/600/mongodb-university-m101p-mongodb-for-python-developers#course-all-reviews) 
[Programming Mobile Applications for Android Handheld Systems: Part 1](https://www.coursera.org/course/androidpart1)|Jan 7th|NA|Coursera|[3.8](https://www.class-central.com/mooc/1178/coursera-programming-mobile-applications-for-android-handheld-systems-part-1#course-all-reviews) (5 reviews)
[Power and elegance of computational thinking](https://janux.ou.edu/course.cs1303-spring2015.html)|Jan 12th|16 weeks|Janux|[NA](https://www.class-central.com/mooc/1585/janux-power-and-elegance-of-computational-thinking#course-all-reviews) 
[Information Visualization](http://ivmooc.cns.iu.edu/)|Jan 13th|15 weeks|Others|[NA](https://www.class-central.com/mooc/627/information-visualization#course-all-reviews) 
[Algorithms: Design and Analysis, Part 1](https://www.coursera.org/course/algo)|Jan 19th|6 weeks|Coursera|[4.9](https://www.class-central.com/mooc/374/coursera-algorithms-design-and-analysis-part-1#course-all-reviews) (18 reviews)
[PH525.1x: Statistics and R for the Life Sciences](https://www.edx.org/course/statistics-r-life-sciences-harvardx-ph525-1x)|Jan 19th|5 weeks|edX|[NA](https://www.class-central.com/mooc/2960/edx-ph525-1x-statistics-and-r-for-the-life-sciences#course-all-reviews) 
[BI 4 Platform Innovation and Implementation](https://open.sap.com/courses/bifour1-1)|Jan 21st|NA|openSAP|[NA](https://www.class-central.com/mooc/1345/opensap-bi-4-platform-innovation-and-implementation#course-all-reviews) 
[Algorithms, Part I](https://www.coursera.org/course/algs4partI)|Jan 23rd|6 weeks|Coursera|[4.3](https://www.class-central.com/mooc/339/coursera-algorithms-part-i#course-all-reviews) (12 reviews)
[Analysis of Algorithms](https://www.coursera.org/course/aofa)|Jan 23rd|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/921/coursera-analysis-of-algorithms#course-all-reviews)
[CS212 - The Design of Computer Programs](http://www.udacity.com/overview/Course/cs212)|Self Paced|7 weeks|Udacity|[3.8](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews) (4 reviews)
[CS253 - Web Application Engineering - Building a Blog](http://www.udacity.com/overview/Course/cs253)|Self Paced|7 weeks|Udacity|[4.7](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews) (9 reviews)
[CS262 - Programming Languages - Building a Browser](http://www.udacity.com/overview/Course/cs262)|Self Paced|7 weeks|Udacity|[4.2](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews) (5 reviews)
[CS215 - Algorithms - Crunching Social Networks](http://www.udacity.com/overview/Course/cs215/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/364/udacity-algorithms#course-all-reviews) 
[CS258 - Software Testing - How to Make Software Fail](http://www.udacity.com/overview/Course/cs258/CourseRev/1)|Self Paced|7 weeks|Udacity|[4.4](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews) (5 reviews)
[CS259 - Software Debugging - Automating The Boring Tasks](http://www.udacity.com/overview/Course/cs259/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews) (2 reviews)
[CSCI 1730 - Introduction to Programming Languages](http://www.cs.brown.edu/courses/cs173/2012/OnLine/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/458/csci-1730-introduction-to-programming-languages#course-all-reviews) 
[CS313 - Intro to Theoretical Computer Science - Dealing with Challenging Problems](http://www.udacity.com/overview/Course/cs313/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews) 
[CS271 - Introduction to Artificial Intelligence](http://www.udacity.com/overview/Course/cs271/CourseRev/1)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/592/udacity-introduction-to-artificial-intelligence#course-all-reviews) 
[CS255 - HTML5 Game Development - Building High Performance Web Applications](http://www.udacity.com/overview/Course/cs255/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews) (2 reviews)
[Datenmanagement mit SQL](https://open.hpi.de/courses/sql)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/777/openhpi-datenmanagement-mit-sql#course-all-reviews) 
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|[NA](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews) 
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|[NA](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-all-reviews) 
[Applied Data Science: An Introduction](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_276927_1)|Self Paced|NA|CourseSites|[4](https://www.class-central.com/mooc/1806/coursesites-applied-data-science-an-introduction#course-all-reviews) (3 reviews)
[Introduction to Mobile Solution Development](https://open.sap.com/course/mobile1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/1348/opensap-introduction-to-mobile-solution-development#course-all-reviews) 
[Introduction to Hadoop and MapReduce](https://www.udacity.com/course/ud617)|Self Paced|NA|Udacity|[5](https://www.class-central.com/mooc/1470/udacity-introduction-to-hadoop-and-mapreduce#course-all-reviews) (1 review)
[Big Data applications and Analytics](https://bigdatacourse.appspot.com/)|Self Paced|NA|Others|[3](https://www.class-central.com/mooc/1948/big-data-applications-and-analytics#course-all-reviews) (1 review)
[Introduction to Software Development on SAP HANA](https://open.sap.com/course/hana1-1)|Self Paced|NA|openSAP|[5](https://www.class-central.com/mooc/1347/opensap-introduction-to-software-development-on-sap-hana#course-all-reviews) (3 reviews)
[BI 4 Platform Innovation and Implementation](https://open.sap.com/course/bifour1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/1345/opensap-bi-4-platform-innovation-and-implementation#course-all-reviews) 
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews) 
[Intro to Data Science](https://www.udacity.com/course/ud359)|Self Paced|8 weeks|Udacity|[4](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews) (2 reviews)
[How to create a Windows 8 App](http://www.opencourseworld.de/pages/coursedescription.jsf?courseId=487693)|Self Paced|8 weeks|OpenCourseWorld|[NA](https://www.class-central.com/mooc/1788/opencourseworld-how-to-create-a-windows-8-app#course-all-reviews) 
[Data Wrangling with MongoDB](https://www.udacity.com/course/ud032)|Self Paced|8 weeks|Udacity|[4](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews) (1 review)
[Exploratory Data Analysis](https://www.udacity.com/course/ud651)|Self Paced|8 weeks|Udacity|[4.6](https://www.class-central.com/mooc/1478/udacity-exploratory-data-analysis#course-all-reviews) (5 reviews)
[Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014)|Self Paced|NA|openHPI|[5](https://www.class-central.com/mooc/1701/openhpi-parallel-programming-concepts#course-all-reviews) (1 review)
[SAP Business Suite powered by SAP HANA](https://open.sap.com/course/suitehana1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/1865/opensap-sap-business-suite-powered-by-sap-hana#course-all-reviews) 
[Ada: Overview](http://university.adacore.com/courses/overview/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2109/ada-overview#course-all-reviews) 
[Ada: Basic Concepts](http://university.adacore.com/courses/basic-concepts/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2110/ada-basic-concepts#course-all-reviews) 
[Ada: Programming in the Large](http://university.adacore.com/courses/programming-in-the-large1/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2111/ada-programming-in-the-large#course-all-reviews) 
[Website Performance Optimization: The Critical Rendering Path](https://www.udacity.com/course/ud884)|Self Paced|1 weeks|Udacity|[NA](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization-the-critical-rendering-path#course-all-reviews) 
[UX Design for Mobile Developers:  Learn to Design a 5-star Android App](https://www.udacity.com/course/ud849)|Self Paced|4 weeks|Udacity|[NA](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers-learn-to-design-a-5-star-android-app#course-all-reviews) 
[Developing Scalable Apps with Google App Engine](https://www.udacity.com/course/ud859)|Self Paced|6 weeks|Udacity|[NA](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-with-google-app-engine#course-all-reviews) 
[Java SE - Standart Edition](https://www.universiteplus.com/courses/java-se-standart-edition)|Self Paced|NA|Universiteplus|[NA](https://www.class-central.com/mooc/2420/universiteplus-java-se-standart-edition#course-all-reviews) 
[Developing Android Apps:  Android Fundamentals](https://www.udacity.com/course/ud853)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/2211/udacity-developing-android-apps-android-fundamentals#course-all-reviews) 
[Software Development Life Cycles](https://www.udacity.com/course/ud805)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/2335/udacity-software-development-life-cycles#course-all-reviews) 
[Computer Networking:  Security and Software Defined Networking](https://www.udacity.com/course/ud436)|Self Paced|12 weeks|Udacity|[5](https://www.class-central.com/mooc/2336/udacity-computer-networking-security-and-software-defined-networking#course-all-reviews) (1 review)
[Knowledge Engineering with Semantic Web Technologies](https://open.hpi.de/courses/semanticweb2014)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/2038/openhpi-knowledge-engineering-with-semantic-web-technologies#course-all-reviews) 
[Object-Oriented JavaScript](https://www.udacity.com/course/ud015)|Self Paced|5 weeks|Udacity|[5](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews) (1 review)
[Intro to AJAX - Making Asynchronous Requests with jQuery](https://www.udacity.com/course/ud110)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax-making-asynchronous-requests-with-jquery#course-all-reviews) 
[Data Visualization and D3.js](https://www.udacity.com/course/ud507)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews) 
[HTML5 Canvas - From Pixels to Animation!](https://www.udacity.com/course/ud292)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/2999/udacity-html5-canvas-from-pixels-to-animation#course-all-reviews) 
[Intro to iOS App Development with Swift](https://www.udacity.com/course/ud585)|Self Paced|4 weeks|Udacity|[4.3](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews) (3 reviews)
[Intro to jQuery - Manipulating Websites with Ease](https://www.udacity.com/course/ud245)|Self Paced|1 weeks|Udacity|[NA](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery-manipulating-websites-with-ease#course-all-reviews) 
[Intro to Machine Learning - Pattern Recognition for Fun and Profit](https://www.udacity.com/course/ud120)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning-pattern-recognition-for-fun-and-profit#course-all-reviews) 
[JavaScript Design Patterns](https://www.udacity.com/course/ud989)|Self Paced|6 weeks|Udacity|[NA](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews) 
ADVANCED(17)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Computational Methods for Data Analysis](https://www.coursera.org/course/compmethods)|Jan 5th|10 weeks|Coursera|[5](https://www.class-central.com/mooc/595/coursera-computational-methods-for-data-analysis#course-all-reviews) (2 reviews)
[Hardware Security](https://www.coursera.org/course/hardwaresec)|Jan 5th|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/1729/coursera-hardware-security#course-all-reviews) 
[Artificial Intelligence Planning](https://www.coursera.org/course/aiplan)|Jan 12th|7 weeks|Coursera|[NA](https://www.class-central.com/mooc/414/coursera-artificial-intelligence-planning#course-all-reviews) 
[Heterogeneous Parallel Programming](https://www.coursera.org/course/hetero)|Jan 12th|9 weeks|Coursera|[5](https://www.class-central.com/mooc/427/coursera-heterogeneous-parallel-programming#course-all-reviews) (1 review)
[CS 373: Programming a Robotic Car](http://www.udacity.com/overview/Course/cs373)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews) (5 reviews)
[CS387 - Applied Cryptography](http://www.udacity.com/overview/Course/cs387)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/326/udacity-cs387-applied-cryptography#course-all-reviews) (2 reviews)
[In-Memory Data Management (2014) - Implications on Enterprise Systems](https://openhpi.de/course/inmemorydatabases)|Self Paced|7 weeks|openHPI|[5](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management-2014-implications-on-enterprise-systems#course-all-reviews) (2 reviews)
[CS344 - Introduction to Parallel Programming  - Using CUDA to Harness the Power of GPUs](http://www.udacity.com/overview/Course/cs344/CourseRev/1)|Self Paced|7 weeks|Udacity|[3](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews) (1 review)
[CS291 - Interactive Rendering - Introduction to 3D Computer Graphics](http://www.udacity.com/overview/Course/cs291/CourseRev/1)|Self Paced|10 weeks|Udacity|[5](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews) (2 reviews)
[CS348 - Functional Hardware Verification - How to Verify Chips and Eliminate Bugs](http://www.udacity.com/overview/Course/cs348/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews) 
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-all-reviews) 
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-all-reviews) 
[Machine Learning 3—Reinforcement Learning](https://www.udacity.com/course/ud820)|Self Paced|4 weeks|Udacity|[NA](https://www.class-central.com/mooc/1849/udacity-machine-learning-3-reinforcement-learning#course-all-reviews) 
[Rapid Deployment of SAP Solutions](https://open.sap.com/course/rds1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/2018/opensap-rapid-deployment-of-sap-solutions#course-all-reviews) 
[In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/2458/opensap-in-memory-data-management-in-a-nutshell#course-all-reviews) 
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/ud381)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews) 
[Rapid Deployment of SAP Solutions](https://open.sap.com/courses/rds1-1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/2018/opensap-rapid-deployment-of-sap-solutions#course-all-reviews) ",1431,115,dhawal,2015-01-06 18:40:22,https://www.reddit.com/r/learnprogramming/comments/2rjefl/heres_a_list_of_120_free_online_programmingcs/,0,learnprogramming
hgh4um,Some positive r/learnprogramming encouragement for anyone who needs it,"I'm posting this here because I honestly don't have anyone else to share it with or who knows anything about programming, so pre-apologies for the word vomit.

Prior to Jan. 1 of this year, I knew 0 programming of any language. I think I changed some colors on my Xanga page back in 6th grade. Oddly enough, I work at a large, well-known Silicon Valley software company (not FAANG) as a SaaS Application Support Engineer. I'm about as close to the code as you can get without actually coding. My job is working with customers (namely sys. admins for Federal agencies) when our software breaks, and when it's not a configuration issue, bringing possible bugs back to our developers and PMs for testing, review, discussion, etc.

This year, in an attempt to not be such a lazy shit, I told myself that I would try to put, at the bare minimum, 1 hour a day into learning a programming language. I chose Python. I started with Automate the Boring Stuff (thanks Al, you fucking rock) and Code Academy to pick up the syntax and become familiar with some of the standard libraries. Hell, at that point, I didn't know what a library was. Honestly guys, I didn't know what *anything* was. Like, I didn't realize that code or programs were essentially just files in folders, let alone modules, packages, or whole containers for hosting these programs. Nonetheless, I stuck with it (thanks Stack Overflow, you also rock). I'm nearly 6 months in at this point and so far I've kept my commitment. And what's great, is that I have put much, much more than 1 hour a day into my process. I'd say I average 3 hours a day if you count (thanks COVID-19, you don't rock... but you've allowed me to work from home and productively spend what downtime I have rather than blankly looking at a screen, pretending to do things in-front of my boss/peers).

After getting comfortable with the syntax, I started fucking with Git, API's, AWS, CS50, and Code Wars. Quick tidbit --- if you're learning Python and HAVEN'T read Hitchhiker's Guide to Python, stop what you're doing and go read that beautiful mess. It's more important than this beast of a post. Anyway, as cool as r/Dataisbeautiful is, I wanted to do something with my newfound skills that would benefit my team. So I began building a bot that alerted my team and I in Slack when certain types of tickets were submitted to our Salesforce queue (we work on a ticketing system in SalesForce Lightning). I built it locally on my Windows machine first, then deployed it to an AWS EC2 using ngrok as a tunnel. Being the beginner that I am, I just ran it from the terminal on the EC2's localhost (not secure - I don't recommend this). It's actually helped my team a lot. We no longer miss these types of tickets when they enter our queue and one of the metrics/KPI's my boss is even rated on is looking better considering my team hits all these types of tickets when they come in. After seeing what I could do with this bot. I built another one. A better one for a different team that allows them to streamline their ticket reassignment system. This time I built a Flask server and deployed it to Heroku, allowing these teams to take a before, 11-step process (I counted) into a 2-step process. I will be pitching it as a genuine solution to a senior manager in two weeks.

I guess I just wanted to say this: Your dreams of learning programming are possible. And it might take time to work at Google or be the cool guy on Reddit with ""SWE"" by their username who effortlessly posts the answers to impossible programming questions like some anonymous internet hero. But if you enjoy what you're doing, the time should fly by and the titles and bullshit should matter less. Even if the threshold is 30 minutes, hell even 15 minutes, I very much so encourage some small commitment of time that will facilitate a growing relationship between you and code, should you have interest. Know that you can become better, learn, and grow and have that satisfaction actualize within you in a way that I think is even more rewarding than the high salaries or reputation that seems to be so coveted in this sub. Good luck, everyone. Keep at it and may your persistent, never-ending feeling of idiocy inspire you to learn more than you ever thought possible.",1426,76,PussPussMcSquishy,2020-06-26 22:04:15,https://www.reddit.com/r/learnprogramming/comments/hgh4um/some_positive_rlearnprogramming_encouragement_for/,0,learnprogramming
ga5jbo,I did it!,"Hi all, I've been a lurker on this sub for a while now. I started coding full-time last year(25-30 hours a week) and focused on building my own projects and portfolio.

I got my first job offer as a UX Developer and start next week! It's been an awesome journey and one I cant wait to continue of with all the new stuff I'm going to learn.

Just want to say thanks for variety of recommendations and motivation!",1430,115,shooteshute,2020-04-29 08:17:43,https://www.reddit.com/r/learnprogramming/comments/ga5jbo/i_did_it/,0,learnprogramming
a4prkc,I want to watch a programmers workflow from the start of a project to the end. Does this exist?,"I would love to watch someone build an app from scratch or implement a feature from start to finish. I don’t particularly care what language or what project but I would love to see someone’s raw mostly unedited workflow, the google searches, that Stackoverflow posts, the documentation reading, the bugs, the debugging, the frustration, the triumph! Does anyone do this? I know there’s a ton of project tutorials and whatnot but I would love to watch a seasoned programmer work through a problem.

Could be done over a twitch stream or something or a YouTube series. I just feel like a lot of the videos are almost too polished, they pre write a lot of code in advance for the sake of the video, which is fine for tutorials but I want to see the process",1423,119,234879,2018-12-09 22:58:39,https://www.reddit.com/r/learnprogramming/comments/a4prkc/i_want_to_watch_a_programmers_workflow_from_the/,0,learnprogramming
nl455n,Thank you to everyone sharing their self-taught success stories here.,"**Spoiler Alert:** This is NOT a success story, at least not yet.

I'm a female, almost 30, with no degree, and currently working in the customer service field.

I'm also considered the stupid kid of our family because of where I am now compared to everyone else in the family with multiple degrees, high-paid jobs, etc.

I quit uni three times when I was 19-21. This is because I got into various degrees with my average grades to have a degree and eventually gave up.

There's one thing I didn't completely give up in the past 10 years: It was my passion for blogging, building websites, affiliate marketing, and content writing.

I've had some success with them, but it was no near enough to give up my full-time job.

Looking back at the past 15 years of my life gave me a lot of anxiety, and depression, even until a week ago.

I kept comparing myself to others and dwelling in shame.

I've wanted to go back to uni since 2020 but wasn't 100% sure what I wanted to study.

One moment I wanted to become a lawyer, and then something else a few months later.

I also wanted to learn programming and gave up every time I thought about it because my inner self kept telling me I'll never be able to do it.

I honestly cried my heart out to God to show me the way last week, and here I am past few days devouring all your posts and taking notes.

I just wanted to thank God for opening my eyes and making me see what I needed to see.

I'm going to start by learning Python on YouTube first, followed by Udemy courses.

I thank each one of you for sharing your success, lessons, and failures here.

Please don't ever stop.

Please let me know any tips you have for me if you wish to.

I really appreciate it.

**EDIT:** I'm honestly speechless. Honestly didn't think my post was going to get this much attention. Thanking each one of you with all my heart. I'll do my best to reply to each comment. 

Wow, I'm definitely bookmarking this thread to come back to every time I need a motivation boost. I see so many useful resources and tips being mentioned in the comments and can't thank you all enough. ",1423,132,tryingtorebuild,2021-05-26 00:32:49,https://www.reddit.com/r/learnprogramming/comments/nl455n/thank_you_to_everyone_sharing_their_selftaught/,0,learnprogramming
8043ep,Start using github if you are a beginner in programming,"If you are a beginner there are many advantages of using git now:

1. You will learn git and this is great for your resume.
2. You will be able to share your code easily with an expert and ask for feedback.
3. You will be able to see your own code easily and keep track of it. This will serve as motivation.

Take a look at github and how to use git. https://youtu.be/IOUiaO-YGZM",1421,205,infinite-Joy,2018-02-25 12:08:49,https://www.reddit.com/r/learnprogramming/comments/8043ep/start_using_github_if_you_are_a_beginner_in/,0,learnprogramming
wa6thp,"Explain ""API"" like I'm an idiot","So I've been writing code in Python and JavaScript for almost a year now and don't understand the concept of API and its development. I watched so many tutorials and read blog posts but still have no idea what's going on. 

**Why I need to know about API?:**
I'd like to learn TensorFlow and Keras (Deep Learning libraries) but every tutorial I watched said ""Keras is a high-level API that sits on top of TensorFlow"". Even if the tutorial is for beginners, they don't explain what an API is. 


Can anyone explain it in simple words? And what does a high-level API mean?

**EDIT:** Wow.. wasn't expecting so much attention! Thank you everyone for all the replies. I've read most of the replies but still need to read the rest. It makes so much sense now. Everyone has different (and brilliant!) examples. :)",1415,248,riyanswt,2022-07-28 10:58:42,https://www.reddit.com/r/learnprogramming/comments/wa6thp/explain_api_like_im_an_idiot/,0,learnprogramming
cjg8th,A Programmer’s Regret: Neglecting Math at University,"https://awalterschulze.github.io/blog/post/neglecting-math-at-university/

Math is not only a box of very useful tools for solving problems it is also deeply intertwined with programming.  Taking time to study math, will make you a better programmer in the long term.  Now that I am a senior programmer, I regret not paying attention to math while I was at University.  I hope that, with this blog post, I can stop someone from repeating my mistake.",1421,183,awalterschulze,2019-07-29 19:40:04,https://www.reddit.com/r/learnprogramming/comments/cjg8th/a_programmers_regret_neglecting_math_at_university/,0,learnprogramming
pfgeto,Coding is only fun when I understand it.,"I'm exhausted. I know this is probably a universal feeling but I'm so tired of understanding coding and then not understanding it. I am having such a hard time with C# / Java and I absolutely dread it. I honestly don't know what to do anymore. I feel like I'm falling apart.

Just to note: I am in school for software development. These are the languages we are doing right now.

Edit:
Thank you all so much for the wonderful replies! You have all helped me relax a little more tonight. When I posted this, I was in the middle of a severe panic attack. I feel a little more grounded now and I will continue to look back at this thread for support when I need it. 
I am responding to everyone as fast as I can. Thank you again and have a wonderful day tomorrow!",1413,333,Lilkko,2021-08-31 22:26:56,https://www.reddit.com/r/learnprogramming/comments/pfgeto/coding_is_only_fun_when_i_understand_it/,0,learnprogramming
10455tf,"Unpopular opinion: asking ""how do I learn to code"" is procrastination","While seeking to know how to learn a subject can be helpful, it can also become procrastination. The extra time spent searching for resources can become a waste of time. 

I remember when I made this mistake. I would spend hours scouting the web for the textbook that would rule them all. I had so many potential study material in my bookmarks that it would have taken a couple of years to go through it all. 

In my case, the solution was to find the opinion of an authority on the subject and to start as soon as possible. If it was not possible, then the most recommended resources on the internet were next in line. Even if the most suggested resources were not the best, they were good enough for a beginner.",1417,171,None,2023-01-05 17:48:33,https://www.reddit.com/r/learnprogramming/comments/10455tf/unpopular_opinion_asking_how_do_i_learn_to_code/,0,learnprogramming
1zms0p,Here's a list of 48 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2014),"This is not the complete list of MOOCs starting in March 2014, just the ones relevant to this community. The complete list of courses starting in March 2014 can be found over at [Class Central blog (139 courses)](http://www.blog.class-central.com/mooc-report-march-2014/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER(12)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[CS 101: Building a Search Engine](http://www.udacity.com/overview/Course/cs101)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/320/udacity-introduction-to-computer-science#course-reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|6 weeks|openHPI|[NA](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-reviews)
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-reviews)
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/640/program-arcade-games-learn-computer-science#course-reviews)
[Introduction to Programming in Java](https://www.udacity.com/course/cs046)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/831/udacity-introduction-to-programming-in-java#course-reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|NA|Open2Study|[4](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-reviews)
[Introduction to Salesforce App Development](https://www.udacity.com/course/ud162)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1481/udacity-introduction-to-salesforce-app-development#course-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022)|Self Paced|NA|EdX|[5](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-reviews)
[Mobile Web Development](https://www.udacity.com/course/cs256)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-reviews)
[An Introduction to Interactive Programming in Python](https://www.coursera.org/course/interactivepython)|Mar 24th|NA|Coursera|[5](https://www.class-central.com/mooc/408/coursera-an-introduction-to-interactive-programming-in-python#course-reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|[4.6](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|[4.5](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-reviews)
INTERMEDIATE(29)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[CS212 - The Design of Computer Programs](http://www.udacity.com/overview/Course/cs212)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-reviews)
[CS253 - Web Application Engineering - Building a Blog](http://www.udacity.com/overview/Course/cs253)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/324/udacity-web-development#course-reviews)
[CS262 - Programming Languages - Building a Browser](http://www.udacity.com/overview/Course/cs262)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/325/udacity-programming-languages#course-reviews)
[CS215 - Algorithms - Crunching Social Networks](http://www.udacity.com/overview/Course/cs215/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/364/udacity-algorithms#course-reviews)
[CS258 - Software Testing - How to Make Software Fail](http://www.udacity.com/overview/Course/cs258/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/365/udacity-software-testing#course-reviews)
[CS259 - Software Debugging - Automating The Boring Tasks](http://www.udacity.com/overview/Course/cs259/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/457/udacity-software-debugging#course-reviews)
[CS313 - Intro to Theoretical Computer Science - Dealing with Challenging Problems](http://www.udacity.com/overview/Course/cs313/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-reviews)
[CS271 - Introduction to Artificial Intelligence](http://www.udacity.com/overview/Course/cs271/CourseRev/1)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/592/udacity-introduction-to-artificial-intelligence#course-reviews)
[CS255 - HTML5 Game Development - Building High Performance Web Applications](http://www.udacity.com/overview/Course/cs255/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-reviews)
[Introduction to Hadoop and MapReduce](https://www.udacity.com/course/ud617)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1470/udacity-introduction-to-hadoop-and-mapreduce#course-reviews)
[Machine Learning](https://www.coursera.org/course/ml)|Mar 3rd|NA|Coursera|[5](https://www.class-central.com/mooc/835/coursera-machine-learning#course-reviews)
[VLSI CAD:  Logic to Layout](https://www.coursera.org/course/vlsicad)|Mar 3rd|NA|Coursera|[NA](https://www.class-central.com/mooc/428/coursera-vlsi-cad-logic-to-layout#course-reviews)
[Networks: Friends, Money, and Bytes](https://www.coursera.org/course/friendsmoneybytes)|Mar 3rd|NA|Coursera|[NA](https://www.class-central.com/mooc/359/coursera-networks-friends-money-and-bytes#course-reviews)
[Data Mining with Weka](https://weka.waikato.ac.nz/dataminingwithweka/preview)|Mar 3rd|NA|Others|[NA](https://www.class-central.com/mooc/1152/data-mining-with-weka#course-reviews)
[Discrete Optimization](https://www.coursera.org/course/optimization)|Mar 4th|NA|Coursera|[NA](https://www.class-central.com/mooc/487/coursera-discrete-optimization#course-reviews)
[6.00.2x: Introduction to Computational Thinking and Data Science](https://www.edx.org/course/mitx/mitx-6-00-2x-introduction-computational-1505)|Mar 5th|NA|EdX|[NA](https://www.class-central.com/mooc/1779/edx-6-00-2x-introduction-to-computational-thinking-and-data-science#course-reviews)
[Exploratory Data Analysis](https://www.udacity.com/course/ud651)|Mar 12th|NA|Udacity|[NA](https://www.class-central.com/mooc/1478/udacity-exploratory-data-analysis#course-reviews)
[M101J: MongoDB for Java Developers](https://education.mongodb.com/courses/10gen/M101J/2014_March/about)|Mar 17th|NA|MongoDB|[NA](https://www.class-central.com/mooc/599/mongodb-m101j-mongodb-for-java-developers#course-reviews)
[Compilers](https://www.coursera.org/course/compilers)|Mar 17th|NA|Coursera|[NA](https://www.class-central.com/mooc/328/coursera-compilers#course-reviews)
[Web Application Architectures](https://www.coursera.org/course/webapplications)|Mar 17th|NA|Coursera|[NA](https://www.class-central.com/mooc/1816/coursera-web-application-architectures#course-reviews)
[Bioinformatics: Introduction and Methods 生物信息学: 导论与方法](https://www.coursera.org/course/pkubioinfo)|Mar 17th|NA|Coursera|[NA](https://www.class-central.com/mooc/1209/coursera-bioinformatics-introduction-and-methods--#course-reviews)
[Linear and Discrete Optimization](https://www.coursera.org/course/linearopt)|Mar 17th|NA|Coursera|[NA](https://www.class-central.com/mooc/526/coursera-linear-and-discrete-optimization#course-reviews)
[Algorithms, Part II](https://www.coursera.org/course/algs4partII)|Mar 21st|NA|Coursera|[NA](https://www.class-central.com/mooc/340/coursera-algorithms-part-ii#course-reviews)
[M101JS: MongoDB for Node.js Developers](https://education.mongodb.com/courses/10gen/M101JS/2014_March/about)|Mar 24th|NA|MongoDB|[NA](https://www.class-central.com/mooc/1188/mongodb-m101js-mongodb-for-node-js-developers#course-reviews)
[Fundamentals of Digital Image and Video Processing](https://www.coursera.org/course/digital)|Mar 31st|12 weeks|Coursera|[NA](https://www.class-central.com/mooc/724/coursera-fundamentals-of-digital-image-and-video-processing#course-reviews)
[High Performance Scientific Computing](https://www.coursera.org/course/scicomp)|Mar 31st|NA|Coursera|[NA](https://www.class-central.com/mooc/764/coursera-high-performance-scientific-computing#course-reviews)
[General Game Playing](https://www.coursera.org/course/ggp)|Mar 31st|NA|Coursera|[NA](https://www.class-central.com/mooc/588/coursera-general-game-playing#course-reviews)
[Compilers](https://www.coursera.org/course/compilers)|Self Paced|NA|Coursera|[NA](https://www.class-central.com/mooc/328/coursera-compilers#course-reviews)
ADVANCED(7)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[CS 373: Programming a Robotic Car](http://www.udacity.com/overview/Course/cs373)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-reviews)
[CS387 - Applied Cryptography](http://www.udacity.com/overview/Course/cs387)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/326/udacity-cs387-applied-cryptography#course-reviews)
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|6 weeks|openHPI|[NA](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management#course-reviews)
[CS344 - Introduction to Parallel Programming  - Using CUDA to Harness the Power of GPUs](http://www.udacity.com/overview/Course/cs344/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-reviews)
[CS291 - Interactive Rendering - Introduction to 3D Computer Graphics](http://www.udacity.com/overview/Course/cs291/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-reviews)
[CS348 - Functional Hardware Verification - How to Verify Chips and Eliminate Bugs](http://www.udacity.com/overview/Course/cs348/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-reviews)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Mar 17th|NA|Udacity|[NA](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-reviews)
",1412,115,dhawal,2014-03-05 15:48:03,https://www.reddit.com/r/learnprogramming/comments/1zms0p/heres_a_list_of_48_free_online_programmingcs/,0,learnprogramming
ll9zap,"Read the documentation, not stack overflow.","I'm an android developer and started learning web development a couple of months ago. Today I realized I haven't used stack overflow not even once since then. This is because every time I needed to learn something new, I went straight to the documentation and spent a few days trying to understand it deeply.

When I started learning android development as my entry to programming, I wasn't able to get anything useful from the documentation due to my lack of experience. I was learning from Udacity courses and Youtube videos, this has left a gap in my knowledge and I was visiting stack overflow a lot jumping from link to link and wasting time.

Two months ago I started learning Web development. I've learned HTML, CSS, JS, React, Redux, React-Redux, React-Router, Bootstrap, React-Bootstrap, Material UI and more. All by myself without spending one dollar. My approach was to first read the documentation, then see someone on Youtube applying it in a real-world project, then start applying it in my own projects until I'm comfortable with it. 

Stack overflow is great and very helpful, of course. But you should first spend some time on the documentation to understand it deeply. It will give you confidence and save you a lot of time. And remember: Slow is smooth, and smooth is fast.",1407,152,ameencarpenter,2021-02-16 18:19:46,https://www.reddit.com/r/learnprogramming/comments/ll9zap/read_the_documentation_not_stack_overflow/,0,learnprogramming
lsmb8x,Best ways to learn Programming on your own,"* Ask yourself why you want to learn it. 
* Choose the right Stack. 
* Start Small.
* Read Books and articles.
* Watch & learn from online video courses.
* Practice with personal projects. 
* Ask for help.
* Find a mentor. 
* Celebrate small wins. 

Feel free to add to the list.",1408,150,desoga,2021-02-26 01:21:32,https://www.reddit.com/r/learnprogramming/comments/lsmb8x/best_ways_to_learn_programming_on_your_own/,0,learnprogramming
6aoo09,I found a website that tells you what languages and tools were used to build other websites,"I'm not affiliated with this website in any way: [builtwith.com](https://builtwith.com/)  
I found this a while ago and thought a few people here might find it useful. You input a website and it spits out what was used to build that website.  
I always see a lot of languages and tools mentioned (JavaScript, AJAX, jQuery, AngularJS, etc.) but I sometimes don't know how they all fit together or where they might be useful. I think Built With can help clear things up a little because you can see what is working together (even if you can't see HOW they're working together).",1406,41,peppypop82,2017-05-12 02:21:39,https://www.reddit.com/r/learnprogramming/comments/6aoo09/i_found_a_website_that_tells_you_what_languages/,0,learnprogramming
biawny,"I built an interactive SQL tutorial, very beginner friendly","[https://www.sqlfuntime.com/](https://www.sqlfuntime.com/)

Github Link: [https://github.com/GKhalsa/sql-fun-time](https://github.com/GKhalsa/sql-fun-time)",1403,64,wallbeam,2019-04-28 12:50:03,https://www.reddit.com/r/learnprogramming/comments/biawny/i_built_an_interactive_sql_tutorial_very_beginner/,0,learnprogramming
jkvnnb,Break From Coding,"I have been learning Java for about 6 months now. I spent a good amount of time each day coding and watching videos. When I was taking a ""break"" from coding maybe an hour or two a day or on the weekends. I found myself thinking about coding and constantly watching videos of people coding stuff that were beyond my level. So finally, after about 6 months of this, i decided to take a full week off coding. No videos, no writing code, no coding homework, and no thinking about it if possible. After doing that, i found myself wanting to code badly. It's my new hobby and as much as I enjoy it. The break was nice and now im ready to get back at it. If anyone out there is feeling burnt out or just feels they need a break, do it. It's not going to hurt your learning. If anything, it is going to improve it. Relighting the flame so to speak!

Just wanted to share my story.",1403,109,Rythmic-Pulse,2020-10-30 12:16:56,https://www.reddit.com/r/learnprogramming/comments/jkvnnb/break_from_coding/,0,learnprogramming
xn90c2,"How I landed a fully remote, paid python developer internship without a college degree (of any kind) or going through a bootcamp.","Hello everyone!! I'm sorry for the long post but I wanted to be comprehensive for you all.

I wanted to share my story because I'd frequently notice in the comments on success stories here, people mentioning how hard it is to even be considered for anything without a degree of some sort, relevant or irrelevant to programming. Throughout my journey, I also found this to be very much the case. 

A bit of my background: I am 28 and I did attend college but dropped out after 2 years and never got any degrees or graduated, just a lot of debt. I've worked as a waitress, landscaper, gardener, doggie daycare sitter, farmer, and a Lowe's employee. Basically, I have had 0 experience in any type of computer or tech job ever. 

**My self-taught journey:**

1.I started with How to *Automate the Boring Stuff with Python* developed a pretty good understanding of basic python syntax but didn't build any major projects. Then I worked through *Beyond the Basics with Python* that introduced me to git control and some more advanced Python concepts.

2.I left my job where I worked 10 hrs a day, 6 days a week for a serving job working only 4-6 hours a night 4 days a week allowing me to study for about 8 hours a day M-F. Since it was a pretty busy restaurant, I didn't take a huge pay cut from my previous job.

 (This isn't for everyone, but I highly recommend trying get some work schedule where you can spend most of your day, at least one day of the week, learning and studying once you reach a certain point. Mostly I recommend this to get yourself in the habit of coding 8 hours a day. If you've always worked manual labor jobs like me, this may be a hard transition once you get a job, so try to ease yourself into it.)

3.I heard about *The Odin Project* and decided to give it a go. I completed the Foundations course and half of the Ruby course.

(It was an awesome learning resource not only to learn web development but to develop good learning habits.)

(I frequently used Mozilla's *MDN Web Docs* during the course and I highly recommend it as a resource for web development if you don't already use it!)

4.I developed my first web application with *Django*, with the goal of it being resume ready, to work on my Python and Web Development skills.

(Working with `Django` not only taught how to give and handle web requests and data but also experience working with databases.)

(For a lot of this project, I had to dive into the actual source code of `Django` to understand certain functionalities in order to re-implement my own methods. I think this challenge really helped me get a better understanding of Object Oriented Programming and how to organize and implement a large program with lots of different pieces.)

(Depending on your career goal, databases are a very important skill set and learning them during development of my `Django` project was a perfect time if my knowledge to learn. Additionally, the usage of them in `Django` is very intuitive making the learning process much easier IMO.)

5.My second resume project was an event planning app, that utilized a local *SQlite* database to house the event data. I got the idea from a challenge one of the organizers, in a local group I found, gave us from the subreddit r/DailyProgrammer.

(I wrote this program in `python` and utilized their `sqlite3` package however, the package requires you to write your own SQL statements. This really helped amp up my database skill set.)


**At this point I was 1.5 years into self teaching and was getting tired of my serving job so I started the job search.**
When I finally figured out what title I was even looking for, I had a pretty good grasp of the required skills and concepts listed under those jobs however, most also wanted experience or a degree, and I had neither. I applied at a few places that hadn't specified needing either but didn't hear anything. At a loss, I wanted to find a group of programming professionals whom I could talk to about how they got that first foot in the door. (I have many Discord programming channels but as they have hundreds to thousands, some millions, of people it's almost impossible to network in them) I found meetup.com and searched my town for local python and coding groups, and found a python one right in my town! It was a great environment that was tailored to those learning coding, but also went over advanced topics where you'd get input from professionals.
After being in the group a month or so, on a message board for the group, another member (who I had not met yet) mentioned screening interns at their work. I am not one to put myself out there and I was worried that asking about it directly would overstep some boundary of the group chat but I said what the hell, and asked if they were still accepting interns. 2 weeks later, I was hired for a full time internship with the opportunity to be hired on as a python developer. And to be completely honest, I bombed on of the questions they asked me in the interview. I didn't think I did great, but I did think I did okay! 

**The main technical questions they asked:**
- Walk them though writing the pseudo code for developing a tetris game. 
    - They were looking for me to define some type of MVC(Model View Controller) or MTC(Model Template Controller) design pattern.
- Given 2 SQL tables, one of veggies the other prices of those veggies each year related to the veggie table by foreign key, write an SQL command that returns the average price of each veggie over the years. 
    - This is the question i didn't know. I had learned databases with `Django` and used many foreign keys. However, for some reason I forgot when I was making my event planner app using only the `python sqlite3` package, and hadn't worked on learning the actual SQL syntax of foreign keys, querying 2 tables, or joining the results of 2 different tables together. 
- Given a `python` function with a try/except statement and 3 different return values, how many unit test cases would you need to fully test the function.
    - My primary task in the internship is writing unit tests for already existing functions. I hadn't actually worked with `python` unittesting extensively until my event planner project so it was fresh on my mind. 

They said they were most impressed with the breadth of knowledge I had already, from `python` to `java-script` to `ruby`, and my experience working with git control(imperative in the real world work setting and both *The Odin Project* and *Beyond the Basics with Python* focused heavily on teaching git control) and databases was a plus. (Like I said before, `Django` was great for learning databases and if you use `python`, `sqlite3` requires you to write your own SQL Syntax commands as strings so that's a great next step). 

I am not a true python developer yet, and honestly I am still waiting on my first Pull Request review to know if I am even doing a good job so far, but I am here and getting extremely valuable real world experience. All of this to say, it is possible. Don't be discouraged if you don't have a degree but know that you may have to rely more on networking. A large majority of the programming community, I have found, loves teaching and helping others learn how to code and wants us who are self-taught to excel! All of the people on my team at my new job are self-taught, I may have been lucky to find them but I did also try to find them. Just put yourself out there, even if it's out of your comfort zone (like it was for me), and you'll get there!

TLDR: Networking is your best friend. I know we hear it a lot when beginning the job search but it's true. Try to find a local coding group for your language, I used meetup, and get familiar being around professionals talking about code, and ask them how they got their foot in the door. I don't doubt you'll find someone willing to give you a chance.

Edit: sorry for the formatting guys. The markdown didn't translate well onto mobile.

Edit: I am so happy to hear all your stories and hear that my story was able to inspire you! I will respond to everyone eventually! Thank you for all the kind words, y'all are the best! 🥹",1399,117,Farmher315,2022-09-25 00:45:55,https://www.reddit.com/r/learnprogramming/comments/xn90c2/how_i_landed_a_fully_remote_paid_python_developer/,0,learnprogramming
d2bkr9,"Sorry if this is a stupid question, but what software does one use to type code in?","I’m a complete beginner. I know nothing about programming but I often see photos of code on laptop screens. My question is, that black screen where all the code is typed into, how do you access that! Please don’t laugh. I am changing careers and all jobs in my area are for coding only. I am beginning my journey into this world.",1397,315,innervestibule,2019-09-10 18:04:18,https://www.reddit.com/r/learnprogramming/comments/d2bkr9/sorry_if_this_is_a_stupid_question_but_what/,0,learnprogramming
7t7mcp,"Protip: If you copy and paste code snippets from the web, always include the URL where you copied from in your comments.","I wish i had done this more when i first started coding as it's a lot easier to keep track of all the cool things you've learned to program with comments in your code linking to, say, the stackoverflow posr you copied and pasted from.",1399,97,ragnarkar,2018-01-26 20:58:52,https://www.reddit.com/r/learnprogramming/comments/7t7mcp/protip_if_you_copy_and_paste_code_snippets_from/,0,learnprogramming
oktcmx,Udemy 11 (100% off Coupons) Programming Courses [Limited Time]," Good Evening everyone,

Love Learning, Just found some of the top courses to learn programming on Udemy. Some of the instructors are giving 100% off coupons due to the quarantine. Grabbed most of them from [r/FreeUdemyCoupons](https://www.reddit.com/r/FreeUdemyCoupons/) and some from the Facebook group. Might help some of you out. Let's learn together

Once you enrol on this course you can get lifetime updates

will try adding more courses here (by updating the thread) as I find them.

1. [Advance Bug Bounty Hunting & Penetration Testing Course 2021](https://www.udemy.com/course/advance-bug-bounty-hunting-penetration-testing-course-2021-t/?couponCode=CE31077A41040DA4B51E)
2. [Ultimate Python Bootcamp For Data Science & Machine Learning](https://www.udemy.com/course/data-analysis-with-pandas-a-complete-tutorial/?couponCode=CA825A6555C3F81B4016)
3. [NumPy in Python with Coding Exercises](https://www.udemy.com/course/numpy-and-recursion-in-python/?couponCode=MUBASHIR2)
4. [Artificial Intelligence (AI) in the Classroom](https://www.udemy.com/course/artificial-intelligence-in-the-classroom/?couponCode=FREEAICOURSE)
5. [Swift for Beginners - 100 Hands-On Exercises](https://www.udemy.com/course/learn-swift-programming-by-solving-practice-questions/?couponCode=MUBASHIR2)
6. [Python Complete Course For Beginners](https://www.udemy.com/course/python-complete-course-for-beginners-h/?couponCode=DISCUDEMY.COM)
7. [Programming Network Applications in Java](https://www.udemy.com/course/programming-network-applications-in-java/?couponCode=JULY21FREE)
8. [Practical Database Course for Beginners : 6 courses in 1](https://www.udemy.com/course/database-course/?couponCode=DBJULY2021)
9. [Python-Introduction to Data Science and Machine learning A-Z](https://www.udemy.com/course/python-introduction-to-data-science-and-machine-learning-a-z/?couponCode=1B5343FC328786E3AF6C)
10. [Python for beginners - Learn all the basics of python](https://www.udemy.com/course/python-for-beginners-learn-all-the-basics-of-python/?couponCode=E34869678C9D665E52E4)
11. [SQL for Data Analysis and Data Science in 2021](https://www.udemy.com/course/sql-course-for-data-science/?couponCode=F663AE5540E61DB5D948)",1394,113,jobsinanywhere,2021-07-15 13:56:06,https://www.reddit.com/r/learnprogramming/comments/oktcmx/udemy_11_100_off_coupons_programming_courses/,0,learnprogramming
p1h96l,You guys should be proud of yourselves,My partner is currently learning programming from scratch and I’m just extremely proud of her for stepping out of her comfort zone. To learn a new skill like this is no easy feat and i commend all of you for giving it a try. I can tell she’s frustrated at times but she’s slowly getting it even if it’s hard. I know that her hard work will pay off in the long run even though it seems difficult in the short term and I know all of you will be successful if you do choose to keep at it. Good luck and don’t give up.,1400,104,WalrusExternal9568,2021-08-10 03:35:33,https://www.reddit.com/r/learnprogramming/comments/p1h96l/you_guys_should_be_proud_of_yourselves/,0,learnprogramming
kqp0x3,You do not know until you are told (or learn it). Shell tab-completion,"So at work today I discovered a buddy typing out long commands, directory names, and file names by hand in his shell terminal. When asked, why not use tab completion? He said ""never heard of it."" Baffled, I explained by pressing tab as you type a command out or file/directory name it will autocomplete. He thanked me and I went on my way. I guess this was something told to me very early on when using a shell and I thought it was general knowledge. You really never know something until you're told, so I thought this would be a great story to share in here in hopes others can learn from it and realize some things are just taught and aren't self evident. So do not feel to bad for not knowing something because there are people out there who probably do not know it either.",1393,233,DuhCoCo,2021-01-05 03:04:21,https://www.reddit.com/r/learnprogramming/comments/kqp0x3/you_do_not_know_until_you_are_told_or_learn_it/,0,learnprogramming
ctyvbc,Is anyone interested in weekly coding interview problems with detailed solutions newsletter?,"Hi friends,

I am running a weekly newsletter that sends out 3-6 coding interview problems with detailed solutions in Go. My goal is to build a database of **top 100, most frequently appeared problems that I think are the most valuable and productive to spend time on.** For each one, I am including my thoughts of process on how to approach and solve it, adding well-documented solutions with test cases, time and space complexity analysis.

Let me know if you're interested in the idea. Here is the link to:

\- its blog post: [https://medium.com/@hoanhan101/i-am-making-ultimate-study-guides-for-mastering-coding-interview-challenges-3f88a228441a?source=friends\_link&sk=999d12c966d910736764fefbc9b8a0d3](https://medium.com/@hoanhan101/i-am-making-ultimate-study-guides-for-mastering-coding-interview-challenges-3f88a228441a?source=friends_link&sk=999d12c966d910736764fefbc9b8a0d3)

\- the newsletter itself: [https://www.getrevue.co/profile/hoanhan101](https://www.getrevue.co/profile/hoanhan101)

Best,

Hoanh",1393,79,hoanhan101,2019-08-22 15:19:02,https://www.reddit.com/r/learnprogramming/comments/ctyvbc/is_anyone_interested_in_weekly_coding_interview/,0,learnprogramming
kmlzh8,I recreated Pokemon Firered in the browser but with programming questions," Hi everyone!

I've always wanted to build a browser game where you can battle the instructors at the coding bootcamp that I teach at.

If you're learning how to code, come test your knowledge by battling the instructors!

Desktop users only!

[Check it out here](https://lfz-battle.uzairashraf.dev/)

[Source code here](https://github.com/uzair-ashraf/lfz-battle)",1398,116,uzinatorcl,2020-12-29 20:16:29,https://www.reddit.com/r/learnprogramming/comments/kmlzh8/i_recreated_pokemon_firered_in_the_browser_but/,0,learnprogramming
qy4nt8,Got my first (remote) job as a self-taught programmer,"When I first started trying to make this my career a couple of years ago, I saw a lot of people on here saying that working remotely/freelancing was the reserve of people with a few years' experience. There were a few similar posts and the responses were always pretty similar.

I'm sure the changes in work culture since the pandemic have made this easier in general. I wanted to post my experience because I know that it would have helped motivate me if I had seen it when I started.

*Background*

I studied languages and worked Teaching English as a foreign language for nearly a decade. This allowed me to work in a bunch of countries around the world. For the majority of the past few years, I've lived in Mexico/Vietnam where the entry-level salaries for developers were not high enough to justify a leap from my current career (think sub US$1000/month). 

This meant that, unless I could find a remote job in another country, I would remain a teacher who programs for a hobby because I need to pay the bills.

*Beginning*

I never thought I'd be into programming so I never looked into it. At one point I was working in an office doing some very repetitive tasks in Excel. I tried to find a way to make my life easier and stumbled across VBA. This led to writing a very ugly script which could reduce 2 hours' work to a press of a button. I liked that. 

At work I started to look for any opportunity to write VBA scripts, which my bosses were happy to let me do. At the same time I started to read more about programming and other languages. During this period, I fell into the trap of trying to learn a bit of everything and didn't really get anywhere quickly. 

I did FreeCodeCamp, which is excellent and kept finding little projects to do in my day job. 

I sent out a few CVs during this period but didn't get anywhere really. 

*Taking it seriously*

In 2018, I got through to the technical interview at TopTal, which I failed spectacularly. I didn't have high hopes so I kicked myself and moved on. A year later, I got an email saying that I could try again without having to reapply. I hadn't done much programming that year but I thought I'd give it another go. Again I failed miserably but this time it was the kick in the balls I needed to motivate myself. I figured that I needed to get my shit together or I'd never get good at this. 

I started to apply for jobs on Upwork to get some real life experience. I'd been doing a lot of Google Apps Script projects so I looked for similar things. 

I found a job for making a tool to upload listings from a Google Sheet to Shopify. In all honesty it was beyond my skills at the time - $30 fixed price (minus 20% for Upwork). I was thrilled to have someone paying me for programming for the first time. It was a nightmare but I learned a lot. 

*Freelancing*

When the pandemic hit, I was living in Hanoi and I'd just quit my job. I was stuck at home all day so went all-in on Upwork. Since I could barely spend money at the time, i didn't need to charge much (I also did a few online English classes). I started charging US$15/hour and I took what I could get. 

I was doing whatever I could get: Apps Script, Chrome extensions, web scrapers, etc. I'd often turn the Upwork timer off because I was totally lost and end up billing for a fraction of the hours a job took me. I spent all of my time studying and reading documentation. Despite frankly not being very good, I was reliable, honest, and cheap and that was enough to start building up regular clients. 

Over the last couple of years, I've been working as a freelancer. I've been able to identify my niche, raise my rate consistently (US$40/hour now) and live quite comfortably in Mexico. 

*Job Hunt*

I've always felt that I'm not going to advance as a programmer until I actually work in an organisation alongside people who know more than me. I thought I'd try my hand at applying for jobs again. 

This time, everything was much simpler. I received replied from most of the applications I sent out and recruiters were getting in touch on LinkedIn. 

In the end, I had interviews with 2 companies in the same week. The technical parts of both interviews were common-sense questions which related to stuff that I do all day every day, rather than esoteric algorithm puzzles. I was offered both jobs and chose the one I preferred. 

*What I've learned*

- There is enormous demand for low-level programming freelancers. A lot of businesses can benefit from automation but don't have a high budget for hiring devs. 
- Running your own freelancing business on your own is incredibly stressful at times. 
- There is a lot more than just web dev. I don't even have a portfolio page at the moment. I've made a few but none represent my current skill set. 
- Real life experience beats personal projects every time. Real deadlines and business use cases force you to learn quickly and the consequences for getting it wrong are serious.",1397,81,DVC888,2021-11-20 12:31:16,https://www.reddit.com/r/learnprogramming/comments/qy4nt8/got_my_first_remote_job_as_a_selftaught_programmer/,0,learnprogramming
p8mdjy,5 killer project ideas to code.,"Time and time again, people ask me the best way to get into programming, or the best way to learn a new language, or the best way to understand a framework, and time and time again, my answer is to start a project. Here are few best ideas I found on the internet.

* **Letters:** Ever heard of that website where you can write letters to yourself in 5 or 10 years? Try to make it yourself.
* **Recommend Movies:** Create a website or app that will recommend movies to you. You could even implement rating system or recommended movies for friends.
* **Wait time:** Create a website or app that will show wait time at restaurants, theme parks, shops, etc.
* **City Guide:** Pick your favorite city and create a guide on what you want to do there. You could integrate this with google maps and even suggest activities based on current weather data.
* **Planning:** Create a planning website or app where you can time block your days. You could integrate this with existing calendars and even give reminders.

**Edit:** These aren't beginner project ideas but you shouldn't mind trying it. Experienced programmers learning a new language or framework or even just for fun should give it a shot.",1390,131,None,2021-08-21 06:16:58,https://www.reddit.com/r/learnprogramming/comments/p8mdjy/5_killer_project_ideas_to_code/,1,learnprogramming
kc2lg9,Don't let others define programming for you...,"As a dev with a little bit of experience I just wanted to hop in here and leave some of my thoughts behind for others...

The internet can be a terrible place if you let it - much like the Dementors from Harry Potter, some of these social sites can suck the excitement and happiness right out of you. So, be careful what you subscribe to and be careful how much weight you give it. Maybe someday all of this negativity and hatred will go away. I suppose if the pink slime from that Ghostbusters movie were a thing - we'd be in deep trouble by now.

To me programming is a tool, not a language. I don't see myself as talking to a computer, I can't think in any programming syntax, at least not in any way I think in an actual language. Don't let people tell you what a good programmer is or what a bad programmer is - define yourself. Find out what you are good at, find out what you struggle at. And spend your time honing the skills you want to improve. No sacrifice, no victory.

I'm not good at coding puzzles, but I have fun with them when I feel like it. Still - in the years that I've been programming I haven't ran in to a problem I couldn't figure out a way to solve. And I don't suppose I'll ever work for a ""FAANG"" company, and hell, with that acronym I'm not sure I'd want to.

Maybe I'll give someone a little bit of motivation - if not well, the only thing I can say is a long time ago I gave up, and while I probably shouldn't have it is what it is, I have no regrets. I am now a developer. This is where I wanted to be, this is where I was meant to be. And I hope you can say the same no matter where you are on your journey.

&#x200B;

Edit: I just wanted to say thank you for the responses, I certainly didn't expect it. I kind of thought this might get lost in the sub and just hoped that a few would at least stumble across it and find it helpful in some way. I think the replies say a lot more than my post.  ",1394,139,TranquilDev,2020-12-13 02:41:29,https://www.reddit.com/r/learnprogramming/comments/kc2lg9/dont_let_others_define_programming_for_you/,0,learnprogramming
nvn06m,"Am I the only one who thinks that Free Code Camp is great at teaching raw skills, but lacks on actually teaching how to create a website itself?","Free code academy is really code at teaching the raw skills, but you need supplementary education/ lessons on how to actually code a website.

What do you guys think?",1393,221,Tessenreacts,2021-06-09 04:17:35,https://www.reddit.com/r/learnprogramming/comments/nvn06m/am_i_the_only_one_who_thinks_that_free_code_camp/,0,learnprogramming
hq72ta,Javascript Courses are like bad minecraft tutorials,"This is what I feel like going through Traversy Medias Udemy course, but I think it applies to most other tutorials on youtube where you try to start building projects, it feels just like watching a typical minecraft tutorial!

The guy in the tutorial is there to show us how to build a giant castle made out of thousands upon thousands of block. We are ready to take on this challenge. Lets go.

So here it goes: You watch the guy on the tutorial place out one block, then you stop the video, and put out the same block on the right spot, and this process goes on and on for hours until WOALA!

Here stands an epic castle right in front of you, and hopefully, when you turn a small lever, all the torches will light up. You hold your breath and push it. It works. Everything feels great. You feel proud for a small moment... But then it dawns upon you. You haven't learned anything. And you are just left standing there, having no idea how it was built and sure as hell you will never be able to build it again without a tutorial",1393,166,Holymayo,2020-07-13 02:25:45,https://www.reddit.com/r/learnprogramming/comments/hq72ta/javascript_courses_are_like_bad_minecraft/,0,learnprogramming
6093n3,"It's two days in a row that I was about to send a question to /r/learnprogramming, but I figured out the answer while typing the question. I just wanted you guys to know you've helped me without even knowing it, thanks.",Rubber duck debugging is really effective after all.,1385,94,2Punx2Furious,2017-03-19 08:03:25,https://www.reddit.com/r/learnprogramming/comments/6093n3/its_two_days_in_a_row_that_i_was_about_to_send_a/,0,learnprogramming
m2k366,My Python Fundamentals teaching document,"Hello

I wanted to make a short (eight episodes) Youtube video series teaching the fundamentals of Python starting from absolutely zero, but I was unable to get the audio to a decent quality.

In case anyone is interested, I'm sharing the document I was going to use as a guide. These include the explanations, the examples of code, and a few exercises associated to each topic in order for them to be better understood. You can find them at [https://drive.google.com/drive/folders/1-XoyDoBh1jG8mFk89tjukhLroL6V3-qB?usp=sharing](https://drive.google.com/drive/folders/1-XoyDoBh1jG8mFk89tjukhLroL6V3-qB?usp=sharing)

Any comments, questions or feedback would be greatly appreciated :D

&#x200B;

PS: if you want to write feedback or give ideas for future lessons, you can write to me at  [veryincongruous@gmail.com](mailto:veryincongruous@gmail.com)  or go to my (still empty EDIT: not anymore!) youtube channel at [https://www.youtube.com/channel/UCojOIOmnGcZuGJkbk5qa19w/featured](https://www.youtube.com/channel/UCojOIOmnGcZuGJkbk5qa19w/featured)

 PS2: just edited the link to the classes.",1380,118,FaallenOon,2021-03-11 06:54:55,https://www.reddit.com/r/learnprogramming/comments/m2k366/my_python_fundamentals_teaching_document/,1,learnprogramming
hmghj3,Books related to programming that you can read in bed?,"Most of the programming books I have read have exercises that ask you to go to the console and try out some concepts for yourself. I like to read for an hour before bed but don't want to be messing around on my laptop before I go to sleep.

Any suggestions?",1382,153,mnmlsm0,2020-07-06 21:04:18,https://www.reddit.com/r/learnprogramming/comments/hmghj3/books_related_to_programming_that_you_can_read_in/,0,learnprogramming
ougy05,I can code!,"Hello,

I wanted to share that a pandemic and lots of MOOCs later I tested myself and am pretty proud of the results.

I wanted to test my skills and I did a few things:

* Fixed a bug in c++ in an open source Arduino library
* Fixed a 4 year old bug in an open source python library
* I published a python package to batch re-encode / manage a video library and used it to re-encode or repair thousands of videos
* I built and published the code for a physical remote for Spotify using esp32 in c++

And I am pretty happy that I can now say mission accomplished (learn programming). Fixing the two bugs this week was quite the confidence booster as one was first reported 4 years ago and was so annoying.

Anyways, I felt like sharing

Cheers",1377,76,FabriceQ,2021-07-30 08:52:30,https://www.reddit.com/r/learnprogramming/comments/ougy05/i_can_code/,0,learnprogramming
eiv4rm,Does anyone else get super interested/focused at night?,"Through my years as a CS student, I've always noticed that during the last 2 to 3 hours of the day, when I'm tired enough to go to bed, I get in this mind state of super interest and focus.

&#x200B;

In the middle of the day, I often find it hard to really sit down and focus for more than an hour at a time without needing a break. It's to the point where if someone needs my attention during these peak hours, I get frustrated because I know I could be plugging myself in and learning/doing so much. It's what I imagine taking Adderall is like.

&#x200B;

Does anyone else get this? Is there a name for what I am experiencing? I would love to be in this state all the time, but something tells me that's impossible without destroying my mind with drugs.",1377,148,None,2020-01-02 07:26:32,https://www.reddit.com/r/learnprogramming/comments/eiv4rm/does_anyone_else_get_super_interestedfocused_at/,0,learnprogramming
90vmx2,I found a website with an extremely high quality free catalog of Design patterns.,"[It's called Refactoring Guru](https://refactoring.guru/design-patterns/catalog)

It has detailed UML diagrams, explanations of use cases, implementation details, and best fits, and psuedocode with a nice interface that is mobile friendly. I have not tried the Refactoring course advertised and can't vouch for the quality of that, but so far this is the best resource I have found for learning design patterns.",1383,56,None,2018-07-22 05:29:42,https://www.reddit.com/r/learnprogramming/comments/90vmx2/i_found_a_website_with_an_extremely_high_quality/,0,learnprogramming
3x7sqb,Learn to make a 2D Game in C++!,"Hello developers!

Just wanted to provide an update on my video tutorial series, *Remaking Cavestory in C++*. There are now twice as many videos as the first time I posted this, and I wanted to make you all aware of the new content.

My main goal for this series is to share my game development knowledge with you. Watching this will not only teach you how to make a game from scratch in C++, but it will also more than likely teach you a thing or two about programming in general. You should be able to walk away from this tutorial with enough knowledge to create your own game in C++ and SDL2.

These tutorials are very beginner-friendly because in each video, you will see me write every single line of code from scratch. I also explain all of the classes, functions, and algorithms that I implement throughout the series.

Also, all of the updated source code can be found on Github by following the link at the bottom of this post!

The series is currently finished. I may decide to continue with it and produce more content in the future, but as of right now, I do not know when that may happen. Still, feel free to provide me with any feedback you may have.

This is what we have finished so far:

* [Episode 1 - Introduction](https://www.youtube.com/watch?v=ETvApbD5xRo)
* [Episode 2 - Creating the game window](https://www.youtube.com/watch?v=cD3-NZzO2Ao)
* [Episode 3 - The game class and input](https://www.youtube.com/watch?v=TX3ovZgIrbo)
* [Episode 4 - Drawing our character](https://www.youtube.com/watch?v=yq_00MAp0Xw)
* [Episode 5 - Animating our sprites](https://www.youtube.com/watch?v=NirBu24-U8w)
* [Episode 6 - The player class](https://www.youtube.com/watch?v=7wIXNdOBVeQ)
* [Episode 7 - The level class - Part 1](https://www.youtube.com/watch?v=CA0wIfvLs1Y)
* [Episode 8 - The level class - Part 2](https://www.youtube.com/watch?v=nI_LjBDMVEA)
* [Episode 9 -  The level class - Part 3](https://www.youtube.com/watch?v=Qn2D6lq08gk)
* [Episode 10 - The level class - Part 4](https://youtu.be/iZG3G58r8n4)
* [Episode 11 - Slopes](https://www.youtube.com/watch?v=Sx0q1nh9oBs)
* [Episode 12 - Animated Tiles](https://youtu.be/6TNvxXHOg3c)
* [Episode 13 - Looking up and down](https://youtu.be/FQhtUpSUUG4)
* [Episode 14 - The HUD - Part 1](https://youtu.be/3Ro4LaAuFmE)
* [Episode 15 - The HUD - Part 2](https://youtu.be/QW4UVpmOc9o)
* [Episode 16 - Doors](https://youtu.be/YUo8NRBodQ0)
* [Episode 17 - Enemies](https://www.youtube.com/watch?v=lTRWEDN5kTM)
* [Episode 18 - Enemies - Part 2](https://www.youtube.com/watch?v=zMSwNVW5ehY)

And here are some other important links:

* [My website](http://www.limeoats.com)
* [Twitter](http://twitter.com/limeoats)
* [Twitch](http://twitch.tv/limeoats)
* [/r/limeoats](http://reddit.com/r/limeoats)
* [Github](http://www.github.com/limeoats/cavestory-development)

Thanks for checking it out and I hope you enjoy. Make sure to contact me with any questions or suggestions!
",1379,147,Limeoats,2015-12-17 14:17:39,https://www.reddit.com/r/learnprogramming/comments/3x7sqb/learn_to_make_a_2d_game_in_c/,0,learnprogramming
nbj4vq,Starting Programming Full-time,"I just really need to get this off my chest, and get it out there. 

After a year and a half of learning programming on the side, about an hour a day, becoming more and more interested in it, and wanting to do a career transition, I left my job today, a job I had no passion for and have been mentally checked out of for the last 6 months anyway, to study programming full time. 

My goal is to have a job in web development by the end of the year, or early next year. I hope I'm making the right decision for myself here, but I am determined to do this. Wish me luck!",1378,149,Sahmbahdeh,2021-05-13 15:22:27,https://www.reddit.com/r/learnprogramming/comments/nbj4vq/starting_programming_fulltime/,1,learnprogramming
9hbcec,Thing I wish I knew in college: git,"Me and my roommate (also CS, graduated same time I did) were talking about our time in college. We struck up a conversation about things we wish we knew in college, specifically when going through CS. While most of it was bullshit (of course knowing what I know now CS will be much easier to get through), the one we both agreed we could have learned sooner is git.

While we all used git (and Github) in college to collaborate and save code, we mainly stuck to the the basic ""add, commit, push"" flow and didn't really go outside of that much, mainly because we didn't know it all that well at the time. But looking back after 2+ years of using \[git\] in a professional environment, here was out shortlist of things we wish we knew git could do (in order of importance)

&#x200B;

1. git reset HEAD: If you could learn one thing about git besides how to commit and push, this would be it. When you commit to git, those commits generate a log that is identified by a commit hash. By using the command `git reset HEAD <commit-hash>` (there are other variants, this is the most straightforward), you can essentially go back in time in your code. What this is great for is if you are in a point in your project where you are pretty certain *you're going to fuck something up*, committing is like doing a quick save in a video game right before a boss fight. Something goes wrong, reset to the last commit.
2. Branching and Pull Request Workflow: In college we all worked off a single branch pushing our code up to save it. While this worked, the occasional push by  a teammate who didn't properly test their code caused our project to crash and one of us having to fix it (this usually happened <12 hours before deadlines). Branching and pull requests would have eliminated that. Not only are they working on a different branch so pushing up won't mess with the original copy. When they want to merge their code, going through a PR (pull request) process will involve the code getting reviewed by another person to make sure it all works.
3. git init: When I first started with git I always thought that you had to have a remote somewhere to use it (ie on github or gitlab). As I have learned that is not the case, you can initialize a git repository in any directory and commit any files, you are only restricted from pushing until you add a remote (duh). This is great to pair with the 1st tip, even if you are working by yourself. Having the ability to go back if you mess something up is essential.

TBH that's really it. Git is a *very* complex application that even I haven't fully learned yet. However, it has a fairly easy learning curve letting you take advantages of the most important bits quickly. If you have any questions feel free to post  below and I'll be happy to answer best I can. ",1376,221,_fat_santa,2018-09-20 02:08:52,https://www.reddit.com/r/learnprogramming/comments/9hbcec/thing_i_wish_i_knew_in_college_git/,0,learnprogramming
7y08m9,Tools I wish I had known about when I started coding,"Hello all!

I completed a coding bootcamp not too long ago and I wrote this article about tools that I wish I had known about back when I first started. I thought that some of you might find it useful. If this counts as self promotion just let me know and I will gladly take it down!

https://medium.freecodecamp.org/tools-i-wish-i-had-known-about-when-i-started-coding-57849efd9248",1385,128,None,2018-02-16 17:17:00,https://www.reddit.com/r/learnprogramming/comments/7y08m9/tools_i_wish_i_had_known_about_when_i_started/,0,learnprogramming
12cn4p1,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (April 2023)","**EDIT: The sign ups are all used up. Remember that  the Free Preview is enabled for all videos, so you can still watch them all on the course home page. [And the first 15 videos are also on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)**

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https ://udemy .com/course/automate/?couponCode=APR2023FREE~~

~~https ://udemy .com/course/automate/?couponCode=APR2023FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student) If you have a VPN service, try to sign up from a North American or European proxy.

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, Python Programming Exercises Gently Explained is a set of 42 programming exercises for beginners [for free](https://inventwithpython.com/pythongently/) or as a [99 cent ebook](https://www.amazon.com/Python-Programming-Exercises-Gently-Explained-ebook/dp/B0BGYJ7G6T/).


**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1381,164,AlSweigart,2023-04-05 15:00:24,https://www.reddit.com/r/learnprogramming/comments/12cn4p1/2000_free_sign_ups_available_for_the_automate_the/,1,learnprogramming
q56awg,Im almost 40. Is learning coding a good idea or at this point would be a waste if time?,"I want to be able to do simple projects that someone can actually hire me for or to assist with things. 
not sure how serious would the above be?

if it is a good idea, where would i start? like youtube videos?
what coding should i do? python? i dont know...


Recap: thank you very much all. i did not expect so much advice and directions.",1372,430,ExplorerOk5331,2021-10-10 11:29:36,https://www.reddit.com/r/learnprogramming/comments/q56awg/im_almost_40_is_learning_coding_a_good_idea_or_at/,0,learnprogramming
urtuhd,Self-Taught Programming is Overrated,"I don't hate self-taught programming but I'm tired of seeing it recommended in posts and Youtube video as the best path over and over again as it's just misleading and hurtful to those who shouldn't start there. This is only my opinion but before you disagree, consider this... self-taught is overrated because:

1. It requires an enormous amount of self-discipline that many people don't have including knowing how to manage your time,  be consistent, and avoid distractions.
2. There are just too many resources & learning paths and it is very challenging to create a learning path without any tech experience.

Self-Taught Programming is a great option for those who are **self-disciplined** and **know exactly what they want to learn** and ideally have a **deadline** to accomplish it by. Hence, it isn't for everyone as often suggested and a lot of people waste time in deciding what to learn (e.g. ""what language should I start with?""), switching paths, consuming redundant content, etc. which can lead to uncertainty if they should even continue after failed attempts to self-learn or procrastinating on getting actual experience.

I wish those who promoted this path embrace adding a disclaimer that if you are more likely to thrive in a structured environment (learning path and ideally deadlines), you should reconsider if self-learn is for you or at least pick from self-contained structured paths to start your journey (like The Odin Project, 100 Days to Code, even Udemy ""bootcamp"" courses, or anything like it). If you have the opportunity, consult with a software engineer to design a clear path with an end goal and stick to it. **Self-Taught Programming is the easiest path to start but the hardest to finish**.

*Edit: The goal here is not to bash self-taught programming but that everyone that wants to join tech does it in a way they are set up to succeed. Learning completely on your own without structure is really tough and can be ineffective. Needing a structure does not mean you need a typical bootcamp/college.*",1379,292,Prestigious_Sort4979,2022-05-17 19:10:58,https://www.reddit.com/r/learnprogramming/comments/urtuhd/selftaught_programming_is_overrated/,0,learnprogramming
n5cpg6,Successfully made a career swap at 35,"I'm making another on of these posts to help motivate others and to thank this community.

I was a professional brewer and founded my own somewhat successful craft brewery in 2015.  Business was going fine but COVID completely destroyed what I spent 5 years building so I had to walk away without anything.

In 6 months (thanks to this sub, the Odin Project, FCC and CS50) I was able to learn all I needed to get my first job with a nice wage and benefits well above the average for my country, in a great company with lots of high profile customers.

I still have a hard time believing what I pulled off in just six months but I had my share of moments thinking I was too old and that it was a waste of time.

Stick with it! The market really is desperate for good hard working people who are willing to learn! It's beyond worth it! :)

**EDIT:** I'd like to thank everyone so much for the wholesome messages that have been pouring all day. I'm really happy with the support and I'm glad some people felt motivated with my experience.

I also would like to give a word on ""reasonable expectations"". Six months is a really short period for such a life changing somersault. It demanded a lot of hard work and dedication and it really took it's toll on me. That being said I often feel as if in the right circumstances I could've achieved more in less time and, some other times, I'm amazed I survived.

I owe a lot to my girlfriend who was able to support us both during this period and a lot of people simply can't stop being paid for six months.

I also owe a lot to the company that gave me the unpaid internship. They helped me tons and it was through them that I got this job offer. I was *really* lucky!

It also helps that I've always been passionate about computers and programming and always had this dream in the back of my mind.

It also really helps that my life experience made me feel like I can achieve whatever I want. I had amazing opportunities that I took and worked hard when I got them. People that are always being let down in life will surely have a harder time staying motivated.

I'm just saying this because I want everyone to understand that this was my experience and if you feel yours falls short then please stop comparing yourself immediately! Survivor bias is a thing and you'll only really read stories about people who succeed and that sometimes makes us feel like crap ourselves (I've been there and still am there) but the truth is that for each story like mine there are probably thousands of other stories of people who weren't so lucky or couldn't find a break or simply lived in an area with little opportunities, or whatever thousands of other reasons are there. If you're still trying then you're still fighting. It might take you 6 months, a year or two weeks... It doesn't matter. What matters is what you make of yourself and how you feel about it. You're your own standard, everyone has different things going on in their lives, different experiences and different attitudes. Don't be too hard on yourself because you feel like you should be at point X... Make your own path.

**EDIT²:** I can't reply to these many comments but I would like to thank everyone for their replies. I'm really happy to know my story was able to motivate some of you. :) 

As for all the questions, I tried my best giving everyone a reply but this quickly got out of hand. It's extra motivation for me to get around and start posting some blog posts. About some of these topics. :)",1373,161,BroaxXx,2021-05-05 10:25:30,https://www.reddit.com/r/learnprogramming/comments/n5cpg6/successfully_made_a_career_swap_at_35/,1,learnprogramming
m3hakf,I’ve been learning for 8 months and I still can’t build a full-stack app on my own.. feel like a failure.,"I thought I would be further than this.

Trying to build a react frontend with an express api connected to a MySQL database and I can’t even understand the fetching done in react let alone how complicated the backend routes are and to query a database inside express.... unreal.

I try to tell myself to keep it up but every month goes by I feel like I’ve learned nothing.

tell me it gets better.",1375,318,None,2021-03-12 13:14:07,https://www.reddit.com/r/learnprogramming/comments/m3hakf/ive_been_learning_for_8_months_and_i_still_cant/,0,learnprogramming
hirqmf,Don't neglect the soft skills: How I landed a job with a Fortune 1000 after being unemployed for 8 months,"In the past 8 years I've had 5 jobs, going into my 6th, across 4 functions with the average tenure being 1.5 years, and I've have been laid off 2 times. Over this period I've been unemployed for just shy of 24 months with two recent lengthy stints. That's 25% of my entire professional career. It doesn't look great on paper and I'm now in my mid-30s.

Three years ago, after self teaching for a year and being unemployed, I was able to get a job as a hybrid marketing web developer and web platform administrator at a large well-known company.  I was competing against a large field of more technically experienced candidates but got the job. Unfortunately, the role shifted away from the small amount of development I was doing so I left after a year. I then got a role as a front-end dev at a foundering unknown start-up. I had won out against a large field of more technically experienced candidates to get the offer. I was laid off after \~1 year with some others. I had turned down a UI developer role at another large well-known company to take the start-up role which in hindsight was a bad decision. Still, for the UI role I had gotten an offer competing against a large field of more technically experienced candidates.

Today, after eight months of job hunting, four months of building projects/studying, and \~275 applications I accepted an offer at a Fortune 1000 company as a front-end developer. There were hundreds of applicants to this role, and I'm sure many candidates were more technically experienced than I and with a more solid job history. 

Yes, I have ""worked professionally as a developer for two years"". If compressed it would be about six months of solid work, in ES5 JavaScript with no ""hot""  tech of any kind. I have a selection of small/medium front-end personal projects to supplement. I have a decent personal website. I have a modest history of professional work, and a liberal arts degree from a state school. Yes I am a competent developer, but I'm no ""Ninja"", no ""Rockstar"".

I'm convinced that over the years my soft skills have given me the edge in getting offers in spite of lay-offs and making some poor career decisions.  

I know that many of you, my fellow struggling developers friends, might undervalue your own soft skills. Or maybe you could improve them but haven't taken the time. 

This is a mistake. 

If you can land the interview they might just set you apart.",1371,150,Mnemoctopod,2020-06-30 17:22:25,https://www.reddit.com/r/learnprogramming/comments/hirqmf/dont_neglect_the_soft_skills_how_i_landed_a_job/,0,learnprogramming
8i209a,"Streamed myself developing an app in 28 days to show people that you can build anything with passion, motivation, and a little bit of luck. Say hello to SimpleAlerts. My take aways from this project.","EDIT x2: The first episode of SimpleAlerts, 28 day development project, is finally up on YT! Feel free to go check it out @ https://youtu.be/dDP7N-qrgZE
Again, thank you for ALL the awesome support <3

EDIT: Based on the incredible response this post has received, I will be posting ALL the videos recorded during the creation of SimpleAlerts on YouTube. Please stay tuned for details if you are interested in watching. Thank you all for the support :) 

Hi everyone!

I want to preface this post by stating that I am in no way trying to self promote something I have made. While I think it would be awesome for people here to check it out and use it, I wanted to post about my experience with creating an application in 28 days and hopefully motivate someone else to do the same.

### About SimpleAlerts
As the title states, I streamed the entirety of my work for this project on Twitch. I have always been enthralled with the concept of Twitch and I really thought it could be an incredible place for programmers to showcase their work. This led me to start a stream that would encourage people to get involved with programming. I have almost three years of experience working with web development, mobile development, and I am mostly self taught. I still have much to learn and I believe the best way of doing that is through projects. This is where the format for my stream comes- start a project from start to launch in 28 days. This is how SimpleAlerts was born. SimpleAlerts is an open source project that is here to solve the problem of unreadable, disorganized stream events through Streamlabs. For much more detail on this feel free to head over to [the repo](https://github.com/PixelogicDev/SimpleAlerts) as it has much more information about the project. 

### Learning Points
As someone who started off his programming career truly through internships and hackathons, I know how intimidating it is to begin your programming journey. This is why I think this style of project is a great way get a deep dive into something that you have been really wanting to try. I wanted to list the benefits I got from this no matter what level programmer you may be:

#### Learning how to properly setup your project beforehand is KEY
- This is something I have been really wanting to get into as I have always struggled with it. The way you tackle massive projects/problems all comes down to the initial setup. Take as much time as you need in order to really understand how you will be doing each step of the application. It will save you tons of time in the long run.

#### Keep every task bite sized
- I am a huge advocate of Github Issues (as you will see if you check out [the repo](https://github.com/PixelogicDev/SimpleAlerts)). It is much easier for me to digest tasks if they are written out in bite sized concepts. I feel this is a practice many people lack. They feel as if they need to tackle huge problems at once. You don’t! Your code will be there tomorrow, I promise :)

#### Set a deadline and be consistent
- This take away I think is really important. Many projects that are started are never finished. This could be the shear amount of features that you may want to implement or you’ve simply lost your drive. I had two main motivating factors when building this project. First was the 28 day timeframe and second was the fact that I set a stream schedule 5 days a week for 2-3 hours a day. This kept me engaged with SimpleAlerts.

#### It’s okay to struggle and not be perfect from the beginning
- You are going to mess up and do things wrong. That's okay! As you start building more projects things will start to click. This could even lead you to refactor older projects with this new insight!

#### Be proud of your work even if only one person uses it
- It’s okay that your application doesn’t pop off-most don’t. Just take a look back at all the time you spent and how much you learned from building out an app from start to launch. These projects are always beneficial even if you don’t make millions of dollars ;)

I wanted to wrap up this post by saying that the programming community is a great one to be a part of. All the people I have interacted with during this project have been more than great. Everyone is willing to help each other out and want to see everyone succeed. If you are afraid to start something like this or even start programming, just remember people are here to support you. One of the reasons why I decided to make SimpleAlerts open source was to encourage beginners to come and add to the codebase. Consider contributing on Github @ [this repo](https://github.com/PixelogicDev/SimpleAlerts) if you are interested!
 
Thanks for taking the time to read this and if you have any questions/concerns please feel free to reach out :)

-Alec
",1377,118,adilanchian,2018-05-09 01:07:10,https://www.reddit.com/r/learnprogramming/comments/8i209a/streamed_myself_developing_an_app_in_28_days_to/,0,learnprogramming
fn46ga,Can someone please explain github to me.,"Okay i am dumb as a rock and can’t figure out what the fuck is github what the hell is all the protocol and version control repository gist fork?!?!?!
Can someone please explain this platform to me in simple terms because i fucking can’t figure this out.",1376,187,None,2020-03-22 18:14:30,https://www.reddit.com/r/learnprogramming/comments/fn46ga/can_someone_please_explain_github_to_me/,0,learnprogramming
9hurpe,Junior dev feeling demotivated after senior dev lashes out at me,"Throwaway account created for this one. 
Working at a very small company in Portland with 3 developers total, including myself. I'm a junior and just started working here. The system we're working with is incredibly complex, spanning nearly 15 years worth of code base, and there is 0 documentation. Naturally, I need to ask the only developer who's been here long enough  (the senior) how things work sometimes. Unfortunately, he always makes me feel like I'm under qualified for this position or that my questions are a huge burden for him to answer. 

As a result, I end up spending hours on my own trying to find the solution to something that could be trivially answered by him. (Like out of the 350 cryptically named db tables we have, these 2 might help you with your task). Instead I have to trial and error look at the massive amount of data in all 350 tables and try and guess which one will remotely be relevant to my task.  Now I understand that I should put an effort first on my own to grok the system, and I do. Sometimes the code is self documenting so I use that as a means to explore further and solve my own problems.. But when I finally think I've spent too much time on something and wish to ask a question, he gets frustrated and gives sarcastic or condescending responses back. When I ask him to review my code, he just looks at it, says ""wow this is bad design. This is real bad"", and then barely provides any advice on how to improve it. We're working for the same company..and ultimately are on the same team aren't we? If my code isn't perfect, I want some basic direction on what I can improve, not a ""what made you think this would ever be a good idea...-walks away-"". 

Finally today, when I asked a question about our cacheing layer, he blew up at me and said I'm annoying and bothersome with my questions and to stop talking to him. I literally ask 1 question a day, maybe 2 max...because I'm terrified he's gonna roast me again if I ""exceed my limit"". 

Our company has no hr, nobody for me to really go to, and I'm feeling really small and like I need to quit. I do a huge amount of research before I ask a question, but at the end of the day, I need to get answers so I can do my job. I don't know what to do but I'm getting really down going to work each day and feeling scared to speak to the senior. Should I quit? ",1371,338,ad7410,2018-09-21 22:39:20,https://www.reddit.com/r/learnprogramming/comments/9hurpe/junior_dev_feeling_demotivated_after_senior_dev/,0,learnprogramming
anzng4,"I’ve been an software engineering intern for a year, tomorrow I go in for my first interview to be an official junior developer! IM SO EXCITED.","UPDATED — I don’t know if this is the right place to post this but whoever is learning programming don’t give up. There IS A LIGHT at the end of the tunnel. It will pay off. I’m so happy I could cry. Not sure if I’ll get the job, but I am beyond grateful that I’m even being considered. 

A year ago, I barely knew how to articulate into words my questions that I was stuck on in programming . No clue what a variable was, data structures anything honestly, I hit my head against the wall many weeks being stuck on code. I’ still have a long way to go. I stuck with it even though there were days where I question my entire career. 

I believe in you. Don’t give up. 



UPDATE: Thank you for all the love and good vibes. It really helped me be brave in my interview today. If you're stuck don't quit! I'm still learning, and will ALWAYS be learning, my bosses and mentors are also still learning after 20 years. I practiced a lot, worked side weekender gigs to maintain my life. I gave up having a car, so I wouldn't have to worry about a car payment, or insurance. I figured if I'm going to grind, I better REALLY grind. I was very lucky to have a SO that supported my dreams and understood me, and was okay on nights that I had to study and work and never got mad. 

I had days where I really read the same thing like 5 times no idea what it was, I had to go back and read a lot and rewrite code many times different way too, until it just clicked, I felt like the hugest imposter many times. I STILL feel this way. It's normal, but some days things just click, and you hang on to those times and you give yourself a pat on the back. 

I went to the interview and it was really scary, moments leading up to it I sat down and thought about how far I've come since I've started. I gave this my all and regardless of what happened at the end of the day I knew I gave it my 100%.

First off, I met with a couple people on the engineering team, and the VP of engineering, they asked me  about how I started why I decided to pursue software developing etc. Why is this my passion? Then they went into technical abilities where they asked me key words in programming; how I would approach fixing a specific problem; what steps do I take when I am stuck. They asked about my internship; what I learned from that; briefed me on new projects they are building. 
They also told me that taking me on as junior developer means that they're not expecting me to know everything, but that they wanted to know that I was willing to work hard and take constructive criticism well. They want to make sure that their investment into my salary will pay off and that I won't just run off the moment I become more valuable. 

Overall it was almost a 2 hour interview. There were lots of questions and lots of notes taken. I don't how it went on their end, but I got a lot of positive vibes from them. I'll have to update you guys in a couple days to see if I get a job offer. 

Lots of love for you guys. Continue on this path, it will pay off. Be confident, YOU GOT THIS.

",1371,178,meeeowt,2019-02-07 03:57:10,https://www.reddit.com/r/learnprogramming/comments/anzng4/ive_been_an_software_engineering_intern_for_a/,0,learnprogramming
rfpmb4,Some advice from a self-taught developer (no CS degree or bootcamp),"I've been frequenting the sub for many years now and wanted to share some of my own personal insights and struggles in my pursuits to be a programmer with those aspiring to someday get hired. I will also add tips and things I would've done differently had I begun all over again myself. 

So, I begun to learn programming in **2016** whilst I was doing an art degree. The plan was to learn a little bit and then eventually save up enough money to do a bootcamp when I graduated. See, I didn't go into learning this because it was something I enjoyed, but rather the money was enticing and I didn't want to be a struggling artist once I graduated. Anyway, things didn't go to plan and I was struggling to start out. I began by doing a MOOC learning Java. As someone with a background in art, it was hard to wrap my head around it all. Eventually I gave up within a month.

Then the summer of **2018** came around and I decided to give it another go. This time I went on freecodecamp and took step by step increments, eventually making it as far as finishing the HTML and CSS curiculum. It was starting to be enjoyable because it was all front end and visual, and as someone from the background I was able to appreciate it more. Anyway, I stopped that summer.

Then summer of **2019** I tried even harder than ever and really got as far as to complete the HTML, CSS and Javascript curriculum. Bear in mind that I had mostly got the answers for a lot of the tasks online. I was a serial ""cheater"" constantly looking up solutions. It was at this stage that I began to copy tutorials from Udemy and some early React stuff (class based components... ooof). Again, I quit once the final year kicked in.

Come lockdown and 2020, I decided to try again, this time learning Python. I did some online courses and really didn't enjoy it so much. I was beginning to wonder whether I really wanted to do this or not. Eventually I decided to go back and do what made sense to me, web dev. At least the front end stuff is exciting. 

From there on out I began to just copy the hell out of everything and everyone on Youtube. In the midst of it all I began to start applying for jobs. Eventually I got a free 'you scratch my back I scratch your back' gig. These backend devs needed someone to design their startup website for them and I said I could do it, not knowing a damn thing about it. I downloaded figma and watched a bunch of tutorials and figured it out for myself. My background in design made it easier to create a landing page they loved and in the midst of showing it to them I explained I was able to also code it. 

So, I coded the worst website ever but it was close to what they needed. I did raw HTML and CSS for it, but they told me to transfer the code to react and so I learned that and did it by force.

Once that gig ended, it took my about 4 months to find a job. A contracting position for quite a lot of money. I had a little head start in that regard. Once that was over I took some time off to learn some more and eventually after 7 months I managed to land a proper full time role in which I'm at now. I love it. It's work from home and I'm building a SaaS product. That hard work and grind paid off. Now it's time for me to share some things I learned along the way.

&#x200B;

* code everyday, whether it's 5 minutes or 5 hours. It's important I feel, especially in those early days to constantly force and reinforce the things you learn. It's so overwhelming but you have to weather the storm of new knowledge being swept your way
* keep moving forward, no matter what. If you don't understand it now, you will eventually. Everyone has that moment where it just clicks. I remember reading stuff like that online and thinking ""but it hasn't for me"" and it eventually did.
* do your best to move away from online learning content like freecodecamp and codeacademy. While they're good, they're only good when you know a bit already. It's weird, as a beginner they give you a false sense of progression and sometimes, in my case at least, I found that it was really demotivating to feel you spent so much hours but didn't learn anything. This is evident when you actually start coding in an ide and way from their online one.
* understand that there are built in methods and functions. This took me ages to realise that there are other things beyond what we have to manually create. 
* everyone will get to their destination at a different pace. It won't be 3 months or 1 year. For some it may be longer. Live your life as you are right now and learn programming on the side. Don't sacrifice everything for it immediately as the reality can be quite hard. 
* I applied for so many jobs. Absolutely so many. It's not easy but it's not hard. 
* Once youre in youre in. Your confidence will go up and you will begin to feel like you can do this. Imposter syndrome occurs for everyone, not just you.
* Learn HTML, CSS, Javascript and a tiny bit of dom manipulation before moving onto React or the other popular frameworks. Learn some of the popular higher order functions. You'll use them a lot at work. 
* Learn github
* LEARN typescript as early as possible. Don't shy away from it. It's just a couple of add ons to javascript. Nothing scary.

&#x200B;

Sorry if this is grammatically all over the place. I kinda rushed it, but wanted to just reach out to peopel and tell my story to those who may feel like you need a degree or bootcamp to get there. I'm happy to answer any questions.",1365,170,None,2021-12-13 20:44:38,https://www.reddit.com/r/learnprogramming/comments/rfpmb4/some_advice_from_a_selftaught_developer_no_cs/,0,learnprogramming
cadjlz,"As a self taught developer, i feel like i missed out on a lot of CS theory/basics. Good curriculums to catch up with ?","Hello everyone,

I am a completely self taught developer. I've been  as a full-stack developer for about a year now. In this time, I've realised that i have missed out on a lot of core/fundamental CS concepts/theory that can help me write better code, such as design patterns, relational database theory and optimising queries... I want to become a better developer, and it seems like catching up on the concepts can be a good first step towards that goal.

Can any of you guys suggest any good curriculums that don't have too much fluff on them, but cover most of the basics ? I am willing to go through the less exciting/boring parts if it'll make me a better developer.

Good resources on best practices and how to write beautiful code, would be a good plus. My stack is Spring (Java 8+) for the backend and React/Redux for the frontend.

Thank you.",1364,130,kickmeimanorange,2019-07-07 23:29:43,https://www.reddit.com/r/learnprogramming/comments/cadjlz/as_a_self_taught_developer_i_feel_like_i_missed/,0,learnprogramming
dadmhq,Start Your Python Journey Now - 240+ Free Python Tutorials,"Check out these Python tutorials and step up for becoming the next data scientist. Choose where to begin, learn at your own pace:

[https://data-flair.training/blogs/python-tutorials-home/](https://data-flair.training/blogs/python-tutorials-home/)",1362,44,AnujG23,2019-09-28 08:58:18,https://www.reddit.com/r/learnprogramming/comments/dadmhq/start_your_python_journey_now_240_free_python/,0,learnprogramming
jshpob,Best YouTube Playlist to Learn Data Structures and Algorithms?,"So I'm a CS student about to enter my final year, I will hopefully graduate somewhere around mid 2021. I want to maximize my chances of landing a good job when graduating to help support my family and this is why I've done two internships this year. One in Android development(January 2020 - February 2020) and the second one was in fullstack web development(July 2020 - November 2020).   


I definitely have job related skills and if you were to ask me to make like a reasonably complex Android app or website I could probably make something decent in a few days or a week. Unfortunately I can't do LeetCode style questions and this is probably because I've forgotten a great deal of what was taught to me in my data structures and algorithms classes.   


I have some fragmented knowledge about arrays, stacks, queues, linked lists, very clueless about trees and I also know my way around a couple searching/sorting algorithms, but I really need to fill in the gaps. Which YouTube playlist helped you guys the best in understanding these? Or maybe you have a course somewhere I could watch/do? I have the basics of programming and Math down, I just want to get through data structures and algorithms as quickly as possible. Would it be viable to do in let's say 2 weeks?

Edit: Guys I had no idea this post would get so much attention. Thank you for all of your suggestions. I really appreciate it!",1356,74,SACHD,2020-11-11 22:11:36,https://www.reddit.com/r/learnprogramming/comments/jshpob/best_youtube_playlist_to_learn_data_structures/,0,learnprogramming
773wu0,"""I know how to program, but I don't know what to program""","There is a phrase that I hear every once in a while with beginner and intermediate programmers that goes something like ""I know _how_ to program, but I don't know _what_ to program.""

I heard it again recently and I wanted to share the advice I had for anyone who feels this way:

http://www.devdungeon.com/content/i-know-how-program-i-dont-know-what-program",1365,111,nanodano,2017-10-18 03:14:29,https://www.reddit.com/r/learnprogramming/comments/773wu0/i_know_how_to_program_but_i_dont_know_what_to/,0,learnprogramming
zcnunk,Don't let the Advent of Code intimidate you: A Beginner's Guide to Days 1 through 4,"Happy December, all!

Advent of Code is a series of 25 programming puzzles released each day for the first 25 days in December. You can check it out here: https://adventofcode.com/

It can be incredibly intimidating to jump into a programming competition but the Advent of Code is for everyone! Don't be intimidated by the scary one liners you're seeing posted on /r/adventofcode.

The first 4 days don't require anything ""fancy"" just a well thought out approach.

I teach computer science and programmer courses for elementary through high school (ages 7 - 18). I'm having most of my students tackle parts of Advent of Code. To help my youngest students, I have been putting together guides for the puzzles.

I've been receiving great feedback on the videos over on /r/adventofcode and thought others here might find them useful.

The guides are designed to break down the ""computational thinking"" part without giving away the implementation. In essence, help them develop an approach to the problem. The videos are designed to allow watchers to pause and work on the problem step by step before seeing spoilers / solutions.

I hope someone here finds them useful!

* Day  1 - Calorie Counting: https://youtu.be/eQSO1Ov4k8g
* Day  2 - Rock Paper Scissors: https://youtu.be/gLlj_P8edJY
* Day  3 - Rucksack Reorganization: https://youtu.be/SYEMRTjDd9o
* Day  4 - Camp Cleanup: https://youtu.be/vIIYaAw0B9o
* Day  5 - Supply Stacks: https://youtu.be/kqQnSRJG2W4
* Day  6 - Tuning Trouble: https://youtu.be/M3Qf7RXk_xs
* Day  7 - No Space Left On Device: https://youtu.be/vWXtVGQ2B0E
* Day  8 - Treetop Tree House: https://youtu.be/RJDgMcrJ8wE
* Day  9 - Rope Bridge: https://youtu.be/xP1jHu6rHzA
* Day 10 - Cathode-Ray Tube: https://youtu.be/xHHpGw3SlL0
* Day 11 - Monkey in the Middle: https://youtu.be/P8P0DypR3Gg 
* Day 12 - Hill Climbing: https://youtu.be/xcIUM003HS0
* Day 13 - Distress Signal: https://youtu.be/ApAC2ZdNYEQ
* Day 14 - Regolith Reservoir: https://youtu.be/LGF-7qfmoxk

Happy Coding!

-------

* Edit: Added reference to Advent of Code site.
* Edit: Added Day 5, 6, 8, 9, 10, 11, 12, 13, 4",1361,53,jcbbjjttt,2022-12-04 22:24:14,https://www.reddit.com/r/learnprogramming/comments/zcnunk/dont_let_the_advent_of_code_intimidate_you_a/,0,learnprogramming
gy5tcg,"Sign up for JetBrains Academy before July 1, 2020 to have FREE access until January 1, 2021 :)","If you've never heard of it before, it teaches you how to program interactively through projects and right now it seems to have tracks for Java, Kotlin, and Python. 

It actually seems like a pretty decent resource for beginners.

Plus after the trial ends, you'll get a 50% discount for a year subscription ($24.90 per month).

You can definitely go though all 3 of the tracks before it ends so you'll learn everything for free.

Give it a shot, it's a no-brainer :)


https://www.jetbrains.com/academy/",1358,103,McDonaldsAndPizza,2020-06-07 04:24:47,https://www.reddit.com/r/learnprogramming/comments/gy5tcg/sign_up_for_jetbrains_academy_before_july_1_2020/,1,learnprogramming
rd9ko5,Help me please! probably not the usual request on here,"My dad died 2 months or so ago and he was a programmer, all his life he worked in jobs centred around programming.

I'm 14, and my dad would always try his best to get me interested in programming (he succeeded btw). A couple weeks before he died, I was talking to him about how i would like one of those alexas with a screen"" (is basically what i said, what i meant was an [Echo Show](https://www.amazon.co.uk/echo-show-5-2nd-generation-2021-release/dp/B08KGTW3CV)). 

He responded with, ""whats the point in buying one when we could build and code our own one ourselves, that would be exactly how *we* want it?""

Now, obviously we wouldn't be able to replicate an exact echo show, but i was wondering if anyone could tell me what direction he was going in with that idea maybe? Or, if anyone could simply help me try finish his project that me and him were gonna do together. If anyone has any help about what i would need to buy, where i should start code wise, or anything else please please please tell me!!",1356,61,natbrowny00,2021-12-10 14:15:09,https://www.reddit.com/r/learnprogramming/comments/rd9ko5/help_me_please_probably_not_the_usual_request_on/,0,learnprogramming
gzdghj,Learn APIs in Ten Minutes or Less: JSON The Language of the Internet,"I wanted to make a post on what APIs are in a short bite sized chunk, assuming you have literally 0 programming knowledge. Please let me know if you find it helpful! Also let me know if you'd like me to make more posts in this format. Thanks!

&#x200B;

[https://daily-coding.info/JSON-the-language-of-the-internet.html](https://daily-coding.info/JSON-the-language-of-the-internet.html)",1360,57,WinterAbroad5,2020-06-09 01:52:59,https://www.reddit.com/r/learnprogramming/comments/gzdghj/learn_apis_in_ten_minutes_or_less_json_the/,0,learnprogramming
70hjry,A Guide to Using Git as a Solo Developer,"https://medium.com/learn-git-today/single-branch-development-with-git-f72a052446cf


Hello all! I've posted a follow up to [my previous post here](https://www.reddit.com/r/learnprogramming/comments/6z2buo/detailed_guide_to_git/), this time covering git as a solo developer. 

Last time I got a lot of questions and didn't answer them all, but I'm going to make an effort here. If you email me or post a comment here, I'll answer to the best of my abilities. But if its not related to git, you might not get as detailed a response.

I'm also hosting [this post on my website](http://learngit.today/articles/single-branch-development-with-git.html) so you can check it out there as well.

Let me know what you all think!",1359,69,sheepsneck,2017-09-16 15:43:16,https://www.reddit.com/r/learnprogramming/comments/70hjry/a_guide_to_using_git_as_a_solo_developer/,0,learnprogramming
km6nox,The two books I highly recommend for any intermediate learners,"1. Foundations of Computer Science by Forouzan

2.The Elements of Computing Systems: Building a Modern Computer from First Principles by Nisan and Schoken

both are excellent books. the second book teaches everything from hardware level. the first book then gives a solid foundation on hardware software interface. anyone who wants to learn the deep level stuff should study these 2 books.

if you have suggestions, please list other books. i am willing to learn.",1349,73,None,2020-12-29 04:04:30,https://www.reddit.com/r/learnprogramming/comments/km6nox/the_two_books_i_highly_recommend_for_any/,0,learnprogramming
4ofngk,Many programming courses are about to be gone. ‪Coursera‬ is removing 472 free ‪online‬ courses‬ from the internet on June 30th. This guide will show you how to hurry up and ‪legally‬ download as many courses as possible before June 30th. [‎MOOCS‬],http://makemeflow.org/advice/2016/06/how-to-download-courseras-courses-before-theyre-gone-forever/,1357,273,Gear5th,2016-06-16 21:02:43,https://www.reddit.com/r/learnprogramming/comments/4ofngk/many_programming_courses_are_about_to_be_gone/,0,learnprogramming
n9sw1q,Am I stupid?,I've been programming for 2 years now but I feel like I still don't know anything. I know all the basics and even advanced topics but I still just can't make anything. Feels like everyone at my college can make all these side-projects but I cant do jack shit. I really need to get out of this hell but I don't know how,1351,249,skystars5431,2021-05-11 09:17:41,https://www.reddit.com/r/learnprogramming/comments/n9sw1q/am_i_stupid/,0,learnprogramming
v4wmg2,A year ago today I wrote my first 'Hello World' program,"And no. I don't have a 6-figure Junior Developer role at MANGA. But I've made enough progress since then that I'm really proud of myself.

I used u/AlSweigart's Automate the Boring Stuff with Python course along with the book. Thank you so much, Al. The beginning of every single month you give out as many free sign ups as you can and I really appreciate that. I used one last year and I'm certain that being introduced to python has been one of the most impactful things to happen in my life. Finding code felt like finding a soulmate. It felt like finding someone who understood what I was thinking and coud express it far better than I ever had in the past. 

But it's been a year and I use Javascript more than I use Python these days. I'm using the Odin Project as my main resource and I feel so privelaged to have stumbled upon such a resource. 

It's just crazy for me to think about the progress I've made. A year ago I thought Django and Flask were completely different programming languages, but when the concept of web frameworks and libraries clicked it hit me that they were an extension of Python. Like what Laravel is to PHP, and what React is to Javascript. Thinking back on that I feel so dumb. 

A year ago I could barely configure VS Code, but today I'm using Git. I'm getting into TDD and writing unit tests with Jest and Pytest. I'm learning OOP, and practicing DS&A on Leetcode and Codewars. I'm using module bundlers like Webpack to... well... bundle my modules. I'm learning about clean code and linting, and thank God for Prettier! I'm learning about DOM manipulation, using the CLI, Linux, Emmet, Flexbox, Grid, Accessibile design, Figma, Sass, Typescript, and so much more!

Finding programming felt like finding a soulmate. That sounds kind of weird but I mean it. It felt like I searched my whole life for a means of expressing what's in my head and then I found code.
I'm in my last year of University (actually maybe not. I'm kind of failing a few stuff. Lol) here in South Africa. Math and Statistics. I guess I picked it 'cause I'm some black kid trying to escape poverty. So that kind of means all of this code stuff has been mostly on the back burner for the past few months. Still... I'm really passionate about it all. And I want to get my hands dirty. I see all of these tutorials on fullstack web apps, Facebook clones, React Native projects, Ecommerce websites and I just get so excited when I think about being able to build that.
I'm feeling pretty jaded about my degree and the deep theoretical nature of all the Math and Stats that I'm doing. I wish I had more time to build stuff. But I guess that time will come.

I've also been thinking about moving abroad at some point. Maybe work for one of those FAANG companies people keep talking about. See what all the hype is about. My family's got a lot of debt and paying for university for my sister and I has definitely been hard, but I'm excited at the prospect of starting to work to kind of lift us all out of poverty, or at the very least lessen the load (no pressure. Lol). It's kind of stressful watching the bills pile up and feeling helpless to do anything about it. And apparently university isn't cheap AT ALL. 

I'm about to start applying for jobs soon. Probably just frontend stuff for now. I'll come back here and ask for some advice when I do. 
Best case scenario would be a remote gig working for a European or American company, but I'm smart enough to know that isn't very likely and I'd be grateful for a proper job here in South Africa.

Anyway. This was a really long post. I just wanted to celebrate with you guys because I kind of feel like you're my family in a weird way. This is a lovely community. I'm glad I found it.",1348,72,silversmithsonian,2022-06-04 19:50:26,https://www.reddit.com/r/learnprogramming/comments/v4wmg2/a_year_ago_today_i_wrote_my_first_hello_world/,0,learnprogramming
m6yb5z,How would you explain what 'Object Oriented Programming' is to a kid?,Give your simplest definition.,1352,255,Sxencode,2021-03-17 11:28:55,https://www.reddit.com/r/learnprogramming/comments/m6yb5z/how_would_you_explain_what_object_oriented/,0,learnprogramming
adz07f,Can't recommend The Odin Project enough,"I tried the other major learn coding websites and felt like I wasn't actually learning anything since they just tell you what to type in and I feel like I wasted a couple weeks of my life on those.

The Odin Project makes you set up an actual environment on your computer where you learn how to actually write code. All the learning and projects will be much harder than the hand hold websites, but you'll actually be learning.

You'll mostly be doing a ton of reading the developer docs and googling how to do stuff and trying to figure out why your program isn't working, but I figure that's what actual programmers do.

I really think sites like codecademy etc are a total waste compared to the odin project.",1353,173,asdhole,2019-01-08 21:12:34,https://www.reddit.com/r/learnprogramming/comments/adz07f/cant_recommend_the_odin_project_enough/,0,learnprogramming
6m00hz,"If you're getting comfortable with programming and want to learn about networking, here's an article that's suitable for both beginners and experts.",[link](https://www.destroyallsoftware.com/compendium/network-protocols?share_key=97d3ba4c24d21147),1352,52,iBzOtaku,2017-07-08 08:57:49,https://www.reddit.com/r/learnprogramming/comments/6m00hz/if_youre_getting_comfortable_with_programming_and/,0,learnprogramming
ss5977,Negative Posts,"I can't be the only one sick and tired by these posts that provide nothing but negative energy and self-doubt.

Yeah i'm talking about posts that usually have the title (i suck at programming, im dumb, i never did good in school what should i do etc)

Isn't this subreddit about learning programming. If you're bad at programming then ask a question about what you dont understand. There's tons of help on the internet for free. 

I usually don't care about what other posts but its gotten to a point where i see it daily which is mildly infuriating.",1350,310,None,2022-02-14 07:54:59,https://www.reddit.com/r/learnprogramming/comments/ss5977/negative_posts/,0,learnprogramming
qan7ir,Found this CSS Cheat Sheet. Hope it is useful for some of you.,Google drive link for the PDF document: [https://drive.google.com/file/d/1\_3K06xxH3jerTk0cu365T8sR30IfNA6g/view](https://drive.google.com/file/d/1_3K06xxH3jerTk0cu365T8sR30IfNA6g/view),1347,35,Wild-Bread4388,2021-10-18 13:57:38,https://www.reddit.com/r/learnprogramming/comments/qan7ir/found_this_css_cheat_sheet_hope_it_is_useful_for/,0,learnprogramming
wu3vo1,"I got my first job, a thank you message","Hello everyone, I just wanted to drop by and say a big ""Thank you"" to the whole community in this subreddit for all the motivational and informative stories by everyone here.

My story is quite basic, I have been going to programming courses in a programming academy since last year (July, 2021) which I started after working a few months at a retail position which I really disliked all while feeling quite directionless in life, especially due to the fact that I dropped out of Uni in 2019. In this past year, I have gone through courses covering topics such as basics of programming (variables, loops, conditionals, algorithms) all the way to React, Express and MongoDB.

A bit over a month ago I started looking for a job while working on my first ""big"" full-stack project which is an e-commerce web shop (I know it's not very original, I just though it would be a doable challenge) and I would speak about how I'm building it and how it works when I would get called to interviews. My first few interviews went quite horribly and I felt a lot of self-doubt, asking myself If I truly know anything at all, but seeing all the success-story posts here by this community motivated me so much that I knew that one day I would actually achieve my goal. After about 50-60 applications and many rejections(without even getting interviewed), I am happy to say that I had a Frontend interview which went tremendously, I still can't believe I'm typing this but I received an offer with a starting salary which Is way above what I thought I am worth at this level.

Never give up, no matter your situation, age, or anything you might think is stopping you - you can do it!",1342,95,Enough-Instance-4351,2022-08-21 16:36:35,https://www.reddit.com/r/learnprogramming/comments/wu3vo1/i_got_my_first_job_a_thank_you_message/,0,learnprogramming
witn91,I’m a Jr. Software Developer who graduated from a bootcamp has been working full-time for 10 months. As me anything.,Chillin on this fine Sunday and want to give back to those who’s shoes I’ve been in not too long ago.,1347,508,BlueMist94,2022-08-07 23:41:54,https://www.reddit.com/r/learnprogramming/comments/witn91/im_a_jr_software_developer_who_graduated_from_a/,1,learnprogramming
f431tv,A Step-by-Step Guide to Learning Python,"I came across a [good article that teaches you the steps necessary to be good at Python](https://www.afternerd.com/blog/learn-python/).

the tl;dr is:

1. Learn Programming fundamentals: these are things that are not specific to Python but are common among any programming language.
2. Internalize the Object-Oriented Programming Concepts
3. Learn how to program using multiple threads.
4. Master Networking concepts, and learn how to do socket programming in Python.
5. Learn your Datastructures and Algorithms, and get familiar with the most popular Python libraries. 

[Full article here](https://www.afternerd.com/blog/learn-python/)",1336,27,explicitPower,2020-02-15 02:27:48,https://www.reddit.com/r/learnprogramming/comments/f431tv/a_stepbystep_guide_to_learning_python/,0,learnprogramming
9qq64g,LPT: Watch tutorial videos once through without copying every line of code,"I used to watch tutorials and pause them every 10 seconds to copy a new line of code. It’s almost as if I wasn’t fully understanding the code, and instead I was just copying it. 

Now I watch a tutorial once through without copying anything. Just listening. Then I try to write the code that I remember and see how far I get before watching it a second time.

I feel as if I learn a lot more this way. Thought I would share. ",1346,58,boxboy97,2018-10-23 15:43:12,https://www.reddit.com/r/learnprogramming/comments/9qq64g/lpt_watch_tutorial_videos_once_through_without/,0,learnprogramming
kvrk05,"How to answer ""Tell me about yourself"" in an interview call","So I recently got a call from a company for which I had applied for a React.js intern position and the person  after exchanging greetings asked me *""Okay tell me about yourself""*. I didnt really know how to respond other than - just telling my name, where I live and telling I mainly work with React.js and thats it - I went blank . It was my first time actually getting a call from a company and I don't think it was impressive.

Does anyone have any ideas or good tips on how I should respond to such a question (assuming that the person asking has already taken a look at your Resume)  ??

Thanks in advance.

EDIT 1: Goddamn it  people of Reddit, you guys are providing such great pointers that I had no idea even existed. I am definitely gonna write down some of these in my notebook for my next interview. Huge thanks to all - Keep'em coming !

EDIT 2: OKAY !! so this question kind of blew up - didnt expect this much response. It made me realise that many people actually go through the same shit as I do. I really hope its gonna help people get over the nervousness of answering this question.",1345,182,fetishthomas69,2021-01-12 13:22:26,https://www.reddit.com/r/learnprogramming/comments/kvrk05/how_to_answer_tell_me_about_yourself_in_an/,0,learnprogramming
2xodrs,"Little problem , dont upvote please","hey so I am trying to work with an API for the first time through python, when I call for said information what I get back is this 


b'{""carprider"":{""id"":19283390,""name"":""Carp Rider"",""profileIconId"":28,""summonerLevel"":30,""revisionDate"":1425228453000}}'

Though the my problem is I dont know how to minipulate this data so if someone could help me it would appreciated.",1340,61,fluxDZ,2015-03-02 15:48:08,https://www.reddit.com/r/learnprogramming/comments/2xodrs/little_problem_dont_upvote_please/,0,learnprogramming
gh2gn9,A brief intro to git - for absolute beginners,"I wrote an article on git because it was one of the tools I didn't bother to learn for far too long, mostly because every time I tried, I found the resources were highly technical, not written for beginners, and as such, did a poor job of explaining the **extremely basic** function that git serves - saving stuff.

I came to the (wrong) conclusion that it was yet another tool in the endless list of crap that I had to learn to be a developer. It turns out, however, that it's one of the most important ones.

If you don't know git or have been struggling to understand it, I hope this intro lets you get over that initial hurdle - [https://webtuu.com/blog/04/a-laymans-introduction-to-git](https://webtuu.com/blog/04/a-laymans-introduction-to-git)

Feedback/comments on improvements or otherwise welcome!

P.S. For anyone who wants it, I made a follow-up post to get you using the most common git commands - [Git Basics - Branching, Merging & Pushing to Github](https://webtuu.com/blog/04/git-basics-branching-merging-push-to-github)",1332,69,imnos,2020-05-10 14:28:59,https://www.reddit.com/r/learnprogramming/comments/gh2gn9/a_brief_intro_to_git_for_absolute_beginners/,0,learnprogramming
blqyjr,"LPT: Learn git, open a github account, and upload even the smallest piece of code you write",Try to get every day to be green - https://i.imgur.com/3zM0ajy.png,1343,138,Ard__Ri,2019-05-07 13:52:38,https://www.reddit.com/r/learnprogramming/comments/blqyjr/lpt_learn_git_open_a_github_account_and_upload/,0,learnprogramming
aoyzj4,A not-to-do list for beginner programmers.,"# 1. Don't follow more than one tutorial (article, text book, videos) at the same time. 

Don't even read more than one book at a time (for the same programming language at-least). Each learning material written by an author records his/her own experience along the way he/she views programming in that language. It's decades of experience condensed into one book. 

You might find it difficult to understand multiple authors in the beginning.  Quickly change the book if you're unable to follow through. Eg: Headfirst series of books explain concepts relating to real time scenarios in funny ways. Other books don't do this. So, if you're a person who can understand things explain at fundamental levels, go for this book. 

&#x200B;

# 2. Don't argue over Programming languages.

Let me clarify. There's no ""best"" programming language. Further, programming language is a tool to solve problems. Can you really say whether a Knife is better than a screw driver? NOPE. Leave the arguments to experts. And, it really doesn't matter which one you choose. Once you choose please stick onto it. It takes about a year or so to learn how to think in a particular programming language. Don't waste time. Start coding in the language of your choice. 

My recommendation - Python.

&#x200B;

# 3. Don't assume you know everything once you've finished a tutorial. Learn the ""gotcha!""

**Jeff Bezos once said ""Expert is someone who can do the same thing several times and look at it differently each time""**

Once you've finished a tutorial or a text book, re-read the important parts and you'd be surprised to see that you look at it a new way or understand it better. So, make notes, highlight important parts while you go through and practice exercises without looking at the solutions, more than once. And then, move on to the next tutorial or book or a blog. Assume that you're learning it for the first time and find different ways to print hello, take inputs from user and read from a file. The idea is to look at things differently and deeply. 

&#x200B;

# 4. Don't isolate yourself

Find groups of people who code in the language of your choice on internet or in person and solve problems together. Find out how others look at programming. Talk to them. The more questions you ask, the faster is your learning process. So, get out of your comfort zone and don't ever be afraid to look stupid in front of others. You've no idea how much you can improve if you code with others. ",1340,156,Srivats1212,2019-02-10 01:00:50,https://www.reddit.com/r/learnprogramming/comments/aoyzj4/a_nottodo_list_for_beginner_programmers/,1,learnprogramming
84ztb7,"My 12 year old cousin is learning coding in school, and apparently most children that age are. Reddit, I am concerned.","So, as per the title.

If most kids are learning to code websites at 12 (apparently already being able to use html) and I'm learning at 26 with no prior experience, am I going to find myself outcompeted by the generation below by the time I get anywhere? According to him, it's one of the most popular subjects there is, and they're all aware university isn't the only path.

This has bothered me more than I want to admit. Should I be?

Thoughts greatly appreciated.",1341,372,None,2018-03-16 23:30:31,https://www.reddit.com/r/learnprogramming/comments/84ztb7/my_12_year_old_cousin_is_learning_coding_in/,0,learnprogramming
mmcbbj,15 week full stack dev bootcamp!,"Hi there,

I recently made an interactive google sheets dev bootcamp schedule that you might find useful! It covers almost all topics that will get you on your way to become a full stack developer. Check it out here:

[https://docs.google.com/spreadsheets/d/1J3pNgIX-GIkpcadFVr9Y3b28QXiK6Q7w4Ioo2M1ykNI/edit?usp=sharing](https://docs.google.com/spreadsheets/d/1J3pNgIX-GIkpcadFVr9Y3b28QXiK6Q7w4Ioo2M1ykNI/edit?usp=sharing)

I first got the idea from appacademy's 16 to 24 week courses.. though I saw that you have to literally pay thousands upon thousands for their bootcamp...[https://blog.appacademy.io/16-week-vs-24-week/?utm\_source=appacademy&utm\_medium=main-nav&utm\_campaign=common-questions&utm\_content=1](https://blog.appacademy.io/16-week-vs-24-week/?utm_source=appacademy&utm_medium=main-nav&utm_campaign=common-questions&utm_content=1)

The overall cost of my ""bootcamp"" per se is only around $100 through all the udemy classes lol. 

You don’t need any prior programming knowledge as you’ll be taught basics to advanced stuff in the first 3 classes! Let me know what you think about this!  


EDIT: I didn't think this would become an ""actual"" bootcamp. Just only resource lol but I made a discord if you'd want to share or exchange information regarding this! [https://discord.gg/B9pZjtdMCE](https://discord.gg/B9pZjtdMCE)",1332,138,Comprehensive_Emu_84,2021-04-07 21:22:21,https://www.reddit.com/r/learnprogramming/comments/mmcbbj/15_week_full_stack_dev_bootcamp/,0,learnprogramming
86eost,In praise of programarcadegames.com as a great way to learn python as your first language,"I just want to give a big public thank you to /u/pvc for putting together such a great, free tutorial/course for learning python.  Python is my first programming language and I started learning on codecademy.com.  I know a lot of people have had success learning there, but it didn't work for me.  I found there was too much hand holding so by the time I had to write a couple lines of code all by myself I was lost.  I discovered 'Program Arcade Games with Python and Pygame' while doing a youtube search to clarify a concept I wasn't understanding.

&nbsp;

I then went through the entire Program Arcade Games course.  I watched the youtube videos chapter by chapter (usually coding along with the professor), briefly skimming the corresponding chapter section on the website (there is sometimes a small amount of written content that was not in the video).  Then the most important part came: doing the labs.  I think this is the key for any programming course - you may think you get a concept, but you won't cement it until you try writing the code yourself.

&nbsp;

Professor Craven really understands the common sticking points for students.  He covers common errors for each concept and in the labs he gives just the right amount of help so you have to do some thinking for yourself, but you have guidance.  He knows where students typically get stuck and gives hints for those parts.

&nbsp;

Now that I've completed the course I feel that I have a decent grasp on the basics of python.  Along the way I thought up some ideas for apps that I'd like to make so I've decided to learn swift.  I'm starting by going through the 'App Development with Swift' iBook by Apple and there is no way I would be able to get through this if I didn't have some programming knowledge already.

&nbsp;

So thank you, Professor Craven.  If anyone else is looking for a good resource to learn Python as their first language, I can't recommend this course enough.


&nbsp;

[Link to Youtube playlist](https://www.youtube.com/watch?v=6lniuucE-bI&list=PL1D91F4E6E79E73E1)

[Link to website](http://programarcadegames.com/)",1334,19,FluffyBeanStudios,2018-03-22 20:17:01,https://www.reddit.com/r/learnprogramming/comments/86eost/in_praise_of_programarcadegamescom_as_a_great_way/,0,learnprogramming
ylombo,Got my first programming job,"Hey guys, I just wanted to tell you that I accepted an offer as a Software Engineer 1 at a fintech company.

I come from a weird background, I immigrated to the US 4 years ago with just 150$ in my wallet. In February of this year I started learning programming on my own, I did it through YouTube and Udemy. I joined a bootcamp in June after quitting my job so I could study full time, I graduated in August and after two months and 428 applications, I received a 6 figures offer.

Keep studying, keep working hard and don’t give up, it’ll be worth it.",1332,192,EfficientOlive7013,2022-11-04 04:19:29,https://www.reddit.com/r/learnprogramming/comments/ylombo/got_my_first_programming_job/,0,learnprogramming
e83alg,It's really unbelievable how many possibilities have opened up in front of me thanks to a regular and dedicated programming practice!,"I started programming in C++ back in high school but quickly gave up because I failed to put anything into context. Had I known then what I know now, I have no doubt I would have spent much more time coding.

I picked up a steady programming practice about a year ago out of sheer necessity. I had to automate something on my computer and I decided to write a simple Bash script. A few months of tinkering later, I thought why stop here, so I decided to flesh out the script, include more features, eventually try turning the script into a simple GUI desktop program with the help of Python. I failed, unsurprisingly. I was doing many things wrong, but most importantly, I was still learning.

A few months later, I decided to write a simple javascript program that would let me simplify a specific process related to my job - converting text into HTML. I succeeded with flying colours (it was actually really simple, but took time to learn) and my boss was very happy. I was overwhelmed. I spent two more months working on the same program and turned it into a proper web application, hooking it up to a database, creating basic algorithms to detect errors in our text, incorporating a search feature, and finally turning it into a real and proper text editor that outputs text into HTML. I'm honestly elated at the result. It has blown away my expectations of what I could have been able to do with a little bit of programming knowledge.

The last week I've spent time learning p5.js. I won't lie, I've had a difficult time working with new functions, shapes, trigonometry, etc., but I'm slowly pushing through. I watched a few videos by Mathologer and 3blue1brown and received some much-needed inspiration for where I might want to take this. 

I decided to take a break from the canvas and spent some time learning node.js and managed to build a fun Telegram bot - all in about 6 hours. You can chat with it at @BlarneyBot if you're curious. I couldn't be more happy.

That's all I wanted to say. Just keep going. You don't know neither the limits of knowledge nor the potential for its applications. Just keep learning. And keep at it.",1335,72,LorestForest,2019-12-09 02:06:29,https://www.reddit.com/r/learnprogramming/comments/e83alg/its_really_unbelievable_how_many_possibilities/,0,learnprogramming
idf9hy,Looking for a particular student,"# Update

I would like to close the application process.

In about 30 hours I received and read so many messages I could unfortunately not write a response to them all. Please know that I greatly appreciate the time you have all taken to write your stories. I have let a few people know they made it to the shortlist.

Reading all your stories has been very informative. Many of you indicate that you 'freeze up', 'draw a blank' or 'don't know what to do' when tasked to write a program all by yourself. I have seen this happen often with students who are given a task that is too far above their current skill level. I advice you to look at simpler and simpler problems until you find a problem that is somewhat challenging but you feel like you could solve it with some effort. Be humble and take it slow. Solve many different kinds of problems, each kind at your perfect skill level (challenging but manageable). This way you will slowly build up a large bank of increasingly higher level solutions. Practise, practise, practise.

Your personal stories align perfectly with my thesis that learning how to program is remarkably suboptimal for most people when done with languages used by professionals in products, so pretty much every single language you mentioned to me. These languages sacrifice understandability for power and convenience. These languages are what you grow towards, not start out with. You don't start racing motorcycles when you can't even hold your balance on a bicycle yet.

The problem I see in educational languages is that they sacrifice thoroughness for accessibility and still are too similar to professional languages. They are great to acquaint and enthuse, but cause friction in a thorough curriculum.

Besides creating a thorough curriculum that could be thought using pretty much any language, I am simultaneously implementing a language I designed to perfectly support the curriculum. Every single professional programmer I discussed this language with was very sceptical, but I find that not surprising at all. Compared to most people, they are very unconsciously competent and do not realise they have the skills required to effectively work with their languages where most people do not yet have these skills.

I myself was unconsciously competent in this way when I started my journey as a programming educator and it has taken me years to become aware of all the things I was doing right that most people have to first practise much for.

It is my belief programming education in general has been notoriously ineffective for this reason: the educators are too unconsciously competent. The educators have noticed that most of their students are missing *something*, but could never quite figure out what exactly. As a result, programming courses are too difficult for most people because they skip over certain competencies. Typically only people who develop these competencies naturally without targeted training improve significantly from programming courses. Most people do not.

Becoming self aware of my natural competencies has given me much insight in what most people do not have naturally and allowed me to help people practise specifically to develop these competencies. The increase in effectiveness has been great.

Back on topic: receiving this many responses and hearing your stories and motivations for wanting to learn programming has increased my motivation to make my project a success to an even higher level. I am very thrilled to keep working on this and deliver something to all of you that will help you on your journeys.

&#x200B;

end of update---------------------

&#x200B;

I have a degree in both computer science and educational science and I specialize in programming education. In my free time (I am employed as a software engineer) I am developing a method to teach programming to 'non-naturals'. I would like to further refine my work by actively mentoring somebody.

I am 27 years old, from the Netherlands.

&#x200B;

I am interested in mentoring you if you think one or more of the following apply to you:

\- you yourself think you're not a natural for whatever reason (I am curious to hear why!)

\- you find it very difficult to not let your thoughts be influenced by context, for example your existing ideas of what words like 'if' and 'while' mean

\- you have difficulty seeing structure in code

\- you have difficulty 'tracing' a program; going through it step by step and mentally keeping track of the program state

&#x200B;

What I offer is an hour (at least; perhaps more) of my time fully dedicated to your learning programming, twice a week, so two hours per week, for a period of 8 weeks. During these sessions we would do 'live' mentoring with voice and screen sharing. After a session I will suggest homework to you.

This will be completely free; I ask nothing in return.

&#x200B;

If you are interested, please tell me about yourself by addressing all of the topics below. You can reply in this thread or send me a direct message.

\- why you want to learn programming

\- your culture, personality and interests

\- your educational history

\- your experience with programming (zero experience is also great!)

\- why you think you are a suitable candidate

\- at which days/hours you would be able to have the live sessions",1330,103,vuurdier,2020-08-20 17:57:28,https://www.reddit.com/r/learnprogramming/comments/idf9hy/looking_for_a_particular_student/,1,learnprogramming
n33czp,I’m worried about about entering an industry full of gatekeepers,"Can I say first of all this community r/learningprogramming is so lovely. I really just want a hug right now 😞

I’m not going to say what subreddit but there’s another programming sub I was using to ask questions about their programming language. I always do my research before asking and try to answer my question in the post to show I put in effort. The people who answer are sometimes nice but often times seem like they are old, 190 year old veteran programmers who hate to see someone new in their field.

They make it so unapproachable as a beginner. I feel like older programmers in that language sometimes have a chip on their shoulder. Sometimes it feels they want to keep their language exclusive other times it feels like they hate the modernisation of their language and how newbies are entering the scene…I love constructive feedback and would rather someone tell me I’m terrible (and how to improve) but these people make me feel terrible 😣 

Anyways, it’s making me so sad because I’m so in love with language and associated frameworks but I’m worried if there a toxic environment with the language. In turn I don’t want to end up working somewhere with programmers with a holier-than-thou attitude.

Can anyone relate?

On this sub there is such a sense of community and encouragement. It inspires me everyday whether it’s someone in their late 50s doing a career change or someone just starting getting their first job. So, thank you for that because it makes programming so much less intimidating and encourages growth.

Sorry if this comes across ranting, sometimes instances like this knocks your motivation.",1327,254,augst1,2021-05-02 10:08:51,https://www.reddit.com/r/learnprogramming/comments/n33czp/im_worried_about_about_entering_an_industry_full/,0,learnprogramming
bwt9x9,"[Python] My girlfriend asked about prerequisite knowledge for an AI/ML class. I compiled a list of subjects and corresponding resources for her and, hopefully, for anyone looking to start developing their own algorithms!","#Mathematics
____

**Scalars, Vectors, and Tensors** are the heart of machine learning. Tensors lend themselves quite well to data representation; for example, a picture might be represented as a tensor of order three where each pixel has corresponding R, G, B values. It's extremely important to have a basic understanding of [what tensors represent and how to manipulate them using linear algebra techniques](https://www.khanacademy.org/math/algebra-home/alg-vectors). 

**ℝ^n spaces and higher-dimensional space.** One of the hardest parts of Machine Learning for me was [visualizing data in dimensions past n=three](https://www.youtube.com/watch?v=MSUMBkrqLdY). Because we ""vectorize"" our complicated data, it often exists in a large multidimensional space. It's important to understand higher dimensional spaces, and that we are not limited to three dimensions despite how we see and visualize real space.

**Partial derivatives and gradients** are used for activation functions and a variety of optimization functions. We often use the inverse [gradient](http://tutorial.math.lamar.edu/Classes/CalcIII/GradientVectorTangentPlane.aspx) of a function to determine how weights are adjusted to minimize error. To perform gradient calculations, you will need to know how to [take partial derivatives of a function](http://tutorial.math.lamar.edu/Classes/CalcIII/PartialDerivatives.aspx).

**Regression** is used to find lines of fit for data and determine how great an effect each point has on a final outcome. A brief explanation of regression can be found [here](https://towardsdatascience.com/5-types-of-regression-and-their-properties-c5e1fa12d55e).

**Mathematical logic (logic gates) and truth tables** are the core of perceptron algorithms. They compare two conditions using binary flags. [Here](http://www.ee.surrey.ac.uk/Projects/CAL/digital-logic/gatesfunc/) is a list of common logic gates and their I/O.

**Probability Theory** - thank you /u/kittttttens - When I was learning to write ML code, we used stochastic matrices to represent probability. That said, machine learning is an incredibly powerful statistical analysis tool and the statistics used in the algorithms would warrant a section of its own. For starters, the classes I've taken have touched on linear regression, logistic regression, clustering, and other similar topics. I'm not well versed in this, though I would gladly add to my post if somebody did a more thorough explanation.

#Python libraries
____

**NumPy** is a mathematics tool for Python. It contains simple calls for complex mathematical operations, such as finding the gradient of a surface, multiplying vectors, or taking the average of multiple data. NumPy has incredible [documentation](https://www.numpy.org/devdocs/reference/index.html).

**Pandas** allows for data to be read into python. We often work with .csv files and Pandas is the ""translator"" that allows us to read them in. [This](https://towardsdatascience.com/a-quick-introduction-to-the-pandas-python-library-f1b678f34673) is the most intuitive explanation of Pandas I have yet found. It is very powerful and relatively straightforward.

**MatPlotLib** allows data to be presented with charts and plots. This is essential for communicating the results of your algorithm. [Their website](https://matplotlib.org/tutorials/index.html) has a very helpful list of tutorials.

**Seaborn** is an extension of MatPlotLib with fantastic tools such as a correlation heatmap. [Their website](https://seaborn.pydata.org/tutorial.html) also has decent documentation.

**TENSORFLOW AND KERAS** are a fantastic, comprehensive ML library built by Google. Many of the standard ML libraries are built straight into TF, eliminating the need to write tedious mathematical processes. Because it is such a popular and well-used library, their website has [fantastic documentation](https://www.tensorflow.org/tutorials/keras)

#Python Skills

____

**List comprehension** is vital for writing good AI/ML code. The processes are complicated, therefore, it's best to simplify loops whenever possible. It is also a good practice for coding in general. A tutorial can be found [here](https://hackernoon.com/list-comprehension-in-python-8895a785550b).

**Garbage collecting** is done automatically by Python, but [manual GC](https://www.digi.com/resources/documentation/digidocs/90001537/references/r_python_garbage_coll.htm) can still improve performance in larger, high-cost algorithms.

____

Please don't hesitate to make suggestions or additions to the list! Hopefully, it serves as a starting point for those of you looking to explore AI/ML programming.",1327,72,None,2019-06-04 19:58:48,https://www.reddit.com/r/learnprogramming/comments/bwt9x9/python_my_girlfriend_asked_about_prerequisite/,0,learnprogramming
3bw634,Here's a list of 153 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2015),"This is not the complete list of MOOCs starting in Jult 2015, just the ones relevant to this community. The complete list of courses starting in July 2015 can be found over at [Class Central](https://www.class-central.com/report/mooc-course-report-july-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

BEGINNER(39)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Introduction to Programming with MATLAB](https://www.coursera.org/course/matlab)|Jul 1st|9 weeks|Coursera|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3396/coursera-introduction-to-programming-with-matlab#course-all-reviews)
[COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x)|Jul 7th|5 weeks|edX|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/1983/edx-comp102-1x-introduction-to-java-programming-part-1#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/course/interactivepython1)|Jul 11th|5 weeks|Coursera|★★★★★ [(2108 reviews)](https://www.class-central.com/mooc/408/coursera-an-introduction-to-interactive-programming-in-python-part-1#course-all-reviews)
[An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/course/interactivepython2)|Jul 11th|4 weeks|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/3196/coursera-an-introduction-to-interactive-programming-in-python-part-2#course-all-reviews)
[Introduction to Cyber Security](http://www.futurelearn.com/courses/introduction-to-cyber-security?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|Jul 13th|8 weeks|FutureLearn|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2448/futurelearn-introduction-to-cyber-security#course-all-reviews)
[Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(39 reviews)](https://www.class-central.com/mooc/320/udacity-intro-to-computer-science#course-all-reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews)
[UNSW Computing 1 - The Art of Programming](https://www.openlearning.com/courses/unsw/computing1)|Self Paced|12 weeks|OpenLearning|☆☆☆☆☆ [](https://www.class-central.com/mooc/553/openlearning-unsw-computing-1-the-art-of-programming#course-all-reviews)
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|★★★★★ [(6 reviews)](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-all-reviews)
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/640/program-arcade-games-learn-computer-science#course-all-reviews)
[Semantic Web Technologies](https://open.hpi.de/courses/semanticweb)|Self Paced|NA|openHPI|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/615/openhpi-semantic-web-technologies#course-all-reviews)
[Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|★★★☆☆ [(9 reviews)](https://www.class-central.com/mooc/831/udacity-intro-to-java-programming#course-all-reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-all-reviews)
[Intro to Point & Click App Development](https://www.udacity.com/course/intro-to-point-click-app-development--ud162?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1481/udacity-intro-to-point-click-app-development#course-all-reviews)
[Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews)
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self Paced|11 weeks|Stanford OpenEdx|★★★★★ [(3 reviews)](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews)
[Making Sense of Data](https://datasense.withgoogle.com/preview)|Self Paced|3 weeks|Others|★★★☆☆ [(7 reviews)](https://www.class-central.com/mooc/1821/making-sense-of-data#course-all-reviews)
[Make Your Own 2048](https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews)
[Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python#course-all-reviews)
[Introduction to Internetworking with TCP/IP](https://open.hpi.de/courses/internetworking2014)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews)
[An Introduction to SAP HANA](https://open.sap.com/course/hanaintro1)|Self Paced|4 weeks|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/1894/opensap-an-introduction-to-sap-hana#course-all-reviews)
[Introduction to Programming in C](https://onlinecourses.nptel.ac.in/iitk_cs_101/preview)|Self Paced|NA|NPTEL|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/2486/nptel-introduction-to-programming-in-c#course-all-reviews)
[Cambridge GSCE Computing Online](http://www.cambridgegcsecomputing.org/)|Self Paced|NA|Cambridge University Press|★★★★★ [(1 review)](https://www.class-central.com/mooc/2780/cambridge-university-press-cambridge-gsce-computing-online#course-all-reviews)
[Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★☆☆ [(6 reviews)](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews)
[JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews)
[How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(11 reviews)](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self Paced|NA|edX|★★★★★ [(20 reviews)](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews)
[Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3253/udacity-intro-to-relational-databases#course-all-reviews)
[Internet History, Technology, and Security](https://www.coursera.org/course/insidetheinternet)|Self Paced|NA|Coursera|★★★★★ [(17 reviews)](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews)
[Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about)|Self Paced|11 weeks|Stanford OpenEdx|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/1578/stanford-openedx-networking-introduction-to-computer-networking#course-all-reviews)
[CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced)|Self Paced|6 weeks|Stanford OpenEdx|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/2175/stanford-openedx-cs101-computer-science-101#course-all-reviews)
[CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0)|Self Paced|6 weeks|edX|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2954/edx-cs002x-programming-in-scratch#course-all-reviews)
[CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x)|Self Paced|6 weeks|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2957/edx-cs001x-mycs-computer-science-for-beginners#course-all-reviews)
[DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0)|Self Paced|3 weeks|edX|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/3338/edx-dev203x-introduction-to-bootstrap-a-tutorial#course-all-reviews)
[LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2)|Self Paced|8 weeks|edX|★★★★☆ [(13 reviews)](https://www.class-central.com/mooc/1857/edx-lfs101x-2-introduction-to-linux#course-all-reviews)
[CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x)|Self Paced|14 weeks|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3483/edx-cs005x-cs-for-all-introduction-to-computer-science-and-python-programming#course-all-reviews)
[CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0)|Self Paced|9 weeks|edX|★★☆☆☆ [(8 reviews)](https://www.class-central.com/mooc/1650/edx-cs101-1x-introduction-to-computer-programming-part-1#course-all-reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|★★★★★ [(24 reviews)](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-all-reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-all-reviews)

INTERMEDIATE(90)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Statistical Inference](https://www.coursera.org/course/statinference)|Jul 6th|4 weeks|Coursera|★★☆☆☆ [(5 reviews)](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews)
[Regression Models](https://www.coursera.org/course/regmods)|Jul 6th|4 weeks|Coursera|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews)
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|Jul 6th|4 weeks|Coursera|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|Jul 6th|4 weeks|Coursera|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews)
[Introduction to Genomic Technologies](https://www.coursera.org/course/genintro)|Jul 6th|4 weeks|Coursera|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3472/coursera-introduction-to-genomic-technologies#course-all-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Jul 6th|4 weeks|Coursera|★★★☆☆ [(59 reviews)](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews)
[R Programming](https://www.coursera.org/course/rprog)|Jul 6th|4 weeks|Coursera|★★☆☆☆ [(92 reviews)](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Jul 6th|4 weeks|Coursera|★★★☆☆ [(19 reviews)](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Jul 6th|4 weeks|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|Jul 6th|4 weeks|Coursera|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews)
[KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0)|Jul 7th|NA|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1836/edx-kiexplorx-explore-statistics-with-r#course-all-reviews)
[SABR101x: Sabermetrics 101: Introduction to Baseball Analytics](https://www.edx.org/course/sabermetrics-101-introduction-baseball-bux-sabr101x-0)|Jul 7th|10 weeks|edX|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/1837/edx-sabr101x-sabermetrics-101-introduction-to-baseball-analytics#course-all-reviews)
[Principles of Computing (Part 2)](https://www.coursera.org/course/principlescomputing2)|Jul 11th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3198/coursera-principles-of-computing-part-2#course-all-reviews)
[Algorithmic Thinking (Part 2)](https://www.coursera.org/course/algorithmicthink2)|Jul 11th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3200/coursera-algorithmic-thinking-part-2#course-all-reviews)
[Data Visualization](https://www.coursera.org/course/datavisualization)|Jul 20th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/2737/coursera-data-visualization#course-all-reviews)
[Programming Mobile Applications for Android Handheld Systems: Part 1](https://www.coursera.org/course/androidpart1)|Jul 22nd|4 weeks|Coursera|★★★★☆ [(23 reviews)](https://www.class-central.com/mooc/1178/coursera-programming-mobile-applications-for-android-handheld-systems-part-1#course-all-reviews)
[Programming Mobile Applications for Android Handheld Systems: Part 2](https://www.coursera.org/course/androidpart2)|Jul 22nd|4 weeks|Coursera|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/3076/coursera-programming-mobile-applications-for-android-handheld-systems-part-2#course-all-reviews)
[COMP107x: Introduction to Mobile Application Development using Android](https://www.edx.org/course/introduction-mobile-application-hkustx-comp107x)|Jul 28th|NA|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3758/edx-comp107x-introduction-to-mobile-application-development-using-android#course-all-reviews)
[JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews)
[Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews)
[Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(12 reviews)](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews)
[Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews)
[Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/364/udacity-intro-to-algorithms#course-all-reviews)
[Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews)
[Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews)
[CSCI 1730 - Introduction to Programming Languages](http://www.cs.brown.edu/courses/cs173/2012/OnLine/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/458/csci-1730-introduction-to-programming-languages#course-all-reviews)
[Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews)
[Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/592/udacity-intro-to-artificial-intelligence#course-all-reviews)
[HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews)
[Datenmanagement mit SQL](https://open.hpi.de/courses/sql)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/777/openhpi-datenmanagement-mit-sql#course-all-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|★★★★★ [(1 review)](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews)
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-all-reviews)
[Applied Data Science: An Introduction](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_276927_1)|Self Paced|NA|CourseSites|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1806/coursesites-applied-data-science-an-introduction#course-all-reviews)
[Introduction to Mobile Solution Development](https://open.sap.com/course/mobile1)|Self Paced|NA|openSAP|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1348/opensap-introduction-to-mobile-solution-development#course-all-reviews)
[Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★★ [(3 reviews)](https://www.class-central.com/mooc/1470/udacity-intro-to-hadoop-and-mapreduce#course-all-reviews)
[Big Data applications and Analytics](https://bigdatacourse.appspot.com/)|Self Paced|NA|Others|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/1948/big-data-applications-and-analytics#course-all-reviews)
[Introduction to Software Development on SAP HANA](https://open.sap.com/course/hana1-1)|Self Paced|NA|openSAP|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/1347/opensap-introduction-to-software-development-on-sap-hana#course-all-reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews)
[Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews)
[Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews)
[Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/1478/udacity-data-analysis-with-r#course-all-reviews)
[Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1701/openhpi-parallel-programming-concepts#course-all-reviews)
[Ada: Overview](http://university.adacore.com/courses/overview/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2109/ada-overview#course-all-reviews)
[Ada: Basic Concepts](http://university.adacore.com/courses/basic-concepts/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2110/ada-basic-concepts#course-all-reviews)
[Ada: Programming in the Large](http://university.adacore.com/courses/programming-in-the-large1/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/2111/ada-programming-in-the-large#course-all-reviews)
[Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api)|Self Paced|1 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization#course-all-reviews)
[UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers#course-all-reviews)
[Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-in-java#course-all-reviews)
[Java SE - Standart Edition](https://www.universiteplus.com/courses/java-se-standart-edition)|Self Paced|NA|Universiteplus|☆☆☆☆☆ [](https://www.class-central.com/mooc/2420/universiteplus-java-se-standart-edition#course-all-reviews)
[Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2211/udacity-developing-android-apps#course-all-reviews)
[Software Development Process](https://www.udacity.com/course/ud805)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2335/udacity-software-development-process#course-all-reviews)
[Computer Networking](https://www.udacity.com/course/ud436)|Self Paced|12 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2336/udacity-computer-networking#course-all-reviews)
[Knowledge Engineering with Semantic Web Technologies](https://open.hpi.de/courses/semanticweb2014)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/2038/openhpi-knowledge-engineering-with-semantic-web-technologies#course-all-reviews)
[Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about)|Self Paced|17 weeks|Others|★★★★★ [(1 review)](https://www.class-central.com/mooc/2339/practical-numerical-methods-with-python#course-all-reviews)
[Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews)
[Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax#course-all-reviews)
[Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews)
[HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2999/udacity-html5-canvas#course-all-reviews)
[Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews)
[Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery#course-all-reviews)
[Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning#course-all-reviews)
[Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3254/udacity-full-stack-foundations#course-all-reviews)
[Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3255/udacity-responsive-web-design-fundamentals#course-all-reviews)
[Health Informatics in the Cloud](https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3288/udacity-health-informatics-in-the-cloud#course-all-reviews)
[Introduction to SAP HANA Cloud Platform](https://open.sap.com/courses/hanacloud1-2)|Self Paced|6 weeks|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/1346/opensap-introduction-to-sap-hana-cloud-platform#course-all-reviews)
[Next Steps in Software Development on SAP HANA](https://open.sap.com/courses/hana2)|Self Paced|7 weeks|openSAP|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2489/opensap-next-steps-in-software-development-on-sap-hana#course-all-reviews)
[ABAP Development for SAP HANA](https://open.sap.com/course/a4h1)|Self Paced|4 weeks|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/2360/opensap-abap-development-for-sap-hana#course-all-reviews)
[JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/3351/udacity-javascript-testing#course-all-reviews)
[UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3350/udacity-uikit-fundamentals#course-all-reviews)
[LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about)|Self Paced|15 weeks|Stanford OpenEdx|☆☆☆☆☆ [](https://www.class-central.com/mooc/2340/stanford-openedx-lpl-language-proof-and-logic#course-all-reviews)
[Responsive Images](https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3352/udacity-responsive-images#course-all-reviews)
[Machine Learning](https://www.coursera.org/learn/machine-learning)|Self Paced|NA|Coursera|★★★★★ [(78 reviews)](https://www.class-central.com/mooc/835/coursera-machine-learning#course-all-reviews)
[iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3393/udacity-ios-networking-with-swift#course-all-reviews)
[Authentication & Authorization: OAuth](https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3523/udacity-authentication-authorization-oauth#course-all-reviews)
[Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3524/udacity-browser-rendering-optimization#course-all-reviews)
[Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3525/udacity-developing-scalable-apps-in-python#course-all-reviews)
[iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3526/udacity-ios-persistence-and-core-data#course-all-reviews)
[How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3527/udacity-how-to-make-an-ios-app#course-all-reviews)
[Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3455/udacity-android-performance#course-all-reviews)
[Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/3579/udacity-android-development-for-beginners#course-all-reviews)
[Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3580/udacity-advanced-android-app-development#course-all-reviews)
[Android Design for Developers](https://www.udacity.com/course/android-design-for-developers--ud862?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3581/udacity-android-design-for-developers#course-all-reviews)
[Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3582/udacity-android-ubiquitous-computing#course-all-reviews)
[Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3583/udacity-google-play-services#course-all-reviews)
[Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3584/udacity-gradle-for-android-and-java#course-all-reviews)
[DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0)|Self Paced|6 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3343/edx-dev201x-introduction-to-typescript#course-all-reviews)
[DEV202.1x: Building Cloud Apps with Microsoft Azure – Part 1](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-1x-0)|Self Paced|4 weeks|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3348/edx-dev202-1x-building-cloud-apps-with-microsoft-azure-part-1#course-all-reviews)
[CLD201x: Introduction to Office 365 APIs](https://www.edx.org/course/introduction-office-365-apis-microsoft-cld201x-0)|Self Paced|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3342/edx-cld201x-introduction-to-office-365-apis#course-all-reviews)
[DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-0)|Self Paced|6 weeks|edX|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/3339/edx-dev204x-programming-with-c#course-all-reviews)
[AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0)|Self Paced|NA|edX|★★★☆☆ [(3 reviews)](https://www.class-central.com/mooc/1564/edx-amrx-autonomous-mobile-robots#course-all-reviews)

ADVANCED(24)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Genomic Data Science with Galaxy](https://www.coursera.org/course/gengalaxy)|Jul 6th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3473/coursera-genomic-data-science-with-galaxy#course-all-reviews)
[Genomic Data Science with Galaxy](https://www.coursera.org/course/gengalaxy)|Jul 6th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3473/coursera-genomic-data-science-with-galaxy#course-all-reviews)
[Command Line Tools for Genomic Data Science](https://www.coursera.org/course/gencommand)|Jul 6th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3474/coursera-command-line-tools-for-genomic-data-science#course-all-reviews)
[Algorithms for DNA Sequencing](https://www.coursera.org/course/ads1)|Jul 6th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3433/coursera-algorithms-for-dna-sequencing#course-all-reviews)
[Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/course/hiddenmessages)|Jul 21st|4 weeks|Coursera|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/3289/coursera-finding-hidden-messages-in-dna-bioinformatics-i#course-all-reviews)
[Assembling Genomes and Sequencing Antibiotics (Bioinformatics II)](https://www.coursera.org/course/assembly)|Jul 21st|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3290/coursera-assembling-genomes-and-sequencing-antibiotics-bioinformatics-ii#course-all-reviews)
[Comparing Genes, Proteins, and Genomes (Bioinformatics III)](https://www.coursera.org/course/comparinggenomes)|Jul 21st|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3291/coursera-comparing-genes-proteins-and-genomes-bioinformatics-iii#course-all-reviews)
[Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews)
[Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/326/udacity-applied-cryptography#course-all-reviews)
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|7 weeks|openHPI|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management#course-all-reviews)
[Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews)
[Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews)
[Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-all-reviews)
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-all-reviews)
[Machine Learning 3—Reinforcement Learning](https://www.udacity.com/course/ud820)|Self Paced|4 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1849/udacity-machine-learning-3-reinforcement-learning#course-all-reviews)
[In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup)|Self Paced|NA|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/2458/opensap-in-memory-data-management-in-a-nutshell#course-all-reviews)
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews)
[Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/3256/udacity-model-building-and-validation#course-all-reviews)
[Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1016/udacity-advanced-operating-systems#course-all-reviews)
[High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1018/udacity-high-performance-computer-architecture#course-all-reviews)
[Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1024/udacity-computability-complexity-algorithms#course-all-reviews)
[Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1025/udacity-knowledge-based-ai-cognitive-systems#course-all-reviews)
[Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems)|Self Paced|NA|Coursera|★★★☆☆ [(7 reviews)](https://www.class-central.com/mooc/1029/coursera-introduction-to-recommender-systems#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/ud262)|Self Paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1020/udacity-machine-learning#course-all-reviews)",1330,75,dhawal,2015-07-02 17:24:34,https://www.reddit.com/r/learnprogramming/comments/3bw634/heres_a_list_of_153_free_online_programmingcs/,1,learnprogramming
175tufk,Self-taught programming is way too biased towards web dev,"Everything I see is always front end web development. In the world of programming, there are many far more interesting fields than changing button colors. So I'm just saying, don't make the same mistake I did and explore around, do your research on the different types of programming before committing to a path. If you wanna do web dev that's fine but don't think that's your only option. The Internet can teach you anything. ",1321,457,thedarklord176,2023-10-12 00:43:48,https://www.reddit.com/r/learnprogramming/comments/175tufk/selftaught_programming_is_way_too_biased_towards/,0,learnprogramming
fkokzf,My 5 ebooks on regex and cli tools are free for the foreseeable future,"Hello!

Amid all the pandemic fears, today I made the decision of making all my ebooks free for the foreseeable future. Use either of the below links to download them together as a bundle:

* https://gumroad.com/l/regex
* https://leanpub.com/b/regex

There are five books - three of them on regex (Ruby, Python, JavaScript) and two on cli tools (GNU grep and ripgrep, GNU sed).

Currently working on GNU awk, which will take another month if I want to include everything I had planned. Now, I'm thinking of releasing as drafts and see how it goes.

I plan to release book markdown source as well in coming days. Already done for Ruby, see https://github.com/learnbyexample/Ruby_Regexp

Stay safe and happy learning.",1326,59,ASIC_SP,2020-03-18 12:15:56,https://www.reddit.com/r/learnprogramming/comments/fkokzf/my_5_ebooks_on_regex_and_cli_tools_are_free_for/,0,learnprogramming
pbgdde,How About a Subreddit Hackathon?,"Dear Mods,

I was thinking it might be pretty cool if this subreddit somehow hosted a beginner friendly virtual hackathon. It could boost engagement on the sub, help a lot of people learn, and be a good source of networking. At the end of the event, final projects could be linked on the sub, and most upvotes wins.

If that is logistically improbable or cost prohibitive, then does anybody know of any upcoming hackathons that are beginner friendly?",1320,124,pre-tend-ed,2021-08-25 17:47:16,https://www.reddit.com/r/learnprogramming/comments/pbgdde/how_about_a_subreddit_hackathon/,1,learnprogramming
gu2x1p,Hang in there guys! You can do it!,"To all the programmers out there, new and old (since you can't ever stop learning, so you're new to something I guess), HANG IN THERE!

I've seen a lot of people who are trying to learn how to code or learning a new framework or a trying to understand an algorithm and they are too quick to give up. They see someone they know or someone online who are just flawless at what they are struggling to learn and it almost seems as if it comes naturally to some people and you are not one of them.

What you don't see is that the same people who are flawless at what you're trying to learn had been through the exact same phase you're in right now. And you know what else? They kept pushing through and kept trying until they became comfortable with whatever they tried to learn. And you can too!

If you try once and fail at understanding something, and you start believing that it's not something you can do, you're already losing. Almost no one who knows something or has learnt something, learnt it in an hour or a day. You try, you fail and then you try again and maybe again and then you succeed. You watch tutorials, read blogs, read the documentation and then you start understanding stuff. All the people who make it seem easy had to go through all of this, and if it's easy for them now, it'll be easy for you too once you put in the effort. It's not impossible and you can do it!

Now, sometimes, something actually happens to be difficult to understand or learn. There are levels to everything. And, it might not yet be time for you to learn something you're attempting to learn. This often happens when you're self-learning and you don't have anyone to tell you what to learn next, and you find a bunch of stuff online and try learning one. And, if you're unfortunate enough, you stumble upon something that is indeed difficult for you to understand. If you fall into such a situation, you can make a note of whatever you're trying to learn and set it aside for a while. And maybe a few days/weeks/months later, you can get back to it and try again! And if that doesn't work, try again! And you will succeed!

The whole trick is to keep trying guys! Now go out there and learn something amazing!

Peace.",1327,53,diptangsu,2020-05-31 17:19:11,https://www.reddit.com/r/learnprogramming/comments/gu2x1p/hang_in_there_guys_you_can_do_it/,0,learnprogramming
d8roca,Great tutorials from a uni professor,"Hi! I've recently bumped into a great website on programming that contains full Java tutorial, as well as C/C++, Python, JavaScript, Databases, Android programming, HTML/CSS, Linux, Arduino and lots of other stuff. Everything is laid out perfectly and easy to understand. The website and tutorials do not belong to me, I'm just sharing an undiscovered gem.

&#x200B;

[https://www.ntu.edu.sg/home/ehchua/programming/](https://www.ntu.edu.sg/home/ehchua/programming/)

Edit: there may be some outdated tutorials but as he stated: "" I update some articles more often than others, based on feedback received on the usefulness of the articles. """,1318,50,_LetTheGamesBegin_,2019-09-24 18:59:57,https://www.reddit.com/r/learnprogramming/comments/d8roca/great_tutorials_from_a_uni_professor/,0,learnprogramming
tojukr,To the beginners: It's a perfectly fine idea to select HTML/CSS/JavaScript as your first languages.,"*If you don't know where you're going, any road will take you there.* — George Harrison

**Edit: I’m not advocating for these languages as an entry point over others, I’m just saying that people will tell you not to start with them, and that I disagree.**

**Edit 2: Some have rightfully pointed out that language distinctions matter. It is indeed important to point out that HTML and CSS are not programming languages. I do think that when starting out, creating and having fun is more important than this. Having said that, please make it a point to understand what makes a language a programming language, versus a scripting or mark-up language.**

Back in 2018, I had zero knowledge on the topic of serious programming. But I was interested. I didn't know where to start exactly, so I googled for the easiest languages to learn. (Apparently I discovered the big three before I discovered Python. Thanks Google!)

At the time, I didn't really understand the difference between ""mark-up,"" ""scripting,"" or ""programming."" I thought everything was a ""programming"" language. For me personally, that was a good thing, because I wasn't hindered by some silly notion that I wasn't doing ""real"" programming. I had *tons* of fun playing around. **As per Edit 2, these distinctions do actually matter, but my opinion is that it’s okay for beginners to overlook them in the name of creativity. Others may disagree.**

So I wanted to learn more, and I had nowhere to go but to dig deeper. Now, I'm halfway through a CS degree, and I have great knowledge of fundamental programming concepts, of C, and of Java.

It doesn't matter where you start on the spectrum of high-to-low-level languages. You can go top-down, bottom-up, or smack-dab in the middle. Don't let anyone dissuade you from starting with web technologies. If it gets you building something you're proud of, that's what matters the most.

I hope this helps anyone who wants to learn programming but is stressing over where to start. Start anywhere, and see where you end up!",1328,177,SafeCake1045,2022-03-26 08:04:42,https://www.reddit.com/r/learnprogramming/comments/tojukr/to_the_beginners_its_a_perfectly_fine_idea_to/,0,learnprogramming
t02pg3,Is it normal to develop a severe inferiority complex from reading Reddit?,"""Hi, I'm Steve, I literally taught myself programming from knowing nothing in 3 months and immediately got a job making 300K a year, now I switch jobs every 3 months and get a 50% increase every time! Also my job is fully remote and really easy and I only need to spend 10 hours a week actually doing any work, so I use my spare time to get a second job so now I make twice as much!""",1318,254,None,2022-02-24 05:16:57,https://www.reddit.com/r/learnprogramming/comments/t02pg3/is_it_normal_to_develop_a_severe_inferiority/,0,learnprogramming
yv51u5,Why learning so painful?,Reading the docs so boring and make me depressed.,1320,180,fhv3hk71,2022-11-14 16:46:44,https://www.reddit.com/r/learnprogramming/comments/yv51u5/why_learning_so_painful/,0,learnprogramming
v23pn2,I finished Odin Project Foundations section. Here's the hourly breakdown.,"I'm making this post because I saw many people ask the same question...""How long will the Odin project take?"". So I decided to time myself while going through the course. As said in the title I haven't finished the entire course but I do plan to time myself all the way. 

Disclaimer: I'm not a complete beginner to programming. I'm doing a degree in ECE so we have to do stuff with micro-controllers. So I know a bit of c/c++ and assembly. 

So here's how long each section of the foundations took me:

Introduction: 1hr 30

Installations: 7hrs

Git Basics: 1hr

Html Foundations: 4:hrs

Css Foundations: 6:hrs

Flexbox: 10hrs

JavaScript Basics: 43hrs

The BackEnd: 1hr 30

Total: 74hrs

Those times include the projects. Also I didn't go through the additional resources sections. 

And here's how long each project took:

Recipes project: 2hrs

Landing page: 2hrs 30

Rock paper scissors : 3hrs

Etch a sketch: 3hrs 30

Calculator: 11hrs

As it regards to projects.  I could have easily spent another 10-20 hours making them prettier and getting all the extra credits ..which I'lll probably do later. You might end up spending way more time on the design aspects. 

So I started on May 10 and finished foundations today.  Worked on it 19 days during that time. So on average about 4hrs a day.  Hopefully this helps anyone who may have been wondering how long this might take them. 

My thoughts? I'm really  liking the project focused method and lack of hand holding. 
What's next for me? I'm going to go through the ruby track because it has a data structures and algorithms section ...and a javascript section . After that I'm going through full stack open but would be later in the year if all goes well.

Edit: Rock paper scissors actually took 3 hours. It seems I had the Revisiting rock paper scissors section recorded as a Dom manipulation session.  [Here's](https://www.reddit.com/r/learnprogramming/comments/v23pn2/i_finished_odin_project_foundations_section_heres/iar1bix/) how I checked. Again Apologies",1316,141,StrikinglyBland,2022-05-31 23:58:08,https://www.reddit.com/r/learnprogramming/comments/v23pn2/i_finished_odin_project_foundations_section_heres/,0,learnprogramming
3v5rlm,Here's a list of 188 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2015),"This is not the complete list of MOOCs starting in December 2015, just the ones relevant to this community. The complete list of courses starting in December 2015 can be found over at [Class Central (206 courses)](https://www.class-central.com/report/mooc-course-report-december-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER(36)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[Code Yourself! An Introduction to Programming](https://www.coursera.org/learn/intro-programming) via **Coursera**|7th Dec|5|★★★★★ [(2)](https://www.class-central.com/r/2938#reviews)
 [HTML, CSS and JavaScript](https://www.coursera.org/learn/html-css-javascript) via **Coursera**|7th Dec|3|★★★★☆ [(6)](https://www.class-central.com/r/4239#reviews)
 [Programming and the Web for Beginners](https://www.coursera.org/learn/duke-programming-web) via **Coursera**|7th Dec|4|★★☆☆☆ [(2)](https://www.class-central.com/r/4256#reviews)
 [Introduction to HTML5](https://www.coursera.org/learn/html) via **Coursera**|7th Dec|3|★★★★☆ [(9)](https://www.class-central.com/r/4307#reviews)
 [Ruby on Rails: An Introduction](https://www.coursera.org/learn/ruby-on-rails-intro) via **Coursera**|7th Dec|3|★★★☆☆ [(39)](https://www.class-central.com/r/4258#reviews)
 [Programming for Everybody (Getting Started with Python)](https://www.coursera.org/learn/python) via **Coursera**|7th Dec|7|★★★★★ [(10)](https://www.class-central.com/r/4319#reviews)
 [Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(53)](https://www.class-central.com/r/320#reviews)
 [DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php) via **Others**|Self paced|NA|★★★★★ [(8)](https://www.class-central.com/r/1010#reviews)
 [Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★☆☆ [(11)](https://www.class-central.com/r/831#reviews)
 [Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about) via **Stanford OpenEdx**|Self paced|11|★★★★★ [(6)](https://www.class-central.com/r/1580#reviews)
 [Make Your Own 2048](https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★☆☆ [(4)](https://www.class-central.com/r/1952#reviews)
 [Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(2)](https://www.class-central.com/r/2013#reviews)
 [Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(16)](https://www.class-central.com/r/2659#reviews)
 [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(8)](https://www.class-central.com/r/2660#reviews)
 [How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(17)](https://www.class-central.com/r/2661#reviews)
 [CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x) via **edX**|Self paced|NA|★★★★★ [(39)](https://www.class-central.com/r/442#reviews)
 [Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★☆☆☆ [(2)](https://www.class-central.com/r/3253#reviews)
 [Networking: Introduction to Computer Networking](https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|11|★★★★★ [(5)](https://www.class-central.com/r/1578#reviews)
 [CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced) via **Stanford OpenEdx**|Self paced|6|★★★★☆ [(8)](https://www.class-central.com/r/2175#reviews)
 [CS002x: Programming in Scratch](https://www.edx.org/course/programming-scratch-harveymuddx-cs002x-0) via **edX**|Self paced|6|★★★★★ [(4)](https://www.class-central.com/r/2954#reviews)
 [CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x) via **edX**|Self paced|6|★★★☆☆ [(1)](https://www.class-central.com/r/2957#reviews)
 [DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0) via **edX**|Self paced|22|★★☆☆☆ [(5)](https://www.class-central.com/r/3338#reviews)
 [LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2) via **edX**|Self paced|8|★★★★☆ [(23)](https://www.class-central.com/r/1857#reviews)
 [CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x) via **edX**|Self paced|14|★★★★★ [(2)](https://www.class-central.com/r/3483#reviews)
 [CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0) via **edX**|Self paced|9|★★☆☆☆ [(10)](https://www.class-central.com/r/1650#reviews)
 [COMP102.1x: Introduction to Java Programming – Part 1](https://www.edx.org/course/introduction-java-programming-part-1-hkustx-comp102-1x) via **edX**|Self paced|5|★★★★☆ [(3)](https://www.class-central.com/r/1983#reviews)
 [Learn Swift Programming Syntax](https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|☆☆☆☆☆
 [Code101x: Think. Create. Code](https://www.edx.org/course/think-create-code-adelaidex-code101x-1) via **edX**|Self paced|27|★★★★★ [(1)](https://www.class-central.com/r/3231#reviews)
 [CS101.2x: Introduction to Computer Programming, Part 2](https://www.edx.org/course/introduction-computer-programming-part-2-iitbombayx-cs101-2x-0) via **edX**|Self paced|NA|☆☆☆☆☆
 [Writing READMEs](https://www.udacity.com/course/writing-readmes--ud777?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [INF201.13x: Introduction to Cloud Computing](https://www.edx.org/course/introduction-cloud-computing-microsoft-inf201-13x-0) via **edX**|Self paced|25|★★☆☆☆ [(5)](https://www.class-central.com/r/3353#reviews)
 [IT.1.1x: Introduction to Programming with Java Part 1: Starting to Code with Java](https://www.edx.org/course/introduction-programming-java-part-1-uc3mx-it-1-1x-0) via **edX**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/2813#reviews)
 [Introduction to Databases](https://www.coursera.org/course/db) via **Coursera**|Self paced|NA|★★★★★ [(29)](https://www.class-central.com/r/303#reviews)
 [Computer Science 101](https://www.coursera.org/course/cs101) via **Coursera**|Self paced|NA|★★★★☆ [(13)](https://www.class-central.com/r/375#reviews)
INTERMEDIATE(118)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
[NEW] [Interactivity with JavaScript](https://www.coursera.org/learn/javascript) via **Coursera**|1st Dec|NA|☆☆☆☆☆
[NEW] [Machine Learning for Musicians and Artists](https://www.kadenze.com/courses/machine-learning-for-musicians-and-artists/info) via **Kadenze**|Dec|7|☆☆☆☆☆
[NEW] [HTML5.2x: HTML5 Part 2: Advanced Techniques for Designing HTML5 Apps](https://www.edx.org/course/html5-part-2-advanced-techniques-w3cx-html5-2x) via **edX**|1st Dec|4|☆☆☆☆☆
 [CSE167x: Computer Graphics](https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-0) via **edX**|1st Dec|NA|★★★★☆ [(5)](https://www.class-central.com/r/548#reviews)
 [Statistical Inference](https://www.coursera.org/course/statinference) via **Coursera**|7th Dec|4|★★☆☆☆ [(13)](https://www.class-central.com/r/1717#reviews)
 [Regression Models](https://www.coursera.org/course/regmods) via **Coursera**|7th Dec|4|★★★☆☆ [(10)](https://www.class-central.com/r/1718#reviews)
 [Practical Machine Learning](https://www.coursera.org/course/predmachlearn) via **Coursera**|7th Dec|4|★★★☆☆ [(10)](https://www.class-central.com/r/1719#reviews)
 [Developing Data Products](https://www.coursera.org/course/devdataprod) via **Coursera**|7th Dec|4|★★★★☆ [(4)](https://www.class-central.com/r/1720#reviews)
[NEW] [Approximation Algorithms Part I](https://www.coursera.org/learn/approximation-algorithms-part-1) via **Coursera**|7th Dec|NA|☆☆☆☆☆
[NEW] [Front-End JavaScript Frameworks: AngularJS](https://www.coursera.org/learn/angular-js) via **Coursera**|7th Dec|4|☆☆☆☆☆
 [Introduction to Big Data](https://www.coursera.org/learn/intro-to-big-data) via **Coursera**|7th Dec|3|★★★☆☆ [(15)](https://www.class-central.com/r/4164#reviews)
 [Responsive Website Basics: Code with HTML, CSS, and JavaScript ](https://www.coursera.org/learn/website-coding) via **Coursera**|7th Dec|4|★★★★☆ [(4)](https://www.class-central.com/r/4191#reviews)
 [Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) via **Coursera**|7th Dec|6|★★★★★ [(1)](https://www.class-central.com/r/4212#reviews)
 [Data Manipulation at Scale: Systems and Algorithms](https://www.coursera.org/learn/data-manipulation) via **Coursera**|7th Dec|4|★★★☆☆ [(1)](https://www.class-central.com/r/4473#reviews)
 [Introduction to Genomic Technologies](https://www.coursera.org/course/genintro) via **Coursera**|7th Dec|4|★★★☆☆ [(6)](https://www.class-central.com/r/3472#reviews)
 [Introduction To Swift Programming](https://www.coursera.org/learn/swift-programming) via **Coursera**|7th Dec|5|☆☆☆☆☆
 [Data Management and Visualization](https://www.coursera.org/learn/data-visualization) via **Coursera**|7th Dec|4|★★★★☆ [(2)](https://www.class-central.com/r/4184#reviews)
 [Data structures: Measuring and Optimizing Performance](https://www.coursera.org/learn/data-structures-optimizing-performance) via **Coursera**|7th Dec|5|☆☆☆☆☆
 [Database Management Essentials](https://www.coursera.org/learn/database-management) via **Coursera**|7th Dec|7|☆☆☆☆☆
 [Data Warehouse Concepts, Design, and Data Integration](https://www.coursera.org/learn/dwdesign) via **Coursera**|7th Dec|5|☆☆☆☆☆
 [Bioconductor for Genomic Data Science](https://www.coursera.org/course/genbioconductor) via **Coursera**|7th Dec|4|☆☆☆☆☆
 [Rails with Active Record and Action Pack](https://www.coursera.org/learn/rails-with-active-record) via **Coursera**|7th Dec|4|★★★★☆ [(1)](https://www.class-central.com/r/4197#reviews)
 [Python for Genomic Data Science](https://www.coursera.org/course/genpython) via **Coursera**|7th Dec|4|★★★☆☆ [(5)](https://www.class-central.com/r/3476#reviews)
 [Statistics for Genomic Data Science](https://www.coursera.org/course/genstats) via **Coursera**|7th Dec|4|☆☆☆☆☆
 [Using Python to Access Web Data](https://www.coursera.org/learn/python-network-data) via **Coursera**|7th Dec|6|★★★★☆ [(1)](https://www.class-central.com/r/4343#reviews)
 [Python Data Structures](https://www.coursera.org/learn/python-data) via **Coursera**|7th Dec|7|★★★★☆ [(5)](https://www.class-central.com/r/4174#reviews)
[NEW] [Communicating Data Science Results](https://www.coursera.org/learn/data-results) via **Coursera**|7th Dec|3|☆☆☆☆☆
 [The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox) via **Coursera**|7th Dec|4|★★★☆☆ [(93)](https://www.class-central.com/r/1712#reviews)
 [R Programming](https://www.coursera.org/course/rprog) via **Coursera**|7th Dec|4|★★★☆☆ [(160)](https://www.class-central.com/r/1713#reviews)
 [Getting and Cleaning Data](https://www.coursera.org/course/getdata) via **Coursera**|7th Dec|4|★★★☆☆ [(26)](https://www.class-central.com/r/1714#reviews)
 [Exploratory Data Analysis](https://www.coursera.org/course/exdata) via **Coursera**|7th Dec|4|★★★★☆ [(14)](https://www.class-central.com/r/1715#reviews)
 [Reproducible Research](https://www.coursera.org/course/repdata) via **Coursera**|7th Dec|4|★★★★☆ [(10)](https://www.class-central.com/r/1716#reviews)
[NEW] [Using Databases with Python](https://www.coursera.org/learn/python-databases) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Web Application Development with JavaScript and MongoDB](https://www.coursera.org/learn/web-application-development) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Java Programming: Principles of Software Design](https://www.coursera.org/learn/java-programming-design-principles) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [The Raspberry Pi Platform and Python Programming for the Raspberry Pi](https://www.coursera.org/learn/raspberry-pi-platform) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Responsive Website Tutorial and Examples](https://www.coursera.org/learn/responsive-website-examples) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [App Design and Development for iOS](https://www.coursera.org/learn/iosappdesigndevelopment) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Managing Big Data with MySQL](https://www.coursera.org/learn/analytics-mysql) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Multiplatform Mobile App Development with Web Technologies](https://www.coursera.org/learn/hybrid-mobile-development) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [Advanced Data Structures in Java](https://www.coursera.org/learn/advanced-data-structures) via **Coursera**|21st Dec|NA|☆☆☆☆☆
 [Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(9)](https://www.class-central.com/r/323#reviews)
 [Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★★ [(16)](https://www.class-central.com/r/324#reviews)
 [Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(7)](https://www.class-central.com/r/325#reviews)
 [Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★☆☆☆ [(3)](https://www.class-central.com/r/364#reviews)
 [Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(5)](https://www.class-central.com/r/365#reviews)
 [Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/457#reviews)
 [Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/455#reviews)
 [Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|★★★★☆ [(8)](https://www.class-central.com/r/592#reviews)
 [HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(4)](https://www.class-central.com/r/551#reviews)
 [Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html) via **Others**|Self paced|10|★★★★☆ [(2)](https://www.class-central.com/r/366#reviews)
 [Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(10)](https://www.class-central.com/r/1470#reviews)
 [CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1021#reviews)
 [Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(8)](https://www.class-central.com/r/1480#reviews)
 [Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/1479#reviews)
 [Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(11)](https://www.class-central.com/r/1478#reviews)
 [Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014) via **openHPI**|Self paced|NA|★★★★☆ [(3)](https://www.class-central.com/r/1701#reviews)
 [Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|★★★★☆ [(2)](https://www.class-central.com/r/2189#reviews)
 [UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(2)](https://www.class-central.com/r/2212#reviews)
 [Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(1)](https://www.class-central.com/r/2215#reviews)
 [Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★★ [(2)](https://www.class-central.com/r/2211#reviews)
 [Software Development Process](https://www.udacity.com/course/ud805) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/2335#reviews)
 [Computer Networking](https://www.udacity.com/course/ud436) via **Udacity**|Self paced|12|★★★★★ [(3)](https://www.class-central.com/r/2336#reviews)
 [Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about) via **Others**|Self paced|17|★★★★★ [(2)](https://www.class-central.com/r/2339#reviews)
 [Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(8)](https://www.class-central.com/r/2658#reviews)
 [Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/2997#reviews)
 [Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|★★★☆☆ [(3)](https://www.class-central.com/r/2898#reviews)
 [HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/2999#reviews)
 [Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★★ [(4)](https://www.class-central.com/r/2861#reviews)
 [Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★☆ [(2)](https://www.class-central.com/r/2998#reviews)
 [Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|10|★★★★☆ [(6)](https://www.class-central.com/r/2996#reviews)
 [Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(4)](https://www.class-central.com/r/3255#reviews)
 [Health Informatics in the Cloud](https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|☆☆☆☆☆
 [JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★★ [(1)](https://www.class-central.com/r/3351#reviews)
 [UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about) via **Stanford OpenEdx**|Self paced|15|☆☆☆☆☆
 [Responsive Images](https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/3352#reviews)
 [iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Authentication & Authorization: OAuth](https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(2)](https://www.class-central.com/r/3523#reviews)
 [Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(1)](https://www.class-central.com/r/3524#reviews)
 [Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★☆ [(1)](https://www.class-central.com/r/3525#reviews)
 [iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|☆☆☆☆☆
 [Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|★★★★☆ [(4)](https://www.class-central.com/r/3579#reviews)
 [Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
 [Material Design for Android Developers](https://www.udacity.com/course/material-design-for-android-developers--ud862?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3584#reviews)
 [DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0) via **edX**|Self paced|22|☆☆☆☆☆
 [DEV202.1x: Building Cloud Apps with Microsoft Azure – Part 1](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-1x-0) via **edX**|Self paced|22|★★★☆☆ [(1)](https://www.class-central.com/r/3348#reviews)
 [AMRx: Autonomous Mobile Robots](https://www.edx.org/course/autonomous-mobile-robots-ethx-amrx-0) via **edX**|Self paced|NA|★★★☆☆ [(3)](https://www.class-central.com/r/1564#reviews)
 [Xcode Debugging](https://www.udacity.com/course/xcode-debugging--ud774?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Big Data, Cloud Computing, & CDN Emerging Technologies](https://www.coursera.org/learn/big-data-cloud-computing-cdn) via **Coursera**|Self paced|3|★★★☆☆ [(2)](https://www.class-central.com/r/3931#reviews)
 [KIexploRx: Explore Statistics with R](https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0) via **edX**|Self paced|NA|★★★★☆ [(8)](https://www.class-central.com/r/1836#reviews)
 [Intro to DevOps](https://www.udacity.com/course/intro-to-devops--ud611?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|★★★★☆ [(1)](https://www.class-central.com/r/4013#reviews)
 [Configuring Linux Web Servers](https://www.udacity.com/course/configuring-linux-web-servers--ud299?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|☆☆☆☆☆
 [Learn Backbone.js](https://www.udacity.com/course/learn-backbonejs--ud990?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|☆☆☆☆☆
 [Android TV and Google Cast Development](https://www.udacity.com/course/android-tv-and-google-cast-development--ud875B?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|☆☆☆☆☆
 [Android Auto Development](https://www.udacity.com/course/android-auto-development--ud875C?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|1|☆☆☆☆☆
 [Statistical Computing with R - a gentle introduction](https://extendstore.ucl.ac.uk/product?catalog=UCLXR) via **Others**|Self paced|NA|☆☆☆☆☆
 [How to create <anything> in Android](https://www.udacity.com/course/how-to-create-anything-in-android--ud802?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|4|☆☆☆☆☆
 [SPD1x: Systematic Program Design - Part 1: The Core Method](https://www.edx.org/course/systematic-program-design-part-1-core-ubcx-spd1x-0) via **edX**|Self paced|5|★★★☆☆ [(3)](https://www.class-central.com/r/3465#reviews)
 [DAT204x: Introduction to R Programming](https://www.edx.org/course/introduction-r-programming-microsoft-dat204x-0) via **edX**|Self paced|4|★★★★☆ [(13)](https://www.class-central.com/r/3928#reviews)
 [Software Architecture & Design](https://www.udacity.com/course/software-architecture-design--ud821?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/3418#reviews)
 [PH525.1x: Data Analysis for Life Sciences 1: Statistics and R](https://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x) via **edX**|Self paced|4|★★★★☆ [(6)](https://www.class-central.com/r/2960#reviews)
 [2D Game Development with LibGDX](https://www.udacity.com/course/2d-game-development-with-libgdx--ud405?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-1) via **edX**|Self paced|NA|★★★★☆ [(6)](https://www.class-central.com/r/3339#reviews)
 [Designing RESTful APIs](https://www.udacity.com/course/designing-restful-apis--ud388?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
[NEW] [Intro to Data Analysis](https://www.udacity.com/course/intro-to-data-analysis--ud170?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|☆☆☆☆☆
[NEW] [Web Tooling & Automation](https://www.udacity.com/course/web-tooling-automation--ud892?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
[NEW] [M101x: Introduction to MongoDB using the MEAN Stack](https://www.edx.org/course/introduction-mongodb-using-mean-stack-mongodbx-m101x) via **edX**|Self paced|58|☆☆☆☆☆
 [Networks: Friends, Money, and Bytes](https://www.coursera.org/learn/friends-money-bytes) via **Coursera**|Self paced|12|★★★☆☆ [(1)](https://www.class-central.com/r/359#reviews)
 [Interactive Computer Graphics](https://www.coursera.org/learn/interactive-computer-graphics) via **Coursera**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/2067#reviews)
 [SPD2x: Systematic Program Design - Part 2: Arbitrary Sized Data](https://www.edx.org/course/systematic-program-design-part-2-ubcx-spd2x) via **edX**|Self paced|5|☆☆☆☆☆
 [JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|6|★★★★★ [(1)](https://www.class-central.com/r/3082#reviews)
ADVANCED(34)

Course Name|Start Date|Length (in weeks)|Rating
:--|:--:|:--:|:--:|:--:
 [Machine Learning for Trading](https://www.udacity.com/course/machine-learning-for-trading--ud501?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
[NEW] [Machine Learning: Classification](https://www.coursera.org/learn/ml-classification) via **Coursera**|1st Dec|NA|☆☆☆☆☆
[NEW] [Regression Modeling in Practice](https://www.coursera.org/learn/regression-modeling-practice) via **Coursera**|4th Dec|4|☆☆☆☆☆
 [Machine Learning Foundations: A Case Study Approach](https://www.coursera.org/learn/ml-foundations) via **Coursera**|7th Dec|6|★★★★☆ [(9)](https://www.class-central.com/r/4352#reviews)
 [Practical Predictive Analytics: Models and Methods](https://www.coursera.org/learn/predictive-analytics) via **Coursera**|7th Dec|4|☆☆☆☆☆
 [Genomic Data Science with Galaxy](https://www.coursera.org/course/gengalaxy) via **Coursera**|7th Dec|4|★★☆☆☆ [(6)](https://www.class-central.com/r/3473#reviews)
 [Command Line Tools for Genomic Data Science](https://www.coursera.org/course/gencommand) via **Coursera**|7th Dec|4|★☆☆☆☆ [(3)](https://www.class-central.com/r/3474#reviews)
 [Algorithms for DNA Sequencing](https://www.coursera.org/course/ads1) via **Coursera**|7th Dec|4|★★★★★ [(13)](https://www.class-central.com/r/3433#reviews)
[NEW] [Machine Learning With Big Data](https://www.coursera.org/learn/machinelearningwithbigdata) via **Coursera**|14th Dec|NA|☆☆☆☆☆
[NEW] [DS101X: Statistical Thinking for Data Science and Analytics](https://www.edx.org/course/statistical-thinking-data-science-columbiax-ds101x) via **edX**|14th Dec|5|☆☆☆☆☆
[NEW] [Relational Database Support for Data Warehouses](https://www.coursera.org/learn/dwrelational) via **Coursera**|28th Dec|NA|☆☆☆☆☆
 [Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(15)](https://www.class-central.com/r/319#reviews)
 [Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★☆ [(2)](https://www.class-central.com/r/326#reviews)
 [Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|12|★★★★☆ [(2)](https://www.class-central.com/r/549#reviews)
 [Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(4)](https://www.class-central.com/r/552#reviews)
 [Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★★★ [(1)](https://www.class-central.com/r/550#reviews)
 [Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1847#reviews)
 [Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741) via **Udacity**|Self paced|NA|★★★★☆ [(1)](https://www.class-central.com/r/1848#reviews)
 [Reinforcement Learning](https://www.udacity.com/course/reinforcement-learning--ud600?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★☆☆ [(2)](https://www.class-central.com/r/1849#reviews)
 [In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup) via **openSAP**|Self paced|NA|★★☆☆☆ [(1)](https://www.class-central.com/r/2458#reviews)
 [Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|2|★★★★☆ [(1)](https://www.class-central.com/r/3000#reviews)
 [Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|★★★☆☆ [(3)](https://www.class-central.com/r/3256#reviews)
 [Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|5|★★★★★ [(2)](https://www.class-central.com/r/1016#reviews)
 [High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1018#reviews)
 [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|7|☆☆☆☆☆
 [Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems) via **Coursera**|Self paced|8|★★★★☆ [(13)](https://www.class-central.com/r/1029#reviews)
 [Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Computational Photography](https://www.udacity.com/course/computational-photography--ud955?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [Introduction to Computer Vision](https://www.udacity.com/course/introduction-to-computer-vision--ud810?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|16|☆☆☆☆☆
 [GT - Refresher - Advanced OS](https://www.udacity.com/course/gt-refresher-advanced-os--ud098?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|3|☆☆☆☆☆
 [Introduction to Operating Systems](https://www.udacity.com/course/introduction-to-operating-systems--ud923?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|8|☆☆☆☆☆
 [High Performance Computing](https://www.udacity.com/course/high-performance-computing--ud281?utm_medium=referral&utm_campaign=api) via **Udacity**|Self paced|NA|☆☆☆☆☆
 [Machine Learning](https://www.udacity.com/course/ud262) via **Udacity**|Self paced|NA|★★★★★ [(1)](https://www.class-central.com/r/1020#reviews)",1315,51,dhawal,2015-12-02 16:37:23,https://www.reddit.com/r/learnprogramming/comments/3v5rlm/heres_a_list_of_188_free_online_programmingcs/,0,learnprogramming
qbnajj,I realized that I've been making the dumbest mistake with typing out code,"This feels so dumb.

So I have large hands. Like basketball player hands. The *entire* time I've been trying to code, I kept thinking ""Man how do people use all the syntax and symbols so well"", because so much of it is cramped onto the right side of the keyboard.

Then I realized (thanks to someone here. Thank you random Redditor).... That I've been using the right Shift key for everything. I grew up never using the left Shift key, when just typing anything at all.

This whole damn time, my life could have been so much easier. Lets me use both hands to get all the characters and symbols needed.

I feel so dumb for it! But the bright side is that I can probably type out code a lot easier going forward.

I'm sure we all have beginner mistakes. Maybe. Hopefully.

Anyway, I'm a changed person now! Thank you left Shift key. You were always there as a friend , and *I just didn't notice.*",1320,216,appleparkfive,2021-10-19 23:01:16,https://www.reddit.com/r/learnprogramming/comments/qbnajj/i_realized_that_ive_been_making_the_dumbest/,0,learnprogramming
z3h47q,"Is there shorthand for, ""I don't know what this code does, but if you delete it the whole thing breaks""?","The title says it all. It happens so often, there should be a term for it?",1316,238,None,2022-11-24 11:01:51,https://www.reddit.com/r/learnprogramming/comments/z3h47q/is_there_shorthand_for_i_dont_know_what_this_code/,0,learnprogramming
tu8pal,I recently quit my engineering job and now tutor beginner programmers. Here's one big difference I see between beginners and experienced programmers:,"The students I tutor are typically college students in their 2^(nd) programming course, which covers data structures and algorithms. I’ve been programming for 10 years - I graduated college in 2014 and worked as a software engineer until Nov. 2021 - and that experience really helps me see things differently from those who are just starting.

I often work with my students on implementing algorithms they have been assigned for homework. These algorithms all have underlying concepts, which dictate “how” the algorithm transforms an input, such as an unsorted list, to a useful output, such a sorted one. Most importantly, **those underlying concepts exist independently of code, or any programming languages.**

To illustrate this, let’s look at a scenario we might encounter in every day life. I have a set of mixing bowls in my kitchen. They’re all different sizes, which allows them to stack together nicely. Every so often, they get washed together as part of one dishwasher cycle, and I have to sort them according to their size in order to stack them back together.

This is a rather intuitive task for us as humans. It's so intuitive that we don’t really have to stop and think about what we are doing. But if we were to describe our process in words, it would involve something like:

* First, pick out the largest bowl from the entire (unordered) set, and use it as the beginning of the stack of ordered bowls.
* Second, pick out the 2nd largest bowl from the rest of the unordered set of bowls, and add it to the stack of ordered bowl.
* Third, pick out the 3rd largest bowl from the rest of the unordered set of bowls, and add it to the stack of ordered bowls.
* Repeat - picking one bowl to add to the stack each time - until all the bowls are stacked in order.

This just so happens to be the underlying concept behind the Selection Sort algorithm for sorting an array. In other words, to implement the Selection Sort algorithm involves translating the above concept into code.

[https://www.youtube.com/watch?v=uwHBYbN07t0](https://www.youtube.com/watch?v=uwHBYbN07t0)

We can therefore think of implementing algorithms as consisting of two tasks. The first involves accurately understanding the algorithm’s underlying concepts. The second is the ability to translate those concepts onto code.

My experience allows me to clearly see both of these tasks. I can describe the underlying concepts driving the algorithms, and I know how to translate those concepts into code. I see the relationship between the two, meaning I know the role each line of code plays with respect to the underlying concepts.

It’s no surprise that beginners often struggle with the second task - the ability to use code to accomplish certain things is exactly the skill beginners are learning. But I often see them struggle with the first task as well - the accurate understanding of the algorithms underlying concept.

The fuzzy understanding becomes very apparent when debugging or troubleshooting. I observe them making changes in what looks to me to be a “random” fashion (although I suspect the student is actually trying to alter their algorithm by pattern-matching against something they’ve seen before). They often don’t know how to answer questions such as: “what does this variable represent?” or “what’s the effect of this loop on our input?”

I write this with absolutely no intention to take anything away from beginners. I’m sure if you watched me troubleshoot when I was first learning you would have seen me doing similar things. And often times the process of trial and error with code really is the best way to understand an algorithms’ underlying concepts. Rather, I bring it up because I think there are some important implications about ways to effectively learn.

Learning how to code often involves learning a bunch of new things at once. We learn most effectively when the surface area of material we are trying to make sense of is kept to a manageable size. And when we’re first learning how to code, we can keep that surface area manageable by spending a bit more time focusing on the parts that don’t involve code yet - such as accurately understanding how the algorithm works.

So how do we get better at understanding the concepts behind algorithms? Here are some strategies. Solve the problem using pen and paper. Start with smaller inputs. Pay attention to how your brain solves the problem, pay attention to anything your brain stores or compares and what is being done to those values. Try to verbalize “how” the algorithm accomplishes its job, the concepts behind an algorithm. \[REMEMBER: these concepts will exist outside of code, or any programming language\]. Everything becomes much easier to manage when our task is then limited to how translate those concepts into code, and not trying to figure out both the concept AND the translation at the same time.

Thoughtful instruction can really help as well.  When I teach linked lists, I always teach the concepts via diagrams first. We draw nodes with boxes, and the pointers between nodes with arrows. I want my students to develop a feel of what’s involved in the various operations (such as adding / removing nodes) by physically erasing and moving the arrows around as appropriate. Only after they’ve done so a few times, do we move onto how to implement everything in code.

I hope this helps, and best of luck in your programming journey!",1317,73,jzhang621,2022-04-02 02:54:11,https://www.reddit.com/r/learnprogramming/comments/tu8pal/i_recently_quit_my_engineering_job_and_now_tutor/,0,learnprogramming
gp1nra,API’s : explain like I’m 5,"Every time I think I understand what an api is and how to interact with it, someone talk about it in a way that makes me feel like I misunderstood what it is. Can some explain it to me very basic and simply?

Edit: Thanks everyone. These are excellent explanations!",1314,169,WeirdRedRoadDog,2020-05-23 08:48:22,https://www.reddit.com/r/learnprogramming/comments/gp1nra/apis_explain_like_im_5/,0,learnprogramming
6l7qco,We're going to do a FREE Python Course to teach people how to code,"TL;DR A 4-weeks online FREE Python course for beginners with a real teacher. Every Monday 6PM-8PM (Pacific). Sign up here: **[rmotr.com/free](https://rmotr.com/free-python-online-course)**

---

Hey guys and gals! Over the last year we've done [many Python courses](https://www.coursereport.com/schools/rmotr) and we've learned a lot from our students. One of the most important things we've learned is that it's hard to take that first step to get started with programming. If you're using free resources, you'll probably feel overwhelmed and distracted. You need the **sense of accountability of a real class with a fixed schedule**. But you're not ready yet to invest on a paid course; after all, you're just trying to figure out if this is what you want/like and how it works.

When approached with these problems from our students, we've always made special arrangements for them: ""Try the course for free"", ""Check these examples"", ""Let's meet and see if we can help out"", etc. At the end of the day, it was just an ugly hack for a real problem out there.

So we've finally decided to do a **FREE** online Course for beginners: It's a real class, with **a teacher explaining** the concepts, answering questions, with a **fixed schedule**, homework, group projects, etc. Everything that a **REAL** class must have, but for free.

The course **starts on Monday July 17th**. Classes are every **Monday 6PM-8PM** (Pacific), with a total of 4 classes. There will be homework to work in between classes and projects to practice with other people. It's going to be an online class and you'll be able to ask questions and interact with the instructor constantly.

You can **sign up here: [rmotr.com/free](https://rmotr.com/free-python-online-course)**

### Required knowledge

This is a course for beginners. Not a lot of knowledge is required. What we always recommend is try to do the free part of codecademy (shouldn't take more than a few days): https://www.codecademy.com/learn/python

### Schedule

As said before classes will be every Monday from 6PM to 8PM (Pacific Time). Depending on how much people we get, we'll add more times for people on the East coast and Europe.

### Questions

Post your comments here or email us at questions@rmotr.com",1307,142,santiagobasulto,2017-07-04 15:32:44,https://www.reddit.com/r/learnprogramming/comments/6l7qco/were_going_to_do_a_free_python_course_to_teach/,0,learnprogramming
quf2ww,"Have you ever met a ""dumb"" programmer?","This is by far the weirdest question I'll ever ask on here. Haha.

What I mean is, we all know that you *don't* have to be a genius to program. Contrary to popular belief. But have you ever know a professional programmer who just didn't see... That smart? Not the sharpest tool in the shed, etc. But they just managed to work hard enough to be good at it. They can seem like totally nice people too obviously. But you just found it surprising or something.

There has to be some people out there who don't seem to bright, yet make good money programming. Just statistically speaking.

I don't consider myself dumb. Don't consider myself some genius either obviously. I'm more just interested to here any anecdotal stories from people who work with code for a living. Weird question, I know.  Thanks!",1314,482,appleparkfive,2021-11-15 12:13:47,https://www.reddit.com/r/learnprogramming/comments/quf2ww/have_you_ever_met_a_dumb_programmer/,0,learnprogramming
3pxg1a,Code Academy has released their full Java course!,https://www.codecademy.com/en/courses/learn-java,1315,148,MrMegaloler,2015-10-23 17:12:21,https://www.reddit.com/r/learnprogramming/comments/3pxg1a/code_academy_has_released_their_full_java_course/,0,learnprogramming
i9eovz,Stop searching for general purpose practice assignments and work on something you are passionate about,"We all started with practice assignments and the common ""tic tac toe"" type of programs.

I did too. It was alright, but after a while it became boring, and programming became boring as well.

I recently had several personal project ideas that I believe could go viral. 

**Working on those increased my passion and love for programming x100 times!!!**

Now, I don't know if those projects will succeed or not, but my everyday enthusiasm and mood is better than before following the belief that I have a path/purpose and I am creating something that may actually matter.

And if my programs don't go viral - at least I will have a unique portfolio.

So my advice to newbies - get away from the typical practice assignments and common projects. Look at your everyday life - Is there something you want to automate?  Is there a simple paid tool you can easily create for free?  Is there a free tool full of annoying ads or that has other limitations?  etc.",1304,141,jacklychi,2020-08-14 03:38:40,https://www.reddit.com/r/learnprogramming/comments/i9eovz/stop_searching_for_general_purpose_practice/,0,learnprogramming
6lp4b1,"If learning to code feels hard, it's because it is. This is a great article about ""Hard Truths About Tech"" I think everyone should read if you're struggling.","http://anna-oz.tumblr.com/post/158300535300/hard-truths-about-tech

I'm a self-taught developer, like a lot of you are. I've really only just started getting involved in this sub, and I love how resilient and passionate everyone is about learning to program. It's really inspiring.

This is an article I've seen starting to go around, and some of you may have even run into it beforehand. I wanted to post it here, because it really does provide some perspective about what it's like entering the field that I think everyone should know. It can be hard, it can be scary, but that's ok - because everyone feels that way. I definitely still feel that way too. Here's something great from the first bullet:

> “This shit’s hard!”. Learning anything new is hard. Yes you can do it if you invest a lot of time and effort, but just keep in mind that it’s hard and it’s ok that it is and it’s ok if you struggle.

Keep it on!",1305,152,JonHMChan,2017-07-06 21:48:24,https://www.reddit.com/r/learnprogramming/comments/6lp4b1/if_learning_to_code_feels_hard_its_because_it_is/,0,learnprogramming
t5w3qw,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.","**THE FREE SIGN UPS ARE USED UP. YOU CAN WATCH THE [FIRST 15 OF 50 VIDEOS OF THE COURSE ON YOUTUBE](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW).**

I'll release another 2,000 next month.

Original post follows:

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book: MAR2022FREE and MAR2022FREE2:

https://www.udemy.com/course/automate/?couponCode=MAR2022

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. When the 1,000 sign ups for MAR2022FREE have exhausted, I'll activate the MAR2022FREE2 code for the next 1,000.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1308,115,AlSweigart,2022-03-03 16:59:03,https://www.reddit.com/r/learnprogramming/comments/t5w3qw/2000_free_sign_ups_available_for_the_automate_the/,0,learnprogramming
p48zql,A YouTube series about basics of functional programming,"Hi 🙂

This entry is a bit of shameless autopromotion, but I believe it's for a good cause. I think a bit of FP improves code quality and general CS knowledge for everyone.

Since about a year now I'm working on a series of short YouTube videos about basics of FP  You can find it here:

https://www.youtube.com/playlist?list=PLd4VDFuwy9sfhnKHR7N_-FdUtkZ7OGb_u

I use a lot of infographics and focus on basic stuff because I believe basics cover around 80% of all real world use cases and you need more complicated stuff only in very specific circumstances. Examples are in Scala, because that's my language of choice, but everything should be suitable also for Kotlin, Rust, and in some part for other programming languages that allow at least partially to use FP principles (eg. Java + Vavr library).

If you're interested, the other videos on my channel are about Agile 🙂",1306,72,makingthematrix,2021-08-14 14:27:34,https://www.reddit.com/r/learnprogramming/comments/p48zql/a_youtube_series_about_basics_of_functional/,1,learnprogramming
i75qce,The more I learn the less I know,"I just realized that there’s so much I don’t even know exists. The more I learn about a certain topic, the more things I know I haven’t learned yet. It’s discouraging and encouraging at the same time because I feel like I know so little but I was enjoy the fact that there’s more to know. Does anyone else feel the same way?",1307,113,None,2020-08-10 14:23:24,https://www.reddit.com/r/learnprogramming/comments/i75qce/the_more_i_learn_the_less_i_know/,0,learnprogramming
vnkc1h,"Yesterday, at 36 years old, I wrote my first code, and I'm so excited!","Yes! Me, a guy who last week knew literally nothing about programming, wrote my first ""program"" yesterday, and better than that, I understand what I wrote, and I re wrote it again today, to see if it still worked! It did! :) 

It's my second week since joining the Cs50 course, and I can't wait to dive deeper! 

Thank you guys, for such a great community!",1307,111,wontellu,2022-06-29 16:49:34,https://www.reddit.com/r/learnprogramming/comments/vnkc1h/yesterday_at_36_years_old_i_wrote_my_first_code/,0,learnprogramming
o6byby,I feel like there's too much competition in IT too many good coders out there and I might never make it to FAANG or any good company. What should I do to change this mindset,I'd really appreciate some practical advice that  I can use right now.,1308,393,sakshiinsane,2021-06-23 12:37:35,https://www.reddit.com/r/learnprogramming/comments/o6byby/i_feel_like_theres_too_much_competition_in_it_too/,0,learnprogramming
k91e5u,I dont feel like a real programmer,"I have been learning programming for about 2 years now, and landed a job as a web developer a couple of months ago. I love it, love to work fullstack and do different things everyday and be a part of the whole development process.

I would consider myself quite decent at fullstack web development.

But here is the problem, i really want to learn more advanced programming, i get envious when people are able to program their own web servers, engines or other advanced tools that are actually impressive. Aswell as solving ""real"" programming challenges, like those at adventofcode, i really cant solve those types of problems, i think they are very confusing. I also did a job interview once where i was suppose to do one of these types of challenges, but i just cant do em, i usually dont even understand the challenge or problem, and when i finally do i have no idea how to solve them.

So i would love to get help from you guys regarding where to start regarding more advanced programming, where you actually build core applications and then also where to start to become better at solving those type of challenges problems, would really love the push in the right direction! 

Thanks!

Edit:
Wow guys, amazing response from all of you! I really really appreciate all the replys, and will check out all of the tips and tricks you guys are refering to, im really overwhelmed by how nice and helpful you all are, thank you!!",1301,151,zlitter,2020-12-08 09:41:38,https://www.reddit.com/r/learnprogramming/comments/k91e5u/i_dont_feel_like_a_real_programmer/,0,learnprogramming
kxie0w,This xkcd comic speaks on how some things are deceptively hard to program. What are some other examples of this?,"https://xkcd.com/1425/

Adding text to avoid removal from automod.",1303,284,Choice_Pickle_7454,2021-01-15 00:06:37,https://www.reddit.com/r/learnprogramming/comments/kxie0w/this_xkcd_comic_speaks_on_how_some_things_are/,0,learnprogramming
b83emm,The Resources That Helped Me Learn How To Be A Data Engineer And Data Scientist,"I have compiled a list of free resources I have used to break into both  data engineering and data science roles. I will mention the one topic both of these guides skip over is Hadoop. The reason being that I have never had to directly interact with Hadoop on a Map Reduce level in either role. It has always been abstracted by a Presto or Hive layer.

Lists:

[Data Engineering](https://hackernoon.com/learn-data-engineering-my-favorite-free-resources-52a29ab999b)

[Data Science](https://www.coriers.com/learning-data-science-our-favorite-resources-from-free-to-not/) 

Edit: [Data Science Courses](https://www.coriers.com/25-of-the-best-data-science-courses-online/)",1300,64,nonkeymn,2019-04-01 14:53:45,https://www.reddit.com/r/learnprogramming/comments/b83emm/the_resources_that_helped_me_learn_how_to_be_a/,0,learnprogramming
wpfdwx,I understand recursion!,"After endless hours spent on this concept, failing to understand how it works and get the correct answers, I finally can at least say I have grasp of it, and I'm able to replicate how we get to a result. 

I feel enlightened and out of the Matrix. 

I had tried many times in the past but always quitting, this time I was persistent. 

(sorry If this was actually suppose to be easy and nothing special, but it's just a FeelsGoodMan feeling right now and wanted to share.)",1296,237,fsociety00_d4t,2022-08-16 00:14:38,https://www.reddit.com/r/learnprogramming/comments/wpfdwx/i_understand_recursion/,0,learnprogramming
upjub8,"One programming concept that took you a while to understand, and how it finally clicked for you","I feel like we all have that ONE concept that just didn’t make any sense for a while until it was explained in a new way. For me, it was parameters and arguments. What’s yours?",1293,685,Temporary-Warthog250,2022-05-14 15:40:42,https://www.reddit.com/r/learnprogramming/comments/upjub8/one_programming_concept_that_took_you_a_while_to/,0,learnprogramming
pm762f,"If you're looking for a mentor, I can mentor you","I am a senior developer and I'm looking for people to mentor. Basically I'm creating a free website that will teach people javascript for free, similar to the website Free Code Camp in many ways. Through mentorship I want to learn more about the specific ways people struggle when they try to learn programming, that way I can build this website with more accurate knowledge of how to help people.

I'll provide advice, help you work through issues, help explain things to you. I don't need anything in return as just hearing what you're struggling on will already be very helpful!

More specifically, I'd like to help with learning the fundamentals of javascript and react. My discord is moo#9610

Edit: there has been a lot of interest. I will respond to everybody adding me on discord but I'm going to pace myself as to not get overwhelmed. If I don't accept your friend request today, I'll accept it in the next few weeks

Second Edit: A lot of people have asked me to create a discord. I have decided not to do that because they are already discords that focus on helping people learn to code and I feel like it is better for me to redirect them to those discords. So here are the links to some helpful ones:

\- Learn to code - [https://discord.gg/UfhhEwZV](https://discord.gg/UfhhEwZV)

\- Free Code camp - [https://discord.gg/KVUmVXA](https://discord.gg/KVUmVXA)

\- The Odin Project - [https://discord.gg/fbFCkYabZB](https://discord.gg/fbFCkYabZB)

With that said, I have decided to create a discord server specifically for feedback on this website I'm creating. I would really appreciate it if you joined, as I'm going to ask questions on there to try to hear people's experiences/stories - [https://discord.gg/8K4s3PR4](https://discord.gg/8K4s3PR4)",1298,133,uncreativeuser1234,2021-09-11 13:10:48,https://www.reddit.com/r/learnprogramming/comments/pm762f/if_youre_looking_for_a_mentor_i_can_mentor_you/,0,learnprogramming
115b346,Anyone else get frustrated when a block of time you wanted to spend to learning code instead goes into why some software isn’t working right on your computer?,I hate when I have to waste a whole lot of time figuring out why something installed weird or isn’t behaving well rather than improving my actual coding. Is part of learning to program just accepting that you’re going to have days where you just can’t figure out why your software isn’t working right? Or am I just computer illiterate?,1290,204,yagsiwerdna,2023-02-18 08:58:41,https://www.reddit.com/r/learnprogramming/comments/115b346/anyone_else_get_frustrated_when_a_block_of_time/,0,learnprogramming
bv04a6,"Anyone ever notice that issues tagged as ""beginner"" or ""easy"" on github are frequently not even remotely beginner level?","I have some experience in C and Objective-C, but I'm currently learning Python right now, so I was perusing github for some beginner issues to look over and perhaps even help correct. I'm noticing though that many of these supposedly ""beginner"" level issues are actually very advanced/senior level issues that would cause most beginners to just quit.

For example, I came across a project working on a mail client and the project leader posted a beginner issue about a GUI button not working properly and that they needed it re-written similar to the other working buttons in the code. Sounds simple enough, right?

Well, a newbie came along and stated he'd like to take a look and asked for more input about the ""issue"" since the leader's post was vague. The response?

Project Leader: Hi, you'll need to know Python, C, Javascript, CSS, HTML, about 5 frameworks, 4 APIs, 3 GUI programs, we only use these few deprecated libraries, we only use this obscure IDE, you'll need to test it in 3 different environments and then send it for testing to two different servers. Plus, once done, please update our README files, add a doc about the buttons, and also re-write our HTML and CSS files in accordance with the button fix.

Then, the project leader writes: Oh and sorry about all the spaghetti code tehe

It gets better though...I decided to have a look at the files myself and within the code itself, the contributors have a ton of lines hashed out with statements like ""Oh, someone please fix this too cause I doubt it actually works for the clients.""

Obviously the newbie never came back after seeing all of that, but really some projects are masquerading as looking for ""some help"" on some ""easy issues,"" when in reality they're looking for senior developers to rewrite their entire program for free lol, and that's not open source, that's slavery.

I know there's great stuff on github, but by God there are also some terrible projects with horrible tags, docs, merges, etc that could really derail a new learner, especially if they begin to think that that's actually ""beginner"" level.

**To all the learners out there, don't give up if you come across some bad projects on github, even if they're tagged ""beginner"" and you feel absolutely lost...there's always better work to be found that is both more organized and more appropriately labeled...just keep searching and learning.**

TL;DR: Projects on Github like to misleadingly tag things as beginner when the issue(s) really are senior level, which tends to make learners give up because what is masquerading as ""beginner/easy"" seems (and actually is) way over their heads.",1296,127,VirulentCitrine,2019-05-30 23:28:20,https://www.reddit.com/r/learnprogramming/comments/bv04a6/anyone_ever_notice_that_issues_tagged_as_beginner/,0,learnprogramming
9f4z75,DONT GIVE UP!,"Programming is f\*cking hard. Really hard. 

There were many times in my journey that I wanted to give up. Too many all-nighters and anxiety filled mornings where I thought I would fail a course and thus fail to graduate. Fast forward 2 years, there's a diploma on my wall and a contract with a prominent tech company paying me 6 figures. 

Everyone starts out an idiot in programming, I remember asking my programming principles professor in his office hours how constructors worked, I remember scratching my head when we started learning about loops, I remember that 20 I got on an programming algorithms test. 

You will fail, ALOT. I still fail, I just spent 3+ hours figuring out how iOS and Android version their apps. And fucked up a branch 3 times (as much as I'm willing to admit at least ) before I finally nailing it. You will be scared by tech, only to come back to it a few weeks later having a  ""so why did I have a hard time doing this again?"" moment.

Programming is hard, but for me it there was no other option. I couldn't imagine working in any other field or industry (OK if I was born before the 80's I'd probably do Electrical Engineering IMO). When you're learning programming you will have moments of banging your head against the wall trying to solve a problem. that will happen to you over and over again, it's something you sign on to when you start your journey into programming.

Stick with it \[programming\]. It's insanely hard but in the end insanely rewarding. Programming is a highly rewarding field with just one caveat, you can't say ""I wish there was an app for that"" anymore.

 

&#x200B;",1288,200,_fat_santa,2018-09-12 05:26:39,https://www.reddit.com/r/learnprogramming/comments/9f4z75/dont_give_up/,0,learnprogramming
79l4f8,"My CS professor ""hates"" comments in code. Is that really a thing?","The other day one of my professors talked in class about how much he hates seeing comments in code. According to him, code should be totally ""self documenting""--i.e. using descriptive names and syntax that's easy to read to the point where comments are unnecessary.

I mean I kind of see what he's saying, I agree that it's ideal to write clean code that's as obvious as possible rather than write a novel in comments, especially because the code could get changed and leave outdated comments behind. But NO comments seems a little extreme to me, sometimes you can't help but have complicated functions that aren't easy to understand, especially if you're going for efficiency. Plus, languages go out of style all the time--there's no guarantee that the future person reading it will understand the syntax, which is kind of required for ""self-documenting"" code to work. Right?

Anyway, that was the first time I've heard a professor discourage comments and I wanted to see what other people thought. Is writing undocumented code normal? Is it really a thing that's acceptable in industry?

EDIT: I didn't mean to start a war! A lot of people are speculating about the context so here it is: It's a 300-level class and the professor was talking specifically about his hatred of comments from his time in industry (because they can be ""decades old"") although obviously he said that to discourage us from using comments in his class too.",1295,450,glitterismyantidrug_,2017-10-30 03:03:01,https://www.reddit.com/r/learnprogramming/comments/79l4f8/my_cs_professor_hates_comments_in_code_is_that/,0,learnprogramming
go2skn,Started learning code. Found a great tutorial for a Tetris game by FreeCodeCamp,"I've only just started it but it seems really interesting and thought I would share 

Don't let the start put you off! Google is key!

Website Link to tutorial - [https://www.freecodecamp.org/news/learn-javascript-by-creating-a-tetris-game/](https://www.freecodecamp.org/news/learn-javascript-by-creating-a-tetris-game/)  

&#x200B;

Youtube - [https://www.youtube.com/watch?time\_continue=3&v=rAUn1Lom6dw&feature=emb\_logo](https://www.youtube.com/watch?time_continue=3&v=rAUn1Lom6dw&feature=emb_logo)",1290,67,None,2020-05-21 18:54:48,https://www.reddit.com/r/learnprogramming/comments/go2skn/started_learning_code_found_a_great_tutorial_for/,0,learnprogramming
129fgok,I never thought I'd do it..but I Quit!,"After 2 and a half bootcamps, I quit programming as a career option.

8 months ago, I found this sub-reddit. Me,27 years old, seeing that was not bad of an age, became eager to become a programmer. I was already good with computers (you know what I mean, not programmer-good lol). I had left half a CPA and a big 4 job behind (toxic as hell) and figured this could work.

I didn't even have a laptop, my dad had to buy me one.

I used to read about people quitting but I never figured I'd be one of them, although my reasons differ. I finished both the web dev camps by Angela and Colt and like 25% of Angela Python camp.

Projecting the fact that my job hunt would be solely based on luck alone, my motivation waned. Even for an internship it seems they expect you to know everything. And it doesn't help that I'm from India, where the competition is so intense and where most people get jobs through college placements. And there's just so much information, and every employer is looking for something different. And seeing the job cuts was an addition.

Nevertheless it was kinda fun. I liked programming, learning it was a bore though. I guess it just added to my knowledge and nothing to show to an employer. I cried a bit. Now I think I'm gonna finish my CPA and get a job(sigh. So much for work from home and non- toxic culture).

But anyway thanks guys, I would have never taken the plunge was it not for this sub. At least I have a practical deeper understanding of the programming system now. ( A great hobby.)",1283,205,Big_Town2675,2023-04-02 08:53:52,https://www.reddit.com/r/learnprogramming/comments/129fgok/i_never_thought_id_do_itbut_i_quit/,0,learnprogramming
sr3pd9,Harvard's New Course,"For anyone wanting to learn Python Harvard just released *Introduction to Programming with Python* on edX. It starts on April 1st  and is a self-paced 9 Week long course.

edit:  Here is a link to the course: [https://www.edx.org/course/cs50s-introduction-to-programming-with-python](https://www.edx.org/course/cs50s-introduction-to-programming-with-python) ",1284,60,DominicMxrtinez,2022-02-12 23:00:55,https://www.reddit.com/r/learnprogramming/comments/sr3pd9/harvards_new_course/,0,learnprogramming
jt4ehq,A tip for all you other beginners like me.,"Hey,

Just wanted to post real quick to make some of you aware of a potential hazard when reaching out to people with question.

I, for the last day or two had been having a back and forth conversation between myself and someone who I thought was there to help. After a while of giving me a few beginner tips on Angular, they asked if I would be interested in collaborating with them on a project. As they ""were"" an experienced and professional developer I was super excited and thought I had finally found someone who I could work with and learn one on one from. Eventually after explaining to me that they did not mind my complete lack of experience, and had no problem dragging me along through the development process. I started to feel like this was turning into a ""To good to be true"" situation already.

They then asked me to create an account on a freelance (I'll not mention the name because it has a lot of posts with similar scams or other shady dealings on google) work website with the request that they could have access to the account, so that they could more easily see what I was doing and be able to help. At this point I was sure that it was some sort of scam, they even offered to give me some of their earnings.

So I did some research and found tons of posts about people like me getting caught up in this sort of situation.

I am not sure what the end goal of the scam was, be it:

\- They don't have to pay taxes on their earning as the account is connected to me and then I am in trouble with the IRS.

\- They would negotiate a job, accept payment, and then disappear leaving me legally responsible for taking payment and failing to do the work.

regardless it does not matter, I just wanted to post here and let all you new aspiring programmers like myself be aware of this sort of thing so it doesn't hurt you. I was so excited to have found someone who seemed super interested in helping me along, and was really disappointed to learn they were not there to help.

That being said keep it up and keep learning. good luck stay safe out there!

Hopefully this isn't too off topic for this subreddit.",1285,71,Maxipup,2020-11-12 22:07:20,https://www.reddit.com/r/learnprogramming/comments/jt4ehq/a_tip_for_all_you_other_beginners_like_me/,0,learnprogramming
8nwt1a,"This is my favorite piece of advice to read when I feel overwhelmed by how many languages, frameworks, and tools are out there","It comes from a comment made by [Addy Osmani](https://twitter.com/addyosmani), Senior Staff Engineer at Google. He was writing it in response to a jokey article called [How it feels to learn JavaScript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f) by [Jose Aguinaga](https://twitter.com/jjperezaguinaga) (which itself was a JavaScript spin on [It's the Future](https://circleci.com/blog/its-the-future/) by [Paul Biggar](https://twitter.com/paulbiggar)).

I was reading /u/ZHDINC's comment in the recent thread about [why people give up on programming](https://www.reddit.com/r/learnprogramming/comments/8nrw4e/whyd_you_give_up_teaching_yourself_programming/dzy32od/) and it reminded me of Osmani's words. ZHDINC mentions how we all hit ""the wall"" which is this metaphorical construct embodying the seemingly endless amount of sheer _stuff_ that we have to learn before we become competent programmers. To many it seems insurmountable and after struggling for a bit they end up quitting.

It happens so easily in our field because as ZHDINC mentions, there is so much material for people starting out and it builds this amazing sense of false-confidence. When new programmers finish Codecademy and need to figure out what to do next without a tutorial to guide them, they're absolutely crushed by how much material they think they need to learn. Once we make it past the basic tutorials, we realize just how deep [the valley of despair](https://understandinginnovation.files.wordpress.com/2015/06/dunning-kruger-0011.jpg) actually is.

I started my first professional programming job 8 months ago. I deal with stuff I don't know on a daily basis and I often feel [imposter syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome) and want to quit. Whenever I feel like giving up, I come back to Osmani's comment.  Here it is:

>Totally get your frustration 🙂

>I encourage folks to adopt this approach to keeping up with the JavaScript ecosystem: **first do it, then do it right, then do it better.**

>First do it: Take a breath and acknowledge that you’re totally **new** to a space. **It’s okay not to use everything. In fact, it’s better if you don’t. Get a simple prototype built that does the trick.** Nothing wrong with straight-up using HTML/CSS/JS.

>We don’t acknowledge enough that it takes time, experimentation and skill to master the fundamentals of any new topic. Beginners shouldn’t feel like they’re failing if they’re not using the library-du-jour or reactive-pattern of the week. It took me weeks to get Babel and React right. Longer to get Isomorphic JS, WebPack and all of the other libraries around it right. **Start simple and build on that base.**

>Then do it right: **Iterate.** Improve on what you’ve got. See a problem that you keep having to solve? Maybe layer in a small library/module to help with it. There is zero reason to be worrying about rewriting your project in another language or framework nor adopting any more tooling **unless it helps you move the needle forward on your project**. Everything you add to your project should really be offering value. If it’s complicating things or making it harder for you or your team to get a job done, get rid of it.

>Then do it better: **master your craft.** Once you’re comfortable navigating the waters of the tools and libraries you know for sure add value to your workflow, you’ll find that including them as a default “just make sense”. I’m heavily using 9–10 different tools in my project these days but I’ve learned enough about how to avoid their rough edges that they save me time. I would never suggest a beginner use most of the things in this post right off the bat. It’s a recipe for pain. Instead, get the basics right. Slowly become familiar with tools that add value and then use what helps you get and stay effective.

>It’s also worth noting: everyone — even the people writing the tools and libraries mentioned in this post — go through the same feelings of fatigue and frustration learning, debugging and staying up to date with modern JavaScript. I’d encourage folks to remember we’re all in the same boat and our tools are here to help us. If they’re not doing that, we should get them out of the way 🙂",1278,32,samort7,2018-06-02 00:20:52,https://www.reddit.com/r/learnprogramming/comments/8nwt1a/this_is_my_favorite_piece_of_advice_to_read_when/,0,learnprogramming
7dcaii,"119 Free Udemy Coupons, Various Topics","**Edit:** Three golds .. thanks guys

**Edit2:** I added more collections of coupons [here](https://www.real.discount/collections/)

Black Friday sales just started in Udemy, but why to pay if you can get paid courses for Free.

Here is a list of 119 VALID Free coupon code for various subjects in udemy, grab it quickly as most of them are limited.

I collected those coupons over the last year, more free stuff on [Real.discount](https://www.real.discount)

I will post a comment so you can report an expired coupon, just post its number in the list.

so here is the list: 

**Android**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
1- [How To Make App For Iphone, Android, Kindle Without Coding](https://www.udemy.com/how-to-make-app-for-iphone-android-kindle-within-10-min/?couponCode=ZERO1234)|48414|3.8|7|20
2- [Game Apps - How To Make Games For iPhone, Android, Windows](https://www.udemy.com/game-apps-how-to-make-games-for-iphone-android-windows/?couponCode=ZERO1234)|15659|4|1.5|20



**Python**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
3- [Try Django 1.9 - Build a Blog and Learn Python's #1 Library](https://www.udemy.com/try-django/?couponCode=CFEOCT2016)|12092|4.3|20|50
4- [30 Days of Python - Unlock your Python Potential](https://www.udemy.com/30-days-of-python/?couponCode=CFEOCT2016)|74819|4.5|9|195
5- [The Complete Python 3 Course: Go from Beginner to Advanced!](https://www.udemy.com/learn-python-3-from-beginner-to-advanced/?couponCode=JERRYBANFIELD)|81744|4.2|8|195
6- [Learn Python GUI programming using Qt framework](https://www.udemy.com/python-gui-programming/?couponCode=REDDITFREE6)|9313|4.2|12|20
7- [PYTHON - A to Z Full Course for Beginners](https://www.udemy.com/python-django-programming-beginner-to-advance-tutorial-step-by-step/?couponCode=FACEBOOKJOY2)|28502|3.9|4|20
8- [Data Analysis with Pandas and Python](https://www.udemy.com/data-analysis-with-pandas/?couponCode=INDEPENDENCEDAY)|29190|4.6|19|200
9- [Learn Programming in Python With the Power of Animation](https://www.udemy.com/learn-programming-in-python-with-the-power-of-animation/?couponCode=PBCUDEMYGROUPS)|22001|4.3|1|195
10- [The Complete Python 3 Course: Beginner to Advanced!](https://www.udemy.com/python-complete/?couponCode=FREEFB7)|27112|4.4|18.5|195
11- [C, C++, Python and Ruby Programming](https://www.udemy.com/c-c-python-ruby-java-html5-php-programming-for-beginners/?couponCode=FREE1111)|6695|3.7|25.5|200




**Unity**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
12- [Unity Multiplayer 2017 -Build Online Shooter - code included](https://www.udemy.com/unity-multiplayer-make-a-shooter-game-code-included/?couponCode=WONDER55P9)|29927|4.5|4|200
13- [Unity 3D Course: No Coding, Build & Market Video Games Fast](https://www.udemy.com/hackingunity3d/?couponCode=MGD0912)|10402|4|5|200




**Javascript**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
14- [HTML CSS JavaScript: Most popular ways to code HTML CSS JS](https://www.udemy.com/html-css-javascript/?couponCode=fbcourselaunch)|11554|4.3|3|170
15- [Javascript: Essential steps for Javascript](https://www.udemy.com/javascript-crash-course/?couponCode=couponliar)|13512|4.1|2|160
16- [Learn JavaScript for Web Development](https://www.udemy.com/javascript-learn-javascript-essentials-and-build-project/?couponCode=BBHF2017)|38167|4.6|8|80
17- [~~Beginner Javascript - Create Your Own Text Based RPG!~~](https://www.udemy.com/beginner-javascript-create-your-own-text-based-rpg/?couponCode=FREE_COURSE_RPG_2)|3841|5|2.5|95





**Java**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
18- [Hibernate Fundamentals: Hands-On Primer With Java EE & JPA](https://www.udemy.com/hibernate-fundamentals/?couponCode=HIBERNATEFREE)|8120|3.9|3|195
19- [Fundamentals of Java with NetBeans](https://www.udemy.com/fundamentals-of-java-with-netbeans/?couponCode=YOUTUBEFREE)|9470|4.6|1|20
20- [[From 0 to 1 : Learn Java Programming - Hindi]](https://www.udemy.com/h-java-from-0-to-1/?couponCode=YCHNJL25)|1236|4.8|17.5|20
21- [Core java Practice Test Set](https://www.udemy.com/core-java-practice-test/?couponCode=FREEJAVA17)|1201|3.3|1|100
22- [~~Learn Java Programming - Complete Course~~](https://www.udemy.com/the-complete-java-course-go-from-begginer-to-advanced/?couponCode=SPECIALOFFER)|357|4.6|20|195




**PHP**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
23- [PHP: Ultimate guide to PHP for everyone](https://www.udemy.com/basic-php/?couponCode=BBHFPROMO)|11320|3.8|1|115
24- [~~Build A Complete CRUD Application With PHP, MYSQL & JQUERY~~](https://www.udemy.com/build-a-complete-crud-application-with-php-mysql-jquery/?couponCode=COUPONFREE)|11454|4.4|14|20
25- [Responsive PHP Registration Form: From Scratch](https://www.udemy.com/responsive-php-registration-form/?couponCode=FREEPHPFORM)|10287|4.2|4|95
26- [Create a PHP Login and Registration System From Scratch 2.0](https://www.udemy.com/create-php-ajax-js-jquery-mysql-login-system-today/?couponCode=HALLOWEEN2017)|12850|4.6|3|80
27- [~~The Complete PHP MySQL Professional Course with 5 Projects~~](https://www.udemy.com/the-complete-php-mysql-professional-course/?couponCode=100COUPONONLY)|36730|4.4|19.5|200
28- [Basics Of PHP For absolute Beginners](https://www.udemy.com/php-for-beginners-to-advance-complete-course/?couponCode=FACEBOOKJOY)|8064|4.6|4.5|20



**Photoshop**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
29- [Photoshop Effects - Create Stunning Photo Effects](https://www.udemy.com/photoshop-effects-photo-effects/?couponCode=FBFREE)|39031|4.5|1|200
30- [Learn Professional 2D Game Asset Graphic Design in Photoshop](https://www.udemy.com/learn-professional-2d-game-asset-graphic-design-in-photoshop/?couponCode=FREEASSET)|16926|4.7|8|150
31- [Learn 2D Game Special Effect Animation in Photoshop](https://www.udemy.com/learn-2d-game-special-effect-animation-in-photoshop/?couponCode=FREECODE)|27685|4.4|4|65
32- [Mastering Curves in Photoshop CC](https://www.udemy.com/mastering-curves-in-photoshop/?couponCode=BESTCOURSE)|12547|4.4|3|100
33- [Master Advanced High End Beauty Retouching in Photoshop](https://www.udemy.com/beauty-retouching/?couponCode=FREEBEAUTY)|16225|4.5|8|200
34- [Photoshop CC for Beginners: Master Photoshop Essentials Now!](https://www.udemy.com/adobe-photoshop-course/?couponCode=FREEFORFRIENDS2017)|40653|4.6|6|20
35- [Beauty of Dodge & Burn in Photoshop](https://www.udemy.com/dodgeburn/?couponCode=LEARNDB)|4479|4.5|4|100
36- [Behind The Shooting : Photoshop Secrets Layers FX Revealed !](https://www.udemy.com/behind-the-shooting-photoshop-secrets-revealed/?couponCode=UDEMY100FREEFB0)|8584|3.2|2|200
37- [Photoshop CC: Professional Hair Retouching in Photoshop](https://www.udemy.com/high-end-hair-retouching/?couponCode=0)|4663|4.5|3|95
38- [Mastering Advanced Color Grading in Photoshop](https://www.udemy.com/mastering-color-grading-in-photoshop/?couponCode=PSANDLR)|22415|4.3|3|200
39- [Photoshop Beginners Mastery: Zero to Hero in Photoshop](https://www.udemy.com/getting-started-in-photoshop/?couponCode=free-online-photoshop-course)|150499|4.5|2|20
40- [Lo Scatto Svelato VOL1: Panoramica Workflow in Photoshop](https://www.udemy.com/lo-scatto-svelato-vol1-panoramica-workflow-in-photoshop/?couponCode=UDEMYCOURSES)|2043|4.2|1|200
41- [Learn Professional 2D Game Graphic Design in Photoshop](https://www.udemy.com/create-quick-professional-2d-game-backgrounds-in-photoshop/?couponCode=freecourse)|27141|4.5|6.5|150
42- [Retouching Essentials in Photoshop](https://www.udemy.com/retouching-essentials-in-photoshop/?couponCode=PSLR2017)|20241|4.3|2|100
43- [Master Fashion Retouching in Photoshop](https://www.udemy.com/master-fashion-retouching-in-photoshop/?couponCode=PSLRCOURSE)|5423|4|2.5|100
44- [Mastering Black and White Retouching in Photoshop](https://www.udemy.com/black-and-white-retouching-in-photoshop/?couponCode=PSLRBW2017)|7737|4.5|4|200
45- [Portret - Profesjonalna Foto Edycja w Photoshop](https://www.udemy.com/portret-profesjonalna-foto-edycja-photoshop/?couponCode=LAUNCH_00)|1092|5|6|200
46- [Learn Beauty Retouch Techniques in Photoshop - Become a PRO!](https://www.udemy.com/beauty-retouch/?couponCode=LEARNFREE)|4428|4.7|4.5|60





**React**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
47- [React JS and Redux - Mastering Web Apps](https://www.udemy.com/react-js-and-redux-mastering-web-apps/?couponCode=GOHACKERS2)|44003|4.5|5|40
47- [Redux JS - Learn to use Redux JS with your React JS apps!](https://www.udemy.com/redux-js-learn-to-use-redux-js-with-your-react-js-apps/?couponCode=LEARN_REDUX)|2817|4.5|8|195





**Wordpress**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
49- [WordPress for Beginners: Designing a Blog with Zero Coding](https://www.udemy.com/wordpress-starter/?couponCode=2017MANIFESTO)|35873|3.6|1|200
50- [Udemy Marketing: Build a WordPress Website - Unofficial](https://www.udemy.com/unofficial-udemy-marketing-build-a-wordpress-website/?couponCode=2017MANIFESTO)|24402|4.5|8|200
51- [How to Create a Website Without Coding - WordPress 2016](https://www.udemy.com/how-to-create-a-website-wordpress-2016/?couponCode=0)|9965|4.4|2|195
52- [How to Make a WordPress Website 2017](https://www.udemy.com/how-to-make-a-wordpress-website-2016/?couponCode=WordPress-ForBeginners)|11739|4.6|3|150
53- [How to Make a Website Without Coding- WordPress & Web Skills](https://www.udemy.com/make-a-website-without-code-wordpress-course/?couponCode=feedback)|9244|4.6|9|30
54- [How to Create a Wordpress Website from Scratch - No Coding](https://www.udemy.com/how-to-create-a-wordpress-website-from-scratch-no-coding/?couponCode=feedback)|7548|4.3|3|20
55- [How to Master Wordpress: For Beginners](https://www.udemy.com/complete-wordpress-crash-course-from-beginners-to-experts/?couponCode=bbhf)|5507|4.2|6|20
56- [WordPress Development For Beginners](https://www.udemy.com/wordpress-basic/?couponCode=WPFREE)|41214|4.3|2|95
57- [WordPress: Create Stunning Wordpress Websites for Business](https://www.udemy.com/wordpress-beginners/?couponCode=JERRY)|18341|4.6|3|195
58- [How To Build A Buzzfeed Style Blog On Wordpress](https://www.udemy.com/how-to-build-a-buzzfeed-style-blog-on-wordpress/?couponCode=Udemystudio)|7366|4|1|20
59- [Build Your Own Custom Wordpress Website and Blog In a Day](https://www.udemy.com/how-to-create-a-website/?couponCode=BBHFX01)|17020|4.2|2|100
60- [WordPress plugin business & marketing WordPress plugins](https://www.udemy.com/make-money-start-a-business-building-wordpress-plugins/?couponCode=plugins)|9363|3.8|1|50
61- [WordPress training for 2017 step-by-step WordPress tutorial](https://www.udemy.com/wordpress-training-course-video-tutorials/?couponCode=wordpress34metoday)|14288|4.5|4|200
62- [WordPress: Create Stunning Wordpress Websites for Business](https://www.udemy.com/wordpress-beginners/?couponCode=WPFREE4)|18341|4.6|3|195
63- [Build Your Own Custom Wordpress Website and Blog In a Day](https://www.udemy.com/how-to-create-a-website/?couponCode=bbhfx01)|17017|4.4|2|100
64- [~~Fashion Blogs - How to Start a WordPress Fashion Blog 2017~~](https://www.udemy.com/fashion-blogs/?couponCode=FREEOCT2500)|6084|3.9|2.5|195
65- [WordPress plugin business & marketing plugins (no coding)](https://www.udemy.com/make-money-start-a-business-building-wordpress-plugins/?couponCode=plugins)|9372|3.9|1.5|25
66- [WordPress Blogging : How To Start A WordPress Blog (2017)](https://www.udemy.com/wordpress-blogging-guide/?couponCode=2500COUPONS)|3382|4.6|2|195
67- [WordPress for Beginners: Master Creating WordPress Websites](https://www.udemy.com/the-complete-wordpress-for-beginners-course/?couponCode=WP4BEGINNERS)|30027|4.6|7.5|50
68- [Wordpress Complete Web Design :Latest Wordpress Design Techs](https://www.udemy.com/wordpress-complete-web-design-latest-wordpress-design-techs/?couponCode=LIMITEDFACE)|11649|4.5|5.5|195
69- [~~Master WordPress - Make WordPress Websites in 1 Hour!~~](https://www.udemy.com/how-to-create-a-website-in-1-hour-no-coding-required/?couponCode=DISCOUNTS_GLOBAL)|3262|4.7|1|30
70- [Wordpress For Authors](https://www.udemy.com/learn-wordpress-authors/?couponCode=SPBHW0)|1782|4.7|5.5|95





**iOS**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
71- [iOS 8 Mobile App Design: UI & UX Design From Scratch](https://www.udemy.com/design-ios-8-apps-from-scratch/?couponCode=freeee)|17952|4.2|10|20
72- [~~iOS 10 Swift 3 hands on features - Siri Kit , Messages , ...~~](https://www.udemy.com/ios-10-swift-3-hands-on-features-siri-kit-messages/?couponCode=APPSFRESH_DOT_COM)|10723|4|3|50
73- [iOS 9 App Development For Beginners](https://www.udemy.com/ios-9-app-development-for-beginners/?couponCode=holidays2015)|9945|4.2|7|100
74- [Learn iOS 9 and Swift 2 From Scratch - Build Real World Apps](https://www.udemy.com/learn-ios9-swift2/?couponCode=freebies)|14580|3.8|3|195
75- [Learn iOS 9 and Swift 2 From Scratch - Build Real World Apps](https://www.udemy.com/learn-ios9-swift2/?couponCode=freebies)|14570|3.8|3|195
76- [iOS 10 & Swift 3: From Beginner to Paid Professionalâ„¢](https://www.udemy.com/devslopes-ios10/?couponCode=IOS_COURSE_AXR18TR)|84289|4.5|71|200
77- [How to Add Facebook Login to Your App- SpriteKit, Swift, iOS](https://www.udemy.com/how-to-add-facebook-login-to-your-app-spritekit-swift-ios/?couponCode=FACEBOOKSPECIAL)|7282|5|1|200
78- [~~iOS 10 Swift 3 hands on features - Siri Kit , Messages , ...~~](https://www.udemy.com/ios-10-swift-3-hands-on-features-siri-kit-messages/?couponCode=appsfresh_dot_com)|10732|3.9|2.5|200
79- [~~Swift 4 Language, A Complete Overview With IOS 11 CoreML App~~](https://www.udemy.com/swift-3-language-a-complete-overview-with-macios-apps/?couponCode=AF2GSDGIK042AF)|4740|4.8|11|200
80- [iOS Marketing A-Z: Beginner's iOS Marketing Blueprint](https://www.udemy.com/ios-siri-marketing-a-z/?couponCode=FREE4BLACKHAT)|4736|3|1|45
81- [Swift - The Ultimate Guide To Mac and iOS Development](https://www.udemy.com/swift-ios-mac/?couponCode=SWIFT_FREE)|9646|4|1|80





**Ethical Hacking**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
82- [The Definitive Ethical Hacking Course - Learn From Scratch](https://www.udemy.com/kali-linux/?couponCode=freebee)|62675|4.3|9|195
83- [Build an Advanced Keylogger using C++ for Ethical Hacking!](https://www.udemy.com/how-to-create-an-advanced-keylogger-from-scratch-for-windows/?couponCode=JERRYBANFIELD)|58798|4.4|7|195
84- [The Complete Ethical Hacking Course for 2016/2017!](https://www.udemy.com/hacking-complete/?couponCode=JERRYBANFIELD)|78343|4.4|15|195
85- [Ethical Hacking for Mobile Phones, Facebook & Social Media!](https://www.udemy.com/advanced-real-world-hacking-with-practical-videos/?couponCode=HACK40)|17413|4.2|1.5|145





**MS Excel**

Course Title|Students|Rating|Hours|Price
:--|:--:|:--:|:--:|:--:
86- [Excellence in Excel! Create a dynamic block chart in Excel!](https://www.udemy.com/excel-block-chart/?couponCode=freeaccess)|21960|3.7|1|20
87- [Complete Excel 2016 Guide: Master Spreadsheets Today!](https://www.udemy.com/the-complete-beginners-guide-to-microsoft-excel-2016/?couponCode=USE10000)|4929|3.6|2|200
88- [The McKinsey Way Of Excel Hacking and Dynamic Charting](https://www.udemy.com/excel-hacking-dynamic-charts-and-linking-to-powerpoint/?couponCode=YouAreAwesome)|18632|3.8|3|200
89- [Excel 2016 Foundation Training Course - Video Tutorial](https://www.udemy.com/excel-2016-foundation-training-video-tutorials/?couponCode=EX2016Foundation)|7405|4.3|2|50
90- [Microsoft Excel : Get All You Need To Know And Do!](https://www.udemy.com/microsoft-excel-from-basics-to-advanced-in-rapid-time/?couponCode=FREE50000)|35503|4.4|1|20
91- [Excel With Excel Pivot Tables](https://www.udemy.com/excel-with-excel-pivot-tables-free-tutorial/?couponCode=BBHF)|16355|4.5|2|190
92- [Excel Pivot Tables in a Nutshell](https://www.udemy.com/excel-pivot-tables-nutshell/?couponCode=FEBSPECIAL)|13549|4.1|1|200
93- [Excellence in Excel! Create a bookkeeping tools by doing.](https://www.udemy.com/excel-in-excel/?couponCode=freeaccess)|15537|4.2|2|20
94- [Excel 2013 Macros: Automate Your Excel Workload](https://www.udemy.com/excel-2013-macros-automate-your-excel-workload/?couponCode=freeudemycourses)|15308|4.4|1|200
95- [Microsoft Excel Step by Step Training for Beginners!](https://www.udemy.com/the-quest-for-excel-lence/?couponCode=STEPExcel)|12678|4.6|9|20
96- [Excellence in Excel! Make any chart dynamic in Excel!](https://www.udemy.com/excel-excel-chart/?couponCode=freeaccess)|14007|4.1|1|20
97- [Excel for the Absolute Beginner](https://www.udemy.com/learnexcel/?couponCode=learnexcelfree)|6569|4.6|1|200
98- [Learn Excel Conditional Formatting with 7 Practical Problems](https://www.udemy.com/learn-to-use-excel-conditional-formatting-with-examples/?couponCode=LIMITED_OFFER)|9023|4.5|1|40
99- [Microsoft Excel Formula Design for Beginners](https://www.udemy.com/30-minute-excel-formula-design/?couponCode=FORMDES)|10315|4.7|1|20
100- [Intermediate Microsoft Excel Using Conditional Formatting](https://www.udemy.com/30-minute-excel-conditional-formatting/?couponCode=CONDFREE)|8222|4.6|1|20
101- [These 5 Excel Tricks Will Save Your Job](https://www.udemy.com/5-excel-tricks-that-save-your-job/?couponCode=SEPT2016PROMO)|8852|4.2|1|200
102- [Excellence in Excel! Create a Stock Control tool in Excel!](https://www.udemy.com/excel-excel/?couponCode=freeaccess)|9073|4.3|2|25
103- [Ä°LERÄ° MS EXCEL TÃ¼m Versiyonlar](https://www.udemy.com/ileri-ms-excel-tum-versiyonlar/?couponCode=FREECOURSE)|393|4.2|1|20
104- [CÃ³mo ser excelente alumno Curso Introductorio](https://www.udemy.com/como-ser-excelente-alumno-curso-introductorio/?couponCode=GRATIS)|504|3.5|1|100
105- [Top 25 Microsoft Excel Advanced Formulas: Hands-on Tutorial](https://www.udemy.com/top-25-microsoft-excel-advanced-formulas-hand-on-tutorial/?couponCode=EXCELFREE)|10159|4|3|45
106- [Microsoft Excel Line and Pie Graph Design and Styling](https://www.udemy.com/30-minute-charts-and-graphs/?couponCode=promo24)|5790|4.7|1|20
107- [Analyze Huge Data with Ease Using Microsoft Excel Filters!](https://www.udemy.com/30-minute-excel-filters/?couponCode=promo24)|10007|4.5|1|20
108- [Master Microsoft Excel Table Design in Under 30 Minutes](https://www.udemy.com/short-microsoft-excel/?couponCode=promo24)|12499|4.3|1|20
109- [Master Excel AutoSum and Count Functions For Quick Analysis](https://www.udemy.com/30-minute-excel-autosum-and-count/?couponCode=promo24)|9284|4.7|1|20
110- [Maximize your Organisational Skills using Excel Sheets](https://www.udemy.com/30-minute-excel-training-sheets/?couponCode=promo24)|7826|4.5|1|20
111- [Maximize Your Excel Productivity To Save Time](https://www.udemy.com/30-minute-excel-productivity-secrets/?couponCode=promo24)|10528|4.4|1|20
112- [Microsoft Excel Logic Theory and If Functions (Intermediate)](https://www.udemy.com/excel-logic/?couponCode=PROMO24)|8798|4.6|1|20
113- [Excel Best Practices - mit wenig Aufwand viel erreichen!](https://www.udemy.com/erfolgreich-im-job-beste-excel-ninja-tricks/?couponCode=GIBSTERNE)|7967|4.2|3|200
114- [The Easiest Beginners Guide to Microsoft Excel](https://www.udemy.com/30-minute-excel_first-time-excel/?couponCode=PROMO24)|6701|4.7|3|20
115- [Excel Power Map: A Power BI Tool for Reporting Professionals](https://www.udemy.com/excel-2013-power-map-masterclass/?couponCode=couponscook)|8274|3.2|0.5|40
116- [Iterative calculation in Excel](https://www.udemy.com/master-excel-circular-reference/?couponCode=LASTCALLFREE)|6306|3.5|1|20
117- [How To Dominate Excel Formatting & Charting](https://www.udemy.com/how-to-dominate-excel-formatting-charting/?couponCode=youareawesome)|8206|3.4|1.5|150
118- [~~Introduction to Data Analysis using EXCEL~~](https://www.udemy.com/business-data-analysis-excel/?couponCode=FIVERRBOUHADDA3)|9790|4.5|5.5|195
119- [Excel Macros/VBA: Create 4 Real World Projects from Scratch](https://www.udemy.com/excel-macros-create-4-real-world-projects-from-scratch/?couponCode=INSTRUCTORREVIEW)|4476|4|2.5|150",1284,210,saadmerie,2017-11-16 13:13:28,https://www.reddit.com/r/learnprogramming/comments/7dcaii/119_free_udemy_coupons_various_topics/,1,learnprogramming
l3k0ln,"I released my comprehensive video course on Python NumPy for free. ~3 hours of content with lots of animations, examples, and practice problems.","I created a course on NumPy called *Python NumPy For Your Grandma - So easy your grandma could learn it*.  I originally put it [for sale on Udemy](https://www.udemy.com/course/python-numpy-for-your-grandma/?referralCode=B75D1F7F498504D88FD3), but later decided to make it [free on YouTube](https://www.youtube.com/playlist?list=PL9oKUrtC4VP6gDp1Vq3BzfViO0TWgR0vR). 

1. **Introduction**  
  [1.1 Introduction](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-1-1-introduction)  
2. **Basic Array Stuff**  
  [2.1 NumPy Array Motivation](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-1-numpy-array-motivation)  
  [2.2 NumPy Array Basics](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-2-numpy-array-basics)  
  [2.3 Creating NumPy Arrays](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-3-creating-numpy-arrays)  
  [2.4 Indexing 1-D Arrays](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-4-indexing-1d-arrays)  
  [2.5 Indexing Multidimensional Arrays](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-5-indexing-multidimensional-arrays)  
  [2.6 Basic Math On Arrays](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-6-basic-math-on-arrays)  
  [2.7 Challenge: High School Reunion](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-7-challenge-high-school-reunion)  
  [2.8 Challenge: Gold Miner](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-8-challenge-gold-miner)  
  [2.9 Challenge: Chic-fil-A](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-9-challenge-chic-fil-a)  
3. **Intermediate Array Stuff**  
  [3.1 Broadcasting](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-1-broadcasting)  
  [3.2 newaxis](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-2-newaxis)  
  [3.3 `reshape()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-3-reshape)  
  [3.4 Boolean Indexing](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-4-boolean-indexing)  
  [3.5 nan](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-5-nan)  
  [3.6 infinity](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-6-infinity)  
  [3.7 random](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-7-random)  
  [3.8 Challenge: Love Distance](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-8-challenge-love-distance)  
  [3.9 Challenge: Professor Prick](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-9-challenge-professor-prick)  
  [3.10 Challenge: Psycho Parent](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-10-challenge-psycho-parent)  
4. **Common Operations**  
  [4.1 `where()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-1-where)  
  [4.2 Math Functions](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-2-math-functions)  
  [4.3 `all()` and `any()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-3-all-and-any)  
  [4.4 `concatenate()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-4-concatenate)  
  [4.5 Stacking](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-5-stacking)  
  [4.6 Sorting](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-6-sorting)  
  [4.7 `unique()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-7-unique)  
  [4.8 Challenge: Movie Ratings](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-8-challenge-movie-ratings)  
  [4.9 Challenge: Big Fish](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-9-challenge-big-fish)  
  [4.10 Challenge: Taco Truck](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-10-challenge-taco-truck)  
5. **Advanced Array Stuff**  
  [5.1 Advanced Array Indexing](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-1-advanced-array-indexing)  
  [5.2 View vs Copy](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-2-view-vs-copy)  
  [5.3 Challenge: Population Verification](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-3-challenge-population-verification)  
  [5.4 Challenge: Prime Locations](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-4-challenge-prime-locations)  
  [5.5 Challenge: The Game of Doors](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-5-challenge-the-game-of-doors)  
  [5.6 Challenge: Peanut Butter](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-6-challenge-peanut-butter)  
6. **Final Boss**  
  [6.1 `as_strided()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-1-as_strided)  
  [6.2 `einsum()`](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-2-einsum)  
  [6.3 Challenge: One-Hot-Encoding](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-3-challenge-one-hot-encoding)  
  [6.4 Challenge: Cumulative Rainfall](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-4-challenge-cumulative-rainfall)  
  [6.5 Challenge: Table Tennis](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-5-challenge-table-tennis)  
  [6.6 Challenge: Where's Waldo](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-6-challenge-wheres-waldo)  
  [6.7 Challenge: Outer Product](https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-7-challenge-outer-product)  

Please consider liking my videos and subscribing to my channel if you found this useful. Also, stay tuned for my course on Pandas coming in a week or so. Thanks!",1279,54,Neb519,2021-01-23 20:40:40,https://www.reddit.com/r/learnprogramming/comments/l3k0ln/i_released_my_comprehensive_video_course_on/,0,learnprogramming
8nkkr6,"Today I hit 6 months in learning how to program journey, so here are some tips if you are on this process too ...","I'm following this as curriculum [https://teachyourselfcs.com/](https://teachyourselfcs.com/) and it's awesome.

1 \- Don't just learn a language, learn how to program. Syntax won't help you if you don't think correctly on how to approach a problem. The best way to this imo is to hit up a college intro course to programming, there are a lot online and they emphasize on programming concepts instead of languages. Learning a language after those course is a  piece of cake. And if you want a deeper understanding of programming languages you can continue by studying compilers and how programming languages are made. Avoid udemy unless it's a renown teacher. every random people on this planet  that thinks they can teach can post a course there, it doesn't mean you will learn well from them.

2 \- LEARN MATHS. Seriously LEARN MATHS, from scratch if you need to, it's fine. Programming and computer science are just applied mathematics. You can get away with simple math and not knowing much, but you'll be a way better programmer if you have a good understanding of math. Why you may ask? Because math is pure logic thinking in order to solve problems, and you need that logic thinking, it helps you think differently on how you can approach a problem in order to solve it ... Don't think that you can't do it or that you sucked at school, the brain is a muscle you can work it out, just start with the basics and go on from there. If you're bad it's not your brain or maths' fault, it's yours for learning it incorrectly and not giving it more time and attention.

3 \-  Don't worry about getting a job, worry about how you can be a better programmer, if you are good jobs will be easy to find \(I already have offers and I didn't look for a job\) just by networking, going to meetup and so on ... so work on yourself so you can be better and this apply to everything not just programming.

4 \- Finally don't count on your motivation, it will fade away really really fast. What you need is ""DISCIPLINE"". Keep it up everyday, set some rules you have to follow. Tell your surroundings about your rules so they can call you up if you don't respect them so you can get back at learning again. Trust me it will be worth it ...

Good luck, and thanks to this awesome community. Free education is gold, but you know what? People who help each other to learn more and improve are better ...

Thanks for reading.

Edit 1 \- English is not my native language, so don't hesitate to correct me if there are mistakes. Thanks",1282,202,Lesabotsy,2018-05-31 18:00:53,https://www.reddit.com/r/learnprogramming/comments/8nkkr6/today_i_hit_6_months_in_learning_how_to_program/,0,learnprogramming
8lml9t,I Failed to Self Learn,"I'm hoping sharing my story will make other people realize that learning to code is a marathon, not a sprint. We're all on different paths and shouldn't compare someone else's journey to our own!

I just turned 25 this year and I start my computer science degree this fall. But who cares right? A lot of people start their degree late. What makes this decision different is for the past year and a half I've spent my time learning programming and I failed to land any job.

I've gone through Codecademy, Team Treehouse, Udemy, Coursera, Udacity, CS50 and FreeCodeCamp.  I built some projects here and there and placed them on GitHub. I've spent countless nights reading this sub and [r/cscareerquestions](https://www.reddit.com/r/cscareerquestions/) for tips on white boarding, resumes, books and projects to build. I've attended meet ups and hackathons, and while I did make friends, I did not end up with a job afterwards. 

I've gone the self taught route, and I failed. 

And you know what? That's okay. 

Usually on here you see people share the I got a job post. I rarely ever see I failed to do it on my own post.

Some people code for three months and end up with a job right away. Others go the bootcamp route or have family that own a company they can work for. Would it have been ideal to code for six months and end up with a job at the end? Of course! But that isn't what happened.

A lot of post on here sometimes are people bitter about the experience. They complain they've looked for a job for months or even a year and nothing has happened. I don't want to be that person. 

The path planned didn't work out for me. But in the end I found something I'm passionate about. And I'm excited to start my degree this fall.

Edit: Wow I didn’t think this post would get such attention. People keep bringing up my portfolio, I posted this not to get a portfolio reviewed but to show that sometimes self taught doesn’t work out and that’s okay. Just know you have other options. I had a moment of stupid and felt really bad about the whole experience and deleted my whole GitHub account. I figured these projects weren’t getting me a job anyways so I might as erase them and start over. Yes it was stupid I know.",1284,226,None,2018-05-23 20:21:41,https://www.reddit.com/r/learnprogramming/comments/8lml9t/i_failed_to_self_learn/,0,learnprogramming
mqgxb9,I feel really disappointed in myself because I cannot solve anything on Leetcode without looking at the solutions :(,"I am a fairly new developer and I tried doing the Easy Interview questions and can't solve them :( I feel very upset and feel as if I am not able to do anything and will never be a decent developer :( I'm in Engineering so it's not like my math is bad or I'm stupid. But, I just can't solve these problems and I feel defeated. What can I do other than cry?

&#x200B;

Edit: Thank you for the overwhelming love and support and advice. When even I feel this way again , I will read the comments and see the awards and work until I don't feel it anymore. I want to thank you all from the bottom of my heart for helping me through this!  ❤️",1276,140,Puzzleheaded_WarfBI,2021-04-14 02:03:14,https://www.reddit.com/r/learnprogramming/comments/mqgxb9/i_feel_really_disappointed_in_myself_because_i/,0,learnprogramming
6ywmfs,We're doing a FREE Python Course for beginners AGAIN!,"TL;DR A 4-weeks online FREE Python course for beginners with a real teacher. Every Monday 7PM (Eastern). Sign up here: **[rmotr.com/free](https://rmotr.com/free-python-online-course)**

---

Hey guys and gals! A few weeks ago we did our free Python Course for the first time and it was amazing! We had over 530 students working and learning together. An incredible experience. We're doing now a second edition of the course including new content and updates of things we've learned in the process. If you'd like to read **WHY** we're doing this for free, **[read our original post](https://www.reddit.com/r/learnprogramming/comments/6l7qco/were_going_to_do_a_free_python_course_to_teach/?utm_content=title&utm_medium=user&utm_source=reddit&utm_name=frontpage)**.

The course **starts next Monday, September 11th**. Classes are every **Monday 7PM** (Eastern Time), with a total of 4 classes. There will be homework to work in between classes and projects to practice with other people. It's going to be an online class and you'll be able to ask questions and interact with the instructor constantly.

You can **sign up here: [rmotr.com/free](https://rmotr.com/free-python-online-course)**

### Required knowledge

This is a course for beginners. Not a lot of knowledge is required. What we always recommend is try to do the free part of codecademy (shouldn't take more than a few days): https://www.codecademy.com/learn/python

### Schedule

As said before classes will be every Monday from 7M (Eastern Time).

### Questions

Post your comments here or email us at questions@rmotr.com

**EDIT**: All classes are recorded and can be accessed through our internal platform along with individual assignments and practice to work with. Thanks for your warm reception :).

**EDIT 2**: We're having a few issues with sign ups due to overload (I think). I'm looking into it and I'll let everybody know when it's solved. Have a great weekend y'all!",1283,107,santiagobasulto,2017-09-08 18:29:17,https://www.reddit.com/r/learnprogramming/comments/6ywmfs/were_doing_a_free_python_course_for_beginners/,0,learnprogramming
1jcg0j,"I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it, business planning, etc. Is there interest for something like this?","There are a lot of tutorials out there on the basics of programming when it comes to ""silly things"" like small games, little web applications, etc. All of these are really just simple examples designed to help people learn the basics of programming, but lack when it comes to real world application.

I want to do something more ambitious, and create a tutorial series on the entire process of how one person goes about creating a real world web application from scratch that people actually use, and that actually generates real income.

I would be live streaming the entire process from start to finish, from the point of ""This is an idea I have"" to the point of ""Now money is being deposited into my bank account from this idea."" That means all the programming, business setup and planning, logistics, setting up servers, etc. 

I feel this would be valuable both for those who are looking to obtain real employment in programming related fields, as well as the entrepreneurial types who have an idea but have no idea how to take it to fruition. Both types will benefit from a stronger understanding of what goes into a real functioning web business.

Thoughts?

----

**Edit:** This project has launched! Subscribe to /r/livestreamstartup to watch it live, as well as to watch recordings of past sessions.

Also, feel free to [subscribe to my YouTube channel](http://www.youtube.com/channel/UCbNxlZZVmfP8n84ag-rGpMg) to be notified of new videos as they happen.",1280,183,CarlH,2013-07-30 12:57:31,https://www.reddit.com/r/learnprogramming/comments/1jcg0j/i_am_thinking_about_starting_a_course_soon_on_how/,0,learnprogramming
vc0l7w,Looking for learners / students to mentor!,"Hi, I'm a experienced programmer with knowledge of Python, C++, Java & Javascript. It took me a few years but now I feel very comfortable programming and have worked in the industry, I feel very fortunate. 

I'd like to pay it forward by mentoring some learners. So if you are currently learning programming and would like someone to advise, give feedback, and help you with some difficult topics, let me know! 

I'm not looking to make money, I have enough from my job, just want to help others in their learning.

Please message me or leave a comment if you are looking for a mentor. Let me know what language you are learning, what your current goals are and your current ability. I'll get back to you!

EDIT:

Hey, thanks everyone for your comments and messages!! This really blew up way more than I expected 😅 so unfortunately I can't respond individually to everyone.

I recently quit my job, but I'll be working again in 4 months, until then I have some free time. I think I can handle about 5 students. I'd like to pick a wide range of students from different ability levels and interests.

If there are few students with the same ability, interests and in the same timezone, I will also create a class to do some group mentoring.

So if you have 5 minutes spare, please fill out the form below and I will get in touch if I can mentor you 1-1 or invite you to a class. Thanks!

https://forms.gle/imEkhtXuRHVBTKTu5",1280,262,RLJ05,2022-06-14 10:39:23,https://www.reddit.com/r/learnprogramming/comments/vc0l7w/looking_for_learners_students_to_mentor/,2,learnprogramming
q88xvx,Pro-tip to fight imposter syndrome,"Go to your github.  Find code you committed as close as possible to one year ago today.  Marvel at the stupidity, and be proud of how far you've come.",1277,77,None,2021-10-14 21:25:43,https://www.reddit.com/r/learnprogramming/comments/q88xvx/protip_to_fight_imposter_syndrome/,0,learnprogramming
8nb3q5,"FreeCodeCamp just got an update adding over 1,000 new coding challenges!","You can read the changelog here

https://forum.freecodecamp.org/t/10-major-freecodecamp-improvements-that-are-live-now/192130


TLDR: New lessons, new design, and new security were added

As someone who just started taking coding in their free time a lot more seriously these new lessons are seriously awesome, especially since they finally added lessons for things like react!",1278,86,May_be_a_panda,2018-05-30 18:45:57,https://www.reddit.com/r/learnprogramming/comments/8nb3q5/freecodecamp_just_got_an_update_adding_over_1000/,0,learnprogramming
6wjirl,14 exercises to test your basic to intermediate Python skills,"Link: https://github.com/learnbyexample/Python_Basics/blob/master/Exercises.md

Some of them can be easily solved using built-in functions/methods alone, for ex: anagram/alphabetic-order problems

for few exercises, I've also created programs to automatically check your solution by populating the function(s) - https://github.com/learnbyexample/Python_Basics/tree/master/exercise_files

-------------

**Update:** for reference Python (v3.5.2) solutions: https://github.com/learnbyexample/Python_Basics/tree/master/exercise_solutions",1269,35,ASIC_SP,2017-08-28 13:54:03,https://www.reddit.com/r/learnprogramming/comments/6wjirl/14_exercises_to_test_your_basic_to_intermediate/,0,learnprogramming
gmbkif,A no-nonsense guide: how to code and launch your own tiny website,"link:  [https://tinyprojects.dev/guides/tiny\_website](https://tinyprojects.dev/guides/tiny_website) 

Hi /r/learnprogramming,

I recently got annoyed about how difficult it is to find a decent guide on how to code and launch your own website live on the internet. Every guide these days seems to involve either a 30 minute long video tutorial, telling you to use wordpress, or is an incredibly vague article telling you that step 1 is to ""buy a domain"" then ""figure out what your website is going to be about"".

These are not useful for someone who just wants to learn how to code and get their coded website live on the internet. I created this simple step by step guide that will tell you how to do so in 15minutes. Its aimed more towards Windows, but applies to Mac also. If you have any questions comment below and I'd be happy to help!",1276,109,nachochickens,2020-05-18 22:15:25,https://www.reddit.com/r/learnprogramming/comments/gmbkif/a_nononsense_guide_how_to_code_and_launch_your/,0,learnprogramming
l40z9p,Depression and sadness learning web development,"Im currently learning front end web development (for 2 month now) and I can't even do a simple weather app.

If I look on github to others code I understand it, but it's hard to reproduce it on my own.

I have a job ( it's not in IT) which I hate it from the bottom of my heart, each day I suffer from burnouts, I hate my life and I really want to get into web development, but sometimes (like now) I feel like Im too stupid to do this.

What do you think? Do you have any advice? Thank you very much!

EDIT!

Thank you so much for everybody being so good with me, and you guys gave me great advices!

Tomorrow I will give to all of you upvotes!

You are all my friends and I'm happy I could find such a great community here.

So I know html,css, and javascript.

About javascript what I know is how to manipulate dom, and now I'm working for a better understanding of REST Apis, to fetch data and response from server.

After I posted initially I read a few of your comments and gave me motivation and started to work on this project again, and yes I made it! Of course with soulutions on github, but I did it.

Here the link with the app [https://dorelmarian20.github.io/scoala-informala/WeatherForecast/](https://dorelmarian20.github.io/scoala-informala/WeatherForecast/) 

Tomorrow I will work on the design of the app.

What I need to exercise more is on APIs and how to fetch data send and respons with json.

Thank you once again! I still want to hear more advices from you guys!

Thanks a lot! You have no ideea how much this helps me and how much you helped me!

My life had huge fall after my father death in 2019, but that's another story.

Thanks again!",1272,180,dorelm,2021-01-24 15:05:32,https://www.reddit.com/r/learnprogramming/comments/l40z9p/depression_and_sadness_learning_web_development/,0,learnprogramming
7c7rd5,I just finished writing 9 tutorials on HTML,"Hey Redditors (Redditers? idk...),
I've been creating some tutorials for y'all to learn HTML. I hope you like them, and if you want to discuss, get help from me or anything else we can chat below or you can contact me directly if you want ;)

Anyway, here is the link - https://codetheweb.blog/learn/html/ 

I've worked hard on them and as of now do not make any money on them, so I'd really appreciate if you checked it out ;)",1274,106,CodeTheWebBlog,2017-11-11 10:36:49,https://www.reddit.com/r/learnprogramming/comments/7c7rd5/i_just_finished_writing_9_tutorials_on_html/,0,learnprogramming
1bmm967,My company just decided to stop hiring self taught candidates for junior positions.,"I'm pretty surprised to be honest and did not expect it, especially considering I joined as a junior several years ago completely self taught (then later went on to get my degree as the company paid for it).

We're a big tech company, fully remote, starting pay for juniors is around \~150k USD.

According to upper management, it's because the volume of self-taught applicants is too high (a few thousand per posting) and the quality of self-taught applicants is too low. Apparently a lot of teams have hired self taught developers and it's gone very bad.

So as a result, the company announced Friday that it would no longer be hiring self-taught applicants and instead will require candidates to have a degree in Computer Science, Computer Engineering or Software Engineering.

Anyone else experienced this?",1271,458,cs-grad-person-man,2024-03-24 14:37:59,https://www.reddit.com/r/learnprogramming/comments/1bmm967/my_company_just_decided_to_stop_hiring_self/,0,learnprogramming
ruo5xa,44y/o Nurse..too late to learn to code?,I have been a nurse for the past 10 years. Burt out and looking for a change. Current income is  90k. Would like to maintain or increase. Really interested in software development within a healthcare environment. I know it  never “too late”.  But could I realistically make that transition? Could I become proficient in say a year with ample dedication or am I dreaming?,1272,364,bypassoverload,2022-01-03 00:37:58,https://www.reddit.com/r/learnprogramming/comments/ruo5xa/44yo_nursetoo_late_to_learn_to_code/,0,learnprogramming
gxshh3,Wrote a small program and I feel proud for the first time .,"Finally , Finally i feel like I've used my programming skills for good (my own personal good) .

Our homework basically consist of single correct multiple choice  questions , i made a programme that takes in my answers from a text file and compares them with actual answers that are stored in another text file .

This required me to understand fstream ( i know c++ until now) , which i had a lot of confusion in even though it is basically like iostream . Even though checking the answers manually only require about 10 mins and making this program took literally hours ( because i was using vectors and did a very stupid mistake that lead to "" vector subscript out of range"" ) , i had a lot of fun and gruelling agony and now i feel proud . 

All the other programs I've written till now were basically time pass ( I even named them timepass1, timepass2  ....) , but this seems effort worth put in . 

I took data from text file ,stored it in a vector , and compared values . 

Any tips or any other way i could have tackled this problem ?",1265,58,None,2020-06-06 14:59:28,https://www.reddit.com/r/learnprogramming/comments/gxshh3/wrote_a_small_program_and_i_feel_proud_for_the/,1,learnprogramming
gsyyxe,"If C++ contains all features of C, why isn't C obsolete and we still use it?","I heard that C++ extends C and that we can use C code inside a C++  program. I also read that we can use low level features of C++ to go as  low as C does.

So why do we still use C and it is not obsolete? Why don't just keep C++ and use only its C features when we want to do low level stuff?

Let's say I want to write code for an embedded device (Like a house alarm). I'm only going to use functions, structs, pointers etc. Which means C is a great fit for that kind of applications. 

But I can use functions, structs and pointers in C++ too, can't I? 

Using extra features like polymorphism, inheritance, classes, templates, lambda functions, exceptions etc might add overhead which I understand that, but I can use the subset of C right?",1266,229,SixtySecondsToGo,2020-05-29 19:00:14,https://www.reddit.com/r/learnprogramming/comments/gsyyxe/if_c_contains_all_features_of_c_why_isnt_c/,0,learnprogramming
sgdus9,"if you're having difficulties landing tech interviews, contributing to open-source is a great way to get that real-world work experience.","If you're having trouble landing great interviews because you don't have any experience yet, open-source contributions on your GitHub profile and resume will really help you stand out. The 2017 Open Source Jobs Report found that 60 per cent of hiring managers are seeking to hire open-source talent and FAANG usually hire programmers with experience contributing to open-source. If you're someone looking to increase the chances of landing a job, you should definitely consider contributing to open-source software and adding that to your portfolio! If this is something that interests you we help folks gain real-world work experience by mentoring them into contributing to open-source software. Do let me know and we can have a chat!",1266,60,tatallynote,2022-01-30 17:18:48,https://www.reddit.com/r/learnprogramming/comments/sgdus9/if_youre_having_difficulties_landing_tech/,0,learnprogramming
8w9zun,I Developed my second web app in 28 days live on Twitch to show people that you can build anything with a bit of passion and motivation! Here are my learnings.,"Hi everyone!
You might have read a post similar to this a couple months back. I decided this subreddit would be a nice place to keep a log of all the 28 day projects I work on and the learnings I have found! Again, I want to preface this post by stating that I am in no way trying to self promote something I have made. While I think it would be awesome for people here to check it out and use it, I wanted to post about my experience with creating an application in 28 days and hopefully motivate someone else to do the same.

### About Twitch & FocusBlock
As the title states, I streamed the entirety of my work for this project on Twitch. I have always been enthralled with the concept of Twitch and I really thought it could be an incredible place for programmers to showcase their work. This led me to start a stream that would encourage people to get involved with programming. I have almost three years of experience working with web development, mobile development, and I am mainly self taught. I still have much to learn and I believe the best way of doing that is through projects. This is where the format for my stream comes- start a project from start to launch in 28 days.

As stated in the title this is my second 28 day project and I hopefully (not really) have the hang of churning out this projects. While the format of these projects has become more streamlined there is still a ton of great nuggets of knowledge that I have gained. [FocusBlock](https://focusblock.stream) is a time management tool that is here to help you time block certain tasks and be assisted by others when needed. This can be applied to almost all software engineers, but I hope people outside of this field also find use from it!

### Simple Ideas !== Less Time
When I first started [FocusBlock](https://focusblock.stream) I really felt that the idea was a very simple concept. I was familiar with the entire stack(React, Node.js, MongoDB) I used except React. I always try to use a new piece of tech for every project to always keep pushing myself. As the days went on, I realized just how difficult this project would end up being. This brings me to learning point #1. Simple ideas do not mean you will be breezing by with your project. In the world of computer science its a miracle to have things go right on your first try. There will always be something that comes up and pushes you back. Thats okay! Learn from it and continue on your journey with the mindset that simple ideas !== less time or effort.

### Plan Your Architecture Before Anything 
This learning point is actually similar to one I had in my first project, [SimpleAlerts](https://simplealerts.stream). I felt like I needed to really work on this after that project and I definitely tried hard this time around. I still think I have a lot to learn in this area, but I know it will come with time. Around day 20 I realized that my client side architecture didn't make any sense. I had to spend an entire stream re-writing this flow. This really pushed back a feature that I wanted to get in, but thats alright! The piece of advice I have for this learning point is, you don't need to write code immediately to have a successful project. This planning stage is extremely important because it is the foundation of your project. You want to make sure you understand every piece of your flow and understand why you are doing it. On the flip side, this architecture can change as you start implementing it which is perfectly okay! Do your research and really understand your flow.

### Test Driven Development
You probably have heard this idea of writing tests that essentially end up being the logic of your application. This is something that can save you tons of time at the end of the day and in your development process. [FocusBlock](https://focusblock.stream) unfortunately does not utilize this concept. This is something that I have been trying to get more into as at the end of the day, this would have saved me tons of time. This brings me to learning point #3, having tested code will help you in the long run. This is one of those situations of ""do as I say, not as I do"", but for my next 28 day project I hope to make this a main focus of the application. Another benefit from TDD is that it is used in top tier companies, so learning it now will only set yourself up for success later down the road.

### Conclusion
I wanted to wrap up this post by saying that the programming community is a great one to be a part of. All the people I have interacted with during this project have been more than great. Everyone is willing to help each other out and want to see everyone succeed. If you are afraid to start something like this or even start programming, just remember people are here to support you. One of the reasons why I decided to make FocusBlock open source was to encourage beginners to come and add to the codebase. Consider contributing on Github @ [this repo](https://github.com/PixelogicDev/FocusBlock) if you are interested!

Thanks for taking the time to read this and if you have any questions/concerns please feel free to reach out :)

-Alec",1266,114,adilanchian,2018-07-05 12:19:50,https://www.reddit.com/r/learnprogramming/comments/8w9zun/i_developed_my_second_web_app_in_28_days_live_on/,0,learnprogramming
b6ubht,Free Programming Books,"Free e-books compiled from Stackoverflow posts : [https://goalkicker.com/](https://goalkicker.com/)  


Note :  I'm not the author",1261,78,nevzata74,2019-03-29 07:33:18,https://www.reddit.com/r/learnprogramming/comments/b6ubht/free_programming_books/,0,learnprogramming
mpo1bv,I feel like everything is easier since I started learning basic Python/CS,"I've been doing MIT's Edx Python courses (finished the first one, just started the second) and in just two months I feel like a completely different person. The first 4 weeks took me like 6-8 hours/day of studying, and I was mentally exhausted afterward with no energy for other things. It took me a while to grasp new concepts. I've always been a painfully slow reader/learner.

Fast forward a couple months, and I think all that mental effort has re-wired my brain. I picked up a couple hobbies easily that I couldn't grasp before. Maybe it's because my focus is better; I can focus for a few hours instead of just 15 minutes like before. I can learn something new (ex. knitting techniques) on the first or second try, where it used to be difficult to get right with my best effort.

I get now why they encourage learning something mentally stimulating like music or basic programming as a gen ed. I feel much more capable of everything than I did a couple months ago. At this point, I wanna keep up the work for the other benefits, in addition to the actual programming itself. :)",1263,63,Perelandrime,2021-04-12 21:38:08,https://www.reddit.com/r/learnprogramming/comments/mpo1bv/i_feel_like_everything_is_easier_since_i_started/,0,learnprogramming
q8q3he,bombing my first technical interview made me realize that programming is different than coding,"Hi, I have been learning programming for almost 3 years now in my free time, I had my first technical interview for a nodejs jr position, it had a theory test and a 40 minutes shared screen coding session, in the theory test i did ok, they  told i had good theoretical knowledge for javascript, node and git, then for the practical test they told me the app didn't have to work so the function could be fictitious, they wanted to see the way I approached the problem and my ""speed"", so I had to validate a telephone number with an API, send an error message or if it was a valid telephone number send a text message to that number with another API, if the message was longer than 160 characters I had to split it into several messages and send then separately, they asked for the  function to split the message to work, anyways I could not do anything right, it was a complete mess, but after it, I realize that I really didn't know how to program, I could code apps by looking at examples or other app and change the code to make it do what I needed, but I couldnt really program an app by myself, programming is not coding is more about the general organization and architechture of the code, programming is how are you going to estructure and organize your procedures so that by the time you begin to code you:    
\- know exactly the steps to solve the problem.    
\- each step can integrate and work together without interfering among them.  
\- your code will be easy to separate as modules so you can find bugs or change parts of the code without breaking the entire program.  

I took a class in college called ""process control"" I feel like I need that knowledge now for programming, wikipedia define it as ""a discipline that uses control systems to achieve a production level of consistency, economy, and safety which could not be achieved purely by human manual control"".

so my advice is this, learn to program first, then learn to code, or at least do it at the same time.

Structures and interpretations of computer programs is a good start I think, it uses Lips to teach the examples but  there is a python curse based on that book check this out if you are interested [https://teachyourselfcs.com/#programming](https://teachyourselfcs.com/#programming)

MHO, thanks for reading",1258,137,Diiamat,2021-10-15 14:53:54,https://www.reddit.com/r/learnprogramming/comments/q8q3he/bombing_my_first_technical_interview_made_me/,0,learnprogramming
xcn1s2,"I'm Al Sweigart, author of Automate the Boring Stuff with Python. I'm currently doing an AMA about my latest book on recursive algorithms.","Please post question to the AMA thread rather than on this post. Thank you!

https://www.reddit.com/r/IAmA/comments/xcp6jv/im_al_sweigart_author_of_several_free_programming/

EDIT: Updated the link, there was some minor problems getting the post verified with the AMA mods. It works now.

EDIT: Heyas, I'm done for the day. Thanks to everyone who asked questions!",1257,1,AlSweigart,2022-09-12 20:21:31,https://www.reddit.com/r/learnprogramming/comments/xcn1s2/im_al_sweigart_author_of_automate_the_boring/,0,learnprogramming
9mgizr,Every beginner needs to understand that no one is ever not a beginner,"I've been teaching people how to program on my local FRC team, a high school robotics team. I'm teaching high school freshman and sophomores, although I'm only a senior myself lol. So while I do not have a ton of experience and technology knowledge, I do try to offer a lot of more general advice and help from the perspective of someone who was just in there shoes. I really try to lower the intimidation factor and the self guilt of feeling like you don't know enough. I remember when I started programming I always felt bad for having to look up everything I did and not understand the inner workings of a library. I felt like I wouldn't be a programmer until I knew everything about programming. Although looking back, the best thing I have learned is that no one is ever a good programmer, everyone is always a beginner on some level. There is simply to much programming to learn it all. Programmers simply learn how to learn. 

I have link to the video that made me want to post this. I think this video is definitely worth the 5 minutes to watch and will hopefully help inspire new programmers.

https://youtu.be/YmWMi1kVCG8",1256,183,garrett7621,2018-10-08 16:43:00,https://www.reddit.com/r/learnprogramming/comments/9mgizr/every_beginner_needs_to_understand_that_no_one_is/,0,learnprogramming
7hjkya,How can I start contributing to GitHub projects as a beginner?,"So I have a few semesters of school left and am looking to get some actual coding experience outside my school assignments. I have done a couple projects using github for school, but they really only covered the basics (commits, version control, etc.). Is there any resources or tutorials out there that show how to find projects that are beginner friendly, and the proper way to commit code to them?",1256,54,Hash43,2017-12-04 19:15:08,https://www.reddit.com/r/learnprogramming/comments/7hjkya/how_can_i_start_contributing_to_github_projects/,0,learnprogramming
61e0dq,Anyone interested in a sublime text editor cheat sheet?,"I love sublime but when I first started using it most of the online documentation and tutorials suck ass. 

I'm planning on making a pretty looking, single page cheat sheet that is simple and easy to read. If there's enough interest in this I'm going to make it more presentable and share it. 

**03-29-2017 Release Update!**

MacOSX cheatsheet version is out!!!!

PDF Version: https://github.com/sublime-text-university/cheatsheet

Markdown: https://github.com/sublime-text-university/cheatsheet/blob/master/shortcuts.osx.md

**03-28-2017 Update:**

Content is finalized!

Check out: https://github.com/sublime-text-university/cheatsheet/blob/master/shortcuts.osx.md

Now I will be creating the first version of the PDF for Mac. 

**03-26-2017 Update:**

I finished the three main sections for the content:

* Navigating text
* Selecting text
* Changing text 

See here: https://github.com/sublime-text-university/cheatsheet/blob/master/shortcuts.osx.md
PDF Version (in progress): https://github.com/sublime-text-university/cheatsheet/blob/master/cheatsheet-beta.pdf

**03-25-2017 Update:**

Wow! Okay this took off sooner than I expected. Well, I guess I have to do this now ...

Since there's so much interest in this, I'm going to start laying out the content structure in a public repo called ""cheatsheet"" under the organization Sublime Text University and you guys can follow along and/or contribute :D

Link to cheatsheet repo that I'll be adding the initial content to: https://github.com/sublime-text-university/cheatsheet",1257,188,linovo,2017-03-25 05:06:17,https://www.reddit.com/r/learnprogramming/comments/61e0dq/anyone_interested_in_a_sublime_text_editor_cheat/,0,learnprogramming
x5mcg1,People here need to be realistic.,"Software Engineering salaries are as high as they are because 'software engineer' is not a job very many people are capable of (your reasons as to why are irrelevant), but is in extremely high demand (actually competent software engineers even moreso, but you don't need to be competent to make it in this 'career'), so software engineers get treated like the blacksmiths of the past. Make no mistake, you will not find a aristocrat working as a blacksmith, but it's a lot better than being a serf.

The bottleneck to the supply of software developers is not access to learning resources as is the case in many other areas of study. It's easy to say ""my life is miserable im just gonna learn2code and be able to pay for my child's dental care"", but the fact is: software engineers are only treated well by capitalism because the supply/demand curve favours them currently.

If this is something you want, you need to be either far more capable of this than more people, but also far more driven as well, some combination of the two builds a competent software engineer.",1249,427,None,2022-09-04 12:56:15,https://www.reddit.com/r/learnprogramming/comments/x5mcg1/people_here_need_to_be_realistic/,0,learnprogramming
9zb5mm,The Best Thing You Can Do To Become A Better Developer Is Read Code,"#### Hey guys,

I believe this tip is going to be for people who have at least enough experience under their belts to feel confident writing very small programs. Doesn't have to be a crazy program, but at least something that compiles, executes and isn't from a tutorial.

---

For those who are stuck in a rut of constantly having to look up tutorials for the framework or language you are working with, I recommend reading code on GitHub. You will run into things instantly that you don't understand at all. Pause and go to the documentation for the line of code you are confused on. Keep digging through the documentation until you understand what the line is doing. Move to the next line and continue. 

---

Do this as an exercise daily for an hour and you won't regret it. 

EDIT: There are a lot of hate comments on this post. Allow me to clarify. I am not saying, ""Only read code"". I'm stating that the best exercise you can do to become a better developer is read code. Obviously if somebody is learning to program, they will be writing code. Reading code is often neglected. Please refrain from posting comments such as ""This is stupid. To become a better developer you need to write code"". It's not productive, and you're going to talk somebody out of doing something good for themselves. ",1257,75,portexe,2018-11-22 05:23:20,https://www.reddit.com/r/learnprogramming/comments/9zb5mm/the_best_thing_you_can_do_to_become_a_better/,0,learnprogramming
8808a3,Learning to code by creating arcade games,"Hello /learnprogramming friends,

We've been teaching kids to code python for the last few years and have wrote an instructional platform that helps teach coding concepts in the context of arcade games. The platform has been open sourced and works on Windows, Mac, and Raspberry Pi. 

Give it a shot!

http://predigame.io
",1254,49,predicatemike,2018-03-29 10:35:40,https://www.reddit.com/r/learnprogramming/comments/8808a3/learning_to_code_by_creating_arcade_games/,0,learnprogramming
puhuqp,I just found out I finished my first year of my software engineering degree and I'm so happy,"Due to life circumstances and some bad choices I made, I dropped out of Uni when I was 20, two semesters in mechanical engineering. I was seriously depressed, broke, overworked because I had to keep a full time job while studying. Basically, my life was a dumpster fire. 

But today I found out that I did well in my Programming 1 exam and that I have earned enough credits to go into the next year. I'm so proud of myself. 

I studied so hard for this exam. I did countless problems and watched so many videos about recursion and two dimensional dynamic arrays. I started having dreams about for loops. 

I had no study habits because I did well in high school without trying. I had nobody to push me to be better. I was such a dumb teen. But I guess we all were. 

I'm 24 now. My peers have master's degrees now. I know I'm still young and that I shouldn't compare my situation with other people's, but I had a lot of resentment about my circumstances and having to take care of my family when I was barely an adult. But now we're finally at a point where I can focus all my efforts into getting this degree. 

I'm excited to go into next semester and learn more. I just wanted to share this joy with someone.",1250,109,None,2021-09-24 11:32:49,https://www.reddit.com/r/learnprogramming/comments/puhuqp/i_just_found_out_i_finished_my_first_year_of_my/,0,learnprogramming
a09zro,I made this free innovative tool for learning how to properly read a computer program,"I'm an ex google software engineer turned programming instructor. Over the years I've noticed that my students struggle because they don't deeply understand Javascript and they can't read the code that they write and understand code other people have written. They end up copy pasting a lot without really understanding. To remedy the situation, I've built a tool that shows exactly how a computer interprets Javascript. I don't think there's anything like it. I've tested it in my class and the students loved it. I saw a big improvement in their learning and their ability to code.

&#x200B;

The language taught is Javascript, but it teaches you how most programming languages work. Python, Ruby, Java and Lisp all have functions, objects, references, primitives, frames and a callstack. Once you learn one language deeply, you can learn others very quickly.

&#x200B;

It's completely free. Enjoy :)

&#x200B;

I changed it so that you can try it out as a guest without using your email. However, if you want to keep track of your progress over time, you'll have to login with your email.

&#x200B;

[https://wakata.io](https://wakata.io)",1256,204,rathereasy,2018-11-25 16:49:46,https://www.reddit.com/r/learnprogramming/comments/a09zro/i_made_this_free_innovative_tool_for_learning_how/,0,learnprogramming
166x0dy,Young programmers are scary good?,"I'm 38, have a lead position in a software project and have a few working students in our team.
I'm surprised on how fast they can pick up new technologies, I'm decently proficient in my preferred language and have a good understanding about architecture, but when it comes to new languages/frameworks, I cannot keep up on the rate they produce decent code.

So I'm wondering if more senior programmers have this experience and if this is kind of given and I have to accept it, or if I have just to work harder?

We already had coding back in school, but I did not really dig into it until 30, so I'm wondering if this is also a disadvantage that is difficult to even out later in life?",1250,319,Fly_VC,2023-09-01 04:18:29,https://www.reddit.com/r/learnprogramming/comments/166x0dy/young_programmers_are_scary_good/,0,learnprogramming
gmxmlt,Coding is 90% Google searching or is it?,"As a newbie, A professional programmer once told me this. Are they bullshitting or is it really true?",1248,279,santaWithRedSandals,2020-05-19 21:23:54,https://www.reddit.com/r/learnprogramming/comments/gmxmlt/coding_is_90_google_searching_or_is_it/,0,learnprogramming
mdjcs3,"I feel like I'm not smart enough too learn code for game development, but I really wanna make videogames for a living.","Hello, I'm planning on majoring in game design and development at my college. I wanna be a game designer/ game programmer. Right now, I'm learning the GML (Game maker studio 2) language. But, I feel like I'm not smart enough too learn code professionally like everyone else. It's been my dream to make videogames for years now, but I feel stupid about me not understanding some languages without looking at tutorials.

EDIT: Thank you all so much for your feedback, I feel welcomed here.",1245,247,Wicked_Weaboo,2021-03-26 07:40:16,https://www.reddit.com/r/learnprogramming/comments/mdjcs3/i_feel_like_im_not_smart_enough_too_learn_code/,0,learnprogramming
jqh8vk,How do programs run on their own?,"As a beginner, the programs I write usually run once when I click *run code*, the program runs, and then it stops. That's it. However, programs in the real world don't seem to work that way. In the real world, programs run on their own and are able to react to things as they happen.

Suppose, for example, that  I wanted to make a Java program that updated a database every day at midnight. Whenever I make a program, I click run code, it runs, and then it stops. What's the process for making a program that always runs in the background and is able to execute a task at a specified time?

Is there some way to ""host"" a program on a cloud server and have it run when I need it to, in a way that is beginner friendly and doesn't require paying money for a service? If this is relevant at all, I'm writing Java programs using IntelliJ IDEA.

***Edit:*** Thanks for all the helpful answers. I was able to do what I wanted by building an executable JAR file and scheduling it using the Windows Task Scheduler.",1240,127,OliverHPerry,2020-11-08 18:59:20,https://www.reddit.com/r/learnprogramming/comments/jqh8vk/how_do_programs_run_on_their_own/,0,learnprogramming
gzqxre,That free JetBrains' academy is really helpful! Learning on it makes me actually feels good!,"I really hope it existed earlier and I found it earlier! It's interactive and makes me feel no stress about learning! It's also fun. It also has projects and guides you through it! **The devs must really understand people with ADHD.**

So the goods:

1 no video. Watching studying videos can make me feel stressed. They make me feel bad if I lost my attention. Also, people talking can make my brain think about talkers like their faces or clothes.

2 short and interactive. The guide is short and split! It even hides the rest sections until you click next so it appears even shorter! And the colorful nice design makes the paragraphs separated from each other well. No stress from looking at the web page at all even if it's studying material.

3 It has short questions and small coding practices.  It has nice designed questions that make you realized oh I didn't realize about this or that. And those small coding practices have some parts already written for you in the start stage. So no stress for new learners or stressed learners!

4 It has projects! So many people saying you should find something you feel good working at. But how to find projects matching your study progress? And what do you need to know to do a certain project? This material lets you choose a project to start. The projects are listed by easy levels too. I chose the first project and I was afraid what if it just throws a project in my face. But it let you choose your study level and what studying materials you wanna see.

5 It is well split into stages. For people who can't separate study to be done, it's a HUGE help. This website makes me feel there aren't too many things ahead to learn! And what I'm learning is helping me to do the project I chose to do. And after that, it got fun other things to do. But not stress because it mostly shows you the stages you are doing for the current project. 

6 The You'll complete the track in: X hours feature. I get it will take longer because it will be harder later. But still, it makes me feel good.

&#x200B;

bads: none for now. 

I'm so happy this website exists! I tried the automate boring stuff book and it's a book and feels like I'm studying and makes me bored and afraid of coding at a certain problem. Also, the typical string management chapter is boring like other tutorials. But on this website on the string part I just read, it doesn't mention it at all except type conversion. I think for starters it's good enough. Those big chunky paragraphs about string manipulating always stress me and I feel I have to read it because it's in the book!",1243,57,snowClair,2020-06-09 16:51:00,https://www.reddit.com/r/learnprogramming/comments/gzqxre/that_free_jetbrains_academy_is_really_helpful/,0,learnprogramming
2u3xpe,You should know Networking. Here's a YouTube playlist by Eli the Computer guy who will stuff you full of essential and practical networking knowledge to your hearts content,"YouTube playlist [[YouTube.com]](http://www.youtube.com/playlist?list=PLF360ED1082F6F2A5)

This 29 video playlist from Eli The Computer Guy explains things like cabling, dhcp, dynamic v. static ip addresses, switches v. routers, all types of broadband technologies, subnets etc. etc.

You know all those obscure setting on your router configurations page? This playlist explains these things in great clarity along with essential networking knowledge. It's more geared towards small business people; however, I'm only ever going to manage a residential network and I found these classes fascinating and invaluable

The first seven videos are especially enlightening

Edit> your welcome guys",1237,64,cosmicservantdev,2015-01-29 18:55:55,https://www.reddit.com/r/learnprogramming/comments/2u3xpe/you_should_know_networking_heres_a_youtube/,0,learnprogramming
ajijri,Good YouTube channels for learning how to code?,"Need 1 or some good channels for learning python.
",1242,236,parris1s,2019-01-24 23:13:00,https://www.reddit.com/r/learnprogramming/comments/ajijri/good_youtube_channels_for_learning_how_to_code/,1,learnprogramming
38eq7q,Here's a list of 154 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2015),"This is not the complete list of MOOCs starting in June 2015, just the ones relevant to this community. The complete list of courses starting in June 2015 can be found over at [Class Central (207 courses)](https://www.class-central.com/report/mooc-course-report-june-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)
BEGINNER(34)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Begin Programming: Build Your First Mobile Game](http://www.futurelearn.com/courses/begin-programming?utm_campaign=Courses+feed&utm_medium=courses-feed&utm_source=courses-feed)|Jun 1st|7 weeks|FutureLearn|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/1243/futurelearn-begin-programming-build-your-first-mobile-game#course-all-reviews)
[Programming for Everybody (Python)](https://www.coursera.org/course/pythonlearn)|Jun 1st|10 weeks|Coursera|★★★★★ [(21 reviews)](https://www.class-central.com/mooc/1957/coursera-programming-for-everybody-python#course-all-reviews)
[HTML5.1x: Learn HTML5 from W3C](https://www.edx.org/course/learn-html5-w3c-w3cx-html5-1x)|Jun 1st|6 weeks|edX|★★★★★ [(1 review)](https://www.class-central.com/mooc/3444/edx-html5-1x-learn-html5-from-w3c#course-all-reviews)
[DEV203x: Introduction to Bootstrap – A Tutorial](https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x-0)|Jun 2nd|3 weeks|edX|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/3338/edx-dev203x-introduction-to-bootstrap-a-tutorial#course-all-reviews)
[LFS101x.2: Introduction to Linux](https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2)|Self Paced|8 weeks|edX|★★★★☆ [(9 reviews)](https://www.class-central.com/mooc/1857/edx-lfs101x-2-introduction-to-linux#course-all-reviews)
[INF201x: Windows PowerShell Fundamentals](https://www.edx.org/course/windows-powershell-fundamentals-microsoft-inf201x-0)|Jun 2nd|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3340/edx-inf201x-windows-powershell-fundamentals#course-all-reviews)
[CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x)|Jun 2nd|14 weeks|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3483/edx-cs005x-cs-for-all-introduction-to-computer-science-and-python-programming#course-all-reviews)
[CloudIntro.x: Introduction to Cloud Computing](https://www.edx.org/course/introduction-cloud-computing-ieeex-cloudintro-x)|Jun 3rd|6 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3353/edx-cloudintro-x-introduction-to-cloud-computing#course-all-reviews)
[Usable Security](https://www.coursera.org/course/usablesec)|Jun 8th|6 weeks|Coursera|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1727/coursera-usable-security#course-all-reviews)
[6.00.1x: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0)|Jun 10th|9 weeks|edX|★★★★★ [(22 reviews)](https://www.class-central.com/mooc/1341/edx-6-00-1x-introduction-to-computer-science-and-programming-using-python#course-all-reviews)
[CS101.1x: Introduction to Computer Programming, Part 1](https://www.edx.org/course/introduction-computer-programming-part-1-iitbombayx-cs101-1x-0)|Jun 16th|9 weeks|edX|★★☆☆☆ [(7 reviews)](https://www.class-central.com/mooc/1650/edx-cs101-1x-introduction-to-computer-programming-part-1#course-all-reviews)
[Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(37 reviews)](https://www.class-central.com/mooc/320/udacity-intro-to-computer-science#course-all-reviews)
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-all-reviews)
[Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/831/udacity-intro-to-java-programming#course-all-reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-all-reviews)
[Intro to Point & Click App Development](https://www.udacity.com/course/intro-to-point-click-app-development--ud162?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1481/udacity-intro-to-point-click-app-development#course-all-reviews)
[Mobile Web Development](https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews)
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self Paced|11 weeks|Stanford OpenEdx|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews)
[Making Sense of Data](https://datasense.withgoogle.com/preview)|Self Paced|3 weeks|Others|★★★☆☆ [(7 reviews)](https://www.class-central.com/mooc/1821/making-sense-of-data#course-all-reviews)
[Make Your Own 2048](https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews)
[Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python#course-all-reviews)
[Introduction to Internetworking with TCP/IP](https://open.hpi.de/courses/internetworking2014)|Self Paced|NA|openHPI|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews)
[Introduction to Programming in C](https://onlinecourses.nptel.ac.in/iitk_cs_101/preview)|Self Paced|NA|NPTEL|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/2486/nptel-introduction-to-programming-in-c#course-all-reviews)
[Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★☆☆ [(4 reviews)](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews)
[JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews)
[How to Use Git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|★★★★☆ [(8 reviews)](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self Paced|NA|edX|★★★★☆ [(16 reviews)](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews)
[Intro to Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3253/udacity-intro-to-relational-databases#course-all-reviews)
[Internet History, Technology, and Security](https://www.coursera.org/course/insidetheinternet)|Self Paced|NA|Coursera|★★★★★ [(15 reviews)](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews)
[CS005x: CS For All: Introduction to Computer Science and Python Programming](https://www.edx.org/course/cs-all-introduction-computer-science-harveymuddx-cs005x)|Self Paced|14 weeks|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3483/edx-cs005x-cs-for-all-introduction-to-computer-science-and-python-programming#course-all-reviews)
[CS101: Computer Science 101](http://online.stanford.edu/course/computer-science-101-self-paced)|Self Paced|6 weeks|Stanford OpenEdx|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/2175/stanford-openedx-cs101-computer-science-101#course-all-reviews)
[CS001x: MyCS: Computer Science for Beginners](https://www.edx.org/course/mycs-computer-science-beginners-harveymuddx-cs001x)|Self Paced|6 weeks|edX|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2957/edx-cs001x-mycs-computer-science-for-beginners#course-all-reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|★★★★★ [(24 reviews)](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-all-reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|★★★★☆ [(10 reviews)](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-all-reviews)

INTERMEDIATE(94)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Regression Models](https://www.coursera.org/course/regmods)|Jun 1st|4 weeks|Coursera|★☆☆☆☆ [(1 review)](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews)
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|Jun 1st|4 weeks|Coursera|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|Jun 1st|4 weeks|Coursera|★★★★★ [(1 review)](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Jun 1st|4 weeks|Coursera|★★★☆☆ [(46 reviews)](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews)
[R Programming](https://www.coursera.org/course/rprog)|Jun 1st|4 weeks|Coursera|★★☆☆☆ [(83 reviews)](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Jun 1st|4 weeks|Coursera|★★★☆☆ [(17 reviews)](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Jun 1st|4 weeks|Coursera|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews)
[Networks Illustrated: Principles without Calculus](https://www.coursera.org/course/ni)|Jun 1st|6 weeks|Coursera|★★★★☆ [(1 review)](https://www.class-central.com/mooc/891/coursera-networks-illustrated-principles-without-calculus#course-all-reviews)
[Introduction to Genomic Technologies](https://www.coursera.org/course/genintro)|Jun 1st|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3472/coursera-introduction-to-genomic-technologies#course-all-reviews)
[CS100.1x: Introduction to Big Data with Apache Spark](https://www.edx.org/course/introduction-big-data-apache-spark-uc-berkeleyx-cs100-1x)|Jun 1st|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3026/edx-cs100-1x-introduction-to-big-data-with-apache-spark#course-all-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Jun 1st|4 weeks|Coursera|★★★☆☆ [(46 reviews)](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews)
[R Programming](https://www.coursera.org/course/rprog)|Jun 1st|4 weeks|Coursera|★★☆☆☆ [(83 reviews)](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Jun 1st|4 weeks|Coursera|★★★☆☆ [(17 reviews)](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Jun 1st|4 weeks|Coursera|★★★★☆ [(7 reviews)](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|Jun 1st|4 weeks|Coursera|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews)
[Statistical Inference](https://www.coursera.org/course/statinference)|Jun 1st|4 weeks|Coursera|★★☆☆☆ [(4 reviews)](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews)
[SPD1x: Systematic Program Design - Part 1: The Core Method](https://www.edx.org/course/systematic-program-design-part-1-core-ubcx-spd1x)|Jun 2nd|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3465/edx-spd1x-systematic-program-design-part-1-the-core-method#course-all-reviews)
[DEV201x: Introduction to TypeScript](https://www.edx.org/course/introduction-typescript-microsoft-dev201x-0)|Jun 2nd|6 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3343/edx-dev201x-introduction-to-typescript#course-all-reviews)
[DEV202.1x: Building Cloud Apps with Microsoft Azure – Part 1](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-1x-0)|Jun 2nd|4 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3348/edx-dev202-1x-building-cloud-apps-with-microsoft-azure-part-1#course-all-reviews)
[CLD201x: Introduction to Office 365 APIs](https://www.edx.org/course/introduction-office-365-apis-microsoft-cld201x-0)|Jun 2nd|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3342/edx-cld201x-introduction-to-office-365-apis#course-all-reviews)
[DAT201x: Querying with Transact-SQL](https://www.edx.org/course/querying-transact-sql-microsoft-dat201x-0)|Jun 2nd|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3341/edx-dat201x-querying-with-transact-sql#course-all-reviews)
[DEV204x: Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-0)|Jun 2nd|6 weeks|edX|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/3339/edx-dev204x-programming-with-c#course-all-reviews)
[Software Security ](https://www.coursera.org/course/softwaresec)|Jun 8th|6 weeks|Coursera|★★★★★ [(6 reviews)](https://www.class-central.com/mooc/1728/coursera-software-security#course-all-reviews)
[Cryptography](https://www.coursera.org/course/cryptography)|Jun 8th|7 weeks|Coursera|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1730/coursera-cryptography#course-all-reviews)
[DEV202.3x: Building Cloud Apps with Microsoft Azure – Part 3](https://www.edx.org/course/building-cloud-apps-microsoft-azure-part-microsoft-dev202-3x)|Jun 16th|4 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/3535/edx-dev202-3x-building-cloud-apps-with-microsoft-azure-part-3#course-all-reviews)
[Programming Mobile Applications for Android Handheld Systems: Part 1](https://www.coursera.org/course/androidpart1)|Jun 17th|4 weeks|Coursera|★★★★☆ [(22 reviews)](https://www.class-central.com/mooc/1178/coursera-programming-mobile-applications-for-android-handheld-systems-part-1#course-all-reviews)
[Programming Mobile Applications for Android Handheld Systems: Part 2](https://www.coursera.org/course/androidpart2)|Jun 17th|4 weeks|Coursera|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/3076/coursera-programming-mobile-applications-for-android-handheld-systems-part-2#course-all-reviews)
[Programming Cloud Services for Android Handheld Systems: Spring](https://www.coursera.org/course/mobilecloudprogram)|Jun 17th|6 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3079/coursera-programming-cloud-services-for-android-handheld-systems-spring#course-all-reviews)
[Algorithms, Part I](https://www.coursera.org/course/algs4partI)|Jun 19th|6 weeks|Coursera|★★★★☆ [(16 reviews)](https://www.class-central.com/mooc/339/coursera-algorithms-part-i#course-all-reviews)
[Algorithms: Design and Analysis, Part 1](https://www.coursera.org/course/algo)|Jun 30th|6 weeks|Coursera|★★★★★ [(24 reviews)](https://www.class-central.com/mooc/374/coursera-algorithms-design-and-analysis-part-1#course-all-reviews)
[Design of Computer Programs](https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews)
[Web Development](https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★★ [(11 reviews)](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews)
[Programming Languages](https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(6 reviews)](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews)
[Intro to Algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/364/udacity-intro-to-algorithms#course-all-reviews)
[Software Testing](https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★☆ [(5 reviews)](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews)
[Software Debugging](https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews)
[CSCI 1730 - Introduction to Programming Languages](http://www.cs.brown.edu/courses/cs173/2012/OnLine/)|Self Paced|NA|Others|☆☆☆☆☆ [](https://www.class-central.com/mooc/458/csci-1730-introduction-to-programming-languages#course-all-reviews)
[Intro to Theoretical Computer Science](https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews)
[Intro to Artificial Intelligence](https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/592/udacity-intro-to-artificial-intelligence#course-all-reviews)
[HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews)
[Datenmanagement mit SQL](https://open.hpi.de/courses/sql)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/777/openhpi-datenmanagement-mit-sql#course-all-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|★★★★★ [(1 review)](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews)
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|☆☆☆☆☆ [](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-all-reviews)
[Applied Data Science: An Introduction](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_276927_1)|Self Paced|NA|CourseSites|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1806/coursesites-applied-data-science-an-introduction#course-all-reviews)
[Introduction to Mobile Solution Development](https://open.sap.com/course/mobile1)|Self Paced|NA|openSAP|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1348/opensap-introduction-to-mobile-solution-development#course-all-reviews)
[Intro to Hadoop and MapReduce](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1470/udacity-intro-to-hadoop-and-mapreduce#course-all-reviews)
[Introduction to Software Development on SAP HANA](https://open.sap.com/course/hana1-1)|Self Paced|NA|openSAP|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/1347/opensap-introduction-to-software-development-on-sap-hana#course-all-reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews)
[Intro to Data Science](https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(4 reviews)](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews)
[Data Wrangling with MongoDB](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews)
[Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(7 reviews)](https://www.class-central.com/mooc/1478/udacity-data-analysis-with-r#course-all-reviews)
[Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014)|Self Paced|NA|openHPI|★★★★☆ [(3 reviews)](https://www.class-central.com/mooc/1701/openhpi-parallel-programming-concepts#course-all-reviews)
[Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api)|Self Paced|1 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization#course-all-reviews)
[UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers#course-all-reviews)
[Developing Scalable Apps in Java](https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-in-java#course-all-reviews)
[Java SE - Standart Edition](https://www.universiteplus.com/courses/java-se-standart-edition)|Self Paced|NA|Universiteplus|☆☆☆☆☆ [](https://www.class-central.com/mooc/2420/universiteplus-java-se-standart-edition#course-all-reviews)
[Developing Android Apps](https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2211/udacity-developing-android-apps#course-all-reviews)
[Software Development Process](https://www.udacity.com/course/ud805)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2335/udacity-software-development-process#course-all-reviews)
[Computer Networking](https://www.udacity.com/course/ud436)|Self Paced|12 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2336/udacity-computer-networking#course-all-reviews)
[Knowledge Engineering with Semantic Web Technologies](https://open.hpi.de/courses/semanticweb2014)|Self Paced|NA|openHPI|☆☆☆☆☆ [](https://www.class-central.com/mooc/2038/openhpi-knowledge-engineering-with-semantic-web-technologies#course-all-reviews)
[Practical Numerical Methods with Python](http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about)|Self Paced|17 weeks|Others|★★★★★ [(1 review)](https://www.class-central.com/mooc/2339/practical-numerical-methods-with-python#course-all-reviews)
[Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews)
[Intro to AJAX](https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax#course-all-reviews)
[Data Visualization and D3.js](https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews)
[HTML5 Canvas](https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2999/udacity-html5-canvas#course-all-reviews)
[Intro to iOS App Development with Swift](https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★★★ [(4 reviews)](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews)
[Intro to jQuery](https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery#course-all-reviews)
[Intro to Machine Learning](https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api)|Self Paced|10 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning#course-all-reviews)
[Full Stack Foundations](https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api)|Self Paced|3 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3254/udacity-full-stack-foundations#course-all-reviews)
[Responsive Web Design Fundamentals](https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3255/udacity-responsive-web-design-fundamentals#course-all-reviews)
[Health Informatics in the Cloud](https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3288/udacity-health-informatics-in-the-cloud#course-all-reviews)
[Introduction to SAP HANA Cloud Platform](https://open.sap.com/courses/hanacloud1-2)|Self Paced|6 weeks|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/1346/opensap-introduction-to-sap-hana-cloud-platform#course-all-reviews)
[Next Steps in Software Development on SAP HANA](https://open.sap.com/courses/hana2)|Self Paced|7 weeks|openSAP|★★★★☆ [(1 review)](https://www.class-central.com/mooc/2489/opensap-next-steps-in-software-development-on-sap-hana#course-all-reviews)
[ABAP Development for SAP HANA](https://open.sap.com/course/a4h1)|Self Paced|4 weeks|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/2360/opensap-abap-development-for-sap-hana#course-all-reviews)
[Next Steps in SAP HANA Cloud Platform](https://open.sap.com/courses/hanacloud2-2)|Self Paced|6 weeks|openSAP|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/2056/opensap-next-steps-in-sap-hana-cloud-platform#course-all-reviews)
[JavaScript Testing](https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3351/udacity-javascript-testing#course-all-reviews)
[UIKit Fundamentals](https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3350/udacity-uikit-fundamentals#course-all-reviews)
[LPL: Language, Proof and Logic](https://class.stanford.edu/courses/Philosophy/LPL-SP/SelfPaced/about)|Self Paced|15 weeks|Stanford OpenEdx|☆☆☆☆☆ [](https://www.class-central.com/mooc/2340/stanford-openedx-lpl-language-proof-and-logic#course-all-reviews)
[Responsive Images](https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3352/udacity-responsive-images#course-all-reviews)
[Machine Learning](https://www.coursera.org/learn/machine-learning)|Self Paced|NA|Coursera|★★★★★ [(70 reviews)](https://www.class-central.com/mooc/835/coursera-machine-learning#course-all-reviews)
[iOS Networking with Swift](https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3393/udacity-ios-networking-with-swift#course-all-reviews)
[Authentication & Authorization: OAuth](https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3523/udacity-authentication-authorization-oauth#course-all-reviews)
[Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3524/udacity-browser-rendering-optimization#course-all-reviews)
[Developing Scalable Apps in Python](https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/3525/udacity-developing-scalable-apps-in-python#course-all-reviews)
[iOS Persistence and Core Data](https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3526/udacity-ios-persistence-and-core-data#course-all-reviews)
[How to Make an iOS App](https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3527/udacity-how-to-make-an-ios-app#course-all-reviews)
[Android Performance](https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3455/udacity-android-performance#course-all-reviews)
[Android Development for Beginners](https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|★★★☆☆ [(2 reviews)](https://www.class-central.com/mooc/3579/udacity-android-development-for-beginners#course-all-reviews)
[Advanced Android App Development](https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3580/udacity-advanced-android-app-development#course-all-reviews)
[Android Design for Developers](https://www.udacity.com/course/android-design-for-developers--ud862?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3581/udacity-android-design-for-developers#course-all-reviews)
[Android Ubiquitous Computing](https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3582/udacity-android-ubiquitous-computing#course-all-reviews)
[Google Play Services](https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api)|Self Paced|4 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3583/udacity-google-play-services#course-all-reviews)
[Gradle for Android and Java](https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3584/udacity-gradle-for-android-and-java#course-all-reviews)
[JavaScript Design Patterns](https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api)|Self Paced|6 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews)

ADVANCED(26)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[15.071x: The Analytics Edge](https://www.edx.org/course/analytics-edge-mitx-15-071x-0)|Jun 2nd|12 weeks|edX|★★★★★ [(20 reviews)](https://www.class-central.com/mooc/1623/edx-15-071x-the-analytics-edge#course-all-reviews)
[Hardware Security](https://www.coursera.org/course/hardwaresec)|Jun 8th|6 weeks|Coursera|★★★☆☆ [(5 reviews)](https://www.class-central.com/mooc/1729/coursera-hardware-security#course-all-reviews)
[Text Mining and Analytics](https://www.coursera.org/course/textanalytics)|Jun 8th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/2736/coursera-text-mining-and-analytics#course-all-reviews)
[Finding Hidden Messages in DNA (Bioinformatics I)](https://www.coursera.org/course/hiddenmessages)|Jun 8th|4 weeks|Coursera|★★★★★ [(5 reviews)](https://www.class-central.com/mooc/3289/coursera-finding-hidden-messages-in-dna-bioinformatics-i#course-all-reviews)
[Assembling Genomes and Sequencing Antibiotics (Bioinformatics II)](https://www.coursera.org/course/assembly)|Jun 8th|4 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/3290/coursera-assembling-genomes-and-sequencing-antibiotics-bioinformatics-ii#course-all-reviews)
[CS190.1x: Scalable Machine Learning](https://www.edx.org/course/scalable-machine-learning-uc-berkeleyx-cs190-1x)|Jun 29th|5 weeks|edX|☆☆☆☆☆ [](https://www.class-central.com/mooc/2965/edx-cs190-1x-scalable-machine-learning#course-all-reviews)
[Interactive Computer Graphics with WebGL](https://www.coursera.org/course/webgl)|Jun 29th|10 weeks|Coursera|☆☆☆☆☆ [](https://www.class-central.com/mooc/2781/coursera-interactive-computer-graphics-with-webgl#course-all-reviews)
[Artificial Intelligence for Robotics](https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(8 reviews)](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews)
[Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/326/udacity-applied-cryptography#course-all-reviews)
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|7 weeks|openHPI|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management#course-all-reviews)
[Intro to Parallel Programming](https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api)|Self Paced|12 weeks|Udacity|★★★★☆ [(2 reviews)](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews)
[Interactive 3D Graphics](https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(2 reviews)](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews)
[Functional Hardware Verification](https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-all-reviews)
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Self Paced|NA|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-all-reviews)
[Machine Learning 3—Reinforcement Learning](https://www.udacity.com/course/ud820)|Self Paced|4 weeks|Udacity|★★★★☆ [(1 review)](https://www.class-central.com/mooc/1849/udacity-machine-learning-3-reinforcement-learning#course-all-reviews)
[In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup)|Self Paced|NA|openSAP|★★☆☆☆ [(1 review)](https://www.class-central.com/mooc/2458/opensap-in-memory-data-management-in-a-nutshell#course-all-reviews)
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api)|Self Paced|2 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews)
[Model Building and Validation](https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api)|Self Paced|8 weeks|Udacity|★★★☆☆ [(1 review)](https://www.class-central.com/mooc/3256/udacity-model-building-and-validation#course-all-reviews)
[Advanced Operating Systems](https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api)|Self Paced|5 weeks|Udacity|★★★★★ [(1 review)](https://www.class-central.com/mooc/1016/udacity-advanced-operating-systems#course-all-reviews)
[High Performance Computer Architecture](https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1018/udacity-high-performance-computer-architecture#course-all-reviews)
[Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1024/udacity-computability-complexity-algorithms#course-all-reviews)
[Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api)|Self Paced|7 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1025/udacity-knowledge-based-ai-cognitive-systems#course-all-reviews)
[Introduction to Recommender Systems](https://www.coursera.org/learn/recommender-systems)|Self Paced|NA|Coursera|★★★☆☆ [(6 reviews)](https://www.class-central.com/mooc/1029/coursera-introduction-to-recommender-systems#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api)|Self Paced|16 weeks|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/3531/udacity-machine-learning#course-all-reviews)
[Machine Learning](https://www.udacity.com/course/ud262)|Self Paced|NA|Udacity|☆☆☆☆☆ [](https://www.class-central.com/mooc/1020/udacity-machine-learning#course-all-reviews)",1236,67,dhawal,2015-06-03 18:53:30,https://www.reddit.com/r/learnprogramming/comments/38eq7q/heres_a_list_of_154_free_online_programmingcs/,1,learnprogramming
12y7bvn,"I landed my first job as a Software Developer and after my first day, I don't know what to think of it","I'm 29, with a background in retail management. I recently graduated from a Web Dev bootcamp called Lighthouse Labs in Dec 2022. I have to mention, I really really loved web development. My fav part of bootcamp was working with a team on projects (midterm and final) and so rewarding to see the final product.

After bootcamp, I got promoted to manager at the place where I was working part-time while enrolled in this bootcamp. It was okay but I was looking for my first opportunity in tech. I still went at it. Kept coding every day and building projects. I built two different projects and did coding challenges. I did get a few interviews but I bombed the coding challenges due to a lack of DSA knowledge.

Well, surprisingly I applied for this position that was in my city and I got a call the next day to schedule an interview. The interview was with the IT manager and it was kind of technical. Some questions about SQL, and Javascript. I got the call the next day asking for my references and then the day after I was offered the job. I have to be honest I did agree to get paid the lower end of what they were offering, I wonder if that played a part in them hiring me.

Today was my first day and it was not what I expected. So, the team is made up of 4 IT guys and 1 Software Developer (that's me). I was just given this documentation that was super vague. The code base is all over the place with jQuery, bootstrap, .net core MVC, razor pages, C#, and Javascript. A lot of things I didn't learn in bootcamp. The guy who interviewed me just shared with me the repos on Github and told me to go through them. That's all I did all day. I had no idea what I was looking at.

I'm really planning to look for something else. Honestly, I miss being the manager in my previous position because most days I would just sit in my office and work on coding since the workload there wasn't much. I have come to understand that my passion and my expertise are in Front end Development. Did anyone have a similar experience? Is this a pretty common experience? Does anyone have any advice they'd like to share? I'm all ears!

&#x200B;

&#x200B;

UPDATE: 288 comments?!?!? Thanks for all your advice and for taking the time to comment. I don't care how rude or straightforward or pro-degree you were. You are entitled to your opinion and I definitely got something from 99% of you! 

I asked a question to my manager today and he just told me to email the guy who worked there before me and see if he could answer it for me lol. 

I'm not entirely new to a completely new code base. Lighthouse Labs did do this intentionally when we were into learning Ruby. The instructions were non-existent and it was a complete app and we had to add features to it. The way I got through was by pushing the assistance request button and talking to mentors. That is what I feel like I'm lacking! I'm actually learning C# and .NET core MVC on the job but I have so many questions about the code base but there's no one to answer these questions. 

One of the guys that graduated with me got a Junior level position and posted his two-week progress and said how stressed and overwhelmed he was BUT with the help of his senior devs and teammates, he was able to pull through. This is basically the support I'm missing. Another thing is that the team is pretty lame lol. Maybe it's because I have a retail background and I love to chat with people and hear stories and connect but no one here is even remotely interested to connect. Oh, and this is an onsite position which....I HAVE NO IDEA WHY! 

But I've decided to keep going at it. It will either be get fired or gain some experience that will at least be good on paper.  

I loved reading all your first dev stories and appreciate all the advice that was given!!

I absolutely love coding and I don't think one bad experience is going to let me change that! I'm excited to work with people that are just as passionate as I am about it and hopefully will be collaborating and working with them someday! ",1238,304,Shot-Craft5144,2023-04-25 03:55:07,https://www.reddit.com/r/learnprogramming/comments/12y7bvn/i_landed_my_first_job_as_a_software_developer_and/,0,learnprogramming
110v8kw,Cheat sheet repository for beginners.,"
Hello all! I’m slowly building a repository for cheat sheets spanning various topics in tech. Feel free to bookmark or watch it as it will grow large over time. 

https://github.com/lyudaio/cheatsheets

EDIT:

I have spun up a git based wiki if you find github hard to navigate: https://cheatsheets.lyuda.io",1232,45,lyudaio,2023-02-13 00:53:14,https://www.reddit.com/r/learnprogramming/comments/110v8kw/cheat_sheet_repository_for_beginners/,0,learnprogramming
o56qwn,Why do most websites have unreadable html code?,Sometimes I inspect the html code of websites (Like Twitter) and it all looks completely random for me. One div randomly nested into 20 other divs (with no purpose than nesting it) and classes or id names that look randomly generated. For example: Those are the classes of one div I inspected on Twitter:  css-18t94o4 css-1dbjc4n r-1niwhzg r-1778zho r-sdzlij r-1phboty r-4iw3lz r-1xk2f4g r-109y4c4 r-ero68b r-vkv6oe r-1ny4l3l r-1udh08x r-wwvuq4 r-u8s1d r-o7ynqc r-6416eg r-lrvibr r-92ng3h,1232,137,DasEvoli,2021-06-21 21:59:37,https://www.reddit.com/r/learnprogramming/comments/o56qwn/why_do_most_websites_have_unreadable_html_code/,0,learnprogramming
dyko5d,Protip: Create a StackOverflow account,"I've been a professional data scientist for years, and here's a tip: create a StackOverflow account and upvote every useful question and answer. That way, when you Google the same thing in the future, you'll see which posts you previously found useful.",1233,160,TrueBirch,2019-11-19 13:51:56,https://www.reddit.com/r/learnprogramming/comments/dyko5d/protip_create_a_stackoverflow_account/,0,learnprogramming
wi66j5,I Finished The Odin Project - My Story and The Pitfalls Of Analysis Paralysis,"EDIT: I meant to say that I finished the Odin Project Foundation section, not the entire course. Sorry for any confusion.

**My Background**

I’m a 16 year old (turning 17 this year) high school student. I’m about to enter my senior year of high school and am planning on taking Computer Science as my major in college. When I was younger and asked what I wanted to be when I grew up I said computer science on a whim since I liked computers in general (although I never really took the time to learn programming).

I began my journey for The Odin Project back in January and finished the Foundations portion of the course a few weeks ago accumulating a total of around 80 hours. I primarily only worked on TOP on weekends and Fridays. Thinking back on it, I should have tried to fit in more time on weekdays even if I only worked for 5 minutes.

**So how did I start?**

I first tried to learn programming in late 2020 and decided to learn web development on a whim after looking through some reddit posts (I was doing nothing in quarantine and thought I might as well try to learn something useful). I bought Angela Yu’s Web Development Course and followed it for a few months although I really struggled with understanding the underlying concepts and gave up. I was stuck in “tutorial hell” and was just copying the code given to me without understanding any of it. Fast forward to the summer of 2021 I stumbled upon Harvard’s CS50 course which reignited my motivation for learning programming. The course was phenomenal and I really enjoyed learning a low level language like C that helped me understand concepts like pointers. The course was difficult for me which I both loved and despised (I’ll admit I ended up cheating on one of the exercises on week 1). I stopped following the course after I got to week 6 as I really didn’t like changing languages and I transitioned my focus back to school. After this I started working on a Java MOOC since I was attempting to “prepare” myself for taking AP CSA (which I’m taking this year). I ended up quitting this in a few months as well due to a lack of motivation and real purpose.

**Ok so how did I manage to take and quit three separate programming courses?**

The truth is that I struggled with *analysis paralysis* \- I spent hours obsessing over what the “best” programming course and best programming language I should be focusing on. The truth is that I would have been more efficient and learned more had I just picked any of these courses and stuck with them.

**My experience with The Odin Project**

At the beginning of 2022 I decided to give web development another chance as I had an urge to build something (a personal website) and web development seemed like the best way of doing so. When I started TOP I immediately found it beautiful. While I enjoyed my time with CS50, I hated having to watch two hours of lectures for each lesson. Being able to digest the content by reading documentation felt much faster and got me into the habit of being able to look up documentation when I was working on projects and got stuck.

While I initially found it tedious and annoying to have to use a virtual window I’m happy I was forced to as it allowed me to learn Git and use the command line which made developing far easier than on windows.

With the projects involved in The Odin Project, I liked being able to build something tangible that I could play with; this kept me motivated while allowing me to apply the knowledge I gained. Seeing my progress bar for the course steadily increase was a great visual motivator that encouraged me to finish the course.

I’ll admit that I struggled on certain parts of this course. Particularly with one of the Javascript exercises I ended up quitting for a month due to my frustration *only to solve it within an hour* when I came back to TOP. Analysis paralysis was still an issue I dealt with and I briefly quit TOP for a weekend to try game development. Even after finishing Foundations, I agonized over whether to take the full stack javascript or ruby path before finally settling on javascript.

**Main Takeaway**

Back to now, I just wanted to share that I finally completed a programming course (even if it took me far longer than I should’ve).

If there’s one takeaway I hope to leave it’s this - If you are constantly changing courses or just face analysis paralysis in general **pick a course…and finish it**. I promise you will waste more time attempting to optimize the “correct” course or pathway than if you had picked the “wrong” path and finished it as programming concepts transfer to different languages.

As stated in the FAQ - Find some small project you’re interested in (for me it was building a website) and pick the language best suited for said project.

Here's a link to [my Github](https://github.com/sunridden), if you want to take a look at my projects!",1232,116,sunridden,2022-08-07 03:44:15,https://www.reddit.com/r/learnprogramming/comments/wi66j5/i_finished_the_odin_project_my_story_and_the/,0,learnprogramming
mwuu2n,Today I finally escaped tutorial hell!!!!!,"I am so happy!!!!!! First of all, I want to give a big thanks to this sub for sharing outstanding resources to learn from, and all people that have been nice in advising/helping me.

Today is the first time I sat down and coded something after being stuck in tutorial hell since I started this journey. I was jumping from source to source and learning a little bit of everything, never diving in too deep into a concept. There's so much to learn that jumping from source to source seems inevitable. But the kind people of this sub and [r/ProgrammingBuddies](https://www.reddit.com/r/ProgrammingBuddies/) advised me that the best way to learn was to implement it, to just **practice practice practice**! I was scared at first, but they decided to help, so we did one of the challenges from [frontendmentor.io](https://frontendmentor.io/). I was in charge of doing the HTML part. It's nothing big, but I DID IT ALONE WITH NO HELP AND THAT FELT REALLY GOOD!!! I didn't realize I learned so much in the past couple of months because I *never* put it to use, but damn it felt good when I was coding and I actually knew what the hell I was doing. And all that commit/push crap in git seemed daunting as hell, but actually doing it wasn’t that bad!!!!

I'm really fucking happy and I'm not scared anymore. It isn't much, but I feel way more confident than I did at first. It feels awesome to have results from your hard work, and coding is visual evidence of everything you've learned and know! Now I'm going to start my own projects and dive in headfirst with coding and figure out the syntax as I'm going. It's a long journey, but damn it's amazing.

If you're scared of jumping into the unknown waters of coding, DON’T BE! You probably know more than what you give yourself credit for. You learn as you go, and you'll be quicker to spot your bugs and understand why your code isn't working if you're actually writing it. Looking at other people's codes from tutorials is helpful but only to an extent.

edit: Happy coding!

edit 2: wow!! I posted this and went to bed, it blew up. Thanks for the awards and upvotes! I hope you got some motivation out of it",1233,118,sachiewang,2021-04-23 13:06:31,https://www.reddit.com/r/learnprogramming/comments/mwuu2n/today_i_finally_escaped_tutorial_hell/,0,learnprogramming
eldkxh,"Recruiter told me position I was interviewing for a Javascript role, turns out she meant Java. I have three days to prepare.","I am a new grad looking for a job and currently in the process with a company for a junior backend engineer role. I was under the impression that the position was Javascript but instead it is actually Java. My general programming and ""leet code"" skills are pretty good, but my understanding of Java is pretty shallow. How can I use the next three days to best improve my general Java knowledge? Most resources on the web seem to be targeting complete beginners. Maybe a book I can skim through in the next few days?

Edit:

A lot of people are saying ""the company is a sinking ship don't even go to the interview"". I just want to add that the position was always for a ""junior backend engineer"". This company uses multiple languages and the recruiter just told me the incorrect language for the specific team I'm interviewing for. I'm sure they're mainly interested in seeing my understanding of good backend principles and software design, it's not a senior lead Java position.",1229,179,CriticalImpress,2020-01-07 16:14:04,https://www.reddit.com/r/learnprogramming/comments/eldkxh/recruiter_told_me_position_i_was_interviewing_for/,0,learnprogramming
pxg54p,How to start programming from zero,"*I hope mods are okay with this. I also published this text on some other page so it is not stolen.*

[Get FREE eBook - learn programming: from zero to your first Python program](https://marinsborg.com/learn-coding/)

## Intro

It is 2021 and there are so many people working as programmers. If you want to be part of that world, you need to know the programming basics. 

Why is this post better than most of the other posts or video courses on the internet? And also how can this be a post about programming when there is not any programming language in it? 

Well, there is a difference between learning to program and learning some programming language. You could 'learn' two programming languages and there is a chance that you would still not know how to program.

Learning a programming language is the same as learning a foreign language. Learning to program is like learning to think. When people are born they have the ability to think. That ability naturally gets better and better with time. That means most people would react in the same way in the same situation no matter where are they from. For example, if they see an accident on the road, they would call an ambulance. The only difference is that they would use their own language to describe the accident. 

**The ability to think is not bounded or dictated by some language**. If you learn a new language, your ability to think would not change at all. The same thing is with programming. Programming concepts are independent of programming languages.

 In this post, I will teach you programming concepts that will help you learn any programming language. Learning this way is much faster and you are not distracted by the syntax of the programming language.

## How to think like a programmer?

This is a question that is asked by many people who wants to start with programming. And to answer it straight away - you need to use an **algorithmic approach** to solving problems. What does that mean exactly? I will explain it in this chapter.

[Computer programming](https://en.wikipedia.org/wiki/Computer_programming) is the process of designing and building an executable computer program. A computer program is a **collection of instructions** that can be executed by a computer to perform a specific task. 

In layman's terms, programming is just telling a computer what it needs to do. To describe to a computer what it needs to do, programmers use various programming languages. 

Now, I would require you to take a pen and paper or just open your favorite text editor and write down all steps you need to do to make a bowl of cereals. I will do the same thing, but I will do it in a way that is similar to describing it to a computer. After you are done you can compare yours and my result:


 My result:

 - go to the fridge and open its door
 - take out a bottle of milk and put it on the table
 - close the fridge door
 - go to a cupboard (or cabinet) and open its door
 - take out a cereal box and bowl and put those to the table, next to milk (this step depends on where you are keeping bowls and cereals)
 - close the cupboard door
 - go to the drawer with spoons and open it
 - take one spoon and close the drawer
 - go to the table, put the spoon next to a bowl
 - grab cereal box and take the plastic bag out of it (let's assume that cereals are inside a plastic bag)
 - pour cereal out of the plastic bag into a bowl until the bowl is half-full or one-third full
 - return the plastic bag to the cereal box (or throw it away if it is empty)
 - grab a bottle of milk and open it
 - pour milk over the cereal that is inside the bowl until the bowl is half full
 - close the bottle of milk and put it on the table
  
And this is it, breakfast is ready. 

This is how programmers think. You can see that it is not anything complicated and that everybody can do that. In the steps above there are some extra cases that I left out for simplicity of demonstration like what if milk is not in the fridge, what if you run out of milk or cereal, what if you don't have any clean spoon or bowls, what if you dropped and broke a bowl, etc. 

But you got the idea. And in the following video, you will see what happens if you are not specific and detailed when you are writing instructions (or code). Check out this video:

https://www.youtube.com/watch?v=cDA3_5982h8

This is how programming works most of the time. You know what you have to do, you write code for that, and then you test does it work what it needs to do. If not, then you know that you did something wrong. You change your code and try again until you get the right solution.

## Algorithm

In this chapter, I will explain things in a formal way. 

An [algorithm](https://www.verywellmind.com/what-is-an-algorithm-2794807) is a defined set of step-by-step procedures that provides the correct answer to a particular problem. 

The algorithm needs to satisfy the following conditions to be valid:

- same inputs always need to produce the same output
- must be unambiguous meaning that is explicitly defined and only one interpretation is possible
- must be finite meaning that it needs to be done in finite time and use finite space

The best example of an algorithm that you saw in your life is a meal recipe. You know how long it will take to cook that meal, what groceries you need, and in what order you need to prepar them. And if you follow that recipe twice and make the meal in the exact same way both times you will get the same meal.

To solve tasks with programming, the first thing we need to do is to devise an algorithm. When you are doing that, it is a good idea to write it down. There are two ways to write an algorithm - with flowchart and with pseudocode.

### Flowchart

A [flowchart](https://en.wikipedia.org/wiki/Flowchart) is a type of diagram that represents a workflow or process. A flowchart can also be defined as a diagrammatic representation of an algorithm, a step-by-step approach to solving a task. 

Each flowchart consists of its building blocks. To understand a flowchart, you first need to know what each building block means. I created this simple table so you can always return here until you learn them all. 

https://www.marinsborg.com/wp-content/uploads/2022/04/symbols-table.jpg.webp

As you can see, there are not a lot of them. Some other exists but they are not important right now. I will show you how to solve tasks using only these symbols. Let's start with examples.

### Sequence

Instructions in programs are executed in the sequence in which they are written. Let's create a flowchart for a simple task in which the user will input two numbers and the program will print out a sum of those two numbers.

https://www.marinsborg.com/wp-content/uploads/2022/04/sequence-diagram.jpg.webp

### Branching

If some part of code in the algorithm we need to execute only in case if some condition is fulfilled then we need to use branching. With branching, we can split the code into two or more paths. To show an example of branching let's create a flowchart for a program that takes the user's input which is a number and prints ""Number is positive"" or ""Number is negative"".

https://www.marinsborg.com/wp-content/uploads/2022/04/branching.jpg.webp

### Loops

Sometimes in code, we need to do the same thing several times. We always have two choices. One is to write the same code several times and the other is to use a loop. The problem with writing the same code several times is that is it not clean and it is time-consuming. That is why we should use loops.

In computer programming, a loop is a sequence of instructions that is continually repeated until a certain condition is reached. Most of the time we write a loop with some kind of a counter so the loop knows how many times it needs to execute the same code and when to stop. Let's create a flowchart for a program that takes a number as the user's input and prints all (whole) numbers between 0 and that number.

https://www.marinsborg.com/wp-content/uploads/2022/04/loop.jpg.webp

As you can see, the loop repeats three steps: checking if variable A is lower than variable Counter, print value of variable Counter, and increase the value of variable Counter by one.

**Now try to solve this task by yourself:** Make a program that takes the user's input and check if it is number 0. If it is not, then print the square of that number and if it is 0 then finish the program. 

You can check the solution on Reddit.

### Variables

In previous tasks I always mentioned variables but I never explained what it is. Variables are locations in memory that have some name and in which we save data from the input. The value of each variable can be changed during program execution. To access the value of a variable we only need to write its name. 

Each variable has a name, a value, and a type. I will talk about data types a bit later. To assign value to a variable we need to write the name of the variable then equality sign '=' and then the value.

For example: 

To assign a value 10 to a variable with the name 'age' we just need to write ```age = 10```.

If we want to change the value of the variable 'age' we can do it in the same way ```age = 30 ```. That is called re-assigning.

It is always a good idea to name variables in a descriptive way instead of using just one letter like 'A' or 'x'.

### Data types

In computer science and computer programming, a [data type](https://en.wikipedia.org/wiki/Data_type) or simply type is an attribute of data that tells the computer how the programmer intends to use the data. I will not bother you with the details, you just need to remember these five common data types:

- Integer (int) - this data type is used for whole numbers. For example int age = 20 or int size = 10
- String - this data type is used for text or sequence of characters. For example string name = ""John Doe"" or string sentence = ""Today is a sunny day."" Usually, a string is always surrounded with quotation marks
- Character (char) - this data type is used for a single letter. char letter = 'a'
- Float - this data type is used for numbers that contain a decimal point. For example float number = 3.14
- Boolean (bool) - this data type is used for True or False only ( yes or no, 0 or 1). For example bool flag = True

As I mentioned before - Each variable has a name, a value, and a type. When I write 

```int age = 10```

int is the type of the variable, age is the name of the variable, and 10 is the value of that variable.

### Arithmetic operators

In programming, you can use arithmetic operators between variables or some concrete value. Addition, subtraction, multiplication are the same as in math and division is a bit different.

For example, you can write this: 

```sum = a + b -> this will save the sum of values a and b into variable sum```

```c = d - 7 -> this will save the result of subtraction to variable c```

```result = 15 * 3 -> this will save 45 in variable result```

There are three 'types' of division: 

```x = a/b -> this is real division```

```y = 13 DIV 5 -> this is integer division and it will save 2 in variable y```

```z = 13 MOD 5 -> this is remainder and it will save 3 in variable z```

### Relational operators

In computer science, a [relational operator](https://en.wikipedia.org/wiki/Relational_operator) is a programming language construct or operator that tests or defines some kind of relation between two entities. These include numerical equality (e.g., 5 = 5) and inequalities (e.g., 4 ≥ 3).

The result of the evaluation is either true or false. Relational operators are used for branching which I explained above.  

Operators are: equal to (==), not equal to (≠), greater than (>), less than (<), greater than or equal to (≥), less than or equal to (≤). 

### Boolean operations

Boolean operations come from [Boolean algebra](https://en.wikipedia.org/wiki/Boolean_algebra) in which which the values of the variables are either true or false (1 or 0). I don't want to bother you much with Boolean algebra but there are three main operations you need to know about:

- AND - conjunction - the result of this operation is true only when both conditions are true, otherwise false
- OR - disjunction - the result of this operation is true when either of the conditions is true
- NOT - negation - this operation inverts the value of the condition. If the condition is true then negation will result in false and vice versa.

Boolean operations are also mostly used for branching and can be combined with relational operators. For example, if you have a task in which you need to check if the number is lower than 50 and it is not 7 then you would do that in a flowchart like this:

https://www.marinsborg.com/wp-content/uploads/2022/04/branching-operator.jpg.webp

And this is it. If you have understood everything so far **you can say that now YOU can think like a programmer**. This is the bare minimum you need to know to start with programming. This is the foundation on which you build more and more knowledge. 

You might notice that we did not start with any programming language. It is because everything above can apply to most programming languages. Now when you understand the foundation you can easily start with any programming language. 

If you do not understand some part or you need extra explanation you can always search on Google or you can ask me on Reddit

I will give you some tasks to practice, something like homework. I will publish solutions and explanations to those tasks on Reddit in near future.

### Homework tasks

To solve these tasks you will use the knowledge from above. For each task, you need to draw a flowchart. You can draw flowcharts online on [diagrams.net](https://app.diagrams.net/)

1. Create a program that allows to user to input three numbers and print the product of that three numbers.
2. Create a program that allows to user to input a number. Print if that number is odd or even. Hint - you need to use the remainder operator.
3. Create a program that allows to user to input a number. Multiply that number by 2 and print it out. Repeat multiplication and printing until the result of the multiplication is not larger than 1000.
4. Create a program that prints all numbers between 1 and 100 that are not divisible by 7 and are divisible by 5.
5. Create a program that allows to user to input a number. If the number is 0, end the program and print ""The end"". Otherwise, multiply that number by itself and check if that new number is larger than 1000. If yes then print ""Extra large number"". If the number is larger than 500 then print ""Large number"", otherwise print ""Small number""

## Next steps

Once you are done with the practice tasks above you might ask what are the next thing to do or learn. It is obvious you can't do much with just a knowledge of drawing flowcharts. 

Now you can select one programming language and learn its syntax. I would recommend learning Python or JavaScript. Both languages are easy to set up on your computer and syntax is straightforward. For know, if you are at this stage of programming experience, I would recommend you to pick either Python or JavaScript and not C#, Java, or any object-oriented programming language. 

If you want to learn JavaScript and explore web development with it, you can start with [The Odin Project](https://www.theodinproject.com/paths/foundations/courses/foundations). It is a website that will walk you through the installation of proper tools, explain how the web works, how to use git and there are basics in HTML, CSS, and JavaScript. If you like to watch videos you can find many good JavaScript tutorials on YouTube.

If you want to learn Python which is a good programming language for multiple stuff you can follow this book - [Automate the boring stuff with Python.](https://automatetheboringstuff.com/#toc) It starts with Python basics and progresses into some real-world problems that are easily solved with Python. If you don't like it, you can always look for videos on YouTube. 

## Conclusion

In this post, I explained to you the fundamentals that you need to know to start with programming. These fundamentals are applicable to most programming languages and now you need to pick one and learn its syntax.

Programming is not hard as it might seem. You need to be patient with yourself, invest some time and effort in understanding the basics. 

I just want to point out the importance of starting with easier tasks and then progressing towards some bigger project you might want to build. You can not learn some foreign language over the night but you will get better and better with it over time - it is the same with programming.

When you learn the syntax of some programming language try to solve tasks from the homework chapter with that programming language.",1229,117,marinsborg,2021-09-28 21:15:51,https://www.reddit.com/r/learnprogramming/comments/pxg54p/how_to_start_programming_from_zero/,0,learnprogramming
ksajsk,what it is like to know nothing about programming,"I started as a trainee in a small research and development company. I told them i know literally nothing and i don't expect any payment. I just want to learn. It was the truth. 

They wanted me to write a Lo-Ra server when i first contacted them. Cool, what is it? I had no idea. I didn't even know what pin was, or any other component. So i said, ""I am gonna make a game"". Well, nobody cared for sure.

I started with coding snake in a C language on a raspberry pi. I was learning C and Linux at the same time. I up to challenge and went for pins. Okay, now i can light a led. So how about a button. Can i press buttons so they can change the I/O pins? Well, here it comes 'interrupts'. Okay, but i didn't understand anything. But it works, so move on. Then they told me if i am interested reading a Time of Flight sensor. Okay, what is it gonna measure tho? Are we gonna make something fly then calculate the time? Well, they said you are gonna request info from the sensor over I2C. Hmm, i don't think I2C is something real. Well, it was. I find a ToF library from internet, then tried to work on it. They helped me wire the sensor to raspberry. And code was working. I was like, 'woooaaa i did that'. 

Then i was like, snake game with buttons is boring. How about if i control the snake with ToF sensor. Well, it was really fun but was tougher than my job. After I stopped playing with games, and sensors, I said i am ready for a Lo-Ra server. I read about it, and i told myself i can do it. It took me a month to get an answer from it, even my girl respond quicker than that. I lied, i don't have a girl. Finally it was working, with a couple flaws, like only responds to first message, then stops. Well, i figured it out why, i was only storing the first message things, and using them for all messages. So it was practical, but was not correct and totally useless. They told me, how about if you store them in a database. Noooo, i don't like databases, they are too complicated for me. Only thing i stored in database was my tears. Then i stopped working on a Lo-Ra server.

Also, i like to mention how i code, well it's gonna be short, like my codes. I couldn't figure out how to add couple .c and .h files into the makefile and compile them. So i was adding all files into the one .c file then compiling it. This did take like a year, now i am capable of seperating the files, what a huge improvement right there.

Well, almost two years passed after i was trainee, since then i involved in 3 big projects and got pay raise like 5 times.  I don't even ask for it. Then they offered me a huge money, because i had army duty, and i could pay for it instead joining the army. They paid all of it, but i will pay half back.

TLDR: I learned a lot, I love my job, and i hope it loves me back.",1230,97,VVasa,2021-01-07 10:19:08,https://www.reddit.com/r/learnprogramming/comments/ksajsk/what_it_is_like_to_know_nothing_about_programming/,0,learnprogramming
e2egoy,A very good comprehensive tutorial to learn python,"The link below serves as a quick crash course both on the Python programming language and on the use of Python for scientific computing.

[Python Tutorial](http://cs231n.github.io/python-numpy-tutorial/)

There is also a jupyter notebook version where you can directly run and play around with code.

[Jupyter Notebook Version](https://colab.research.google.com/github/kuleshov/cs228-material/blob/master/tutorials/python/cs228-python-tutorial.ipynb)",1234,27,vrajshah11,2019-11-27 10:51:43,https://www.reddit.com/r/learnprogramming/comments/e2egoy/a_very_good_comprehensive_tutorial_to_learn_python/,0,learnprogramming
7cgbo1,When you should start applying for a developer job,"Hey there all

I wrote this to a friend and though to be maybe useful to some one here

this is one of those questions that can be (and probably will be) answered in 1000 ways theres no one truth out there. So Ill share my philosophy on those kind of stuff.

So Im a firm believer in ""jumping to the deep water"" and even in this group Im on the extreme side. Meaning you need to put your viking helmet and go to war as soon as possible like a beast. You feel that you are not good enough yet- F*$% it. Your friends and family telling you ""listen you just started no one will hire you like this"" - F#*& it. 

You don't care, you study as hard as you can and you start look for a job like a beast, on all fronts. linkedin, newspapers what ever works in your country. If you see some job that requests this and that years of experience in a language/ tech you just started study you say- F*$ it and apply to that job (unless they specifically look for a senior). 

then if they give you a challenge as a home test you are not sleeping until you got it done. even if turns to be a pile of none working crap and its way above your current skill you still do it (with your crazy person helmet on).

Eventually, and it will happen just a matter of time, some company will find you, as a crazy beast warrior, very very worth taking, because they will see that you are a fighter with a spark in your eyes and people like this kind of people because they can take you as a junior relatively cheep and train you to be a monster. Its a win win to everyone.

There is a lot of opportunities like that you just need to be in the water long enough and the only way to do it is to not care about failing.

By not caring I mean not in a ""Im such a rebel, dont care"" style. But really dont care. you go to an interview, you dont care because you know its out of your league and you gonna fail. you go only for the experience and challenge. Because remember your crazy hat.

I started learn programming from scratch 2.5 years ago after a 1-2 months of some python and some Ruby on Rails I felt there is a glass top  of what I can get from online tutorials and i need to get a job, I new very little but I had my crazy viking hat on so I said F#*& im gonna crash it. I sent my laughable CV to anyone and I mean any job opportunity, I went to every interview. 

Eventually (after less then 2 months) I stumble upon this great dude with a small company. We talked, he was super nice
and he gave me a challenge in python. My hat was on and I charged on it. it was way way over my league. 
But after 5 sleepless days I made it work. it was a crappy written code but it worked and they hired me on a junior salary. Couple months later, he told me they preferred me over some other guy who was a python programmer. Because my crazy hat, because I had the spark...

Anyway 2.5 year fast forward with that philosophy, today Im a full stack programmer, I do projects in react, react native, android/java, angularjs, angular 4, ioinc, node, golang. I work full time as a freelance developer in my own business. and yet i still feel I know nothing..

The moral of this story is that you will always feel not ready and unqualified for a coding job, ALWAYS.
but the best thing is to put your viking hat and charge as fast as possible. If you are asking these kind of questions Im assuming you are way way more ready then you think.

So just stop giving a F*$%# and charge! the best way to qualify for a coding job is to have production experience in one

those are my two cents
hope it makes sense 

PS: the viking hat is a metaphor, dont come to an interview wearing a viking hat :)
",1235,150,KittenOfMine,2017-11-12 16:29:04,https://www.reddit.com/r/learnprogramming/comments/7cgbo1/when_you_should_start_applying_for_a_developer_job/,0,learnprogramming
79955d,Great Channel To Learn Calculus + Linear Algebra,"Hello. 

Just wanted to share this gem with you all for those of you who are trying to learn more about calculus and linear algebra. He animates concepts really well, and I was shocked at how much I understood what he was talking about having taken calculus 1 and 2, 2 years ago. I’m sure some of you probably already know who he is, but for those who don’t here you [go.](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw) 

Have fun learning and continuing to code!",1227,74,ReignNFire,2017-10-28 08:53:26,https://www.reddit.com/r/learnprogramming/comments/79955d/great_channel_to_learn_calculus_linear_algebra/,0,learnprogramming
m6bprc,Full Stack Open 2021 is Out,"# Deep Dive Into Modern Web Development 

### Full Stack Open 2021


Link here: [https://fullstackopen.com/en/](https://fullstackopen.com/en/)

##### About: 

> Learn React, Redux, Node.js, MongoDB, GraphQL and TypeScript in one go! This course will introduce you to modern JavaScript-based web development. The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js.

##### Prerequisites: 

> Participants are expected to have good programming skills, basic knowledge of web programming and databases, and mastery of basic use of the Git version management system. You are also expected to have perseverance and a capacity for solving problems and seeking information independently.\
\
Previous knowledge of JavaScript or other course topics is not required.

Edit: Wow, my first award, thank you!",1233,117,Temptation2019,2021-03-16 15:32:35,https://www.reddit.com/r/learnprogramming/comments/m6bprc/full_stack_open_2021_is_out/,1,learnprogramming
hkjzuo,I didn't pass my probation (Junior dev role),"I just got confirmation from my boss that I didn't pass my probation, I was told at this point (3 months) they expected me to handle simple task and medium levelled task independently. I struggled a lot but I felt like I had just started to 'get' it. Unfortunately, I got it too late and will be let go. I am upset, but I am still determined to learn programming and hopefully get a new job during these crazy times. I hope I can find something soon, I start working on my CV and projects tonight lol.

Question: When applying for new jobs, what reason should I give for only working for months? I’m assuming having three months worth of work experience is better than none.

EDIT: I was not expecting this much attention lol. Thanks for all the kind messages, it has really lifted my spirits. Sorry if I don't reply to you, I can't get through so many messages!",1228,229,1ClaireUnderwood,2020-07-03 14:27:58,https://www.reddit.com/r/learnprogramming/comments/hkjzuo/i_didnt_pass_my_probation_junior_dev_role/,0,learnprogramming
grgpdq,I wasted 3 days debugging,"Hi everyone, if you're having a bad day listen here:

 I wasted more than 50 hours trying to debug an Assembly code that was perfectly working, I had simply initialized the variables in the C block instead of doing it directly in the Assembly block.

I don't know if I'm happy or if I want to cry.

Edit: please focus on the fact it was assembly IA-32",1223,161,stevescola,2020-05-27 09:44:43,https://www.reddit.com/r/learnprogramming/comments/grgpdq/i_wasted_3_days_debugging/,0,learnprogramming
kage1z,"Dear experienced programmers, what skills do you recommend a self-learner know if he/she wants to get hired as a junior developer or intern?"," I’m a self-learning programming student looking to get hired. That’s it. I just need money to survive and build a life for myself and my family. Life has been really hard on me and I’m willing to learn everything I need to to perform both at industry standard (or possibly even at a over-performance level.) I consider myself intelligent and capable (I speak four languages English, Spanish, Chinese, and Indonesian. This is just to show my linguistic mental capabilities.)

But as far as programming goes I don’t really know jack (maybe a little HTML and CSS).

Does anyone have any book recommendations for learning hire-able coding skills? I am leaning towards learning Python and SQL first since I am interested in databases and algorithms and those two seem like flexible coding languages that any company will find useful, but I understand some companies have proprietary languages they use within their businesses that I should probably pick up too. (GO, Ruby, etc.,)

I was also gifted a free 3 month membership to CodeAcademy Pro because I lost my job because of COVID and they were giving out free memberships to people who were affected by the pandemic and am looking to extract as much knowledge from that program as possible.

Is there any advice or resource tools an experienced programmer could give me, a self-learning programmer, so I could one day get hired as a Junior Developer and get paid a decent salary and have decent health insurance for once in my damn life? I also live in Seattle, WA near a lot of big tech companies too if that matters at all! (everything is Work-At-Home now so IDK if that matters!)

Edit: Wow! Thanks for all the buzz and conversation! I’m trying to read, learn and reply to your messages, but I’m currently at work delivering holiday packages across the city of Seattle! (I’ve been delivering packages for work ever since I’ve gotten laid off!)",1227,198,HireMePlsGoogle,2020-12-10 14:40:36,https://www.reddit.com/r/learnprogramming/comments/kage1z/dear_experienced_programmers_what_skills_do_you/,0,learnprogramming
9ps6n9,Step by Step content to learn Python programming from Scratch,"Hi Guys,

Checkout the free video series with Github repo, for getting started with Python programming. Those who already know Python can ignore the post :) But I think it is worthwhile to share this for those who want to get started.

&#x200B;

**Video Series Link -** [https://www.edyoda.com/resources/videolisting/98/](https://www.edyoda.com/resources/videolisting/98/)

**Github Link -**  [https://github.com/zekelabs/Python-code-](https://github.com/zekelabs/Python-code-)

&#x200B;

**About edYoda - www.edyoda.com**

We are a bunch of geeky dreamers trying to provide free structured quality Course Content. We believe in democratizing education and will be soon out with super-awesome upgrade :)",1222,68,iamarmaan,2018-10-20 07:30:53,https://www.reddit.com/r/learnprogramming/comments/9ps6n9/step_by_step_content_to_learn_python_programming/,0,learnprogramming
uajnkd,Lets not act like getting a software developer job is easy for everyone,"I am curious for others experiences for finding their first role as a software developer. Too often do I scroll on reddit and see people posting their wonderful experiences yet I see few posts about bad experiences. I will share my experience as it has been a uphill battle that I am still undergoing. I write this not defeated but eager to keep pressing forward and learning. I am a recent graduate with an associates degree in computer programming. Previous to my education, I spent time learning the Java language and worked on various topics completing a good range of projects. Overall, I have been learning and practicing my development skills for three years now.  I won't go into too much detail about what I know and or my current plan. The fact is since graduating I have been applying to multiple companies ranging from sole tech based to companies in the manufacturing industry. Out of the 100+ places I have applied to, I have managed to land 5 actual interviews. I have made it to the second round with 4 and made it to the final with one. My most recent interview landed with a job offer but was rescinded due to a previous DUI that happened 6 years ago. The problem was that Canada disallows entry to non citizens with DUIs. I would have had to occasionally travel to the HQ based in Canada...such a sinking feeling. I am 25 and have been working hard to make the career change into software development but if anything this has been the most difficult process I have ever undergone. It seems my age, no actual job experience, and not having a bachelor degree causes my resume to get looked over. I know that eventually that my time will come and I will find my opportunity. To others reading that might be having similar issues all I can say is keep going. Don't give up. Keep learning and happy coding!

****update!!!
I finally after much practice and hard work was offered and hired as a software engineer for a company!!! 

Thank you to everyone on this thread for the advice and words on encouragement. All in all if I can do it so can you! Good luck and happy coding!",1220,309,Gothams_Joker,2022-04-24 01:23:40,https://www.reddit.com/r/learnprogramming/comments/uajnkd/lets_not_act_like_getting_a_software_developer/,0,learnprogramming
e97w6e,"My 59 y/o Mom wants to start coding! Looking for recommendations on a solid, beginner targeted textbook to give to her.","Hello fellow programmers!

As the title says, my 59 y/o mother wants to learn how to code. Some background information, my mom has never done any coding before, and this information about programming would all be pretty new to her. And though she's a little old fashioned, she is very problem solving oriented in her thinking. In the early days of the internet when I was a child, she managed to set up our entire home network and computer by herself and would fix whatever technical issues we used to have. Hell, until I was in high school I'd come to her whenever I thought my computer had a virus and ask her what to do. Along with that, she knew how to fix our plumbing, how to work on our cars, and how to beat 007 Goldeneye for N64 when my brother and I would get stuck so at this point, I think she's unstoppable when she decides she wants to do something.

The textbook I'm looking to find for her I'd like to be:

* About using the C# language and .NET Framework
* Targeting absolute beginners
* Can be used as a reference to the language syntax
* (Would be nice) has examples on making games (WinForms?). She likes puzzle games and thought it would be fun making them :)

Looking for any recommendations you all may have!

&#x200B;

**EDIT:** Thank you guys, definitely will check out these books. I like the video suggestions and will pass them along, just went the route of a formal textbook because she likes reading and learns well that way. Also I was pushing C# because that's mostly what I work with, and I'd feel more comfortable guiding her through it when she has questions. I just don't know Python well enough at this moment to be able to teach it. I know C# may not be as beginner friendly, but I think she can handle it and if not I'll do my best to fill in the blanks :)",1221,124,BioExtract,2019-12-11 14:38:45,https://www.reddit.com/r/learnprogramming/comments/e97w6e/my_59_yo_mom_wants_to_start_coding_looking_for/,0,learnprogramming
d4ipmw,Anyone else learning programming to fill the time at a boring desk job?," Instead of squandering the hours of downtime at my bs job on mindless Redditing , I'm learning to code. Going great so far, and I get hours of practice every weekday,

It's like a reverse bootcamp, where I'm being paid to learn development.

Can't believe I didn't think of this sooner.",1218,161,mystikaldanger,2019-09-15 10:18:07,https://www.reddit.com/r/learnprogramming/comments/d4ipmw/anyone_else_learning_programming_to_fill_the_time/,0,learnprogramming
b5p0ei,Podcasts or videos of good programmers solving problems out loud and explaining their logic?,"Anyone have any good resources of coders talking through their code (maybe while coding live)?  A colleague mentioned he watched a series a while ago where someone was live streaming their development of code and talked through all the decisions, or another series where good programmers were posed problems and had to solve it out loud on the spot.  

Really I'm interested in anything that lets me listen to the logic behind decision making.  Thanks!",1216,88,scribby182,2019-03-26 12:20:15,https://www.reddit.com/r/learnprogramming/comments/b5p0ei/podcasts_or_videos_of_good_programmers_solving/,0,learnprogramming
ufg6zk,There are too many posts on this subreddit that amount to reassurance-seeking,"It's evident that a very large population of people on this sub are beginners themselves. Asking people on here ""if I do X will I get a job?? what do you guys recommend???"" is like going to a high school science class and asking how to get into a physics grad program. What insight are you expecting to discover from people who don't know you, don't know your situation, and are largely beginners themselves?

And for the love of god the mods need to start reminding people there's a search feature, I don't need to continue to see ""is odin project good??? \[crowd says yes\]"" 5 times a day until climate change takes us all.",1213,205,Revolutionary_Dot334,2022-04-30 17:48:31,https://www.reddit.com/r/learnprogramming/comments/ufg6zk/there_are_too_many_posts_on_this_subreddit_that/,0,learnprogramming
nd09s0,Teacher looking to add coding to high school,"I am a math teacher working at a small 7-12 grade school with about 450ish students. It's a secondary Montessori public school, which is a freaking unicorn. I have a lot of flexibility to add new skills or interests for students through weekly clubs or a once a year two week intensive elective. I'm new to this school and have asked around about if we do anything with coding and the common response I get is ""we really should.""

So I have a weird background. My degree is in mechanical engineering and I worked as a mechanical engineer for the power gen industry for ten years before going nuts and switching to teaching high school math through lateral entry two years ago. I have some exposure from college to C/C++ and Matlab. I also got to enjoy using a variety of proprietary and industry programs as an engineer that have a coding element, like ANSYS. I also dabbled in Python when I was debating switching from engineering to data analysis. I have one key resource for being able to learn new material and pass it on to students: summers that I like to spend on developing hobbies and interests.

I read through the FAQ and know that I could probably start with C or C++ or Python, I could get into a decent comfort zone with it and help students out. And they wouldn't be bad languages to start with for application, though I would want to just pick one. 

My mind is going so many places with this and I guess I just need to sort out the specifics and direction of this. If I put out an offering for a club, does it make sense to pull the kids who have dabbled on their own and give them a place to grow and collaborate? I know that we have students who know far more than me. Or should I make it open to those with no experience and differentiate how each kid is handled? As my abilities are limited (and will incrementally get better, with a jump after each summer) should I be more of a facilitator to provide resources and a space for collaboration across ability levels? What's a good high school project to focus on if I want them to collaborate?

Sorry to seem so clueless about this. I'm 36 and while I try to stay up on what the students like, I do not know the niche interests of high school programmers and I bet there are a few on here. I would survey students, but the timing of when you have to propose a club and when they can actually elect to take it is weird. I plan to ask around more next year. I also want to make sure that my inexperience won't be detrimental. Maybe I should learn up more before I attempt this, for example.

And if you did enjoyed coding in high school and are now using it in a career, given total freedom to decide how a club would be run, what would you wish you had access to?

I have so many more questions and ideas, but this is already a wall of text, thanks.

Edit: I just want to say that this group is super supportive and I'm glad I asked this here. So many great ideas, and feel free to keep them coming. I'm going to research and ask around for interest/resources at my school then put a proposal to admin during this next year and hope to have something up and running by the next school year. It's a process, but I want to start small and keep it growing in the long run. I will definitely be following this sub for help and ideas as I increase my knowledge to try to help the students.",1217,257,chrisdub84,2021-05-15 14:36:37,https://www.reddit.com/r/learnprogramming/comments/nd09s0/teacher_looking_to_add_coding_to_high_school/,1,learnprogramming
c6bx5b,Check out my ethical hacking with Python coding tutorial!,[https://youtu.be/qattlDUVNj8](https://youtu.be/qattlDUVNj8),1217,45,Joseph_Delgadillo,2019-06-27 22:20:11,https://www.reddit.com/r/learnprogramming/comments/c6bx5b/check_out_my_ethical_hacking_with_python_coding/,0,learnprogramming
c4uqy7,Learning C first has made learning any other language SO MUCH easier,"This may be just another appreciation post, but I have to get it out somewhere.

I just started learning Python and I covered basic stuff working with strings, printing output, lists, tuples, sets, loops, if statements etc, and I'm just blown away by the simplicity of the language, I honestly cannot express enough how much easier it is comparing to C. 

For example, if I want to sort a list of integers in Python all I need to do is use sort() method on that list. In C I would need to implement an actual sorting algorithm such as Bubble/Merge/Insertion sort. Or if I want to find a min/max of a list. In Python there's already a function for that and in C, again, I would need to implement an algorithm for finding min/max element of an array.

It might seem like I'm exaggerating, but at one point I wanted to cry tears of joy because of the pop() method. I remember pulling my hair out because I couldn't figure out how a linked list operates and how exactly is memory freed when using pop, but in Python all I need to is call pop() method and I'm set.",1216,166,None,2019-06-24 20:09:21,https://www.reddit.com/r/learnprogramming/comments/c4uqy7/learning_c_first_has_made_learning_any_other/,0,learnprogramming
8uzofx,For people who live in the Bay Area - I'd like to teach you programming for free,"**Edit:** I'm a bit overwhelmed with the response. I'm figuring things out. I've replied to some people in the thread but if you're looking for a specific answer send me a message and give me some time to reply. This is a lot for me to handle right now.

----------

**Who am I?**

I recently graduated with a Master's in Computer Science where I mainly focused on Machine Learning. I was given the award for best teaching assistant of the year. I also taught several weekend workshops when I was in college, with the largest one being attended by about 100 students (from freshmen to seniors). I've been working as a software developer for a year, but I've been programming probably since I was 10. I've been told I'm good at teaching and I like doing it.


**Is it really free?**

Yes. I'm using this post to gauge interest. I will hunt for a suitable location (probably in East Bay) depending on how many people are interested. If you have suggestions for what kind of location would be best suited for this please let me know. All you have to do is bring your laptop and get yourself to the location. Literally the only thing you will pay for is your travel costs. There are no hidden costs, I'm not promoting my Twitter or my Patreon or my Twitch or anything at all.

**What's the plan?**

Ideally, I'm hoping you've taken at least one CS course in your life. I would want to start past the basics such as conditionals and loops, but wouldn't mind teaching these if required. Either way, I'm hoping to push people in to the deep end pretty early on.

I'm planning a curriculum but the intention is to teach students to create a web app (~~React + Python, probably~~ TBD). I don't know how long the course will last, but I was thinking of weekly classes (maybe 1 - 2 times a week) lasting a few months. Again, I'm waiting to see how people respond.

If you have any questions I'm happy to answer them.",1214,368,Mutinix,2018-06-30 05:17:11,https://www.reddit.com/r/learnprogramming/comments/8uzofx/for_people_who_live_in_the_bay_area_id_like_to/,0,learnprogramming
2xxzce,Here's a list of 135 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2015),"This is not the complete list of MOOCs starting in March 2015, just the ones relevant to this community. The complete list of courses starting in March 2015 can be found over at [Class Central (255 courses)](https://www.class-central.com/report/mooc-course-report-march-2015/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER(32)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Fog Networks and the Internet of Things](https://www.coursera.org/course/fog)|Mar 2nd|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/2731/coursera-fog-networks-and-the-internet-of-things#course-all-reviews) 
[Data Analysis and Statistical Inference ](https://www.coursera.org/course/statistics)|Mar 2nd|10 weeks|Coursera|[5](https://www.class-central.com/mooc/1349/coursera-data-analysis-and-statistical-inference#course-all-reviews) (12 reviews)
[CAMSx: Computing: Art, Magic, Science](https://www.edx.org/course/computing-art-magic-science-ethx-camsx-0)|Mar 3rd|8 weeks|edX|[NA](https://www.class-central.com/mooc/2195/edx-camsx-computing-art-magic-science#course-all-reviews) 
[Code Yourself! An Introduction to Programming](https://www.coursera.org/course/codeyourself)|Mar 9th|5 weeks|Coursera|[NA](https://www.class-central.com/mooc/2938/coursera-code-yourself-an-introduction-to-programming#course-all-reviews) 
[ENGRI1210x: The Computing Technology Inside Your Smartphone](https://www.edx.org/course/computing-technology-inside-smartphone-cornellx-engri1210x)|Mar 10th|8 weeks|edX|[NA](https://www.class-central.com/mooc/2809/edx-engri1210x-the-computing-technology-inside-your-smartphone#course-all-reviews) 
[An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/course/interactivepython2)|Mar 27th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/3196/coursera-an-introduction-to-interactive-programming-in-python-part-2#course-all-reviews) 
[CS 101: Building a Search Engine](http://www.udacity.com/overview/Course/cs101)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/320/udacity-introduction-to-computer-science#course-all-reviews) (33 reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|NA|openHPI|[4](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews) (1 review)
[UNSW Computing 1 - The Art of Programming](https://www.openlearning.com/courses/unsw/computing1)|Self Paced|12 weeks|OpenLearning|[NA](https://www.class-central.com/mooc/553/openlearning-unsw-computing-1-the-art-of-programming#course-all-reviews) 
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|[4.7](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-all-reviews) (3 reviews)
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/640/program-arcade-games-learn-computer-science#course-all-reviews) 
[Semantic Web Technologies](https://open.hpi.de/courses/semanticweb)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/615/openhpi-semantic-web-technologies#course-all-reviews) 
[Introduction to Programming in Java](https://www.udacity.com/course/cs046)|Self Paced|10 weeks|Udacity|[3.8](https://www.class-central.com/mooc/831/udacity-introduction-to-programming-in-java#course-all-reviews) (5 reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|[4](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-all-reviews) (2 reviews)
[Introduction to Salesforce App Development](https://www.udacity.com/course/ud162)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/1481/udacity-introduction-to-salesforce-app-development#course-all-reviews) 
[Mobile Web Development](https://www.udacity.com/course/cs256)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-all-reviews) 
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Self Paced|11 weeks|Stanford OpenEdx|[4.3](https://www.class-central.com/mooc/1580/stanford-openedx-db-introduction-to-databases#course-all-reviews) (3 reviews)
[Making Sense of Data](https://datasense.withgoogle.com/preview)|Self Paced|3 weeks|Others|[3.3](https://www.class-central.com/mooc/1821/making-sense-of-data#course-all-reviews) (7 reviews)
[Make your own 2048](https://www.udacity.com/course/ud248)|Self Paced|NA|Udacity|[1](https://www.class-central.com/mooc/1952/udacity-make-your-own-2048#course-all-reviews) (1 review)
[Programming Foundations with Python: Learn Object-Oriented Programming](https://www.udacity.com/course/ud036)|Self Paced|4 weeks|Udacity|[4](https://www.class-central.com/mooc/2013/udacity-programming-foundations-with-python-learn-object-oriented-programming#course-all-reviews) (2 reviews)
[Introduction to Internetworking with TCP/IP](https://open.hpi.de/courses/internetworking2014)|Self Paced|NA|openHPI|[4](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-all-reviews) (1 review)
[An Introduction to SAP HANA](https://open.sap.com/course/hanaintro1)|Self Paced|4 weeks|openSAP|[NA](https://www.class-central.com/mooc/1894/opensap-an-introduction-to-sap-hana#course-all-reviews) 
[Introduction to Programming in C](https://onlinecourses.nptel.ac.in/iitk_cs_101/preview)|Self Paced|NA|NPTEL|[1](https://www.class-central.com/mooc/2486/nptel-introduction-to-programming-in-c#course-all-reviews) (1 review)
[Cambridge GSCE Computing Online](http://www.cambridgegcsecomputing.org/)|Self Paced|NA|Cambridge University Press|[5](https://www.class-central.com/mooc/2780/cambridge-university-press-cambridge-gsce-computing-online#course-all-reviews) (1 review)
[Intro to HTML and CSS](https://www.udacity.com/course/ud304)|Self Paced|3 weeks|Udacity|[NA](https://www.class-central.com/mooc/2659/udacity-intro-to-html-and-css#course-all-reviews) 
[JavaScript Basics](https://www.udacity.com/course/ud804)|Self Paced|3 weeks|Udacity|[3](https://www.class-central.com/mooc/2660/udacity-javascript-basics#course-all-reviews) (1 review)
[How to Use Git and GitHub](https://www.udacity.com/course/ud775)|Self Paced|3 weeks|Udacity|[4.7](https://www.class-central.com/mooc/2661/udacity-how-to-use-git-and-github#course-all-reviews) (3 reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x)|Self Paced|NA|edX|[4.3](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-all-reviews) (11 reviews)
[Intro to Relational Databases](https://www.udacity.com/course/ud197)|Self Paced|4 weeks|Udacity|[NA](https://www.class-central.com/mooc/3253/udacity-intro-to-relational-databases#course-all-reviews) 
[Internet History, Technology, and Security](https://www.coursera.org/course/insidetheinternet)|Self Paced|NA|Coursera|[4.8](https://www.class-central.com/mooc/335/coursera-internet-history-technology-and-security#course-all-reviews) (13 reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|[4.8](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-all-reviews) (24 reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|[4.3](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-all-reviews) (8 reviews)

INTERMEDIATE(85)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Full Stack Foundations](https://www.udacity.com/course/ud088)|Self Paced|3 weeks|Udacity|[NA](https://www.class-central.com/mooc/3254/udacity-full-stack-foundations#course-all-reviews) 
[Responsive Web Design Fundamentals](https://www.udacity.com/course/ud893)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/3255/udacity-responsive-web-design-fundamentals#course-all-reviews) 
[Health Informatics in the Cloud](https://www.udacity.com/course/ud809)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/3288/udacity-health-informatics-in-the-cloud#course-all-reviews) 
[Regression Models](https://www.coursera.org/course/regmods)|Mar 2nd|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1718/coursera-regression-models#course-all-reviews) 
[Practical Machine Learning](https://www.coursera.org/course/predmachlearn)|Mar 2nd|4 weeks|Coursera|[3](https://www.class-central.com/mooc/1719/coursera-practical-machine-learning#course-all-reviews) (1 review)
[Developing Data Products](https://www.coursera.org/course/devdataprod)|Mar 2nd|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1720/coursera-developing-data-products#course-all-reviews) 
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Mar 2nd|4 weeks|Coursera|[2.4](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews) (28 reviews)
[R Programming](https://www.coursera.org/course/rprog)|Mar 2nd|4 weeks|Coursera|[2.4](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews) (59 reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Mar 2nd|4 weeks|Coursera|[2.7](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews) (12 reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Mar 2nd|4 weeks|Coursera|[2.8](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews) (4 reviews)
[面向对象技术高级课程（The Advanced Object-Oriented Technology）](https://www.coursera.org/course/aoo)|Mar 2nd|12 weeks|Coursera|[NA](https://www.class-central.com/mooc/1737/coursera--the-advanced-object-oriented-technology#course-all-reviews) 
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Mar 2nd|4 weeks|Coursera|[2.4](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-all-reviews) (28 reviews)
[R Programming](https://www.coursera.org/course/rprog)|Mar 2nd|4 weeks|Coursera|[2.4](https://www.class-central.com/mooc/1713/coursera-r-programming#course-all-reviews) (59 reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Mar 2nd|4 weeks|Coursera|[2.7](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-all-reviews) (12 reviews)
[Exploratory Data Analysis](https://www.coursera.org/course/exdata)|Mar 2nd|4 weeks|Coursera|[2.8](https://www.class-central.com/mooc/1715/coursera-exploratory-data-analysis#course-all-reviews) (4 reviews)
[Reproducible Research](https://www.coursera.org/course/repdata)|Mar 2nd|4 weeks|Coursera|[4](https://www.class-central.com/mooc/1716/coursera-reproducible-research#course-all-reviews) (2 reviews)
[Statistical Inference](https://www.coursera.org/course/statinference)|Mar 2nd|4 weeks|Coursera|[1.5](https://www.class-central.com/mooc/1717/coursera-statistical-inference#course-all-reviews) (2 reviews)
[30240184x: Data Structures • 数据结构](https://www.edx.org/course/data-structures-shu-ju-jie-gou-tsinghuax-30240184x-0)|Mar 3rd|17 weeks|edX|[NA](https://www.class-central.com/mooc/1646/edx-30240184x-data-structures-#course-all-reviews) 
[6.00.2x: Introduction to Computational Thinking and Data Science](https://www.edx.org/course/introduction-computational-thinking-data-mitx-6-00-2x-0)|Mar 4th|9 weeks|edX|[4](https://www.class-central.com/mooc/1779/edx-6-00-2x-introduction-to-computational-thinking-and-data-science#course-all-reviews) (2 reviews)
[Discrete Optimization](https://www.coursera.org/course/optimization)|Mar 4th|9 weeks|Coursera|[4](https://www.class-central.com/mooc/487/coursera-discrete-optimization#course-all-reviews) (6 reviews)
[算法设计与分析   Design and Analysis of Algorithms](https://www.coursera.org/course/algorithms)|Mar 9th|10 weeks|Coursera|[NA](https://www.class-central.com/mooc/3230/coursera--design-and-analysis-of-algorithms#course-all-reviews) 
[Cryptography](https://www.coursera.org/course/cryptography)|Mar 9th|6 weeks|Coursera|[4](https://www.class-central.com/mooc/1730/coursera-cryptography#course-all-reviews) (1 review)
[Bioinformatics Algorithms (Part 2) ](https://www.coursera.org/course/bioinformatics2)|Mar 16th|10 weeks|Coursera|[5](https://www.class-central.com/mooc/2290/coursera-bioinformatics-algorithms-part-2#course-all-reviews) (1 review)
[Web Application Architectures](https://www.coursera.org/course/webapplications)|Mar 16th|6 weeks|Coursera|[3.5](https://www.class-central.com/mooc/1816/coursera-web-application-architectures#course-all-reviews) (6 reviews)
[Text Retrieval and Search Engines](https://www.coursera.org/course/textretrieval)|Mar 16th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/2734/coursera-text-retrieval-and-search-engines#course-all-reviews) 
[Cloud Computing Concepts: Part 2](https://www.coursera.org/course/cloudcomputing2)|Mar 16th|5 weeks|Coursera|[NA](https://www.class-central.com/mooc/2942/coursera-cloud-computing-concepts-part-2#course-all-reviews) 
[Concepts in Game Development](https://www.open2study.com//node/1347)|Mar 16th|4 weeks|Open2Study|[4.1](https://www.class-central.com/mooc/1176/open2study-concepts-in-game-development#course-all-reviews) (8 reviews)
[M101J: MongoDB for Java Developers](https://university.mongodb.com/courses/M101J/about)|Mar 17th|7 weeks|MongoDB University|[4.5](https://www.class-central.com/mooc/599/mongodb-university-m101j-mongodb-for-java-developers#course-all-reviews) (4 reviews)
[M101JS: MongoDB for Node.js Developers](https://university.mongodb.com/courses/M101JS/about)|Mar 17th|7 weeks|MongoDB University|[4](https://www.class-central.com/mooc/1188/mongodb-university-m101js-mongodb-for-node-js-developers#course-all-reviews) (1 review)
[M101N: MongoDB for .NET Developers](https://university.mongodb.com/courses/M101N/about)|Mar 17th|NA|MongoDB University|[NA](https://www.class-central.com/mooc/3273/mongodb-university-m101n-mongodb-for-net-developers#course-all-reviews) 
[M101P: MongoDB for Python Developers](https://university.mongodb.com/courses/M101P/about)|Mar 17th|7 weeks|MongoDB University|[NA](https://www.class-central.com/mooc/600/mongodb-university-m101p-mongodb-for-python-developers#course-all-reviews) 
[M102: MongoDB for DBAs](https://university.mongodb.com/courses/M102/about)|Mar 17th|7 weeks|MongoDB University|[5](https://www.class-central.com/mooc/475/mongodb-university-m102-mongodb-for-dbas#course-all-reviews) (2 reviews)
[M202: MongoDB Advanced Deployment and Operations](https://university.mongodb.com/courses/M202/about)|Mar 17th|7 weeks|MongoDB University|[NA](https://www.class-central.com/mooc/1777/mongodb-university-m202-mongodb-advanced-deployment-and-operations#course-all-reviews) 
[Algorithms, Part II](https://www.coursera.org/course/algs4partII)|Mar 20th|6 weeks|Coursera|[4.9](https://www.class-central.com/mooc/340/coursera-algorithms-part-ii#course-all-reviews) (7 reviews)
[Algorithms: Design and Analysis, Part 2](https://www.coursera.org/course/algo2)|Mar 23rd|6 weeks|Coursera|[4.6](https://www.class-central.com/mooc/426/coursera-algorithms-design-and-analysis-part-2#course-all-reviews) (8 reviews)
[Programming Mobile Applications for Android Handheld Systems: Part 1](https://www.coursera.org/course/androidpart1)|Mar 25th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/3075/coursera-programming-mobile-applications-for-android-handheld-systems-part-1#course-all-reviews) 
[Programming Mobile Applications for Android Handheld Systems: Part 2](https://www.coursera.org/course/androidpart2)|Mar 25th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/3076/coursera-programming-mobile-applications-for-android-handheld-systems-part-2#course-all-reviews) 
[Programming Mobile Services for Android Handheld Systems: Concurrency](https://www.coursera.org/course/posaconcurrency)|Mar 25th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/3077/coursera-programming-mobile-services-for-android-handheld-systems-concurrency#course-all-reviews) 
[Principles of Computing (Part 2)](https://www.coursera.org/course/principlescomputing2)|Mar 27th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/3198/coursera-principles-of-computing-part-2#course-all-reviews) 
[General Game Playing](https://www.coursera.org/course/ggp)|Mar 30th|8 weeks|Coursera|[NA](https://www.class-central.com/mooc/588/coursera-general-game-playing#course-all-reviews) 
[Fundamentals of Digital Image and Video Processing](https://www.coursera.org/course/digital)|Mar 30th|12 weeks|Coursera|[NA](https://www.class-central.com/mooc/724/coursera-fundamentals-of-digital-image-and-video-processing#course-all-reviews) 
[AIP201x: Android: Introducción a la programación](https://www.edx.org/course/android-introduccion-la-programacion-upvalenciax-aip201x)|Mar 31st|10 weeks|edX|[NA](https://www.class-central.com/mooc/2964/edx-aip201x-android-introduccion-a-la-programacion#course-all-reviews) 
[JavaScript Design Patterns](https://www.udacity.com/course/ud989)|Self Paced|6 weeks|Udacity|[NA](https://www.class-central.com/mooc/3082/udacity-javascript-design-patterns#course-all-reviews) 
[CS212 - The Design of Computer Programs](http://www.udacity.com/overview/Course/cs212)|Self Paced|7 weeks|Udacity|[3.8](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-all-reviews) (4 reviews)
[CS253 - Web Application Engineering - Building a Blog](http://www.udacity.com/overview/Course/cs253)|Self Paced|7 weeks|Udacity|[4.7](https://www.class-central.com/mooc/324/udacity-web-development#course-all-reviews) (9 reviews)
[CS262 - Programming Languages - Building a Browser](http://www.udacity.com/overview/Course/cs262)|Self Paced|7 weeks|Udacity|[4.2](https://www.class-central.com/mooc/325/udacity-programming-languages#course-all-reviews) (5 reviews)
[CS215 - Algorithms - Crunching Social Networks](http://www.udacity.com/overview/Course/cs215/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/364/udacity-intro-to-algorithms#course-all-reviews) 
[CS258 - Software Testing - How to Make Software Fail](http://www.udacity.com/overview/Course/cs258/CourseRev/1)|Self Paced|7 weeks|Udacity|[4.4](https://www.class-central.com/mooc/365/udacity-software-testing#course-all-reviews) (5 reviews)
[CS259 - Software Debugging - Automating The Boring Tasks](http://www.udacity.com/overview/Course/cs259/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/457/udacity-software-debugging#course-all-reviews) (2 reviews)
[CSCI 1730 - Introduction to Programming Languages](http://www.cs.brown.edu/courses/cs173/2012/OnLine/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/458/csci-1730-introduction-to-programming-languages#course-all-reviews) 
[CS313 - Intro to Theoretical Computer Science - Dealing with Challenging Problems](http://www.udacity.com/overview/Course/cs313/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-all-reviews) 
[CS271 - Introduction to Artificial Intelligence](http://www.udacity.com/overview/Course/cs271/CourseRev/1)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/592/udacity-introduction-to-artificial-intelligence#course-all-reviews) 
[CS255 - HTML5 Game Development - Building High Performance Web Applications](http://www.udacity.com/overview/Course/cs255/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-all-reviews) (2 reviews)
[Datenmanagement mit SQL](https://open.hpi.de/courses/sql)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/777/openhpi-datenmanagement-mit-sql#course-all-reviews) 
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|[NA](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-all-reviews) 
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|[NA](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-all-reviews) 
[Applied Data Science: An Introduction](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_276927_1)|Self Paced|NA|CourseSites|[4](https://www.class-central.com/mooc/1806/coursesites-applied-data-science-an-introduction#course-all-reviews) (3 reviews)
[Introduction to Mobile Solution Development](https://open.sap.com/course/mobile1)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/1348/opensap-introduction-to-mobile-solution-development#course-all-reviews) 
[Introduction to Hadoop and MapReduce](https://www.udacity.com/course/ud617)|Self Paced|NA|Udacity|[5](https://www.class-central.com/mooc/1470/udacity-introduction-to-hadoop-and-mapreduce#course-all-reviews) (1 review)
[Big Data applications and Analytics](https://bigdatacourse.appspot.com/)|Self Paced|NA|Others|[3](https://www.class-central.com/mooc/1948/big-data-applications-and-analytics#course-all-reviews) (1 review)
[Introduction to Software Development on SAP HANA](https://open.sap.com/course/hana1-1)|Self Paced|NA|openSAP|[5](https://www.class-central.com/mooc/1347/opensap-introduction-to-software-development-on-sap-hana#course-all-reviews) (3 reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1021/udacity-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-all-reviews) 
[Intro to Data Science](https://www.udacity.com/course/ud359)|Self Paced|8 weeks|Udacity|[4](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-all-reviews) (2 reviews)
[How to create a Windows 8 App](http://www.opencourseworld.de/pages/coursedescription.jsf?courseId=487693)|Self Paced|8 weeks|OpenCourseWorld|[NA](https://www.class-central.com/mooc/1788/opencourseworld-how-to-create-a-windows-8-app#course-all-reviews) 
[Data Wrangling with MongoDB](https://www.udacity.com/course/ud032)|Self Paced|8 weeks|Udacity|[4](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-all-reviews) (1 review)
[Data Analysis with R](https://www.udacity.com/course/ud651)|Self Paced|8 weeks|Udacity|[4.6](https://www.class-central.com/mooc/1478/udacity-data-analysis-with-r#course-all-reviews) (5 reviews)
[Parallel Programming Concepts](https://open.hpi.de/courses/parprog2014)|Self Paced|NA|openHPI|[5](https://www.class-central.com/mooc/1701/openhpi-parallel-programming-concepts#course-all-reviews) (1 review)
[Ada: Overview](http://university.adacore.com/courses/overview/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2109/ada-overview#course-all-reviews) 
[Ada: Basic Concepts](http://university.adacore.com/courses/basic-concepts/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2110/ada-basic-concepts#course-all-reviews) 
[Ada: Programming in the Large](http://university.adacore.com/courses/programming-in-the-large1/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/2111/ada-programming-in-the-large#course-all-reviews) 
[Website Performance Optimization: The Critical Rendering Path](https://www.udacity.com/course/ud884)|Self Paced|1 weeks|Udacity|[NA](https://www.class-central.com/mooc/2189/udacity-website-performance-optimization-the-critical-rendering-path#course-all-reviews) 
[UX Design for Mobile Developers:  Learn to Design a 5-star Android App](https://www.udacity.com/course/ud849)|Self Paced|4 weeks|Udacity|[NA](https://www.class-central.com/mooc/2212/udacity-ux-design-for-mobile-developers-learn-to-design-a-5-star-android-app#course-all-reviews) 
[Developing Scalable Apps with Google App Engine](https://www.udacity.com/course/ud859)|Self Paced|6 weeks|Udacity|[NA](https://www.class-central.com/mooc/2215/udacity-developing-scalable-apps-with-google-app-engine#course-all-reviews) 
[Java SE - Standart Edition](https://www.universiteplus.com/courses/java-se-standart-edition)|Self Paced|NA|Universiteplus|[NA](https://www.class-central.com/mooc/2420/universiteplus-java-se-standart-edition#course-all-reviews) 
[Developing Android Apps:  Android Fundamentals](https://www.udacity.com/course/ud853)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/2211/udacity-developing-android-apps-android-fundamentals#course-all-reviews) 
[Software Development Process](https://www.udacity.com/course/ud805)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/2335/udacity-software-development-process#course-all-reviews) 
[Computer Networking:  Security and Software Defined Networking](https://www.udacity.com/course/ud436)|Self Paced|12 weeks|Udacity|[5](https://www.class-central.com/mooc/2336/udacity-computer-networking-security-and-software-defined-networking#course-all-reviews) (1 review)
[Knowledge Engineering with Semantic Web Technologies](https://open.hpi.de/courses/semanticweb2014)|Self Paced|NA|openHPI|[NA](https://www.class-central.com/mooc/2038/openhpi-knowledge-engineering-with-semantic-web-technologies#course-all-reviews) 
[Object-Oriented JavaScript](https://www.udacity.com/course/ud015)|Self Paced|5 weeks|Udacity|[5](https://www.class-central.com/mooc/2658/udacity-object-oriented-javascript#course-all-reviews) (1 review)
[Intro to AJAX - Making Asynchronous Requests with jQuery](https://www.udacity.com/course/ud110)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/2997/udacity-intro-to-ajax-making-asynchronous-requests-with-jquery#course-all-reviews) 
[Data Visualization and D3.js](https://www.udacity.com/course/ud507)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/2898/udacity-data-visualization-and-d3-js#course-all-reviews) 
[HTML5 Canvas - From Pixels to Animation!](https://www.udacity.com/course/ud292)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/2999/udacity-html5-canvas-from-pixels-to-animation#course-all-reviews) 
[Intro to iOS App Development with Swift](https://www.udacity.com/course/ud585)|Self Paced|4 weeks|Udacity|[4.5](https://www.class-central.com/mooc/2861/udacity-intro-to-ios-app-development-with-swift#course-all-reviews) (4 reviews)
[Intro to jQuery - Manipulating Websites with Ease](https://www.udacity.com/course/ud245)|Self Paced|1 weeks|Udacity|[NA](https://www.class-central.com/mooc/2998/udacity-intro-to-jquery-manipulating-websites-with-ease#course-all-reviews) 
[Intro to Machine Learning - Pattern Recognition for Fun and Profit](https://www.udacity.com/course/ud120)|Self Paced|10 weeks|Udacity|[4](https://www.class-central.com/mooc/2996/udacity-intro-to-machine-learning-pattern-recognition-for-fun-and-profit#course-all-reviews) (1 review)

ADVANCED(18)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Real-Time Analytics with Apache Storm](https://www.udacity.com/course/ud381)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/3000/udacity-real-time-analytics-with-apache-storm#course-all-reviews) 
[Model Building and Validation](https://www.udacity.com/course/ud919)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/3256/udacity-model-building-and-validation#course-all-reviews) 
[Advanced Operating Systems](https://www.udacity.com/course/ud189)|Self Paced|5 weeks|Udacity|[NA](https://www.class-central.com/mooc/1016/udacity-advanced-operating-systems#course-all-reviews) 
[High Performance Computer Architecture](https://www.udacity.com/course/ud007)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1018/udacity-high-performance-computer-architecture#course-all-reviews) 
[Computability, Complexity & Algorithms](https://www.udacity.com/course/ud061)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1024/udacity-computability-complexity-algorithms#course-all-reviews) 
[Knowledge-Based AI: Cognitive Systems](https://www.udacity.com/course/ud409)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1025/udacity-knowledge-based-ai-cognitive-systems#course-all-reviews) 
[15.071x: The Analytics Edge](https://www.edx.org/course/analytics-edge-mitx-15-071x-0)|Mar 3rd|12 weeks|edX|[4.6](https://www.class-central.com/mooc/1623/edx-15-071x-the-analytics-edge#course-all-reviews) (10 reviews)
[Machine Learning](https://www.udacity.com/course/ud262)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1020/udacity-machine-learning#course-all-reviews)
[CS 373: Programming a Robotic Car](http://www.udacity.com/overview/Course/cs373)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-all-reviews) (5 reviews)
[CS387 - Applied Cryptography](http://www.udacity.com/overview/Course/cs387)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/326/udacity-cs387-applied-cryptography#course-all-reviews) (2 reviews)
[In-Memory Data Management (2014) - Implications on Enterprise Systems](https://openhpi.de/course/inmemorydatabases)|Self Paced|7 weeks|openHPI|[5](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management-2014-implications-on-enterprise-systems#course-all-reviews) (2 reviews)
[CS344 - Introduction to Parallel Programming  - Using CUDA to Harness the Power of GPUs](http://www.udacity.com/overview/Course/cs344/CourseRev/1)|Self Paced|7 weeks|Udacity|[3](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-all-reviews) (1 review)
[CS291 - Interactive Rendering - Introduction to 3D Computer Graphics](http://www.udacity.com/overview/Course/cs291/CourseRev/1)|Self Paced|10 weeks|Udacity|[5](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-all-reviews) (2 reviews)
[CS348 - Functional Hardware Verification - How to Verify Chips and Eliminate Bugs](http://www.udacity.com/overview/Course/cs348/CourseRev/1)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-all-reviews) (1 review)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|[4](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-all-reviews) (1 review)
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Self Paced|NA|Udacity|[4](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-all-reviews) (1 review)
[Machine Learning 3—Reinforcement Learning](https://www.udacity.com/course/ud820)|Self Paced|4 weeks|Udacity|[4](https://www.class-central.com/mooc/1849/udacity-machine-learning-3-reinforcement-learning#course-all-reviews) (1 review)
[In-Memory Data Management In a Nutshell](https://open.sap.com/courses/hana-warmup)|Self Paced|NA|openSAP|[NA](https://www.class-central.com/mooc/2458/opensap-in-memory-data-management-in-a-nutshell#course-all-reviews) ",1216,69,dhawal,2015-03-04 20:18:17,https://www.reddit.com/r/learnprogramming/comments/2xxzce/heres_a_list_of_135_free_online_programmingcs/,0,learnprogramming
sjgq8p,Almost 40 years old and just starting! Wish me luck.,"So I am making this post mostly to hold some accountability on myself as I am, unfortunately, known for diving head first into something, losing myself into it and then suddenly just stopping. 

It's not really my first attempt to learn programming. I tried like 10 years ago, tried for 2-3 months, and then I just gave up, because I tried to make a project that was way over my skillet, spent days on Stackoverflow and then one day I looked at the pages upon pages of my spaghetti code and I realized that I don't have a clue what all this means anymore, so I just gave up.

And after this 10 years I mostly forgot things, BUT surprisingly I still remember way more that I would expect. So here I am trying again.

Now, I would be lying to myself to say that I don't dream of getting into this on a job level. But it's not a rush. I have a job in marketing, SEO, Google Ads and building Wordpress sites for clients. So it's not like I had to switch jobs asap. Year from now? Great. 5 years from now? Also, great. Never? Not great, but whatever.

My technology of choice is .NET. I don't really know what to concentrate on, but I love that .NET now offers much more possibilities, not only web and Windows. I guess some programming understanding is like riding on a bike. I thought that after only couple weeks of moderate learning and after 10 years hiatus I won't remember a thing. But somehow I do. Basic concepts like fundamentals of OOP, classes, accessibility keywords, value and reference types, if/switch statements, methods, loops etc. it's somehow still in my head, and I was surprised to see, that I still know all this. 

Right now, as I'm trying to be smarter than 10 years ago, I'll try to be reasonable and try to do slow but steady, like 1-2 hours but every day (honestly I can get away with doing 2 hours in my job as we have a very task-oriented work environment, so I usually just sit and watch YouTube or browse Reddit for 1-2 hours anyway) and NOT to try to build something too big from the start. Last thing is to try to be more organized when it comes to planning. I am a very chaotic guy, and my workflow is also very chaotic. I try to write everything at once, in the middle I get a new idea, so I try to squeeze it into code in some way etc. and it all ends up as a complete clusterfuck. This time I will try more preplanning. 

Currently, the biggest problem in my head is this:

All ideas of what to start seem either too simple or too hard. I am past ""Hello world"" apps, but not good enough to start something big. I see some example challenges and not once I thought ""This seems like a reasonable challenge"". It's either ""Nah, it's trivial"" or ""WTF dude how do I even start something like that"". 

And second, but connected problem - I obviously want to write something that I can actually use, but these days, there is everything out there. Maybe I'll write... nope, there are like 20 websites and 50 apps for just that. 

I just have to find the right approach. So anyway, excuse my long rambling, and also excuse my English, I am from Poland and I finish active language education like 20 years ago. For those about to start, I salute you, and wish me luck :)",1212,84,kociol21,2022-02-03 11:17:25,https://www.reddit.com/r/learnprogramming/comments/sjgq8p/almost_40_years_old_and_just_starting_wish_me_luck/,0,learnprogramming
m4479h,Git/Github tutorial,"I've been trying to learn Git/Github, but I cannot find a good, beginner-friendly tutorial. Can you recommend me one?",1211,94,idkw_username_to_use,2021-03-13 11:04:15,https://www.reddit.com/r/learnprogramming/comments/m4479h/gitgithub_tutorial/,0,learnprogramming
bm6daa,Interview Study Guides For Software and Data Engineers,"During my last round of technical interviews I decided to create a checklist of problems, videos and posts that would help me track my progress. I wanted to share that in case anyone out there could benefit from it as well! There are checklists as well as blog posts linked below!

Also, feel free to reach out and ask me to add more problems, topics, etc. It would be great to continue growing these checklists, or maybe add extra sheets.

&#x200B;

The **Software Engineer's**  interview study guide -  [checklist](https://docs.google.com/spreadsheets/d/19hSRrL4l3gRiJ5ucH9q4iwFo2QHgic9gGMNUrcn1mm0/edit#gid=0) \- [post](https://www.coriers.com/the-interview-study-guide-for-software-engineers/) 

The **Data Engineer's** interview study guide - [checklist](https://docs.google.com/spreadsheets/d/1GOO4s1NcxCR8a44F0XnsErz5rYDxNbHAHznu4pJMRkw/edit#gid=0) \- [post](https://www.coriers.com/the-interview-study-guide-for-data-engineers/)",1206,139,nonkeymn,2019-05-08 15:06:21,https://www.reddit.com/r/learnprogramming/comments/bm6daa/interview_study_guides_for_software_and_data/,0,learnprogramming
desgnv,Automate the Boring Stuff with Python (2nd edition) is coming soon!,"Attention Fans of Al Sweigart's books such as Invent Your Own Computer Games with Python and Cracking Codes with Python:

Al just announced that the second edition of Automate the Boring Stuff with Python is coming soon (and is available for preorder).

It's almost 600 pages long now (100 pages longer than the first edition), includes a ton of new content (Working with Google Sheets, EZGmail, SMS email gateways, and Mu editior), and more than a handful of new projects (I'm especially excited about Zombie Dice!).

I'm looking forward to it, and if you're interested in practical application of Python, you might want to check it out!

[https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)",1208,80,jkibbe,2019-10-08 00:34:02,https://www.reddit.com/r/learnprogramming/comments/desgnv/automate_the_boring_stuff_with_python_2nd_edition/,0,learnprogramming
71lqnf,"Learning to code and feel overwhelmed? Look at the top posts of /r/programmerhumor. You'll see that programmers of all experience levels and specialties struggle with the same things you do, and it may help you approach new technologies you wouldn't otherwise consider.","This isn't intended to be a shitpost — [r/ProgrammerHumor](https://www.reddit.com/r/ProgrammerHumor/top/?sort=top&t=all) is honestly one of the best resources for budding programmers. I always recommend it to my coding students. Not only is it much more fun than most programming resources; it's also a great way to be reminded that you're part of a global community going through the same things you are.

Plus, when I don't understand one of the posts, I'm often motivated to Google it and figure out why it's funny. This has led me to learn about many new concepts.",1211,76,robertgfthomas,2017-09-21 19:52:48,https://www.reddit.com/r/learnprogramming/comments/71lqnf/learning_to_code_and_feel_overwhelmed_look_at_the/,0,learnprogramming
pmgdes,The Odin Project updated their Foundations course with brand new HTML and CSS courses!,"""It's a big day!  Today we are releasing an all-new set of lessons in our Foundations track.  **These lessons cover the foundations of HTML and CSS, and will completely replace the existing HTML and CSS content, including the lesson that goes through FreeCodeCamp and the Google Homepage Project.**

For the moment we've left up the old content for the benefit of people who are nearly done with that material, but we'd like to suggest that everyone immediately start using the new content.  If you're in the middle of FreeCodeCamp we suggest you go ahead and jump to the beginning of the new stuff. We think it is superior in every way.  Some of the early lessons go deeper than FCC on topics that we feel are important.""

[https://www.theodinproject.com/paths/foundations/courses/foundations](https://www.theodinproject.com/paths/foundations/courses/foundations)

&#x200B;",1211,74,Stormaier,2021-09-11 22:01:14,https://www.reddit.com/r/learnprogramming/comments/pmgdes/the_odin_project_updated_their_foundations_course/,0,learnprogramming
djjf08,"Learning C has really opened my eyes about what ""programming"" is","The past couple of months I have dedicated myself to learning and using only C. And in this time, not only has my knowledge of programming obviously grown, but now that I've come back to Java, I feel like things just ""click"" much more than they did.

For example,

\- being forced to use a Makefile for my programs in C has made me appreciate the build tool that so many IDEs come with. And now, I actually understand the steps of what a program goes through to compile!

\- Understanding why it's better to pass a pointer than pass a huge ass object has made me so much more mindful of memory efficiency, even though most languages don't even use pointers (at least directly)!

\- the standard library is so small that I had to figure out implementations for myself. There were no linked list or Stack (data structure) or array sort implementations provided like they are in Java or C# I had to actually write a these things myself - which made me understand how they work. Even something as simple as determining the length of an array wasnt provided. I had to learn that the length is determined by dividing the entire size of the array by the size of its first element (generalizing here).

\- Figuring out System.out.println / Console.WriteLine / puts  is essentially appending \\n to the end of the string. (mind = blown)

If any of you are interested in learning C, I really recommend reading ""C: A Modern Approach"" by K.N King.",1202,254,MyGiftIsMySong,2019-10-18 06:22:13,https://www.reddit.com/r/learnprogramming/comments/djjf08/learning_c_has_really_opened_my_eyes_about_what/,0,learnprogramming
145hf6t,"I finally did it, first job, finished school.","I spent 14 years of my life working in kitchens and barely getting by, at 30 I decided to go back to school for programming. 3 years later, I'm graduating, my placement hired me right after school, I have BENEFITS and a good salary for the first time in my life, the feeling is overwhelming. I'm so glad I made this decision, it was the hardest thing I've ever done, and came close to failing out a couple times, I also got really lucky getting hired right out of school, but if you're ever doubting yourself just keep pushing through. It really is worth it.

I make three times as much money, and work half as much, doing something that I truly enjoy, it still gets stressful of course, especially being so new and inexperienced, and trying to make a web app for people that don't understand programming is a nightmare, but it's truly the best decision I have ever made.

It has made me realize that everyone deserves to feel like this, spending so much of my life just barely above the poverty line, not even being able to feed myself sometimes, and to take a step into a career like this, its mind blowing, a lot of my co-workers don't understand how lucky we are, most of them got in young... As amazing as I feel about this it does make me sad, that this feeling of security is so hard to achieve these days.

That being said I'm damn happy I found it!

Sorry for the blatant bragging, its just so surreal I had to share with someone.

I hope everyone of you finds what you're looking for.

EDIT: I'm thinking placement might be a local term, its like a coop or internship that is part of the college program I took, in my last year two days a week were spent at a local company doing web development.",1207,112,Burnt-Marsupial,2023-06-09 21:29:58,https://www.reddit.com/r/learnprogramming/comments/145hf6t/i_finally_did_it_first_job_finished_school/,0,learnprogramming
gvru0g,I want to cry,"Soo.. i have to learn Java for university.I was sick the first 2 weeks with high fever and stuff (no Covid haha), so i missed the first few lectures.But i got the Lecture slides and i started to use hyperskill. SO far so good!I had fun using and learning with hyperskill, some tasks were easier and some harder, fine for me.But now that we moved on with the university stuff, i understand literally ZERO of the ""homework"" we have to solve, the lecture slides just add more confusion, and on hyperskill i can't find matching stuff for the things we do in university.

So i tried to invest 2-3 hours per day in learning the stuff required for the uni tasks, but i just don't get it. I wanna break down and cry everytime, because i am not even close to solving any of those problems they give us. i don't understand anything anymore and think about giving up and leave the university.  Like really i study 1 hour and almost start crying and hate myself for being so dumb.

What i can t get my head around is, why the stuff on hyperskill with loops, conditional statements and so on was rather easy for me to understand, but i understand zero of the university stuff.Out of nowhere we started using i.e. ""this.xy"", and i feel like i am just too dumb to understand.

Does anyone have any advice how I can improve when i don t even understand the stuff my uni wants from me?

&#x200B;

Edit 1: A huge thank you to all of you. Such kind and encouraging answers which really motivates me a lot! I m going to keep trying because i really wanna be capable of coding! again, thanks so much for the support!!

&#x200B;

Edit 2: Thanks for the award kind stranger! ",1201,168,frevelmann,2020-06-03 10:56:50,https://www.reddit.com/r/learnprogramming/comments/gvru0g/i_want_to_cry/,0,learnprogramming
pej5fk,Sheer Freaking Will.,"That's going to separate you from learning programming and failing to learn programming. 

Programming is hard. Software development is hard. Taking and idea and executing it into a desktop/web/mobile/console/whatever app is a monumental task. 

Syntax is easy. Finding 100 free Youtube videos on how to connect to an API in your language is easy. Reading through a ""Head First"" book is easy. Ideas are easy. 

When you've worked all day, the kids are finally asleep, and it's 10 pm. You're at your computer and you've fired up your IDE and pulled up your course or video or PDF. You start typing. A few lines are done.
Debug. 
Error. 

At this point, going to bed is easy. I don't blame you. What's hard is trying to figure out what the heck happened. Did I forget a semicolon? Should it be a static class? How do I read this error? Line 37? It all looks good, why won't it work?

A lot of folks have this idea of becoming a programmer and getting paid $120k. Heck. I HAVE THAT DREAM. I'm this person who is up late trying to figure this crap. 

I'm pushing myself too. Keep pushing. Plan. Prepare. Execute. Follow Through. Overcome your errors. 

Don't quit learning a language after a bit of discouragement. Oh you're learning Python and Django, but that Blazor is looking sexy. Wow. Maybe I should quit Python and jump to C#????? NO. Go all the way. Make a baby with your language. Don't pull out early. 

What the hell do I know. Rant over.",1202,107,DBADudette,2021-08-30 14:25:52,https://www.reddit.com/r/learnprogramming/comments/pej5fk/sheer_freaking_will/,0,learnprogramming
rz2o86,Changing my life at 28 year old.,"Hello, I don't want to get deep into my personal life and not looking for sympathy just looking for answers.  
I achieved nothing in life so far I have 0 responsibilities and I work part time at the supermarket as a 28year old, I quit drinking quit smoking(been 5months)  and quit playing video games (quit   GW2, uninstalled LoL still play few games of CS:GO a day) started exercising and got into learning coding. I used to create websites in PHP when I was 15-16y  so I always had interest in computers and learning code, but completely stopped which I regret. I'm determined to change my life around but I just get overwhelmed and spend a lot of time browsing reddit, youtube. How can I decide which language should I learn first and which path to follow. I like idea of creating apps and also I like creating websites I don't really have a preference I just want to make a right choice so I don't waste time on learning something that I might not use that much. I want to start a career in software development I know it might take 6month to a year just to learn  a language.   I've been learning Java for 2weeks now for 5h+ a day, I'm not sure if I should continue learning Java or switch to Python or  JavaScript considering I'm desperate for a new career and I'm 28year old.",1199,310,666Dom,2022-01-08 15:44:47,https://www.reddit.com/r/learnprogramming/comments/rz2o86/changing_my_life_at_28_year_old/,0,learnprogramming
8yshba,I teach Java for free in Skype. I'm looking for more students.,"In my free time I teach Java for free using Skype. Currently I've got  5 students, all of them from Reddit.

You can be an absolute beginner or have some experience in programming. To participate, you just need Skype and a microphone.

To arrange day and time, please contact me in Skype (totaljava.org). If you have questions, please post them here.

Thanks for reading",1206,226,robozoid,2018-07-14 10:53:27,https://www.reddit.com/r/learnprogramming/comments/8yshba/i_teach_java_for_free_in_skype_im_looking_for/,0,learnprogramming
7yltpt,Read this if you feel perpetually stuck in the beginner phase,"I see a lot of posts on this subject so I decided to write a blog post on it. I moved all the text here:

As someone who began learning to code a little over two years ago, it wasn’t until recently that I no longer felt that I was stuck in that beginner phase I'm sure everyone knows of.

I’m going to go through my experience learning to code and why I felt stuck in that beginner phase. Hopefully, you might learn a thing or two and progress faster as a programmer.

**My Story**

Two years ago, I bought a beginner Python book Learn Python The Hard Way and worked through it during the school holiday. After finishing the book, I never felt that I was getting any better at programming until recently.

Over the past two years, I learned HTML, CSS, JavaScript, then picked up Java before venturing into Android Dev for a brief period, then picked up C from CS50. Oh, I didn’t mention that I spent small amounts of time (that added up considerably) learning Ruby and ML and Cryptography with Python.

You might be able to tell where I went wrong.

**Where I went wrong**

**1. Learning everything under the sun**

I dabbled in many different areas, which unfortunately meant I was mediocre with every language and skillset I picked up. I believe that’s where most people go wrong when learning to code.


Learning more languages does not necessarily make you a better programmer.


Most concepts can be transferred between languages, meaning that for the most part, you are familiarising yourself with the syntax when you pick up a new language.

**No one desires a jack of all trades programmer**

Of course, there are some exceptions (certain startups), but companies tend to prefer having teams of specialists over programmers that are knowledgeable in many fields. It's for the same reason why specialists are better paid than general practitioners.

**Pick a language/field and stick to it**

Seriously, stop learning a new language every few months. Pick one language and get really good at it. Programming languages are only distinctly different when you dig deeper into the lower-level advanced stuff.

Okay, maybe I was exaggerating when I told you to learn only one language (chances are you need more than one), but my point still stands: being excellent in one or two languages is better than being mediocre in plenty.

Similarly, do not jump between different fields of programming. Learning both mobile and web development will only derail you from both. It's better to specialize in one area.

**What about libraries and frameworks?**

The same thing. You don’t need to learn both React and Angular. In fact, I would advise against that. Just pick one and you’re good to go.

**2. Not Trusting the Process**

One factor that prevented me from progressing as a programmer was uncertainty. Will I continue to struggle with this thing like I am right now? What if this framework gets phased out by the time I become decent at it?

Unfortunately, you can’t predict many things with certainty. You just have to make reasonable and informed decisions - and commit to them. It’s better to get started ASAP than having analysis paralysis set in and never getting any work done due to lack of confidence and self-doubt.

**Conclusion**

Hopefully, this can help you advance as a programming and get out of that beginner phase. Share with other beginner programmers you know if you think this might help them.

You can find my programming blog [here](http://codethesite.com) if you are interested.",1201,86,codethesite,2018-02-19 10:41:40,https://www.reddit.com/r/learnprogramming/comments/7yltpt/read_this_if_you_feel_perpetually_stuck_in_the/,0,learnprogramming
t9te4f,Is it true that even senior developers use google while coding?,"I've heard from friends and even saw memes on senior devs using google for coding. It's not wrong in any way, but I'm curious to know if this is actually the case.",1200,479,Flimsy_Transition_51,2022-03-08 23:03:08,https://www.reddit.com/r/learnprogramming/comments/t9te4f/is_it_true_that_even_senior_developers_use_google/,0,learnprogramming
1s347g,How I learned to develop Android apps in less than a year,"## [Here's the link to the blog post on my website (no ads)](http://codescrubs.com/blog/how-i-learned-to-develop-android-apps-in-less-than-a-year)
*****  
A year ago I had a basic grasp of Python and I knew some HTML and CSS. Two weeks ago I published my first proper Android app and I’m being offered jobs as a web developer.

This is how I started learning programming.

*****
### **Background**

A year ago my knowledge of programming was rudimentary. I did the [codecadamy courses](http://www.codecademy.com/), did a few tutorials on HTML and CSS, and that was it. I knew how to modify my WordPress photo blog and nothing more. While I always had an affinity for logic and how things work, as a student of social studies, I never actually came into contact with programming.

However that changed when I was installing a custom rom on my Android phone. The operation was quite simple with an easy to follow tutorial. **If I successfully changed my phone’s operating system, how hard is to create a simple app for it?** So right then and there I decided to learn how to program Android apps.

 *****

### **The plan**

*How do I get started with programming?* Probably the most important and most often asked question. I spent hours searching for tutorials and guides on where to start. After a while a learning plan started to take shape. The plan consisted of not just the things I needed to learn to make a simple Android app, but also the **fundamentals** of programming that would help me in other areas as well (especially web development).

The plan was simple. Learn programming principles and its fundamentals. Learn about clean code and working with others. Then learn how Android works and put it all together in a simple app.

1. Learn programming
1. Learn the Android SDK
1. Create an app
1. ???
1. Profit!
 
*****
### **Putting the plan in action**

The plan was set and off I went. I spent the first two months on [this Stanford video on introduction to programming.](https://see.stanford.edu/Course/CS106A/194) It focuses on Java which was perfect as Android uses the Java programming language (killed two birds with one stone). I also grabbed a couple of Java books and did all the lessons in them, and I even watched all of the [Clean code videos](http://cleancoders.com/) (even those that I didn’t understand at the time). *Check out the [tutorials](http://codescrubs.com/resources) for a list of other helpful resources.*

Once I knew the basics of programming and Java, I started learning how the [Android SDK](https://developer.android.com/sdk/index.html) works. That was **really really** hard to do. It took me a couple of months just to learn the basics of how a simple Android app works. The whole ordeal was time-consuming and stressful, but seeing my apps actually working on my phone, was awesome. That kept me going. That was the **only** thing that kept me going.

Then it clicked. **It all became super simple.** I knew where to look for solutions and how to code them. In the next couple of months I created several personal apps: a Dungeons and dragons app that taught me how to use fragments; a WordPress app that taught me networking and APIs; a Tetris app that taught me simple game development. Programming became fun and simple and something I wanted  to do as much as possible.

I never thought myself being a programmer, so publishing my first app was a weird experience. I felt as an imposter, because I used StackOverflow, tutorials and code snippets from other people. Then I realized that the only thing that matters is the finished app. So I published [WordRefresh](http://codescrubs.com/blog/wordrefresh-android-app), a simple app that shows you words and their definitions. The app itself is **not** important – the important thing is that I successfully learned how to develop and code Android apps.

My learning plan **actually worked.**

  
*****
    
###**What I learned**

It’s been an interesting year. I learned that the most important lesson is successfully balancing the three *main resources* every person has.

#### **Time**

Finding time to learn is hard. In the past year, I completed all of my college classes, got a job, went through 3 intense relationships and had knee surgery that confined me to a bed for three months. You have to find time to learn and actually code. I coded while my League of Legends game was loading. Five minutes here and five minutes there, it adds up.

#### **Knowledge**

Learning how to program is hard. You will spend hours searching for simple solutions and the most basic of logic. It’s a fact. You have to learn to walk before you can run. First you learn about printing statements to console, then you learn how to do network calls and SQL queries. Master the basics, then branch out. Don’t rush it.

#### **Motivation**

Being motivated to learn is hard. You will get stressed out on simple things. Debugging is as fun as self-inflicted paper cuts. Failing at simple tasks is disheartening. So set yourself small goals that keep you motivated. You just fixed a bug? Be proud. You’re awesome. Then try to fix another one. Take care of your motivation, because it’s pretty important when every simple problem takes hours to solve.

A successful learning plan balances the three main resources. Having time without motivation is **procrastination**. Having motivation, but no time, is **stressful**. Break down things into simple, easily achievable chunks. Then do them.

*****

**Final thoughts**

**I am not a programmer**, and I feel awkward when people say that I’m a developer. I’m just a 25-year-old dude that was bored and likes doing tutorials and learning new things. Now I’m making a career out of this stuff. Even though my initial learning plan is complete, learning how to program is a neverending task. Onwards and upwards.

It’s been hard, It’s been stressful and it’s been the most fun I ever had.



*edit

Fixed the broken Stanford link.
 ",1197,240,poopMachinist,2013-12-04 16:27:48,https://www.reddit.com/r/learnprogramming/comments/1s347g/how_i_learned_to_develop_android_apps_in_less/,1,learnprogramming
lb0krj,"I stopped working in order to dedicate myself to learning to code 60+ hours a week, advice / feedback on my self-study strategy much appreciated!","Hi all,

I decided a couple of weeks ago to get out of my current industry by stopping work and dedicating myself to learning to code 6 days a week, 10 hours a day.

I completely missed this sub when I started out because I was focused on ""coding"" and forgot about ""programming"", which speaks to the level of my inexperience with all of this.

Right now I'm simultaneously running through three front-end programs:

\- freeCodeCamp Responsive Web Design (almost done) and JavaScript (much more painful)

\- Zero to Mastery ""Complete Web Developer""

\- Codecademy ""Front-end Engineer""

I'm also thinking about running The Odin Project simultaneously as well as I really really like the tone of it and its intro bits, but four programs at once seems a bit goofy.

Thing is, I've gotten some feedback pointing me towards App Academy and Full Stack Open as well, with Full Stack Open looking (to my inexperienced eyes at least) like an all-the-way pro setup, though it goes pretty far beyond front-end (I think?)

Right now I feel like the three-pronged approach is working for me, as I'm working ahead in freeCodeCamp, then following up with Codecademy and ZTM which are flushing things after I've had a chance to get used to the code itself.

(To be clear, I have no affiliation with any camp/academy/program, these are just the ones my research / trial has led me to.)

Maybe it's wrong, but I'm not thinking so much in terms of ""what path lands me a job"" but ""what path builds the skills I feel I'll want to use"". My thinking is that if I can develop and prove the tangible skills (with a bunch of certs completed to boot, everything I'm doing will result in some sort of cert), job possibilities are something I'll start to understand better as I progress in learning and hearing from people in the industry.

I don't know exactly what the job I want looks like, I just know I want to do something where I learn and create everyday, and I'd like the chance to work in my writing/storytelling skills as well as my basic graphic design skills. Understood I'll have to likely grind away at something more elementary to begin with, and be thankful for whatever job does eventually come my way, but that's the end goal. Front-end developer is what I'm thinking right now, but I'm trying to keep my mind open as I know I don't understand the industry well enough to pick a path. 

In terms of a *tangible* goal, I would love to be able to get to the point where I could make a living by meaningfully contributing to ""story telling"" web projects, something like [the examples within this list](https://www.mockplus.com/blog/post/storytelling-website-examples-and-templates). I know I need to deeply learn JavaScript, and I \*think\* the next ones after that are something like D3 and React, but again, I'm too new to have confidence in that opinion.

This is a big change for me, and the family. I'm not doing this lightly, and in my mid-30s, with zero background in computer science or programming, I know I'm up against some bad statistics, but I'm doing this so that I'm not working 80 hour weeks stressed out of my mind, working away from my young daughter, like my current career.

Anyway, any feedback on my overall gameplan is massively appreciated. I got a few really helpful comments on a couple of other subs, but I'm realizing this is the alpha coding/programming learning sub.",1194,258,None,2021-02-02 17:03:04,https://www.reddit.com/r/learnprogramming/comments/lb0krj/i_stopped_working_in_order_to_dedicate_myself_to/,0,learnprogramming
kiku7k,Finally experienced the “click”!,"Recently I finally internalized the idea that discipline is far more productive than motivation, so for the past couple weeks I’ve been programming for an hour a day on very basic projects to teach myself.

I started with a simple guess the number game, another program that generates 10 numbers in an array and sorts them from lowest to highest, etc, and my most recent project has been a calculator.

A basic one, like you’d find in a dollar store.

For the past week, I banged my head against a wall trying to figure out how to write a function that, when a button is clicked(tkinter), would assign the value of the button to one variable and then when another is clicked it would assign that number to a different variable.

I tried so many different methods and just couldn’t wrap my head around it until I realized that I didn’t need to use just 1 function to “do-it-all”. I wrote an individual function for each button named “setval1” or “setval2” etc. Once I realized this I almost zoned out, just coding and coding and coding until I had a finished product.

The elation I felt when I first clicked “2 * 5 =“ and it actually spit out 10, was indescribable. Then I clicked the C button and gave it different numbers and operator and it worked again!

Just felt great and wanted to share. I’m sure the code can be simplified far more than what I’ve got written but it felt good to finally find a solution and, really, it was as easy as “Screw it, you can have as many functions as you want.”",1193,44,daBEARS40,2020-12-23 03:13:31,https://www.reddit.com/r/learnprogramming/comments/kiku7k/finally_experienced_the_click/,0,learnprogramming
8bt1j4,"Senior programmers and developers, what are some best practices / advice every junior programmer should know?","All advice welcome! 

Let’s share ",1199,308,None,2018-04-12 19:45:28,https://www.reddit.com/r/learnprogramming/comments/8bt1j4/senior_programmers_and_developers_what_are_some/,0,learnprogramming
h7kt1t,Guide and Cheatsheet for the best practices for managing and storing secrets like API keys and credentials.,"A handy guide to follow when handling secrets API keys and credentials to ensure you these do not fall into the wrong hands

&#x200B;

[https://blog.gitguardian.com/secrets-api-management/](https://blog.gitguardian.com/secrets-api-management/)",1197,49,Mackenzie-GG,2020-06-12 13:35:42,https://www.reddit.com/r/learnprogramming/comments/h7kt1t/guide_and_cheatsheet_for_the_best_practices_for/,0,learnprogramming
zyjg6q,"Hired! What It Took, What I Learned.","Alright friends, I guess it's time.

I've been on Reddit for more than a decade and owe a bunch of things to a bunch of communities.

To this community in particular, I owe a lot. [Remember this?](https://www.reddit.com/r/learnprogramming/comments/qk9olh/after_8_months_of_consistent_selflearning_and_two/) Well I do. This subreddit's enthusiasm goes a long way, more than you think, please never forget that.

I want to share with you some of the things I learned and my process starting from no-code to getting hired, in a unicorn, in France, as a SWE, knowing that:

1. I'm from the Middle-East with only a Middle-Eastern passport (a very limiting one).
2. I have no degree whatsoever (got an associates degree in ""media and art"", so not even a B.A.)
3. I worked as a freelancer in that field for about a decade before making the switch.
4. That's right, a decade, I made the switch in my mid 30s.

I just hope this thread is useful to some of you, in some way.

**TLDR**: *Plan well. As you study let others know you're making a change. Interview early. Network and make it count. Soft skills are critical. Show up on time, be a sponge. Profit.*

# Step 1: Plan

I did the basics, that means I sat down and weighed my options, thoroughly researching fields I was interested in, where I wanted to get hired (geographically speaking, as it was important for me to leave my country of origin), which tech stacks were most in demand there, how long I could stop working for, if at all, etc.

Once your objective is clear (or as clear as possible), the second most important thing you can do is *design your curriculum based on your strengths and obstacles*. Play the former to your advantage and be aware of the latter so you can work around it. We're all dealt different cards, so play your hand accordingly. What works for me might not work for you, and vice versa. Can you take some time off of work? Are you married? With kids? Divorced? Depressed? Free to do whatever you want? Whatever your situation is, it'll be unique to you.

In a nutshell:

1. Determine your objective as clearly, simply, and specifically as you can.
2. Determine your path based on your objective by playing to your strengths and working around/through your obstacles.

I was aiming for France. Why? Doesn't matter. My circumstances meant that it would be *my* best option. What's yours?

# Step 2: Study & Put Yourself Out There

**STUDY**

I completed a Udemy [web dev bootcamp course](https://www.udemy.com/course/the-web-developer-bootcamp/) that's 60+ hours long (heard good stuff about [this one](https://www.udemy.com/course/the-complete-web-development-bootcamp/) as well), by the end of which I had some basic understanding and familiarity with HTML/CSS/JS/Node/Express/Bootstrap, the classics. This took me a few months.

Actually let's talk about this for a moment. You know how sometimes you come across a post about someone learning all of the above + React + successfully launching a space shuttle in less than 3 months? Yeah... not really. It took me a few months with no real work or family obligations whatsoever.

Guys, gals, if you're a normal human being and you've never done this before this stuff *takes time*. And it certainly takes a lot of will. So please don't buy into the 3 months from zero-to-hero hype, for most of us it's not applicable. Seriously, these kinds of posts are incredibly misleading and I personally found them to be pretty depressing when I started out.

Anyway, during my studies the most notable thing I did was getting involved in some hackathons, I built a very basic, static, somewhat responsive page which I hosted on Github Pages. Looking back at it now I guess it showed initiative, I was proud of it. I'm still proud of it.

After the course I started studying React because of course that's what you do. Around that time I started looking for a job, applying, getting the occasional interview, failing miserably, and keeping track of it all, diligently, in a Google Sheets document (I recommend you do this).

Basically the course got me confident enough to start applying. The more I failed, the less violent the failures felt. Slowly but surely I got better at it. Takeaway? Start interviewing early. There's no moment where you'll go *""Aha! I can start applying now!""*, for the most part you'll never feel like you're completely ready. At some point you gotta take the plunge, besides, these interviews will pay dividends later down the line, when you're *actually* ready.

Interviewing is a skill in and of itself.

**PUT YOURSELF OUT THERE**

As I was studying I started making the ""appropriate social media"" changes. I now had a LinkedIn profile and started connecting with people. Even on Instagram I kind of announced the switch in my own way. From ""an artsy"" type of guy to a dev, I'll tell you, it wasn't easy to put it out there but it was important, and it made a real difference.

By putting yourself out there you're not only priming others to help you / direct an opportunity towards you, you're also getting more comfortable in your own skin, and that's something. It's going to be a long ride, you're going to doubt yourself at times and others will doubt you too, so being comfortable in your own skin goes a long way.

And guess what? That's how I found a mentor.

A friend of mine based in France asked me if I wanted to talk to this developer that she had briefly met (they worked at the same company). The only reason that friend reached out to me was specifically because I had mentioned my career change a bunch of times on social media, and so when she met the dev she made the connection.

That guy ended up mentoring me for several months and I can tell you with 100% confidence that I would *not* have gotten the gig without his help, encouragement and patience.

Put yourself out there my friends, if you can. It's one thing to know you're making the change, it's another to let *others know about it*, and the latter is often overlooked.

*PS: ""announcing"" something on social media doesn't mean spamming people or being cheesy about it. It can be done in a subtle, non cringe way. Careful, if you end up being annoying/spammy it will have an adverse effect.*

# Step 3: Interviews & Soft Skills

**INTERVIEWS**

As I mentioned earlier my first interviews were a complete and total disaster, like meme-worthy disasters. Thankfully I would read posts here every now and then of other people sharing their own takes in detail. Can't tell you how helpful that was, to know that others were making fools of themselves and bombing interviews. In reality we weren't making fools out of ourselves, merely taking a hard step forward. Failure is expected. If you're not failing you're likely doing something wrong.

Right, so how did I get the job? Well, if you can believe it, by hosting a dinner once three years earlier.

Right about now this is all sounding pretty cryptic but I'd like to invite you to read the next part carefully. The importance of this concept took me 34 years to fully get through my thick skull so please let me save you a couple of years.

At a dinner, a social event, you meet other humans and get to *make an impression*. Humans call this networking. It is important. Actually I think it is right up there with knowing your way around a computer. **Networking is an essential skill that can, for the lowest amount of effort, yield the highest reward**.

Unbeknownst to me then, during that dinner I met and bonded with someone who would later give me a very solid referral, for an internship, in said unicorn in France. Back then I didn't even have the intention of becoming a developer. It was all purely coincidental, but that girl and I bonded, and three years later she would remember it fondly.

As I kept looking for a job or internship I stumbled on a familiar name (of said unicorn/company). And I'm like *""Vaylx, why does this sound familiar?""*... and then it dawned on me, I know someone there! I know that person from that dinner we had three years earlier!

So I reached out to her and she was happy to put in a word for me, and instead of printing out my resume and making a bonfire out of it, the recruiter reached out and granted me an interview, which I passed. I then made it to the second interview, and then the third. And then I got the internship!

Oh, and by the way...

**ABOUT SOFT SKILLS**

Do you know what the difference is between one noob and another? Their willingness to learn, their ability to communicate, being pleasant enough that the interviewer(s) can imagine working with you, day in and day out.

Soft skills, much like networking, are *critical skills*, especially if you're self-taught and a career switcher. It's up to you to turn it into an advantage or keep it as a disadvantage.

I'll leave it at that.

# Step 4: Internship

I did my best and felt like the dumbest person in the room all the time, and that was great. Getting paid to learn is a good deal, I expect my upcoming role to feel quite similar (as a junior dev).

As I mentioned I was familiar with the classic JS/HTML/CSS stack, but this job is Ruby + Ruby on Rails (+ many other tools which are never mentioned in courses). I learned on the job and that was fine. It's the concepts that matter, not the languages.

I made sure to always show up on time and kept a great attitude throughout my internship. I was as grateful and diligent as possible throughout it all.

I've read many threads of interns/juniors having terrible experiences with their teams, being left to themselves, without mentorship, pair-programming, etc. It was the opposite case for me, I guess I was very lucky (again). In that case I'll say what I started with, play the hand you're dealt as best you can.

In others words, make the most out of it and plan your next move.

# In Conclusion

Alright that was pretty long but I'll end on this, in 10 days I'll start my first actual, full time job as a software engineer. I feel lucky, privileged and proud, and the tech community has so far been nothing but gracious and generous towards me.

In 10 days I'll start my full time job but I already have the next 12 months planned out. What? I mean what I say. Planning is important.

If you're just getting into this or have been at it for a while please know that this field is not impenetrable. If I was able to do it, so can you. Unless of course you're doing this for the wrong reasons. What are wrong reasons? Well, that's up to you to find out.

Computer science, software engineering, web dev, where they intersect and where you'll end up will eventually be specific to your own circumstances, and most importantly, where you want to land. Wherever that is I wish you luck, patience, and grit.

Throughout it all please remember to take it easy on yourself. Every now and then give yourself a break, grab a drink, go for a walk, and realize just how far you've come. Your mental health is essential, this whole plan doesn't work if you're not doing well enough. The better you feel about yourself, the better you'll perform and, look, if you don't feel well, talk to someone. Reach out to people around you, hell, reach out to Reddit if you must. I bet you'll be pleasantly surprised.

And if at any points you realize that this is not what you wanted, don't feel bad about moving on. That's just life happening. If you owe one thing to anyone, it's honesty, and the first person you owe it to is yourself.

Special shoutout to all the women in tech, the women of Iran, and just generally speaking to women around the world. Please keep showing up.

And to anyone reading this, I hope 2023 is your year.

Your main man,

Vaylx

🌊",1193,91,Vaylx,2022-12-29 23:02:48,https://www.reddit.com/r/learnprogramming/comments/zyjg6q/hired_what_it_took_what_i_learned/,0,learnprogramming
jb0f9w,How do you guys learn after work?,"I work a 10 hour shift so by the time I come home I can’t really concentrate and give up to just watch tv or listen to music until I fall asleep in about an hour or two. I hate it because minds not tired enough to sleep instantly yet, but I feel like I can’t really be productive. Will coffee or pre workout help wake my mind up to think? I just want to get at least 30 minutes in everyday but and hour would be ideal. Do any of you guys have any tips?",1189,288,None,2020-10-14 13:14:21,https://www.reddit.com/r/learnprogramming/comments/jb0f9w/how_do_you_guys_learn_after_work/,0,learnprogramming
chqjo1,Making sense of Git and GitHub,"Hey guys, I recently spent a lot of time writing a concise and beginner-friendly explanation for Git and GitHub.

Early in my developer journey, Git confused the heck out of me. I couldn't seem to understand it's a purpose or why it was even used. When I finally grasped the reasoning behind it, it hit me like a ton of bricks. I came to realise how amazing of a tool it was. I couldn't believe I survived so long without it.

Recently, I decided to try and write a concise introduction to Git that anyone could understand. I know I'm not the only developer who struggled with Git early on. My goal for this tutorial was to create something I wish I read when I first started developing. Something that will take you from feeling confused to finally understanding what Git is about. 

It does this by explaining it conceptually and then taking you through a practical demo.

I really hope this is the article you read that gives you the ""ah ha"" moment and allows you to see the magic in Git

Here is the link to the article:

[https://pathof.dev/blog/making-sense-of-git-and-github](https://pathof.dev/blog/making-sense-of-git-and-github)

Any feedback or suggestions is appreciated, enjoy!",1190,127,TheSaasDev,2019-07-25 17:10:59,https://www.reddit.com/r/learnprogramming/comments/chqjo1/making_sense_of_git_and_github/,0,learnprogramming
7im77l,I am a bootcamp grad and will teach myself computer science in 2018. Who wants to join?,"Hi there,

As a bootcamp grad, I often feel like a fraud when I build my projects as I often miss the correct computer science foundations to understand deeply the topics I am dealing with. This is why I will dedicate my 2018 year to teaching myself CS. I will follow the Teach Yourself CS curriculum (https://teachyourselfcs.com/) and will try to go through it in 1 year.

Who would like to join me in the challenge? Maybe we could create a community?

Here is a blog post where I explain my approach:
https://dlet.me/stopping-my-imposter-syndrome-by-teaching-myself-computer-science-9ec1e0474060

**Edit**: Whaou !! I am so excited!!! Thanks a lot for the awesome answers!! Please check my own answer below for more info about how we can set this up and to participate to the debate!! :D
https://www.reddit.com/r/learnprogramming/comments/7im77l/i_am_a_bootcamp_grad_and_will_teach_myself/dr01m27/). Thanks a ton :D

**Edit 2**: The community is live on Discord. Please join us by clicking here (https://discordapp.com/invite/D29PZyd) and help us decide on to promote it in this topic (https://www.reddit.com/r/learnprogramming/comments/7iub9t/the_teach_yourself_computer_science_community_is/?utm_content=title&utm_medium=hot&utm_source=reddit&utm_name=learnprogramming)",1185,186,damienlethiec,2017-12-09 11:05:36,https://www.reddit.com/r/learnprogramming/comments/7im77l/i_am_a_bootcamp_grad_and_will_teach_myself/,0,learnprogramming
38ks3q,"I'm Zach Sims, CEO of Codecademy. We teach people the skills they need to find jobs.","Hi Reddit! I am Zach Sims, the cofounder and CEO of [Codecademy](http://bit.ly/codecademylearn). Almost four years ago, Ryan Bubinski and I started Codecademy in a teensy apartment in Sunnyvale, California. Today, the company has more than 20 employees in New York (and growing!).

Codecademy is the easiest way to learn to code online. Since my cofounder Ryan and I launched it in August of 2011, more than 25 million people around the world have started to use Codecademy to learn to code. We teach tons of different subjects, from [Python](http://j.mp/learnpythoncc) to [Ruby on Rails](http://j.mp/learn_railscc) (and beyond!), in a project-based format that encourages you to learn by doing.

I'm excited to answer your questions! Ask Me Anything!

Proof: [it's really me](https://twitter.com/zsims/status/606584029882785792)

**Edit**: Thanks so much for your questions! I'm taking off for the evening, but please keep them coming and I'll answer them in the morning! Make sure to check out Codecademy's newest course [Learn Rails](http://www.codecademy.com/learn/learn-rails). You can follow me on Twitter and reach out to our Community Manager here on reddit, @margotcodes. Good night!",1189,258,zach_sims,2015-06-04 21:19:53,https://www.reddit.com/r/learnprogramming/comments/38ks3q/im_zach_sims_ceo_of_codecademy_we_teach_people/,0,learnprogramming
10qydo5,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (Feb 2023)","UPDATE: The signs up are all used up. (Whoa, that was fast this month.) I'll release new codes on Feb 1st. But you can still see the first 15 of the 50 videos [on YouTube](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW), and the [Previews for all the videos are enabled on the course page](https://udemy.com/course/automate/).

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https:// udemy. com/course/automate/?couponCode=FEB2023FREE~~

~~https:// udemy. com/course/automate/?couponCode=FEB2023FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student) If you have a VPN service, try to sign up from a North American or European proxy.

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, Python Programming Exercises Gently Explained is a set of 42 programming exercises for beginners [for free](https://inventwithpython.com/pythongently/) or as a [99 cent ebook](https://www.amazon.com/Python-Programming-Exercises-Gently-Explained-ebook/dp/B0BGYJ7G6T/).


**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1191,118,AlSweigart,2023-02-01 16:06:15,https://www.reddit.com/r/learnprogramming/comments/10qydo5/2000_free_sign_ups_available_for_the_automate_the/,0,learnprogramming
tyilqu,Freecodecamp vs The Odin Project vs 100 Devs vs Udemy courses.,Hello everyone. I want to get into web development and if possible land a job when I am fully prepared for it. I searched up the internet and found these websites. I am curious of what you guys think about these and what resource do you think is the best.,1184,238,TolisKoutro,2022-04-07 17:52:29,https://www.reddit.com/r/learnprogramming/comments/tyilqu/freecodecamp_vs_the_odin_project_vs_100_devs_vs/,0,learnprogramming
nv6qua,Just got rejected again...,"Never thought I’d be at this point, don’t really want to make this post but just want to get this out of my head.

So about February last year I had a massive 180 on career and went all in on learning web dev, then cue coronavirus.... makes sense since I left school in 2008 and well that was a great time for the jobs market too...

So I stuck it out, discovered I love it, then had a little break whilst I thought about a startup and my laptop broke. Then I jumped back in hard. Around February I thought I was about job ready, had a decent understanding of Javascript and could make a few react apps and started on the node trail.

Job searching went great to start, got 2 interviews quite quickly, then nothing for like 100 applications... Kept progressing, started making a full stack site, made a decent personal site, dived into learning graphql, things start picking up and I got 5 interviews in a month! Aaaand they all led no where... 

Just got the rejection today from my favourite one I’ve came close to, seemed like a perfect job for me and they gave a coding challenge which I thought was a bit much but I wanted it so I put a lot of effort into it and definitely feel quite proud of what I made, still couldn’t get the elusive second interview.

Really dunno what to do at this point, I’m fucking miserable working 65 hours a week in a job I hate being a slave to the money. I know I’m not the most experienced, but I work 65 hours a week and I’m pretty sure there isn’t anyone more driven, do you want an employees for the next 6 months or 6 years and what applicant is actively looking to more than half their current salary?!?

So yea, 150 applications, 7 interviews, 0 2nd interviews, 0 offers

And there’s my story, guess I’m going to have to keep moving forward since there isn’t a plan b, here’s hoping I can make the “I did it” post sometime soon...

Edit since people have been asking my personal site is www.king-of.tech",1189,277,Whisky-Toad,2021-06-08 15:37:07,https://www.reddit.com/r/learnprogramming/comments/nv6qua/just_got_rejected_again/,0,learnprogramming
hdn0dh,I’m so stupid. I can’t think like a programmer.,"I’m 25 and a Master’s CompSci student after transitioning from a career in business I did not enjoy. I am taking pre req intro courses the first year. 

Anyway, a week or so ago I wrote a long post about my self-doubt, being overwhelmed with the transition, and not feeling capable. People were very kind and I started to feel a bit better. But then my intro to programming course ended and my data structures course began. 

I took my 400 class which was very entry level. It was Python and after ten weeks, we got to creating classes and that was about it. Covid and the riots sort of helped everyone in the semester in that the final was optional. And I didn’t feel hugely challenged until the very end. But overall, it was a good experience, great professor and idk, an A didn’t feel earned because it was such a weird semester, but that was out of my control.

Anyway, a week later and I’m on Java. I was just getting used to Python. This professor is not as equipped to teach a complete newb. He’s fine, but once again I feel overwhelmed. I was just getting comfortable with the most basic of basic Python syntax and structure. And now it’s not worlds different...but it’s noticeable. Getting used to the very basic syntax has been a pain in itself. Not to mention we were assigned over 400 pages of reading this week. Which I just absolutely could not do all of. I work, I just didn’t have time so I did what I could and followed lectures. 

Anyway, I’ll quit rambling. And I’ll pre req this by saying I’m NOT looking for homework help. I’m explaining my latest issue. Tonight, we’re given 5 functions to write in Java. One is we have to find and return the index value (int) from an  array (double) that is the smallest value. Ie [0,1,-2, 10,5] returns  2. And I’m so fucking lost and I know it’s so easy. When the professor goes over assignments and problems, it makes all the sense in the world. But I’m sure part of that is psychological. But take this instance. 

Here’s what I know I need to do. I need to iterate over the array. Some bad psuedo, 

For i in each index of the loop
Identify the smallest number in the array
And return it’s index

Simple, right? Yet I have no clue. The problem right before it is identical except that it returns just the min value itself, not the index (and it’s using doubles exclusively, not one int and one double). And without being able to use the last function, I still try to apply the same logic to this problem and no luck. The double (the list) and int (the index) constantly confuse me. I constantly get errors about the wrong decorations. I have no idea how to use the loops I learned in Python and translate the syntax. I don’t understand little things in example code (ie why when you iterate over a list do you do something like “while i > length of list” to tell when you’re done iterating). Like all these fucking little things are tearing me apart

I feel so stupid. Everyone whipped through this assignment in a day. Kids 7 years younger than me are asking the professor these complex questions in lecture way over my head. And when it comes to problem solving, I feel my mind just isn’t wired to solve these problems - and that’s the Crux of comp sci. For example, problem 3 on this assignment asks for the distance between the min and max value, question 4 asks to remove duplicates from a list/array. And those I have no idea how to begin thinking about them to solve them. 

I feel so fucking stupid. I can never learn it on my own. It always requires me looking something up which feels dishonest. I need to acquire this mindset, I need to learn to access a creative side of my brain. This is something I badly want to do. And when I can’t solve problem 2 on assignment 1, I just lose it. And I need to learn Java and keep up with Python so I don’t forget it all, and I only have so many hours in a day.  And if I can master Java I can eventually transition to C++. I want to be good, I want to understand, it’s a transition I want to make. I don’t know what’s wrong with me. No, I’ve never been a math person, but this feels like applied logic and I don’t even know where to begin. What’s the best way to study these things? What are the best habits? What can I do to truly understand and flex parts of my brain? Is it even possible? Am I just too stupid? 

Sorry for this long rant. I’m so fucking upset once again and I don’t know the best habits for this transition and I don’t know what to do.

EDIT: Wow guys, I don’t even know what to say. This really blew up and I’m so grateful for every comment. I want to get back to everyone but due to sheer volume and time I may not to. But either way, I cannot thank you enough.,",1190,269,belongsinthetrash40,2020-06-22 06:39:05,https://www.reddit.com/r/learnprogramming/comments/hdn0dh/im_so_stupid_i_cant_think_like_a_programmer/,0,learnprogramming
96jo17,How I taught myself to program; How I would do it again today,"There was a post here maybe around a week ago that basically asked the question, ""If you had to learn to program all over again, how would you do it?"" I didn't get a chance to respond to it then, and I can't find it now. I still wanted to write up my answer to that question, so here it is! Hopefully some of you guys find this interesting or useful. Sorry it's long. I think I waxed nostalgic.

**tl;dr:** If I had to learn to program all over again:

1. I would figure out what I wanted to make. I wouldn't think about how hard it was, how much I would have to learn, or how long it would take.
2. I would figure out what technology I could use to build my project. I wouldn't worry about making sure I found the *best* technology for the job. I can learn the best one later on a different project after I have more experience.
3. I would start working on it. I would find other projects built with that technology and start tinkering with them. I would apply what I learned to my own project. I would never get anxious and worry about the current state of the program, either regarding quality or completion level. 

**About Me**

I'll start by telling you a little about myself. If you don't care, please skip this section. I don't want to bore you.

I'm currently a full-time software developer at an electrical supply company. I primarily work on the company's Web sites, but also do a lot of work with our ordering system and writing code to communicate with third-party API's for things like shipping estimates and vendor stock availability. I've also had to migrate 30+ year-old legacy code from a BASIC-like language into VB.NET. This was slow, painful, and made me want to die. (I kid. Mostly.) Most of my time is spent writing back-end code, but lately I've been able to write more client-side code.

Before my current job, most of my career was as a freelance Web developer. I also did a short stint (about a year) at a Web design company. I left and went back to freelancing, because my work at that employer offered little opportunity to become a better developer. I also wanted more control over the quality of my work.

I like C#, but don't get to use it at work. I also really like where JavaScript has been going the last few years, and it might be my favorite language right now.

I went to college for Computer Science starting in 2004, but dropped out after three semesters because I was already working and didn't feel like I had learned anything from my computer science classes. At the time, it seemed like college was just costing me a lot of time and money that I could better use elsewhere. This does not mean I think you should or should not go to college. You have to make that decision yourself.

**How I learned to program**

I started learning to program probably around 1994 when I got access to a computer that had two games on it called Nibbles and Gorilla. These were both QBasic games. QBasic was essentially an IDE and interpreter. This basically meant I was able to open up the code for these games, change it, and run it to see the changes. It literally meant that I broke both of these games and had to read through the remaining code and the limited Help section of the IDE to try to figure out how to fix them. I really wasn't all that interested in making changes to those two games, but was definitely interested in making some new games to play.

Over the next years, I eventually made a few small test programs that did things like printing text to the screen, making beeps of different pitches that were supposed to sound vaguely like music, and drawing squares on the screen. Besides these, the first ""full"" program I think I ever made was basically a choose-your-own-adventure style text game. I don't remember the specifics, but you were in a spaceship. One of the choices you made was whether to make a journey using shields, a cloak, or neither. If you didn't use the cloak, you died.

The next language I learned was TI-BASIC, which is the programming language on TI graphing calculators. My parents bought me a TI-89, which came with a huge manual (made of dead trees, not bits). The manual had the documentation for TI-BASIC, and was really the first programming book I ever owned. I spent a lot time making games on my calculator instead of paying attention in class. I made a text-based RPG called Duel, and then made a sequel/remake called Duel 2. This was the first time I did a major rewrite of a program.

Around the same time I was making games on my calculator, I also started learning HTML, CSS, and JavaScript. Before I go on, I should tell you that this was around 2000-2001. StackOverflow and YouTube didn't exist. Firefox and Chrome didn't exist. If there were any good IDE's for these languages, I didn't know about them. Internet Explorer didn't have a console or inspector, so debugging HTML and JavaScript consisted of a lot of trial, error, and alert(""It hit the else. Why did it do that?!"").

I learned front-end Web dev by viewing the source of existing Web sites, reading the code to see what it did, then making and editing local files to play around. I don't know if there were good online resources at the time for learning these languages, but I didn't know about any. Eventually, I managed to get a book about DHTML (again made of dead trees), which helped a lot. I quickly realized that being limited to these languages ruled out any possibility of data persistence, so I learned how to install Apache and PHP on my home computer. PHP actually had a lot of online documentation, so learning it was a joy.

With a very basic understanding of Web languages, I set out on my first public project. I started working on a browser MUD, which is essentially a text-based MMORPG. This was a huge project, so why did I decide to work on it?

1. I was already playing some MUDs online, but none of them were exactly what I wanted to play.
2. I had friends who played MUDs, and I knew they would be interested in trying mine.
3. Since it would be an online browser-based game and I would first be releasing it to friends, I wouldn't have to worry about getting enough done to warrant a public release.
4. The nature of the game meant that anyone who played it wasn't excluded from playing other MUDs at the same time. Just have two browser windows open (tabs didn't exist) and switch back and forth. This meant that even if the game wasn't particularly compelling yet, my friends could still play it and not stop playing their other games.

When I first released what would essentially be considered an early alpha, I hosted it off my home computer on dial-up. Every day after school, I would get on AIM (AOL Instant Messenger) and tell everyone what my IP was today so they could connect and start playing (don't do this). All the players were stuck in one building for a while, because nothing else existed in the game.

This game ran for eight years before I finally shut it down. During this time, I:

1. Learned how write a registration and login system.
2. Learned how to write a chat system with private messages, different channels, and different in-game ranges (say vs. shout).
3. Created in-game mail and bulletin board systems.
4. Learned how to persistently store characters, rooms, items, NPC's, and lots of other data in tokenized files.
5. Migrated everything from my home computer to a shared server (and then again to a different shared server).
6. Migrated all the data from flat files to a MySQL database. Oh, and learned how to create, manage, and use a MySQL database.
7. Figured out how to make it possible for notifications to appear without the user needing to resubmit the page. (AJAX technically existed, but no one really knew about it until Gmail launched in 2004. I devised a hack using a hidden frame that periodically refreshed and was capable of making updates to its parent.)
8. Created in-game tools for editing and creating characters and rooms so that other people could start contributing to the game. (Which also led to creating admin roles with different levels of access.)
9. Created a simple scripting language and parser so that other admins could start programming behavior for rooms and characters.
10. Lots of other things. (Currency, players learning new abilities, guilds...)

Here's what I didn't do: Run into a problem I wasn't eventually able to find a solution for. I'm not saying that to try to pretend I'm some genius developer. You have to remember that there's no time limit on any of this. You can work on a problem as long as it takes. You can take a break for hours, days, or months, and come back to it later. You don't fail to solve the problem until you give up and don't try any more.

**How I would learn today**

I would pick something I wanted to make and figure out how to start working on it. I wouldn't worry about how complicated or hard it seemed, because I have the rest of my life to work on it. The program isn't the end goal. Learning is what matters.

I would find other people's projects, run them locally, then make code changes to see how they change the behavior of the program. The specifics of the projects don't matter as long as they're made with the same technology I'm trying to learn. The program isn't the end goal. Learning is what matters.

I would make my program for myself without worrying if anyone would ever really want to use it, because the program isn't the end goal. Learning is what matters.

I would hurry it to the point where I can at least use it, even if it doesn't do much and the UI is bad. Then I would improve and expand on it from there. I would add new features, and I would improve old features. I would never harshly judge myself if the current state of the software doesn't live up to my standards, because the program isn't the end goal. Learning is what matters.

I would work on whichever pieces of the program I wanted to in whichever order I wanted to. If I got halfway through a feature and didn't want to work on it any more, I would work on something else. The program isn't the end goal. Learning is what matters.

I would show it to people who seemed like they could be interested. I would let them use it. I would listen to their feedback without ego. I would try not to be defensive and only defend my decisions in order to start a conversation about alternatives. Even if I disagreed with their feedback, I would try to implement their suggestions and try it myself. I would let them try the new version made with their feedback. Building a change and then throwing it away isn't a waste, because the program isn't the end goal. Learning is what matters.

If I got bored with my program, I would stop working on it. If I became interested and came back, great. If I permanently moved on to something else, also great. Boredom means there's nothing left to learn from that program, and the program isn't the end goal. Learning is what matters.

Hopefully this helps someone.",1191,65,ChrisAtMakeGoodTech,2018-08-11 20:37:30,https://www.reddit.com/r/learnprogramming/comments/96jo17/how_i_taught_myself_to_program_how_i_would_do_it/,1,learnprogramming
odje63,w3school rocks ! ! !,"Just wanted to say this since "" w3schools "" seems pretty underrated what I've seen around the internet. It had bad past but these days for a beginner programmer, I'd say it's one of the best webs for improving your skills. I was having hard time solving easy tasks on [codewars](https://codewars.com) until I discovered w3schools. Was struggling with problems where I had to use few list, tuples and loop techniques which I was googling for many hours until that site provided exactly what I needed. Many recommend  MDN but for me the site isn't as appealing as w3schools. I don't wanna sound stupid but I feel much better about my start with w3schools ! That's all I wanted to say ! Cheers ! Break !",1185,73,Hackerman07,2021-07-04 12:22:19,https://www.reddit.com/r/learnprogramming/comments/odje63/w3school_rocks/,0,learnprogramming
9kxouv,"Lynda.com Free, all you need is a library card.","I didn't see it posted here so I thought I'd share that you can get access to Lynda.com free with a library card in most places.


For example: http://houstonlibrary.org/learn-explore/blog/houston-we-have-lynda


Even if you don't live in that city, for example, I live in Texas but not in Houston, however I can sign up for a Houston library card online, I just need to reside in Texas. That was enough to get me free Lynda access.


I would recommend searching Google for your city or state and Lynda.com i.e. ""Houston Lynda.com"", ""Texas library Lynda.com"" ""[Your State/City/Country] library Lynda.com"" 
    
&nbsp;

Edit:

This is not exclusive to the US, people have reported having success in other countries around the world. 


Some libraries offer their cards online (eCards), so there is no need to actually travel to the library to pick up a card. In the US you can even get a library card from another state, the Houston public library which I mentioned offers Non-Texas residents a card on a yearly membership for $40, which is way cheaper than the $25 monthly subscription to Lynda. 


Also, please don't forget to check out the other resources the libraries have to offer, there are coding books you can check out, and other free online resources that some libraries offer.

",1190,155,liinko,2018-10-03 03:44:36,https://www.reddit.com/r/learnprogramming/comments/9kxouv/lyndacom_free_all_you_need_is_a_library_card/,0,learnprogramming
2a9ygh,1000+ Beginner Programming Projects (x-post /r/programming),"~~The original site and blog post (blog.programmersmotivation.com) is down, given all of us a 403 error. Until it's back online, you can use this post.~~

~~To the truly lazy who don't want to use the Google's cached link and prefer just the outline:~~ 

ORIGINAL SITE IS BACK: http://blog.programmersmotivation.com/2014/07/09/list-projects/

**All the beginner project links:**

1) [Martyr2's Mega Project Ideas \(110 Projects\)](http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/)

2) [Rosettacode.org Programming Tasks \(500+ programming tasks\)](http://rosettacode.org/wiki/Category:Programming_Tasks)

3) [Project Euler \(476 practice problems\)](http://projecteuler.net/). Word of Caution: the site had it's [login features hacked and compromised](http://projecteuler.net/news) - you needed it to check your answers, but now the site says that answer checking is back online. Proceed with Caution. 

4) [Coding Bat \(140+ Practice Problems\)](http://codingbat.com/)

5) [Reddit's Beginner Projects subreddit \(22 Problems so far\)](http://www.reddit.com/r/beginnerprojects)

6) [Beginner Project1s List hosted on Github \(93 Projects\)](https://github.com/karan/Projects-Solutions/blob/master/README.md)

7) [Daniweb Crucial Projects for Beginners \(5 Projects\)](http://www.daniweb.com/software-development/python/threads/131973/5-crucial-projects-for-beginners)

8) [Code Abbey \(122 Problems\)](http://www.codeabbey.com/index/task_list)

9) [Game programming beginner projects in Python \(49 Projects\)](http://inventwithpython.com/blog/2012/02/20/i-need-practice-programming-49-ideas-for-game-clones-to-code/)

**Just want ideas for projects?**

1) [Internet Wishlist](http://theinternetwishlist.com/) **EDIT**(late): The website is down. (T-T) Here's the Twitter for the archive: https://twitter.com/theiwl

2) [The Idea Machine](http://www.ideamachine.io/)

**The blog post's own recommended projects:**

1) Build a calculator - go onto scientific for a harder challenge.

2) String Manipulation projects - so substrings, palindromes, comparison, splits etc.

3) Reminder App

4) Alarm App

5) Simulator games of your favorite sports

EDIT:

Added in /r/dailyprogrammer from the comments section. The original blog post didn't have this.",1187,74,octnoir,2014-07-09 21:36:49,https://www.reddit.com/r/learnprogramming/comments/2a9ygh/1000_beginner_programming_projects_xpost/,0,learnprogramming
mlkym8,PSA: Pluralsight is FREE for the entire month of April!,"Pluralsight is offering free access to Pluralsight Skills for the month of April.  You can get access to 7,000+ video courses for free with no credit card required. 

[Link](https://www.pluralsight.com/offer/2021/free-april-individual) to the offer.",1184,76,cameronkinney,2021-04-06 20:29:24,https://www.reddit.com/r/learnprogramming/comments/mlkym8/psa_pluralsight_is_free_for_the_entire_month_of/,0,learnprogramming
112mcu0,"Figuring out how something works, no matter how simple, is such a dopamine rush.","I’m new to programming, almost completed a C++ fundamentals course but dropped off for a couple months, I tried making some of my own programs but stopped when I hit a wall. Kept saying I’d go back, intended to, but I pushed it off. Last night, I did.

As everything I’ve learned hasn’t fully clicked yet, and because I’ve been on-and-off with programming, I understand some basic concepts of programming, but have no idea how to do other things.

Last night, I wanted to make a function for my little program, that displays “Press Enter to Continue”. I could do this without a custom function, using “DrawText”, a Raylib function, but I thought, well, a function should work, so let’s try and make one.

I made a class, declared void pressEnter().

Queue 30-60 minutes of confusion. I’ve declared my function, why can’t I access it using the dot operator?

Looked at some old code from the course, then I realise how to access member functions and what I need to do first. I do that, access the function where I want it to call, then— nothing.

Why won’t it do anything?

Then I looked at some more old code. Oh. *Oh*. Of course, you have to define a function to make it do something. I used the DrawText function as part of pressEnter’s definition, and it worked.

That, and realising why member functions are public, and member variables are private, made me super happy and giddy. I did a thing! 
And now I understand how you keep member variables private, to give the user a safe way to interface with your program.

I know this is all super basic stuff but it’s a little win for me and this is where I stay on the wagon. 

I’d like to make a dream game in years to come when I have the experience, but if I keep dropping off when I hit a wall, I won’t get anywhere.

I know that if I just keep chipping away every day, even if it’s just a few lines, I’ll get there eventually. I’m learning what I need to so I can progress with my program, rather than everything at once, because I struggle to comprehend some programming concepts.",1184,31,TheUFCVeteran3,2023-02-15 01:45:23,https://www.reddit.com/r/learnprogramming/comments/112mcu0/figuring_out_how_something_works_no_matter_how/,0,learnprogramming
yn132o,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (Nov 2022)","UPDATE: The codes are used up. You can still watch [the first 15 videos on YouTube]((https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)). You can also go to the course page and click ""Expand All Sections"" and click the ""Preview"" link for each video to watch them on the site.

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https:// udemy. com/course/automate/?couponCode=NOV2022FREE~~

~~https:// udemy. com/course/automate/?couponCode=NOV2022FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, Python Programming Exercises Gently Explained is a set of 42 programming exercises for beginners [for free](https://inventwithpython.com/pythongently/) or as a [99 cent ebook](https://www.amazon.com/Python-Programming-Exercises-Gently-Explained-ebook/dp/B0BGYJ7G6T/).


**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1185,86,AlSweigart,2022-11-05 17:51:38,https://www.reddit.com/r/learnprogramming/comments/yn132o/2000_free_sign_ups_available_for_the_automate_the/,0,learnprogramming
kdqacm,Is it too late to be a programmer?,"Hi, I'm 32 (M) from the Chicago area, who hasn't been to school for many years. When I went to college several years ago, I would take 2 classes per semester, while working at a full-time job, due to my learning disability and I wanted to go at my own pace. After working at the job for 10+ years is now suddenly coming to an end.

For a while, I have been toying with the idea of getting into programming, but I kept putting it off because of my comfort zone. At the same time, I feel a little discouraged at the fact that I decided to learn programming at this age. I've done some form of programming from another job in the past **(not the main focus of the job)** and I didn't find it difficult to learn, once I fully understood how certain function works. The most intimidating parts for me at this point is figuring out the best route and who/where to reach out too.

&#x200B;

**Here are the questions I have.**

1) Is it a realistic job that I could get?

2) Do you need a bachelors degree to get the job?

&#x200B;

If anybody has any suggestions that could help stir me in the right direction, I would really appreciate any help.  


Thank you",1185,357,Chompy621,2020-12-15 17:39:23,https://www.reddit.com/r/learnprogramming/comments/kdqacm/is_it_too_late_to_be_a_programmer/,0,learnprogramming
clj1l2,Useful Big-O Notation Cheatsheet,"Big-O complexities of common algorithms used in Computer Science


[bigocheatsheet.com](https://www.bigocheatsheet.com/)",1184,72,alexwan12,2019-08-03 13:58:51,https://www.reddit.com/r/learnprogramming/comments/clj1l2/useful_bigo_notation_cheatsheet/,1,learnprogramming
s2vrdp,Free long term personal mentoring for two people,"
## Update after 24 hours
I've received well over 200 applications. This is already a lot to process. I decided to stop accepting new applications as of right now instead of a week from now. Some people have already messaged me that they will write an application later this week; those I will still accept.

The majority of applications mentioned web development. /u/obvslynot mentioned https://www.reddit.com/r/learnprogramming/comments/rlmulr/i_ran_a_100_free_full_stack_web_development/?utm_source=share&utm_medium=ios_app&utm_name=iossmf which might be interesting to you.

### End of update

In short about myself: I have degrees in computer science and educational science and have been a software engineer for five years. Currently I work on programming education material on my own.

To still have the social element of teaching in my life I informally take on students. My latest student moved on so here I am looking for a new one. Actually, for the foreseeable future I have time for two new students.

I offer to have a weekly session of two hours, over the course of multiple months. During our sessions we look at what you've done since our last session, I help you overcome difficulties, show you techniques, suggest reading and viewing material, et cetera. Although I can give recommendations, ultimately you decide what you want to learn.

For absolutely free. I see this as four hours of weekly charity work that I greatly enjoy.

I do have a few requirements:

* You are very certain that you have both motivation and time for the coming six months.
* You are able to have weekly voice chat + screen share sessions
   * You have stable internet and a working microphone
   * You can hold a conversation in English or Dutch
* You are an eager and independent learner.
   * In between our weekly sessions, you spend at least a couple of hours discovering and practising on your own.

If you are interested please send me a personal message. I expect that more than two people will react to this so to help me choose please tell me a little about yourself:

* Age, country
* What you study or do for work
* Current experience in programming. If you can show me any of your code that would be great
* What areas of programming you find interesting
* The first thing or first few things you would like to improve on or know more about.

I greatly appreciate it if you spend time to write an application so even if I don't choose you I will make sure to reply. ~~I will wait one week for applications to come in and then make a decision.~~ Update: after well over 200 application in the first 24 hours I won't accept any more. So unfortunately you can no longer apply.

I'm happy to answer any questions either here in this thread or in a personal chat.",1181,80,vuurdier,2022-01-13 09:45:00,https://www.reddit.com/r/learnprogramming/comments/s2vrdp/free_long_term_personal_mentoring_for_two_people/,1,learnprogramming
ohn721,I made a YouTube playlist of me building a real website from scratch of one of my clients and I explain everything I do and why to help beginners learn how to think like a developer. This is for everyone wishing they could job shadow someone as they worked.,"For anyone wanting to learn web development - Here’s the playlist:

https://youtube.com/playlist?list=PLMPdeA59PPg2Cbd3cul0wFOY2KCbb4IID

Lots of good stuff in this one to learn how to make a mobile first and responsive website with no frameworks, just html and css. 

I go over all my decisions and explain why I do things a certain way. I did not plan this video out - I run into problems and I talk through them. I left everything on these videos so you can learn how to think through problems yourself when you get started building your own websites. 

So I explain everything I do and why I make the decisions I make so others can see HOW to think like a front end developer. 

I also go over how to transfer a desktop design to a mobile design and how to decide what to keep and what to change. It’s not always easy to figure out how to make a desktop design into a mobile one, but that’s what I do here and hopefully it helps!

If you liked that, here’s the series I did last week for a MUCH more complicated and very modern design with a ton of useful css tricks and everything I mention earlier:

https://youtube.com/playlist?list=PLMPdeA59PPg2sLFYU3f-vITZgOWVSCZ6e

EDIT:

Here’s a live demo link to the site I made in the video all complete if y’all wanted to see it:

https://forcedevolution.netlify.app

Still not finalized yet. Gotta write content and work with my other developer to integrate my code into Shopify and insert the store where it needs to be.

Hopefully this is helpful. It’s not exactly a tutorial, more like an implementation of what tutorials try to teach you. So if you’re tired of tutorial hell this should be refreshing. Feel free to ask any questions!",1183,41,Citrous_Oyster,2021-07-10 17:41:39,https://www.reddit.com/r/learnprogramming/comments/ohn721/i_made_a_youtube_playlist_of_me_building_a_real/,0,learnprogramming
tkcu85,I'm not qualified,"So I've learned the basics of python, javascript, and c#. Emphasis on basics. I got a wild hair one day and started applying to web dev jobs just to see how far I could get. Irresponsible I know. But I landed a job with basically no questions asked, the CTO set me up with a remote desktop with all the company info and gave me a task in sql. I realized I don't even know where to start working in the real world, today is day one and I want to call the guy who hired me, apologize for wasting his time and just be honest about feeling unqualified. I guess my question is, what would you do? There's like a 15% chance I can complete the very first simple task he gave me, but even if I do I know I probably won't make it very far after that.

Edit: thanks to you guys I deduced my issues to a few questions and called my superior. He basically said the same thing most of you are which is, look man you gotta start somewhere and just because you don't know exactly what is going on doesn't mean you can't do this. He walked me through some of my problems and I successfully completed my first task as a developer! I just want to thank each and everyone of you beautiful amazing people for helping me through this. This community is so fuckin awesome ❤🥲

Update: I've completed day two's project successfully as well! I can't believe I almost gave up on this. The support here has been astounding. Also a lot of people have been asking so: I don't have a portfolio, no degree, no LinkedIn,  and no previous professional experience. Literally just did javascript, c#, and python courses in codecademy. I didn't even complete the entire courses just got a basic understanding of the syntax. I also had a few days to prepare and partially familiarized myself with Microsoft SQL which apparently a lot of companies use for data management. 

Backstory: I applied to like 2 or 3 web development positions (hardly enough for a serious job search) I was doing sales for a construction company and I hated it. As soon as I started applying for dev jobs I thought to ask my current company if they had any remote work they needed done. Turns out there was only one guy in the tech department the CTO, he asked to see my resume and gave me a shot. Pretty lucky I know. Hence my severe imposter syndrome.",1180,156,OkBreadfruit2473,2022-03-22 20:52:47,https://www.reddit.com/r/learnprogramming/comments/tkcu85/im_not_qualified/,0,learnprogramming
ttxoc3,Thank you everyone. I did it.,"I am 25 and have a bachelor degree in management, living in a country that I don’t speak the native language of due to my wife’s work. I’ve graduated a little more than a year ago and made +300 job applications in 5 months following my graduation, to no avail. I didn’t even land a single interview even though I crafted a cover letter for every individual company. My applications were for positions like project manager, customer success, accounting, marketing, analyst, and a lot of internship and graduate programs, nothing panned out. I’m still baffled by this. It’s a country with very competitive labor market and my CV didn’t stand out AT ALL. Since I didn’t have any significant achievements, locals who spoke the native language were always a step ahead although I always picked English speaking international companies to send my CV. 

The reason for my impulsive applications and panic was because I was going to be father in mid June (2021) and we needed one more income in our household. We were barely making ends meet with all the expenses even though my wife is earning higher than average. It was enough for two of us to survive, not for three. The day that our son was born, I made the decision to learn programming. It was always an option since I knew it was in demand, but rather frightening one since I had zero knowledge about it. I’ve read overwhelming amount of success stories in this subreddit the following days, some of which are still saved in my account to this day. 

We got some personal loans to tide us over until I find a job and my wife applied for parental leave, which is paid and one year long in our country. The plan was that she would look after the baby and I would invest all my time in studying.

I studied day and night from mid June to early January, should be averaging 14 hours a day and this is my humble guess. 1-2 days off in a month, to be able to spend time with my son. Cycles of tutorials and small projects with relevant technologies, again and again. I smacked my keyboard a lot, broke two of my glasses with the stress through the roof. Probably lost a lot hair during this period.

 From early January to March I was building fully fledged, solid projects to show in my portfolio. This was at a moderate speed, averaging 6-7 hours of work a day, and was a much more pleasant period since I’ve grown some confidence in my tech stack and didn’t need tutorials. All I needed was original ideas. During this period I also got to meet my son, which I couldn’t spend much time past 6 months.

I started making new job applications at March with my portfolio, for software developer positions this time. It was emotionally challenging given my traumas from past year. 

I’ve had multiple rounds of interviews at 4 different companies throughout march. I’ve passed all technical interviews and got 3 offers, one of which I accepted today and I will sign the contract next week! Since I had several offers, some companies had to make counter offers and I ended up getting 20% more than regular junior salary in the country. Mind blowing!

I will have the best sleep of my life this weekend. This subreddit has been a great guidance and motivation to me, thank you everyone! 

Hope this post can motivate some of you that are on the same path! Don’t give up, I promise every minute of your work will pay off.

Edit: I will make sure to answer the questions on this thread tomorrow. Thanks everyone for all your good wishes and the award!",1184,90,Mississippimann,2022-04-01 18:21:00,https://www.reddit.com/r/learnprogramming/comments/ttxoc3/thank_you_everyone_i_did_it/,1,learnprogramming
r8qa9g,( almost ) self taught programmer got hired!,"I started self learning programming 2 years ago at the age of 27. I had a bachelor's degree on a different field and i was working as a waiter for the last 10 years. Last year i enrolled on a 1,5 year master's degree in cs. Nothing fancy just some theoritical stuff like ds algorithms and operation systems. Fast forward one month ago i got my first full stack web developer role!!! This is my third week there and i am so excited that i pulled this off. My sallary is almost 30% more than the average jr developer sallary. 

Role : full stack web developer ( react/nodejs )

The thing that really bugs me is that the web team is really small ( 5 devs including me ) and basically my duties are not jr ones. I contribute daily on our main project, i have my own share of tasks and deadlines and even though i can ask questions the seniors they expect me to tackle difficult problems on my own. i managed to pull off most of my task until now but i am so stressed cause i dont understand half of the things they say to me  but somehow i manage ( michael Scott ). 

Also despite studying on a cs degree the company considered me as a self taught developer. Most of my colleagues have cs degrees and a lot of them a master's degree and i feel as an imposter! 


Anyway..some advices

1) keep on learning

2)4 hours studying 2 times a week is better than 1 hour every day

3) when you start a tutorial dont follow along , think of a project idea similar to the one on the tutorial and do that as you watch the tutorial. It forces you to think more of what you learn and where and when it is useful than just typing

4)dont build 10 projects , build one or two big ones. I built a performance analysis pwa for runners. This project was the only thing that i talked about with the interviewers cause everything was there. React,redux,functional components,class components, hooks,router,rest api, external apis, algorithms implementation, memoization, user authorization,third party apis,databases etc. 

It really made the intereview proccess easier as i could already prove that i knew what i was doing so they asked me questions about my app instead of testing me 

5)if you are a web dev learn how JavaScript works dont jump straight to react or another framework
Hoisting,es6, arrow functions, callbacks,class and prototypes are more important that knowing how to write create-react-app

6)buy some udemy courses. Most of what you need is free online but nothing beats a structured lesson.

Edit: i learned html,css,vanilla js through free online courses. The problem is that i really wasted a lot of time thinking what i should study next and also i learned some concepts in the wrong order wasting time. For example i started learning react before studying arrow functions and callbacks and it really made me almost quit react.

Another problem with free courses is that most of them cover only the basics and then the tutor leaves you there.i learned flask server side rendering that way and for some time i was oblivious of the existence of rest apis. In a structured lesson you dont have to guess what to learn next. I believe that time = money so saving a few weeks of wondering by giving 10 bucks on a udemy lesson is cheaper than the free courses.

So the advice is buy a lesson for JavaScript , one for mean stack and study the rest online for free . Html,css(flexbox,grid,responsive design), bootstrap,dbs,git, typescript, 


7)dont listen to anyone. People laughed at me 2 years ago and told me to leave the crap and that i am wasting my time.


What i studied during these 2 years

Python
Sql
Git
Flask
Html
Css 
bootstrap
JavaScript
React-Redux
Express js
MongoDb
Typescript

Keep on everyone. Sorry for my bad English , not native.

----------------------------------------------------------------------
___________________________________________
Edit2: Wow. Thanks for all the comments and awards.

My app is https://www.leadingpace.net you can find it on playstore too.

I consider myshelf self taught. I learned most of my skills through online courses, the program i attend is a conversion program in information technology for people who want to combine their first degree with cs, it is 1,5 years. Of course it is a help and a boost i never tried to minimise the importance of this, but most of my colleagues have a 5year cs bachelor's and a 2 years masters degree. I think that having a bachelor's in stem field more important. Anyway this is my opinion no need for hate never tried to trick anyone!

Any advice i gave you is my personal nooby opinion, so take it with a grain of salt.

I was employable one year before after self learning for one year. I got a few interviews and one offer but i declined due to some personal reasons.

You can message me for anything, and i hope i can help, sorry for not replying right away i will do eventually to any one of you. When i started this community helped me so much so i will do anything to give something back",1179,114,ConstantINeSane,2021-12-04 14:02:17,https://www.reddit.com/r/learnprogramming/comments/r8qa9g/almost_self_taught_programmer_got_hired/,0,learnprogramming
resrmd,Please stop relying on videos.,"Everyday I see posts all over Reddit to the tune of, ""why can't I code?"" I've watched x videos and when I try to program I have no idea what I'm doing.

At least 5 of these posts a day. Stop trying to learn from videos alone. Or hell, altogether. Videos give you a false sense of accomplishment. You watch one or 10, and you think, ""yeh, I get it!"" And then you move on. But you don't. You don't get it. Not until you actually take the material and use it in your own code. 

Videos are good for a recap, and reminder, a primer. But should never be used alone. I've said this a million times, it's like watching someone build a house. You understand for the most part what is happening, you may even be able to guess the next step, but until you swing the hammer, you don't know shit.

YouTube may be the worst thing to have ever happened to programming because so many ppl think watching means learning. You learn by doing, and by making mistakes, and then by figuring out things as you go. 

If you must use videos, pause them and code along with them. Until you know the basics, type as much code as you can and let the knowledge accrue naturally, and don't worry about how good you'll be in a year. Focus on how much better you are now than last week, month, etc.

IMO, there is no substitute for a good book Pdf or hard copy and an IDE. You can refer back to the material and take time to let it sink in. And we all use Google. Being able to pull the steps to a solution out of Google is a very good skill to have. No shame in that. I'm not saying steal this man's code. Not at all. But stop using videos as your one means to an end, or you'll never get anywhere.",1177,215,HobblingCobbler,2021-12-12 16:43:08,https://www.reddit.com/r/learnprogramming/comments/resrmd/please_stop_relying_on_videos/,0,learnprogramming
ryd4xr,"Some people will never ""get"" programming. That's me.","So I want a career change, or rather, a career. I love computers and the idea of programming, so I'm giving it a real shot. Tried learning Python first. Suppose to be easy. Spent a month on it and literally couldn't retain anything outside of the basics. I couldn't make anything outside of simple input and print commands. What a joke. I went through so many different resources and nothing helped. Definitely NOT blaming the resources or teachers here.

Decided to change gears and do The Odin Project after hearing great things. Loved learning git / githut. Loved learning HTML. It's easy to understand and being able to actually make a functioning website early on was so cool. Ok, so my website is bland, time to learn CSS. A bit daunting at first, but I pieced things together and I think I got a good understanding now.

&#x200B;

Then I get to the Box Model and Inline. Just a bombardment of information. Spent hours looking at the screen blankly like a deer in the headlights. Got through these modules, but don't remember anything outside of margin, padding, border, and display: inline-block. I tried to add this stuff to my website and somehow made it look more amateur than plain HTML...

&#x200B;

Finally I get to Flexbox. Even more of an information overload. I do the interactive assignments on MDN and it clicks, except it doesn't. I get to css-exercises Flexbox 2 and spent 3.5 hours trying to solve this thing. So discouraging. Feel like crap when I can't figure this out. Beat myself up mentally. I refuse to look at the solution and cheat, so I try looking back at the Mozilla documentation. I don't want to google, but I do. Still, nothing helps. I try Flexbox Froggy and get through it all, but that didn't help me for the exercise. So I go back to the exercise and guess... over and over. Deleting lines, copying and pasting, commenting things out. It was all trial and error as usual. My finished product looks like the solution, but the code is probably completely different and sloppy. I know you can write code in a different way that still works, but the fact that it took this long to complete the exercise is embarrassing.

&#x200B;

I don't think I have the intelligence / logical thinking for programming. I'm patient, but that won't help me if I just stare blankly and can't solve the second exercise of a basic module. Just struggling with Flexbox, I know JavaScript is going to be hell; Worse than Python I presume. I have an elementary level math education and I see that a calculator is listed as the final project. Oh boy...

&#x200B;

I am going to finish the course, or try anyway, but I think this will be the end of my programming journey. I gotta be honest, reading some of the posts here, I am both happy and envious of those learning. Some of the people saying they can code for hours on end. That's passion. I wish I had that. I read one post where a user who lived in a third world country looked forward to coding on their old computer every day, because that's the only hope they had. God damn. I want that, but I think I have to be realistic and realize I don't have the smarts for it.",1179,442,ratona5,2022-01-07 17:44:12,https://www.reddit.com/r/learnprogramming/comments/ryd4xr/some_people_will_never_get_programming_thats_me/,0,learnprogramming
bcgef3,"Pro tip: If you're trying to get started as a software engineer, then volunteer at conferences.","This helps you network with potential employers, learn what the professional software engineers are doing, and if you can contribute to their open source apps, you can add work experience to your resume. Moreover, you can attend for free.",1178,70,tokyopanda1,2019-04-12 17:38:09,https://www.reddit.com/r/learnprogramming/comments/bcgef3/pro_tip_if_youre_trying_to_get_started_as_a/,0,learnprogramming
scgu8c,You’re an investigator more than a coding whizz,"I just wanted to share a small bit of advice for beginning programmers, especially after my last post seemed to get more negative responses which is never my intention. 
I think a lot of new programmers think the process of learning is like school: someone teaches you, you memorize it, then perform it on a test/app. 
The truth is, in the real job world, you spend most of your time researching when you are a junior. 
So just remember: practice your patience, resourcefulness and curiosity more than a particular language/framework. If you can master how to learn, what you learn is much less important.",1176,89,consciousCog13,2022-01-25 15:54:38,https://www.reddit.com/r/learnprogramming/comments/scgu8c/youre_an_investigator_more_than_a_coding_whizz/,0,learnprogramming
fnlquh,Colt Steele is running a free Code Camp on YouTube.,"Colt Steele the famous author of the [Web Developer Bootcamp](https://www.udemy.com/course/the-web-developer-bootcamp/) has started his series called ""Code Camp"" just so that people living in a lockdown can learn something new! 


**You can find it here:** 
[Code Camp Colt Steele](https://www.youtube.com/watch?v=SF_Xl5TOGlY)",1171,48,oculusshift,2020-03-23 15:23:56,https://www.reddit.com/r/learnprogramming/comments/fnlquh/colt_steele_is_running_a_free_code_camp_on_youtube/,0,learnprogramming
fey9am,20 Things to know before you start programming,"Everyone who started coding started out pretty much in the same seat as you. It can be *extremely frustrating.* A lot of people tend to give up when they start teaching themselves to code. It can be overwhelming, and not bearable at times. 

The CTO and Co-found of TheFireHouseProject.com listed the [20 things to know before you start programming.](https://learnworthy.net/20-things-to-know-before-you-start-programming/)",1172,112,WdrFgt,2020-03-07 17:26:42,https://www.reddit.com/r/learnprogramming/comments/fey9am/20_things_to_know_before_you_start_programming/,0,learnprogramming
3bkjy1,Really smart site for people who just want to watch coders code,"I just came across this sweet website that works like Twitch.tv (a gaming based livestreaming service) and on it you can watch people code live. Not super interesting for most people but pretty cool nonetheless.

https://www.livecoding.tv/",1172,65,Testcatt,2015-06-29 23:49:30,https://www.reddit.com/r/learnprogramming/comments/3bkjy1/really_smart_site_for_people_who_just_want_to/,0,learnprogramming
5h8eaq,#JavaScript 30 - Build 30 things in 30 days with 30 tutorials,"https://javascript30.com

I don't know about you but after hours of endless theory (I love you, free coding resources) I just want to build stuff right now.  And it's free! ",1175,82,lah_di_dah,2016-12-08 18:01:02,https://www.reddit.com/r/learnprogramming/comments/5h8eaq/javascript_30_build_30_things_in_30_days_with_30/,0,learnprogramming
njr9oc,Learn from my mistake. Almost got the job but end up bombing it.,"Hey everyone.

I'm a chemical engineer who's been trying to get into the programming world. The percs are of course a big part of it, but to be honest I really enjoy anything to do with coding so I'm trying to get a data analyst job (I have done similar jobs but with other tools, plus I get to use statistics and math). 

Because of covid's very difficult situation I'm working in a kitchen as a kitchen hand. In the meantime I'm always trying to get into R or python to do an analysis or to learn something new about it. I've worked as a data analyst before (back then it had a different name) but I never used any programming tool. I had to deal with gigantic excel files and use VBa macros to automatize very tidious repetitive work.

I have been applying for a while now, and got some feedback from my applications back home (EU), but not that many from my local residency. Unfortunately since I could be considered a junior (and I am in the programming sense) the applications back home tend to end when they find out I'm living half the world away.

I was able (to my surprise) to get an interview for a start up where I'm living in (different town).

We start talking via mail with their recruiter and he seemed very nice. We have a conversation through Skype and it went great, he told me on the spot that I would be advancing to the next interview.

Next interview was with the VP of engineering. Pretty chill guy with a lot of experience. Also went great, so they sent me the technical assessment. Basically it was a data set from CUI which was very disorganised and dirty. Using R I made a script to load the data, clean it and filter it for the things we needed. Then I had to make some kind of visual representation of the data (I used tableau).

I was very nervous because, even though I was confident in my ""data analysis skills"" I didn't trust my coding. So I practiced and coded away for 3 days like my life depended on it.

By some miracle, they loved it. I was already shaking, I had a final interview before getting the job. They paid a flight for me so that I could meet them! Man, I was excited . Finally a job where I can actually build in my career, I have been looking forward to this moment for so long that I lost track.

Anyways, the guy sends me an email with all the details, I was going to have 2 more interviews, one technical where we were going to see my code, and another one for ""culture fit"".

First came the technical interview. I was expecting one of the guys that had already interviewed me, but in the end I was there alone with the head of the technical team (very young data scientist). To my surprise, she didn't really wanted to see my code. She said that it was greatly done, very neat and that she had nothing to add about it. So she started making me several questions of ""life in general"" examples of data analysis (questions like how can you say who has the fastest speed in a population). I answered like an idiot, she was asking this questions for me to answer with some statistics theory that I simply couldn't understand at the moment. I was very lost since I was expecting to be reviewing my code. But instead I found myself having to pass statistics 101 again. 

I bombed HARD on that interview, like really really bad. You know that feeling of ""I know I done fked it up"". So the other cultural fit interview went great, but next day while I was flying back home I get a call from the hr guy.

The rejection was pretty hard for me, specially because they made a lot of emphasis in the fact that they didn't care for technical experience.

So my take away from this is that you should trust your coding a tad more, and look at those places where you think you are the most comfortable at, they might need some re-shining.

I have started to learn statistics again, at least the important part.  I shit literal bricks whenever I read some concept or something like that and it falls perfectly with the questions she asked. I was so close!

Next time data analyst position, next time will be mine!

Tldr: was able to pass every interview cept for the last, thought my problem was going to be my coding and in the end it was my statistical knowledge.

Edit: thanks everyone for the responses, feedback and good vibes! You are amazing!",1176,133,Gabyto,2021-05-24 06:23:16,https://www.reddit.com/r/learnprogramming/comments/njr9oc/learn_from_my_mistake_almost_got_the_job_but_end/,0,learnprogramming
oqzep4,I'm depressed... let's learn to program.,"**^(Long story short:)** My job ended and I got a serious wake-up call to how horribly/devastatingly toxic my family abroad really are. Found out most of them don't even really see me as real family... yet somehow they still demand to be *treated like little delicate* *johns* & *dorothy's*... but, well.. I hope out from my internal misery something here will prove useful to someone somewhere in the world.

Things to mention:

* I have no career/previous tech related jobs or experience in programming
* Knowledge wise, starting/started from 0.
* I'm essentially new to reddit (so forgive me for my noobness)
* I am under 30yrs old, with no degree to speak for
* This is my progress story

**^(My Progress Story:)**

So first day, after several days of feeling like a failure, I searched on Reddit. Noticed someone had posted their success story. Thought, well that's nice, 'maybe this will work'.  I only got 60 pgs. in before I mentally chucked that e-book out the window.

Which was good. I finally got past that *""what the hell I am doing"" / ""where the hell do I even begin!?"" /* **""you'll probably screw something up if you just pick something""** devil in the ear. So, next I followed my brain onto the internet for something a little more motivating. Because, depression.

I appreciated [this post](https://www.reddit.com/r/webdev/comments/2ykbs9/is_there_a_pythondjango_equivalent_of_the_odin/) from 6yrs ago. u/myndhack posted the following link. (Funny what a simple completion % bar can do to someone struggling for even getting out of bed for pizza.)

[https://www.mysliderule.com/learning-paths/web-development-python-django/learn/#](https://www.mysliderule.com/learning-paths/web-development-python-django/learn/#)

Yeah, so now that all the fun stuff is out of the way, now you can start too. woopie. I will try to update daily for whoever cares. Else, if I'm missing, it's most likely because I am too busy crying into my pillows, questioning life, excessively over thinking some menial task, or binge watching tv-shows because the dopamine is in shortage.

**^(My progress so far:)**

**Day 1 - 7/22/2021**

1.1- I finished 10% of the HTML course w/ only the final ""do-it-yourself"" project left.

Brain Food: Chinese Food ; Playlist: Misc. Rap & Eminem.

**Day 2 - 7/23/2021**

1.1- made the ""do-it-yourself"" website based on the book article

1.1- (11%) End of the ""intro HTML course""

1.2- made the cookie website

2.1- started the ""Complete Introduction to CSS from FrontEndMasters""

Brain Food: Little Ceasars ; Playlist: Playstation 1 & 2 tunes + Japanese city pop

&#x200B;

Here's my stolen quote of the day:

>Strive for **Progress** not *Perfection.* ^(Because perfection never got me out of bed).

&#x200B;

\--extra motivational junk for people who feel sad--

Remember, if you're feeling down, remember you are worth something. That's enough for keeping on living without caring about those negative nancy's or that freakish devil in your ear. Want to feel like you mean something? Make something out of yourself. Enjoy food, but don't abuse it. Watch some youtube, then do something productive. Don't dream about yourself, create yourself.

Hope this helps.

Thank you for reading. Arigato.

\--Edit--- 7/25/2021

Woke up to a whole lot of messages.... hearing you all brings a tear to my eye \*damn those onions\*. Thank you all, seriously. I will update today, and try my best to keep my fingers moving (even if my butt isn't).

If I don't get to your comment in specific, feel the reddit love and know in some dimension on this tiny little green earth: we are all in this together (hopefully without all the singing).

\--Edit-- 7/26/2021 

My daily post was removed from the sub. My apologies to the mods. I'll put up my progress [here](https://www.reddit.com/r/learningtoprogram/) for anyone who wants to see. I thought I could do daily, but turns out I think every 3rd day or moment of progress would be a lot easier for me mentally/emotionally. I shall try my best to post consistently, and slowly respond to each and everyone of you. Muchas Gracias.",1170,101,Wild-_-Fire,2021-07-24 22:16:40,https://www.reddit.com/r/learnprogramming/comments/oqzep4/im_depressed_lets_learn_to_program/,0,learnprogramming
e5o1e1,"I'm a senior developer with major performance anxiety when it comes to interviews. You're a learner who knows some stuff, but has lots of questions. I propose we help each other! Details in post.","In short, if you're struggling with a problem, or you have an answer but you don't understand it, I say we help each other out! Let's video chat and screen share about it. I'll do all the work, you just have to watch me struggle as I try to think/talk/program under another person's judgemental gaze.

&nbsp;

I have a degree in CS from a prestigious university, and about 7 years professional experience as a software developer. I've interviewed a few times, but video interviews turn my brain to mush and my nerves to mom's spaghetti. 


&nbsp;

I'm in the U.S.A, in Central Standard Time. My preferred languages are Ruby, Javascript, and Python, but I'm willing to use (almost) any language. 

Send me a PM if you're interested and we'll figure out a time.

Thanks,

Jimbabwe


&nbsp;

**Edit: Holy crap, this blew up. I've been busy with some IRL stuff, but when I get home in a few hours I'll start responding to people. Thanks for all the interest! Does this deserve a subreddit?**

&nbsp;


**Edit 2: So there's no way for me to go through all these responses and PM/chats so** u/aytimothy **created a subreddit for this very use case and made me a mod. You can find us over at** https://www.reddit.com/r/liveprogramminghelp/

**Thank you everyone for your interest and support! It seems like there's a lot of interest in something like this, so I hope it helps a lot of people out. I'll be referring people to the subreddit as a generic copy/paste response.**",1168,153,Jimbabwe,2019-12-03 21:31:06,https://www.reddit.com/r/learnprogramming/comments/e5o1e1/im_a_senior_developer_with_major_performance/,0,learnprogramming
dhn57n,All-in-one roadmap to become an Android Developer from scratch. [Free],"Hi, last week I [posted here](https://www.reddit.com/r/learnprogramming/comments/deojk0/i_compiled_a_roadmap_to_become_an_android_dev/) looking for people to check out what I'd built as a ""private beta"" and got some great feedback. Now I want to share a public version of what I've been working on - [the website](https://cauldron.app/).

It's a website that stores ""challenges"" - a better way to learn tech skills and apply to great jobs. What we do is we speak with some of the best tech people in the field and get their insight on how a valuable team member should look like skill-wise. We then structure that information in a perfect split of:

* The **tech stack** (languages, frameworks, libraries)
* Best **resources** to learn those
* Awesome **projects** to build for your engineering portfolio

The vision is for all companies to have their own custom ""challenges"" and hire talent in that way. Instead of going through the hassle of CVs and phone calls - they could just directly interview the most promising candidates based on their work.

Right now, we launched our [Android Developer Roadmap](https://cauldron.app/challenges/5d91b66731071f054f23f3ff), which was made with the help of more than 15 senior engineers. It doesn't have a job attached to it, but we're giving away **$100 Amazon cards** and will **personally assist** with finding a job to everyone who completes it!

&#x200B;

**Edit:** [**Site**](https://cauldron.app) **is back up!** Note to self - don't post and sleep.

**Edit #2:** Site is not back up just yet. I apologize. Post a comment and I'll reach out to you when it's done (1-2 hours max).

**Edit #3:** 3rd time's the charm! [Working Site](https://cauldron.app).",1164,170,cauldronapp,2019-10-14 07:23:47,https://www.reddit.com/r/learnprogramming/comments/dhn57n/allinone_roadmap_to_become_an_android_developer/,0,learnprogramming
6plti6,"My university has released a handful of videos that talk you through Stacks, Queues, Bubble sort, Quick sort Mem alloc, Pointer and much more. Thought this sub would appreciate it.","https://www.youtube.com/watch?v=68VoEHIm2rI&list=PLbSaCpDlfd6qHRp1RVAB1kpRJ9zoQYuwV


",1164,31,NegativeKarmaSniifer,2017-07-26 04:47:55,https://www.reddit.com/r/learnprogramming/comments/6plti6/my_university_has_released_a_handful_of_videos/,0,learnprogramming
111rkot,"My programming professor takes points off for ""unnecessary blank lines"" in code","Say I wrote 

    x = 10
    
    print(x)

My professor would take off half a point for the blank line in the middle. Everywhere else I've learned from teaches that code should be readable. This professor has not said a single thing about readable code and you only get 100% if literally your entire program is written in one continuous block with no breaks. He only instructs us to use comments in our code for a very specific set of information that has to be written at the top of each program (our name, pseudo code, etc).

Is this normal or is my professor in the wrong? I don't like him very much and he has an abysmal ratemyprofessor profile but I'm not sure if this specific thing  is as ridiculous as I think it is.",1168,374,relentless_endurance,2023-02-14 02:37:38,https://www.reddit.com/r/learnprogramming/comments/111rkot/my_programming_professor_takes_points_off_for/,0,learnprogramming
jubgq6,The moment where everything clicked for me with programming,"hey everyone, I remember the many months I spent learning how to code. I spent a lot of time jumping from course to course and ""completing"" tutorials by copying and pasting code. In many ways, I felt like I was stuck and didn't feel like I was learning anything. One of my biggest doubts and concerns was how for loops and functions would ever apply to the cool things I saw in the real world like mobile apps, algorithms, etc...(don't worry, they do!)

Anyways, I'll get right to it. I remember my senior year of college where I went to my first coding meetup. Up to this point, I was still frazzled and jumping from course to course. I had heard coding meetups were a good thing to go to and so I went. That said, I had no idea what I was doing. I didn't know that it would have been helpful to bring a project to work on or at least come with some sort of agenda. Rather, I came with my crappy thinkpad and an open mind.

After the facilitator welcomed everybody in, he prompted everyone to form into groups of varying skill level, project types, and goals (job searching, upskilling, etc...). Again, I had no idea what I was doing so I just kind of sulked in the back and, honestly, felt like a huge impostor (probably because I was? Hahaha)

An hour passed by and the facilitator came my way. He asked what I was working on and I said ""nothing"". He then stopped and asked me, ""well, what do you want to work on?"". I thought it was such a weird question, but I didn't have an answer. I told him, ""I don't know, maybe something to do with data?"". 

He smiled and sat down next to me. He started taking me through web scrapers, the beautiful soup and selenium libraries, and walked me through a few use cases. He said, ""you should figure out what you want to work on. You'll learn much faster and you'll be much more motivated"". 

It was at that moment programming began to click. I felt a motivation to use the programming fundamentals I already knew, though they felt overly basic, to build, build, build. I felt inspired, but also able to connect what I currently knew with things in the real world. I started to build web scrapers, websites, and I even built a java application that gave me a random ""workout of the day"".

The moral of the story is two-fold: programming is a journey, but also that you should try to figure out what you want to build. The goal of building will force you to learn, adapt, and figure out a solution. Then you'll retain a lot more knowledge-definitely more than just mindlessly taking courses and tutorials like I was at the beginning of my programming journey!",1171,34,chaeboi,2020-11-14 23:18:12,https://www.reddit.com/r/learnprogramming/comments/jubgq6/the_moment_where_everything_clicked_for_me_with/,0,learnprogramming
r92gjo,"Career change at age 38, self-taught, no college degree","Hello all! When I was first starting out to learn programming, posts like this were very motivating to me, so now that I'm finishing up my first month in my new job as an actual web developer (still feels surreal), I thought I would post my story here.

I started learning programming about two and a half years ago, in May 2019. I had worked in call centers/phone-based customer care all my life and absolutely haaated it, even though at the time I'd gotten into a pretty decent position -- part of a small team with OK wages and moderate workload compared to many other jobs in that industry. Still hated it though. But my old job involved lots of data entry and relatively few phone calls, and some days were slower than others, so in my spare time I started taking online courses for web development. Some days I only got about an hour of study/practice time in, but some days I could get around 4 hours with relatively few interruptions. I only studied on weekdays while at work.

I have to admit that I was lucky in a few areas: for one, I was able to study programming while on the clock and at my work laptop. After about a year of doing this COVID hit and I began working from home, which further added to my free time. I also worked for a small (5-person) customer service team and knew my boss pretty well, so early on in my learning endeavors I started volunteering to make small websites and web apps for the department -- simple stuff, tools to automate the boring parts of my job, reminder apps my coworkers could use, nothing huge or fancy. My boss was on board with the idea, of course. So while learning I basically worked as an untitled ""web developer"" as well as a customer service phone jockey, for customer care wages, for nearly two full years. It was 100% worth it in the end though, because when I began applying for developer roles I was able to claim actual work experience. Highly recommend this approach to anyone whose workplace will allow it.

I have some college credits but no actual degree, only a HS diploma. I have nothing against live instructor-led bootcamps but I decided to go the entirely self-taught route as I wasn't sure if the schedule of a bootcamp would align with my schedule, and anyway at the start I didn't have the $$$ to spare. IIRC I started with the 'Web Development' career course on Codecademy and the Javascript basics on FreeCodeCamp, but the only courses I ever paid for were the ones on Udemy (when they went on sale for like $11-$14). Here's the courses I bought, roughly in the order I took them:

* Complete Web Dev Bootcamp (Angela Yu) <-- Best for absolute beginners IMO
* Modern JS Bootcamp (Colt Steele, Stephen Grider) <-- Def recommended, solid understanding of JS is important
* Modern React Bootcamp (Colt Steele) <-- Covers Hooks and React Router
* JS Algorithms and Data Structures (Colt Steele) <-- I did this one for interview prep but actually enjoyed it a lot

Some of these courses I went through twice. I also did lots of free Youtube tutorials -- ""Programming with Mosh"" is a good channel IMO, and I'm also partial to Shaun/""The Net Ninja"". (I found that Brad Traversy goes too fast for me if I'm a beginner to the topic, but if I'm already somewhat familiar with the concepts he's good.) I tried to code along with every tutorial, and to ""work ahead"" to finish the next feature the instructor was about to show, if I knew enough to try it on my own. 

Also, every time I completed a tutorial (or a certain section in a longer Udemy course), I would break from studying and build some small fun thing of my own. Mini games, reminder apps, small clones of popular sites, stuff you could finish in a couple days or at most a week. (For example, after playing Metro: Exodus I made a little simulator to calculate how long the people in Yamantau could have sustained themselves, depending on starting population.) A few of these apps went into my portfolio site, along with a demo version of the app suite I had made for my then-current employer. (Not the Yamantau one though lol)

In general I wound up learning Javascript, NodeJS/Express, MongoDB/Mongoose and React. While studying I found that I really, really enjoyed programming. Yes, I started doing this with the overall goal of getting a higher-paying job where I wouldn't be fielding calls from angry idiots on a regular basis (I also believe call-center jobs are eventually going to be replaced by automated phone-answering systems at some point), but I'm a dork at heart and actually love this stuff. Before I changed jobs I joked that I needed to work as a programmer so I would stop boring my wife and non-technical friends with explanations of ""really cool"" sorting algorithms or the differences between REST and GraphQL APIs.

Do you need to spend 2.5 years studying before you're ready to apply? Absolutely not. I had planned to go job-hunting at the 1 year mark, but in May 2020 I had just begun working at home and figured it ""couldn't hurt"" to spend another year or so in studying. In reality, I think I just got cold feet... I definitely had impostor syndrome and felt that I couldn't possibly know enough to begin applying. 

When I did start looking for work, I spent relatively little time putting out applications and more time just handling the tons of calls and emails I got from recruiters. Recruiters/interviewers all seemed very impressed that I had taken the initiative to build software for my employer and I was asked about these projects constantly. It took \~2 months to find a job once I began looking, and I had at least one phone interview (sometimes more) just about every week. I had also spent a few weeks studying job-search-related topics (how to put together a decent resume, how to write a cover letter, etc.) and that surely helped as well.

I've been at my new position for about a month now and I'm loving it; partly the recognition that I made it, partly the 60% pay boost over my old job, and also my coworkers and the cool stuff I'm learning (I had never worked with JIRA and also my Github skills were pretty weak, and of course I need to get familiar with a whole new codebase I've never seen before.) I'm very glad that I got hired on as full-stack rather that solely front-end, because I think server-side skills are less common in the industry and I want to stay competitive. Our team also has some awesome projects that I'm excited to work on.

Last bit of advice is this: while I was learning, I told myself that I would eventually get there so long as I didn't stop. Slow progress was still progress. And as long as I was learning and retaining what I learned, I was making progress.",1161,86,Caffeinated_Neon,2021-12-04 23:48:50,https://www.reddit.com/r/learnprogramming/comments/r92gjo/career_change_at_age_38_selftaught_no_college/,1,learnprogramming
xx7x8g,"My son wants to learn programming, but I have no idea where to have him start","I'm moderately tech savvy, I've been building my own computers for 20 years, but I took one C class in college and never touched programming again, it just wasn't for me. My son is 13 years old and wants to learn how to program. He is interested in learning how to design his own mods for Minecraft and Terraria, but knows he might need to start on a different language. We were going to try him starting on Java first, but have been struggling to find a good online course that he can do on his own time without my help. Some of them look like they'd be too much for him, and others look like they're for a younger demographic. 

I'm currently in graduate school, and I don't have the time to sit and learn with him. He's moderately self motivating, if I tell him to go spend an hour or two on some courses he'll do it on his own without me needing to be over his shoulder as long as he can understand it. I'm willing to pay for a course that is well built and will teach him from the ground up in a way that shouldn't require much help from me. 

Any recommendations? Please and thank you!

Edit: Didn't expect this thread to take off so incredibly! I read through a lot of the suggestions with my son and just wanted to tell every ody thank you so much! We're going to read through everybody's answers before he decides which direction to go, but just wanted to let you all know he was very happy reading through all of your suggestions! The positive attitude and helpful posts from everybody have got both of us very excited to get started, thank you all!",1159,297,aclays,2022-10-06 15:22:35,https://www.reddit.com/r/learnprogramming/comments/xx7x8g/my_son_wants_to_learn_programming_but_i_have_no/,0,learnprogramming
wk4x08,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.","**NOTE:** The codes are all used up. [But you can watch the first 15 of the 50 videos for free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) If you want to buy the rest of the course, the https://inventwithpython.com/automateudemy link redirects to a discount code that lowers the price to $13. The course follows the info in the book, which is for free in full at https://automatetheboringstuff.com/

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out):

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1164,103,AlSweigart,2022-08-09 14:35:15,https://www.reddit.com/r/learnprogramming/comments/wk4x08/2000_free_sign_ups_available_for_the_automate_the/,1,learnprogramming
oxii09,Why aren't apprenticeships the default for dev career entry?,"Random question, as an ex-electrician, why aren't CS jobs built on apprenticeships in the first place?

I know that they are a thing in some places, like another post here recently showed.

Shouldn't the default be to learn programming on-the-job (like being an electrician, or a plumber)?

Then apprentices, just like in traditional trades, can go and study the theoretical knowledge in workshops spread over their apprenticeship, while getting paid to actually code and learn.

> Because the background knowledge for programming is much larger than the theory component for something like plumbing

That could be debated. If you can get into a CS career without a degree, that would seem to fly in the face of that idea.

In my electrical apprenticeship, I started off (as you would expect), doing the simpler, more menial tasks, which I'm sure there is an equivalent concept in programming, as gradually worked my way into more complicated jobs, including testing and switchboard installation.

After-all, in the words of Brian Khernigan - ""programming is learned by writing programs"".",1162,225,ChristianValour,2021-08-04 02:02:34,https://www.reddit.com/r/learnprogramming/comments/oxii09/why_arent_apprenticeships_the_default_for_dev/,0,learnprogramming
97hwrv,"30 year old, 0 experience with coding, will start learning this winter. Just wanted to say thank you to everyone on this sub","Hi guys. First of all, thank you for all your advices on this sub.

I thought about learning programming a few years ago but real life and the lack of motivation kept me from doing it. 

Just hit 30 and realized that my potential is being wasted working on construction sites, driving machines. My wage here (UK) s roughly £46k before tax which is not that bad but it involves 12 hour shifts Monday to Friday.

Recently I've been thinking if I see myself doing the same thing for another 10 years and the answer was NO. I am not an english native amd me and my Mrs will move back home this winter, whete using our savings we will start a small business where she is really the one that will run it and it's her field and we decided to take advantage of that and while living at her parents, i should start learning how to code and only work a few months/year in the UK as that's enough to keep me going back home money wise.

The tineline is about 2 years until i can realistically apply for jobs that could allow me to work from home in case the business goes well.

I have decided that my focus will be front end development mainly because my math skill are poor. I'm not a slow guy, just that math is not my forte. 

If you know any great courses and books, feel free to throw some links my way, I woll search for them too as well. 

I feel that, if I can get the hang of it, it will potentially give my family a better future and will allow me to grow as an individual and learn new things. 

I know it will be hard and the thought that i won't know where/who to ask when i get stuck is daunting but i feel that i owe it to myself to at least try.

Any advices, shoot!

Also, for those lurking on this sub, just set up a plan and start learning. I for one can't wait. Hopefully i can stick with it and change my life in a good way.

Everyone here have a great day anf thanks for taking your time and replying to us, dudes/dudettes that are scared as shit to get their feet wet with coding. You really make a difference!

",1157,169,KloppingThePrem,2018-08-15 12:42:34,https://www.reddit.com/r/learnprogramming/comments/97hwrv/30_year_old_0_experience_with_coding_will_start/,0,learnprogramming
1umnmp,Here's a list of 49 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2014),"This is not the complete list of MOOCs starting in January 2014, just the ones relevant to this community. The complete list of courses starting in January 2014 can be found over at [Class Central blog (257 courses)](http://www.blog.class-central.com/mooc-course-report-january-2014/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)

BEGINNER (15)

Course Name|Start Date|Length|Initiative
:--|:--:|:--:|:--:
[CS50x: Introduction to Computer Science](https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022)|Jan 1st|NA|EdX
[Introduction to Computer Programming](https://janux.ou.edu/landing/course.cs1323.html)|Jan 13th|NA|Janux
[Networking: Introduction to Computer Networking](https://class.stanford.edu/courses/Engineering/Networking/Winter2014/about)|Jan 21st|NA|Stanford University
[Introduction to Cybersecurity](https://www.canvas.net/courses/introduction-to-cybersecurity)|Jan 27th|NA|Canvas.net
[Mobile Web Development](https://www.udacity.com/course/cs256)|Self Paced|NA|Udacity
[Introduction to Salesforce App Development](https://www.udacity.com/course/ud162)|Self Paced|NA|Udacity
[CS 101: Building a Search Engine](http://www.udacity.com/overview/Course/cs101)|Self Paced|7 weeks|Udacity
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|NA|Open2Study
[Introduction to Programming in Java](https://www.udacity.com/course/cs046)|Self Paced|10 weeks|Udacity
[DB: Introduction to Databases](https://class.stanford.edu/courses/Engineering/db/2014_1/about)|Jan 7th|NA|Stanford 
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|6 weeks|openHPI

INTERMEDIATE (26)

Course Name|Start Date|Length|Initiative
:--|:--:|:--:|:--:
[Computer Networks](https://www.coursera.org/course/comnetworks)|Jan 6th|NA|Coursera
[M101J: MongoDB for Java Developers](https://education.mongodb.com/courses/10gen/M101J/2014_January/about)|Jan 6th|NA|MongoDB
[Cryptography I](https://www.coursera.org/course/crypto)|Jan 6th|NA|Coursera
[Concepts in Game Development](https://www.open2study.com//node/595)|Jan 13th|4 weeks|Open2Study
[Introduction to Hadoop and MapReduce](https://www.udacity.com/course/ud617)|Self Paced|NA|Udacity
[M101JS: MongoDB for Node.js Developers](https://education.mongodb.com/courses/10gen/M101JS/2014_January/about)|Jan 13th|NA|MongoDB
[Power and elegance of computational thinking](https://janux.ou.edu/landing/course.cs1300.html)|Jan 13th|NA|Janux
[Web-Engineering II: Entwicklung mobiler HTML5-Apps](https://iversity.org/courses/web-engineering-ii-entwicklung-mobiler-html5-apps)|Jan 17th|NA|iversity
[Image and video processing: From Mars to Hollywood with a stop at the hospital](https://www.coursera.org/course/images)|Jan 20th|NA|Coursera
[Programming Mobile Applications for Android Handheld Systems](https://www.coursera.org/course/android)|Jan 21st|NA|Coursera
[Algorithms, Part I](https://www.coursera.org/course/algs4partI)|Jan 31st|NA|Coursera
[Exploratory Data Analysis](https://www.udacity.com/course/ud651)|NA|NA|Udacity
[Data Wrangling with MongoDB](https://www.udacity.com/course/ud032)|NA|NA|Udacity
[Intro to Data Science](https://www.udacity.com/course/ud359)|NA|NA|Udacity
[Compilers](https://www.coursera.org/course/compilers)|Self Paced|NA|Coursera
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|NA|Others
[CS212 - The Design of Computer Programs](http://www.udacity.com/overview/Course/cs212)|Self Paced|7 weeks|Udacity
[CS253 - Web Application Engineering - Building a Blog](http://www.udacity.com/overview/Course/cs253)|Self Paced|7 weeks|Udacity
[CS262 - Programming Languages - Building a Browser](http://www.udacity.com/overview/Course/cs262)|Self Paced|7 weeks|Udacity
[CS215 - Algorithms - Crunching Social Networks](http://www.udacity.com/overview/Course/cs215/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS258 - Software Testing - How to Make Software Fail](http://www.udacity.com/overview/Course/cs258/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS259 - Software Debugging - Automating The Boring Tasks](http://www.udacity.com/overview/Course/cs259/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS313 - Intro to Theoretical Computer Science - Dealing with Challenging Problems](http://www.udacity.com/overview/Course/cs313/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS271 - Introduction to Artificial Intelligence](http://www.udacity.com/overview/Course/cs271/CourseRev/1)|Self Paced|10 weeks|Udacity
[CS255 - HTML5 Game Development - Building High Performance Web Applications](http://www.udacity.com/overview/Course/cs255/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS291 - Interactive Rendering - Introduction to 3D Computer Graphics](http://www.udacity.com/overview/Course/cs291/CourseRev/1)|Self Paced|7 weeks|Udacity

ADVANCED (8)

Course Name|Start Date|Length|Initiative
:--|:--:|:--:|:--
[Heterogeneous Parallel Programming](https://www.coursera.org/course/hetero)|Jan 6th|8 weeks|Coursera
[Computational Neuroscience](https://www.coursera.org/course/compneuro)|Jan 10th|NA|Coursera
[Artificial Intelligence Planning](https://www.coursera.org/course/aiplan)|Jan 13th|6 weeks|Coursera
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|6 weeks|openHPI
[CS 373: Programming a Robotic Car](http://www.udacity.com/overview/Course/cs373)|Self Paced|7 weeks|Udacity
[CS387 - Applied Cryptography](http://www.udacity.com/overview/Course/cs387)|Self Paced|7 weeks|Udacity
[CS344 - Introduction to Parallel Programming  - Using CUDA to Harness the Power of GPUs](http://www.udacity.com/overview/Course/cs344/CourseRev/1)|Self Paced|7 weeks|Udacity
[CS348 - Functional Hardware Verification - How to Verify Chips and Eliminate Bugs](http://www.udacity.com/overview/Course/cs348/CourseRev/1)|Self Paced|7 weeks|Udacity
",1160,92,dhawal,2014-01-07 15:47:57,https://www.reddit.com/r/learnprogramming/comments/1umnmp/heres_a_list_of_49_free_online_programmingcs/,0,learnprogramming
tijcdy,I got paid for writing answers on r/learnprogramming!,"I've been an active member at r/learnprogramming for a good while. I was already a professional when I joined here and I must have answered to well past a hundred questions by now.

I've never had an ulterior motive in answering to the questions here; I just did it because I like to participate in the educational communities and in open source communities. But regardless, something pretty cool just happened: 

I got paid by the open source program in my company for writing answers here!

The sum isn't very large, suffice to say that for past month's larger answers I got what would be much less than what a single night out costs. Unless your idea of a night out is a brown paper bag with a plastic bottle of El Tiempo in it.

Personally I strongly recommend IT companies - actually, any company - to set up their equivalent of an open source program. If open source isn't relevant to the company, set up a volunteer program where say, maximum of 30 hours of volunteer work a month is compensated by the company. Money should not be the primary motivation for volunteer work, but at least for me, when the company I work at is willing to use its resources to support volunteer work, it just is a strong sign that the company just might actually care.

It's a great subreddit and most of the time very mature and friendly. Keep it up everyone!",1161,66,tzaeru,2022-03-20 11:48:44,https://www.reddit.com/r/learnprogramming/comments/tijcdy/i_got_paid_for_writing_answers_on/,0,learnprogramming
f2r276,"Why ""Do a project"" may not be the best advice for beginners.","Lately, I've been tutoring a colleague who is a mainframe programmer on Java as much of the code he maintained has now been converted to Java.

Quite frequently, I read advice that says ""Do a project"".  These are for beginning programmers who are finding tutorials tedious or finding it hard to motivate themselves.  

Many programmers have programmed long enough that they can't really conceive of what it was like when the first started to program.  Quite frequently, you hear them say ""Programming is easy.  Anyone can learn"".  To them, it is easy.  It doesn't seem to require deep mathematical knowledge.  A few if-statements and loops and functions, and the code does what you say.  How could *anyone* find these concepts difficult.

So, naturally, they say things like ""build a project"" as if the person they're talking to finds if-statements and loops and functions easy.

I've had to explain what parameter passing mean, what a stack is, how the stack the heap differ. I've had to explain how a Java for-loop works.  The difference between primitive and object types.  Yesterday, I answered a question in the subreddit of the difference between static and non-static Java methods.  The difference between local variables, instance variables, function parameters.  The difference between a function call and a function definition.

To program, you need to be able to mentally follow the code, step by step.  You should know how the values changes as each line runs.  I recently explained to my colleague how naming your variables well helps you understand your program.  Because he named the variable badly, he ended up thinking the variable stored a certain kind of data, when it stored a different kind of data.  Had he traced out the code (meaning, followed it step by step), he would have known better, but that is a level of tedium not everyone masters, so they rely on variable names to tell them what it does, rather than what the code is *actually* doing.

An analogy might be that someone is new to a country, and wants to see the country, but they've never seen a car, a paved road, traffic lights, a gas station, and so forth, and they're asked ""Plan a trip"" as if learning to drive, learning to figure out traffic laws, etc. is pretty straight forward, and the interesting part is the traveling.

If you don't understand the fundamentals of programming in a language, then you'll find yourself frustrated with whatever project you do.  And the project that a beginner picks is often a little too difficult (""I want to make a Facebook clone"" or even ""I want to be able to take pizza orders""), esp. if the person is still struggling with writing basic programs (how do I find the maximum value in an array) or organizing a lot of code.  It's just like how early AI researchers used to think things that are easy for humans (recognizing faces) would be easy to achieve in AI, only to discover that they are really difficult (where as chess playing programs are easier to program for, but hard for humans).

So for those of you that have been told to ""build a project"" and find you are not able to do so, it may just be that you haven't learned to walk, but you've been told to run.",1157,142,CodeTinkerer,2020-02-12 13:16:35,https://www.reddit.com/r/learnprogramming/comments/f2r276/why_do_a_project_may_not_be_the_best_advice_for/,0,learnprogramming
s5zuxn,Started new job and have some REAL imposter syndrome.,"I started a new job with a great company and team. I've been doing paired programming with one of the seniors the last few weeks in GO to try and get me up to speed. I've only ever built basic enough software such as scrapers and working with APIs. The stuff I'm doing now is much more advanced and I just can't understand what he is doing in our sessions despite him explaining.

 He said I'll get there in time I just need to keep coding, but it's hard to code when I'm not really understanding the project we're working on. I'm feeling like I'm not good enough for this role and I'm worried that they will let me go if I don't catch up. I am the only junior in a team of 20 who are ALL senior so they know I have a lot to learn but still.

What advice do ye have?",1160,92,terriblephotographs,2022-01-17 09:18:42,https://www.reddit.com/r/learnprogramming/comments/s5zuxn/started_new_job_and_have_some_real_imposter/,0,learnprogramming
7wu2ce,Learn C++ through an online AI programming challenge,"We're a bunch of CS undergrads and Code Character is our AI programming contest, where you code your commands for a turn-based strategy game in C++. We also think this is a nice way for beginners to learn some more C++, so if you're comfortable with the basics of structs, objects, and pointers, then you should be good to go!

Check it out here: [Code Character](https://code.pragyan.org)

It's live now, give it a shot! Registration is simple and you can jump right in. There's an online code editor and you can view your output right there too, no local setup required.

From a development point of view, we had a problem finding a deterministic way to time code, so Code Character uses LLVM bytecode instrumentation to count instructions and time games. We instrument the participant code and place restrictions on the number of LLVM IR instructions, instead of imposing a time limit. This ensures that the game is the same regardless of which machine it's simulated on.

If you'd like to read more about it, check out our blog post here: [Profiling Code with LLVM](https://medium.com/delta-force/profiling-code-with-llvm-f32c5292750a)

EDIT: We've gotten some feedback to improve the docs, so we'll make sure we work on that as soon as possible. Meanwhile, a support forum has been added (you can see the link in the game navbar) so do ask your game related queries over there. Thanks for all the support!",1159,46,CodeCharacter,2018-02-11 17:23:40,https://www.reddit.com/r/learnprogramming/comments/7wu2ce/learn_c_through_an_online_ai_programming_challenge/,0,learnprogramming
15g8z36,I do cheat when coding,"I've been learning coding for months, attending bootcamps and tutorials. However, whenever I try to implement my knowledge in my projects, I find myself constantly researching, which makes me feel like I haven't truly learned anything. Despite finishing my projects, I still rely heavily on external sources like W3Schools and Google for help. It's frustrating, and I feel like I'm not retaining the knowledge.


Edit: thank you everyone for your thoughts, suggestions and humor, you made me realized I'm on a right path!",1159,461,No_Pen_9441,2023-08-02 13:29:29,https://www.reddit.com/r/learnprogramming/comments/15g8z36/i_do_cheat_when_coding/,0,learnprogramming
rs4iik,I can't get a single interview. Getting very discouraged.,"I've been going the self-taught route.

I've learned Java, C# / .NET, Python, JavaScript, CSS, HTML, MySQL, Postgresql, and the React Framework.

I cannot even get an interview after 100's of applications and months of tweaking different resumes and cover letters.

Idk what to do but I feel like it's never gonna happen. Sorry for the trash post.... very frustrated.",1161,433,Jack__Wild,2021-12-30 15:35:51,https://www.reddit.com/r/learnprogramming/comments/rs4iik/i_cant_get_a_single_interview_getting_very/,0,learnprogramming
14i14jv,Re-wrote my Zero to Hero Git Tutorial and was Told to Post Here; Hope some Find it Useful 🐙,"Hey there folks! 

I've rewritten the [git tutorial](https://jdsalaro.com/blog/git-tutorial/). I've used over the years whenever newbies at work and  friends come to me with complex questions but lack the git basics to *actually* learn. 

After discussing my git shortcuts and aliases elsewhere and over DMs it was suggested to me that I share it here.

I hope it helps even a couple of y'all looking to either refresh, jumpstart or get a good grasp of how common git concepts relate to one another !

It goes without saying, that any and all feedback is welcome and appreciated 👍

TL;DR: re-wrote a git tutorial that has helped friends and colleagues better grasp of git  https://jdsalaro.com/blog/git-tutorial/

EDIT:

I've been a bit overwhelmed by the support and willingness to provide feedback, so I've enabled `hypothes.is` on https://jdsalaro.com for /u/NervousQuokka and anyone else wanting chime in. You can now highlight and comment snippets. ⚠️ Please join the `feedback@jdsalaro` group via this link https://hypothes.is/groups/BrRxenZW/feedback-jdsalaro so any highlights, comments, and notes are visible to me and stay nicely grouped. Using `hypothes.is` for this is an experiment for me, so let's see how it goes :)",1158,49,jdsalaro,2023-06-24 19:18:44,https://www.reddit.com/r/learnprogramming/comments/14i14jv/rewrote_my_zero_to_hero_git_tutorial_and_was_told/,1,learnprogramming
l1iowc,Holy moly,"I'm excited. Here's why.   
So I've started learning web design a few months ago, fiddled with some JS too but didn't quite get the hang of it until I had to take a break for a while. I recently started a new project and begun learning JS again, for real this time. I wanted an image slider and thought about how I'd do it and fiddled around. Things didn't go my way, I almost had a headache but suddenly: It works!!   
I'm just continuously pressing the slide buttons atm because I still can't quite believe it. This feels amazing! Who needs sex, if this is what ya'll are doing all day, I want in on it!",1153,64,radgepack,2021-01-20 21:12:43,https://www.reddit.com/r/learnprogramming/comments/l1iowc/holy_moly/,0,learnprogramming
fls11e,Recommended computer science courses and recommended learning order,"I made this. But not sure if it's helpful. So please tell me.

&#x200B;

Map: 

* [Imgur image](https://imgur.com/gR2o48X)
* [Clickable image](https://raw.githubusercontent.com/septerent/curriculum/master/curri.svg?sanitize=true)

&#x200B;

Math courses:

* Single variable calculus: [MIT Calculus I](https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/)
* Multivariable calculus: [MIT Calculus II](https://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/)
* Probability: [MITx Probability - The Science of Uncertainty and Data](https://www.edx.org/course/probability-the-science-of-uncertainty-and-data)
* Differential equations: [MIT Differential Equations](https://ocw.mit.edu/courses/mathematics/18-03sc-differential-equations-fall-2011/)
* Signals and systems: [MIT Signals and systems](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-fall-2011/)
* Linear algebra: [MIT Linear algebra](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm)
* Intro to discrete mathematics: [MIT Mathematics for computer science](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2015/index.htm)

Physics courses:

* Classical mechanics: RiceX mechanics [part 1](https://www.edx.org/course/introduction-to-mechanics-part-1), [part 2](https://www.edx.org/course/mechanics-part-2-2)
* Electricity and magnetism: RiceX Electricity and magnetism [part 1](https://www.edx.org/course/electricity-and-magnetism-part-1), [part 2](https://www.edx.org/course/electricity-magnetism-part-2)

CS courses:

* Computer literacy: [MIT CS missing semester](https://missing.csail.mit.edu/)
* Introduction to computer science: [Teachyourselfcs programming recommendations](https://teachyourselfcs.com/#programming)
* Computer architecture: [Teachyourselfcs computer architecture recommendations](https://teachyourselfcs.com/#architecture)
* Operating systems: [Teachyourselfcs operating systems recommendations](https://teachyourselfcs.com/#operating-systems)
* Computer networks: [Teachyourselfcs networks recommendations](https://teachyourselfcs.com/#networking)
* Data structures and algorithms: [Teachyourselfcs algorithms recommendations](https://teachyourselfcs.com/#algorithms)
* Languages and compilers: [Teachyourselfcs languages recommendations](https://teachyourselfcs.com/#languages)
* Software construction: [MIT Software construction](https://ocw.mit.edu/ans7870/6/6.005/s16/)
* Software engineering: [UBCx Software engineering](https://www.edx.org/course/software-engineering-introduction)
* Machine learning: [Andrew Ng Machine Learning](https://www.coursera.org/learn/machine-learning)
* Image processing and computer vision: [NU Fundamentals of Digital Image and Video Processing](https://www.coursera.org/learn/digital)
* Computer graphics: [UCSDx Computer graphics](https://www.edx.org/course/computer-graphics-2)
* Databases: [Teachyourselfcs databases recommendations](https://teachyourselfcs.com/#databases)
* HTML, CSS and JS: [John Hopkins HTML, CSS, and Javascript for Web Developers](https://www.coursera.org/learn/html-css-javascript-for-web-developers)
* CSS frameworks: [Front-End Web UI Frameworks and Tools: Bootstrap 4](https://www.coursera.org/learn/bootstrap-4)
* Back-end frameworks: [Server-side Development with NodeJS, Express and MongoDB](https://www.coursera.org/learn/server-side-nodejs)
* Front-end frameworks: [Front-End JavaScript Frameworks: Angular](https://www.coursera.org/learn/angular)
* Introduction to computer security: [MIT Computer systems security](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-858-computer-systems-security-fall-2014/)",1156,75,septerent,2020-03-20 09:16:33,https://www.reddit.com/r/learnprogramming/comments/fls11e/recommended_computer_science_courses_and/,0,learnprogramming
a7jj08,Computer science study plan - Java Focused,"Trying to give back to the community, it's not much, just a compilation of links but I hope it can help. Study plan based on [teachyourselfcs.com](https://teachyourselfcs.com). I replaced the programming, algorithms part and added more math as my math knowledge is/was flawed. When done here, just head back to the website and follow along. You can even do everything there if you have time or want to. TYCS is an amazing resource but it works best for people who already have some experience. SICP for instance is so hard it might scare newbies out of programming for good. These change are meant to correct that so that even a complete beginner can still learn from it. Why so much math? Well the objective is to become a computer scientist that can potentially get a job a the big four, you need math for that. Start with the it, take your time, everything will be easier later. Lastly, practice practice practice, find something you're interested in and build it, start networking also. Good luck ...

PS: The Computer Science: Programming with a Purpose course from Princeton is not online yet, will update the link when it's live. I studied the book, it should be as good as it’s taught by writers. 

# READING PREPARATION 

* [Understanding the Digital World - Brian Kernighan](https://www.amazon.com/Understanding-Digital-World-Computers-Internet/dp/069117654X)
* [Code: The Hidden Language of Computer Hardware and Software - Charles Petzold](https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319)

# MATHEMATICS

* [Precalculus](https://www.edx.org/course/precalculus-asux-mat170x)
* [Single Variable Calculus](https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/)
* [Multi Variable Calculus](https://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/index.htm)
* [Introduction to Probability](https://www.edx.org/course/introduction-probability-science-mitx-6-041x-2)
* [Essence of Linear Algebra](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab)
* [Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/)
* [Mathematics for Computer Science](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2015/)

**READINGS**

* [Basic Mathematics - Serge Lang](https://www.amazon.com/Basic-Mathematics-Serge-Lang/dp/0387967877)
* [Discrete Mathematics and its Applications - Kenneth H. Rosen](https://www.amazon.com/Discrete-Mathematics-Its-Applications-Seventh/dp/0073383090)
* [Linear Algebra and Its Applications - Gilbert Strang](https://www.amazon.com/Linear-Algebra-Its-Applications-4th/dp/0030105676)

# INTRODUCTION TO COMPUTER SCIENCE AND PROGRAMMING

**PREPARATION**

* [Java Programming Part I](http://moocfi.github.io/courses/2013/programming-part-1/material.html)
* [Java Programming Part II](http://moocfi.github.io/courses/2013/programming-part-2/material.html)

**MAIN**

* [Computer Science: Programming with a Purpose]()
* [Computer Science: Algorithms, Theory, and Machines](https://www.coursera.org/learn/cs-algorithms-theory-machines)

**READINGS**

* [Computer Science: An Interdisciplinary Approach - Robert Sedgewick, Kevin Wayne](https://introcs.cs.princeton.edu/java/home/)
* [Introduction to Java Programming - Daniel Liang](https://www.amazon.com/Introduction-Programming-Structures-Comprehensive-Version/dp/0134670949)

# ALGORITHMS & DATA STRUCTURES

* [Data Structures](https://sp18.datastructur.es/)
* [Algorithms, Part I](https://www.coursera.org/learn/algorithms-part1)
* [Algorithms, Part II](https://www.coursera.org/learn/algorithms-part2)

**READINGS**

* [Algorithms - Robert sedgewick, Kevin Wayne](https://algs4.cs.princeton.edu/home/)
* [Data Structures and Algorithms in Java - Michael T. Goodrich, Roberto Tamassia](https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/ref=sr_1_1?s=books&ie=UTF8&qid=1544236665&sr=1-1&keywords=Data+Structures+and+Algorithms+in+Java+-+Michael+T.+Goodrich+et+Roberto+Tamassia)

# SOFTWARE ENGINEERING

* [Spécialisation Software Design and Architecture](https://www.coursera.org/specializations/software-design-architecture)
* [Spécialisation Software Development Lifecycle](https://www.coursera.org/specializations/software-development-lifecycle)
* [Introduction to Professional Software Development](https://www.edx.org/professional-certificate/microsoft-introduction-to-professional-software-development)
* [Spécialisation Open Source Software Development, Linux and Git](https://www.coursera.org/specializations/oss-development-linux-git)

**READINGS**

* [Software Construction - MIT Online Textbook](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-005-software-construction-spring-2016/readings/)
* [Software Engineering: A Practitioner's Approach - Roger S Pressman, Bruce R. Maxim](https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/ref=dp_ob_image_bk)

# MORE READINGS

* [Effective JAVA - Joshua Bloch](https://www.amazon.fr/Effective-Java-Joshua-Bloch/dp/0134685997)
* [Clean Code - Robert C. Martin](https://www.amazon.fr/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&qid=1544239619&sr=8-1&keywords=clean+code)
* [Clean Architecture - Robert C. Martin](https://www.amazon.fr/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=sr_1_1?s=english-books&ie=UTF8&qid=1544239643&sr=1-1&keywords=clean+architecture)
* [The Clean Coder - Robert C. Martin](https://www.amazon.fr/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?s=english-books&ie=UTF8&qid=1544239656&sr=1-1&keywords=the+clean+coder)
* [Code Complete - Steve McConnell](https://www.amazon.fr/Code-Complete-Second-Steve-McConnell/dp/0735619670)
* [Working Effectively with Legacy Code - Michael C. Feathers](https://www.amazon.fr/FEATHERS-WORK-EFFECT-LEG-CODE/dp/0131177052)
* [Refactoring: Improving the Design of Existing Code  - Martin Fowler](https://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Signature/dp/0134757599)
* [Design Patterns: Elements of Reusable Object-Oriented Software - Erich Gamma, John Vlissides, Richard Helm, Ralph E. Johnson](https://www.amazon.fr/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)

# EXTRAS

* [Introduction to Logic](https://www.coursera.org/learn/logic-introduction)
* [What can be computed, A practical guide to the theory of computation - John MacCormick](http://whatcanbecomputed.com/)
* [Internet Infrastructure: Networking, Web Services, and Cloud Computing - Wei Hao, Richard Fox](https://www.amazon.com/Internet-Infrastructure-Networking-Services-Computing/dp/1138039918)
* [Site Reliability Engineering - How Google Runs Production Systems - Niall Richard Murphy, Betsy Beyer, Chris Jones, Jennifer Petoff](https://www.amazon.com/Site-Reliability-Engineering-Production-Systems/dp/149192912X)
* [The Site Reliability Workbook - Practical Ways to Implement SRE - Betsy Beyer, Niall Richard Murphy, David K. Rensin, Kent Kawahara, Stephen Thorne](https://www.amazon.com/Site-Reliability-Workbook-Practical-Implement/dp/1492029505)

# INTERVIEW PREPARATION

* [Soft Skills](https://www.edx.org/professional-certificate/ritx-soft-skills)
* [Career Development: Skills for Success](https://www.edx.org/xseries/career-development-skills-success)
* [Coding Interview University](https://github.com/jwasham/coding-interview-university)

**Readings**

* [Cracking the Coding Interview - Gayle Laakmann McDowell](https://www.amazon.fr/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=sr_1_1?ie=UTF8&qid=1544239735&sr=8-1&keywords=Cracking+the+Coding+Interview+-+Gayle+Laakmann+McDowell)




",1158,87,Lesabotsy,2018-12-19 05:35:43,https://www.reddit.com/r/learnprogramming/comments/a7jj08/computer_science_study_plan_java_focused/,1,learnprogramming
623vu4,Let's compile a list of ELI5 youtube videos explaining concepts and technologies,"I'm asking us as r/learnprogramming to compile a list youtube videos  consisting of high level discussions and explanations of topics such as garbage collection or the nuances of nodejs. 

I guess the purpose of this playlist would be to be able to pop in headphones during a commute or during menial labor and expand our breathe of knowledge. I'm tired of wading through crappy tech talks where the speaker just flips through slides of code and doesn't actually give enough of a high level over view. I think that as a community we may be able to compile a list of our favorite high-level-ELI5 videos.

We should probably start by commenting the topic followed by a link to the video. If this post gains enough traction we can look into creating youtube playlists. ",1160,43,fouljabber,2017-03-29 02:09:17,https://www.reddit.com/r/learnprogramming/comments/623vu4/lets_compile_a_list_of_eli5_youtube_videos/,0,learnprogramming
umsl4c,Opinion: The 1st thing to learn should be how to deploy the program,"A starter tutorial / training course should start with discussing how to get the program to the place or person where it needs to run. In my experience, that is the one topic most people ask about.

All the language grammar in the world is going to be useless if the program can't be made to run. All the modeling concepts are useless if we can't deploy the software. 

Every programming language has a way to run it. To distribute it to someone else so they can run it too. And many a training course and tutorial seems to forget about that aspect of the job. 

Maybe a website exists, or can be made, that discusses this for common, commercially attractive programming languages. Just like the Rosetta Stone project for algorithms.

Does that exist already? Please point me to it?",1155,220,aeveltstra,2022-05-10 20:57:59,https://www.reddit.com/r/learnprogramming/comments/umsl4c/opinion_the_1st_thing_to_learn_should_be_how_to/,0,learnprogramming
tfabav,"What are these ""bad habits"" people develop who are self-taught?",I've heard people saying us self-taught folks develop bad habits that you don't necessarily see in people who went to school. What are these bad habits and how are they overcome?,1158,336,_0_-o--__-0O_--oO0__,2022-03-16 05:33:19,https://www.reddit.com/r/learnprogramming/comments/tfabav/what_are_these_bad_habits_people_develop_who_are/,0,learnprogramming
teu6go,Do employers view a NSFW site in your portfolio negatively?,"This is a bit of an odd question, but I will explain below. I also hope this isn't too crude for this subreddit but I can't think of anywhere else to ask this question. Please inform me if so.

The past few years I have been developing a p\*\*\*\*graphic website and it is the best evidence of my skills in Laravel, PHP, jQuery, JavaScript, HTML, CSS, Site Design and Ubuntu. It's huge in it's scale and I have been developing it solo on and off for around 2-3 years now.

The reason I ask is because I would like to get a permanent Job in this area of development so I can move forward with my life goals. Unfortunately this site is my only major portfolio piece I have due to how long I have worked on it so I can't really show employers my actual capabilities.

The assumption I have is that employers would view this negatively due to the taboo nature of the content on the site and would likely reject my applications based on this.

Is there any employers or people who have experience in employing people that could give me some insight into if my assumption is correct?

Thanks in advance :)

**Edit:** Forgot to mention, the site uses all user generated content.

**Edit 2:** A lot of people are asking me for the site link, the site is currently in maintenance whilst I update stuff and will be for the rest of the week. I also don't really think this is the best place to share it.

**Edit 3:** There's been a lot of solid advice given about how to approach this, so thanks to all of those people. It seems most people agree that it may or may not matter to employers and it might be best to just create a SFW version. 

So I will likely create a SFW demo of the site when the site is more finalized, then use this in my portfolio. I could also create a SFW filter (which probably won't work as well due to the domain name being NSFW in itself) but it's there as an option. ",1157,185,ebiendo,2022-03-15 17:16:44,https://www.reddit.com/r/learnprogramming/comments/teu6go/do_employers_view_a_nsfw_site_in_your_portfolio/,0,learnprogramming
5al5kj,I been learning programming for the last 1 and a half years and I finally reached my initial goal: Creating a Minecraft Clone. Thank you /r/learnprogramming!,"Video of the project ->  https://www.youtube.com/watch?v=GACpZp8oquU

Source code of the project -> https://github.com/Hopson97/MattCraft

______________


__________



(I do lie a little, I used Scratch when I was like 12, which was around 6 years ago I guess, but that doesn't really count in my book)

Hello! So about a year and half ago, around March 2015, I knew nothing about real programming, except some stuff from Scratch that is nothing like real programming.

My initial goal was to create a Minecraft clone, as that is my favorite game.

I started off with C#, and made some crummy console games, but I knew that C++ would be the best for game so I bought a book, Jumping into C++, and I learnt so much! I learnt about classes, objects, functions, structs, pointers, data structures and more within this one book. By the Summer, which was around 4-5 months later, I made this simple game: [Hopson Land](https://github.com/Hopson97/Hopson-Land), a basic console game. It was my first ""big project"" and it was a huge turning point, as from here on out I was very confident in my ability to create projects without actually having to use some random tutorial.

From there, most of my knowledge was learned online, such as RAII, rule of 5, more memory stuff, r value references, smart pointers, the auto keyword, range based for loops... The list goes on. There is always something new to learn :D

In January, I finally felt ready to try something ""hard"". I found [this website](http://learnopengl.com/) for learning OpenGL, and this is probably the best OpenGL tutorial around (at least for free on the internet)

Fast forward 10 months and I finally figured out how to create a Minecraft clone entirly on my own and this is the result of it:


 https://www.youtube.com/watch?v=GACpZp8oquU

I wouldn't have been able to do it without all your help whenever I had general C++ questions, so thank you everyone on this subreddit! :D

_____

For the curious, the source is here: https://github.com/Hopson97/MattCraft",1151,125,Mat2012H,2016-11-01 19:31:33,https://www.reddit.com/r/learnprogramming/comments/5al5kj/i_been_learning_programming_for_the_last_1_and_a/,0,learnprogramming
7k6u1s,Would anyone be interested in my Algorithms and Datastructures notes?,"Good evening,  
I am compiling my notes on DS && Algorithms using markdown for my siser who's starting CS next year. I know that I am neither a professor nor a revered programmer/ scientist/ book author but I have been working for a University ( not the one I am currently attending ) since my first year, I got 8.5 on my DS&&Algorithm grade this Semester and the highest grade, 84/100, in the final.

My paper notes at the moment include, basic DS such as lists, stacks, queues, bst, tries, 2-3trees, Btrees, Heaps, Leftist heaps, Graphs and for algorithms, Dijkstra's shortest path, Prim's and Kruskal's minimum spanning trees, quicksort, heapsort, mergesort, external mergesort, binary search and so on, I have source code for most of them in Python and/or C. I also have some weird DS that allow for other nonstandard operations such as O(1) min & max element stack / queue as well as some examples, linked trees that allow for very simple traversal from min to max element and so on. 

I will be adding more stuff as I come across them and will be in a repo in Github for anyone to clone them. 

Edit: I have exams right now and I will get down to after Monday. Also, each lecture is written twice, one in Markdown written with pandoc ( denoted by ""_raw"" ) and a compiled Markdown version where mathematical notations and equations are readable on Github's viewer.

Since a few people asked and dm'd , here is a link to the repo : https://github.com/oddProton/Datastructures-and-Algorithms-notes . If there are any mistakes or you have a suggestion please do tell me.

Edit 2: by the end of next semester i will also have notes on Dynamic Programming, greedy algorithms and what ever else we cover.",1146,70,None,2017-12-16 12:48:06,https://www.reddit.com/r/learnprogramming/comments/7k6u1s/would_anyone_be_interested_in_my_algorithms_and/,0,learnprogramming
i05gmt,"as a beginner, have you ever felt that exercises are either too easy or too hard?","I'm learning and my theory is mostly fine for a beginner, but I seriously lack good 'projects' to do, projects that might teach me something. I know I'm whining, but have any of you ever felt like that?

&#x200B;

Every personal project I want to follow seems too hard. I love algorithm stuff/IA/'puzzle-solving' projects, but they also seem too hard for a beginner. Exercises are either too easy or too hard, any tips? Should I stick to my personal projects even if they seem hard at first glance?",1149,91,usuarioabencoado,2020-07-29 18:09:55,https://www.reddit.com/r/learnprogramming/comments/i05gmt/as_a_beginner_have_you_ever_felt_that_exercises/,0,learnprogramming
6q5aj2,Series of programming books a fraud,"For all those endeavoring to learn a programming language or improve their coding, I'd just like to warn them away from a series of books by the author calling himself ""Richard Dorsey"", who is apparently mass producing programming ""books"" sold on amazon and elsewhere that have no content whatsoever, with unreadable text.
He is using fake five-star reviews to boost his ratings, but the one-star reviews are revealing.

Here are a few lines from the book, as quoted by one of the reviews:
*""With SQL you will be getting things done in a timelier way because of how quick you will be ready to do orders with basic codes that you will learn in this book. All you will need to do is connect your code to alongside what you are needing to be done to that table or section, and blast, it is finished.""*
*""Being that, you are doing searches in SQL to make sure you are getting the information that you want to have in your search.""*
*""The data from those particular columns is going to be what you are wanting to be returned to you; therefore, the database is going to do so.""*
*""Learning SQL makes it to where you have the opportunity to earn some extra money.""*

Other warning signs: The author uses a stock photo from the internet as a Bio pic. The publisher is a self-publishing platform listed as ""CreateSpace Independent Publishing Platform""

An example book:

[Master SQL](https://www.amazon.com/SQL-Become-Master-Richard-Dorsey/dp/1548214922/)

[List of his books](https://www.amazon.com/Richard-Dorsey/e/B06ZZDYLF6/)

*Note that I am not including any referral link - this is not an advertisement and I will make no profit whatsoever if you happen to accidentally buy something from this author. I am only trying to protect other people from being scammed.

Using amazon's preview feature, you can look for yourself at the books. If you agree that they are scams, I'd suggest obviously not spending money on them, but also **you could leave a one-star review on a couple to prevent others from falling for the scam, or even better - buy the $3 kindle edition, look at it, then return it if you are unsatisfied. You will then show up as a verified purchase review...**

Once again - I have no personal or financial interest in the matter, I'm just looking out for others

Happy coding everyone!

EDIT: *1) I don't encourage reviewing products without seeing them first (read at least some of a book before reviewing)  2) I'm becoming skeptical if it's even possible to make a dent in this scam with a few negative reviews, apparently there a whole market of ""fake books"" in every field being produced, reviews being bought, and making just enough money that it's worth the time of thousands of ""authors"" to flood Amazon and other stores... There are apparently ""real"" books teaching how to make money from these ""fake"" books... not sure what the solution is, Amazon apparently doesn't have the resources / ability to filter through all this fake content and fake reviews. But this is probably a discussion for another forum...*

EDIT 2:
*Well... I had no idea my post would get so much exposure, glad to see people appreciated it (and that some even found some humor in it - these books are quite ridiculous at times ;) ). I wish there was something more to be done to stop these kinds of scams, my impression is that sometimes ""the market"" finds a way to ""fix itself,"" so that such one scam is brought to a halt (like if some new quality filter was implemented by Amazon after getting bad publicity which hurt their sales), unfortunately only until the next scam emerges... (If someone here was connected to some high-exposure media outlets and published something about the phenomenon, maybe that could encourage Amazon to be more active...)*

*Also - Watch out - I've already found other items on Amazon, such as the [""Cyperpunk University""](https://www.amazon.com/Programming-No-Nonsense-Including-Cheatsheet-Exercises-ebook/dp/B071RKKQTW/) series, similar in quality to Richard Dorsey, with all the same psuedo-English and fake reviews included...
So as always, when roaming the internet, stay safe ;)*",1149,161,ibenami,2017-07-28 17:22:13,https://www.reddit.com/r/learnprogramming/comments/6q5aj2/series_of_programming_books_a_fraud/,1,learnprogramming
g6oyyg,Mainframe Programmer recently lost my job here. Don't make my mistake.,"I am a mainframe assembler (HLASM) programmer who recently became jobless and soon homeless. Here is my personal downfall story.

I graduated a few years ago with a CS degree. I did a lot of systems programming back in college. PThread, MPI, you name it. I discovered the mainframe by doing this competition called Master the Mainframe. I got into the top 1% and IBM sent me some $2000 to help out with my undergraduate tuition.  So I bought into this whole Koolaid of boomers are retiring, here's the fast lane to become rich.

After I graduate, I got recruited into a F500 company working in their mainframe department as an assembler programmer. My day jobs involved maintaining existing assembler exits, writing JCL, REXX, and a whole bunch of reading SVC dumps. These COBOL applications are poorly written and they are constantly blowing up with S0C9 ABEND or S0C4 ABEND. I usually get the high-pressure call from software architect to review these machine code and tell the COBOL dev why it's blowing up in production. Sometimes they need to restart their CICS server and I need to review the address space to give them the green light.

In a modernization effort, they are slowly migrating parts of their mainframe away. A lot of aggressive cost-cutting since we are considered a cost center. Some of BU entirely outsourced to another company. We used to host Payroll system in one of our SYSPLEX until Workday came along. Long story short, my role was eventually got eliminated and all the new requisitions will be in India site and I was given ""opportunity"" to interview for that role.

**The hours and pay.**

My salary was $60,000 per year when I started. When I got laid off, I was making $78,000 per year. Nowhere near $200 an hour like everybody else is saying. I also cannot get the raise I need because my role is too specialized and I can't leverage another offer. I was essentially at the mercy of this employer to have a career.

I also work many 70 hours a week because we have 24/7 on-call rotations that I need to be on. I often have to do work at 3 am on Sunday morning because that's when they have IPL (a reboot) to their system and I need to validate change or install updates to some of the subsystems I owned.

**Job Search**

It's a complete nightmare to get another job so far. Nobody is calling me. I think there's no market for junior / mid-level mainframe programmers. Every COBOL programmer positions I applied to, they are looking for someone more senior. The market is saturated with 30 years of experienced COBOL programmer who knows ins and outs of MVS and refused to stop working. I say saturated because there is a very small number of mainframe roles to begin with. I leveraged my network to find another job but the problem is that India has also been pumping out mainframe programmers like new york minutes. So all of the new requisitions at my network companies are going there now.

**Lack of Relevant Skills**

I would say that my mainframe skills are completely useless and I don't know any modern web development. Even something like VCS we used PDS (directory)  with a date stamp to indicate the version because not everyone gets access to Endeavor (popular mainframe VCS).

I have spent the past two months learning Git, HTML , CSS, JS, and been churning out Angular 9 personal portfolios. RxJS is a bit of a learning curve but I am really enjoying it so far. I hope I get a job soon because I am becoming homeless.

I might have to lie on my resume that I have few years of experience as a Software Engineer and put the obscure detail of what I actually did. Because nobody is calling me right now if I said HLASM, REXX, and JCL.",1148,222,Capable_Baby,2020-04-23 15:43:41,https://www.reddit.com/r/learnprogramming/comments/g6oyyg/mainframe_programmer_recently_lost_my_job_here/,0,learnprogramming
6onvhk,Mega useful links for someone who wants to learn JavaScript!,https://medium.com/jsguru/hey-javascript-developer-bookmark-these-links-2edb4ce025c5,1141,21,None,2017-07-21 13:23:55,https://www.reddit.com/r/learnprogramming/comments/6onvhk/mega_useful_links_for_someone_who_wants_to_learn/,0,learnprogramming
kv8u8u,I finally made a completed app in c++,"First off I am only here to show off my project so if you care keep reading lol.

So I am 15 and having been programming in c++ for a while now and I have started many projects however I rarely see them through to the end and even then have never been confidant in the final product. I finally built something cool that is finished and here it is on [github](https://github.com/ultimategamer309/Mass-Mailer). It is a gui based app built off of mailguns api to send email in mass. I was hoping to provide a default server and key in it but apparently I was banned on mailgun. Hopefully in the near future I can get this running on plain stmp however I would have to own a server. Feel free to post my code in r/programminghorror or r/badcode as long as you link it in the comments so i can learn lol.",1150,100,ultimategamester309,2021-01-11 18:37:32,https://www.reddit.com/r/learnprogramming/comments/kv8u8u/i_finally_made_a_completed_app_in_c/,0,learnprogramming
jqyh7m,First Java program runs!,I'm a relatively novice programmer working on a data science master's degree. My class this semester is focused on big data programming tool. I was dreading it since I don't have much programming experience. Spent a huge chunk of time yesterday writing my first Java program and it runs perfectly! It wasn't even that painful. Didn't have any where else to share. Hope I'm not off topic or breaking any rules.,1142,78,WiscoSippi,2020-11-09 14:24:15,https://www.reddit.com/r/learnprogramming/comments/jqyh7m/first_java_program_runs/,0,learnprogramming
em9rq5,"If you learn best by doing: Try this tutorial about building a web based Rock, Paper, Scissors game using common frontend frameworks and libraries.","Background:

I have a self imposed indentured servitude with the bootcamp that got me started in my career. I’ve been mentoring there for the past several years, and while I’m primarily a backend engineer aiming to work more with architecture, this is an application I teach my frontend students. I firmly believe the only way to learn to write code is by writing code, therefore, I hope you’ll code along and ask any questions in the comments.

An ability to follow directions and a desire to get creative with the source code outside of this tutorial will yield the highest results.

[Coding a Rock, Paper, Scissors game with JQuery, Bootstrap, and FontAwesome](https://davewritescode.com/blog/coding-a-rock-paper-scissors-game-with-jquery-bootstrap-and-fontawesome/)",1145,59,_davewritescode,2020-01-09 13:40:12,https://www.reddit.com/r/learnprogramming/comments/em9rq5/if_you_learn_best_by_doing_try_this_tutorial/,0,learnprogramming
clx6tn,I built a tool to help people understand recursion,"I've created a [tool to help people understand recursion](https://practicum.tech/recurser) \-- write a recursive function, and it will draw a tree to show you how that function runs, including arguments and return values all along the way.

It uses a simple language I created just for this.  All it has is arithmetic, variables, if statements, for loops, and arrays.  If people find this useful I can add a lot more, so you could theoretically use it to help understand and debug problems from places like leetcode.",1144,83,BulkyProcedure,2019-08-04 14:56:14,https://www.reddit.com/r/learnprogramming/comments/clx6tn/i_built_a_tool_to_help_people_understand_recursion/,1,learnprogramming
f7j36a,Just a PSA for all new developers out there check your ego when it comes to code reviews.,"I say this l since I've been in a production  environment for a good year now, and while having some of your code being pushed live with no mistakes or feedback is a great feeling, code reviews are very humbling. Check your ego at the door and learn, learn , learn.",1142,112,the_DashingPickle,2020-02-21 22:40:17,https://www.reddit.com/r/learnprogramming/comments/f7j36a/just_a_psa_for_all_new_developers_out_there_check/,0,learnprogramming
13ncp6v,Self-taught and finally got my first job as a Software Engineer!,"I started teaching myself programming in early 2022 after spending a year out of college working a low-paying job that I hated while having absolutely no plan for my career. I initially wanted to become a Physician's Assistant, but after graduation, I decided that the medical field wasn't for me. I never took a single programming or Computer Science class in college, although I was always pretty tech savvy, so I decided to give programming a shot to see if I liked it.

I started by teaching myself python for an hour or two each day after work. After half a year or so, I decided to start learning full-time.  It was at this point that I chose to focus on web-development and began following along with The Odin Project, as well as many other supplemental resources (Udemy courses, personal projects, reading documentation, etc.). In March of this year, I heard about a job opportunity at a fast-growing company and reached out to one of the Senior Developers who was able to take a look at my resume. I was invited in for an interview that included several whiteboard coding questions. I was amazed to learn that I was offered a job as a Software Engineer, and began working there in April.

The first couple of weeks were extremely stressful and difficult. I felt overwhelmed by the massive codebases that I was working on, and had no idea how to navigate the various projects. I was questioning myself everyday, and was unsure whether I had made the right decision to pursue this field over the last year. While I still have imposter syndrome nearly everyday, I am starting to feel a bit better recently. I have gotten a few merge requests approved and integrated into production code which feels really awesome. I have even been requested to review and approve several merge requests as well!

If I could give any advice at all to anyone, it would be to work on personal projects that you enjoy. I think this accelerated my learning greatly, as I could learn more efficiently and for longer periods of time when I was working on something I was passionate about. Also, employers have seen projects like to-do lists thousands of times, so the more unique/personal the project, the better!",1145,87,ImplodingCoding,2023-05-20 23:38:11,https://www.reddit.com/r/learnprogramming/comments/13ncp6v/selftaught_and_finally_got_my_first_job_as_a/,0,learnprogramming
t45syf,There are a lot of incompetent developers out there,"I'm saying this for the people who are concerned about market that seems saturated with entry level developers. I'm just gonna guess, but I think 80% of developers who have no experience (from bootcamp or college or self taught doesnt matter) are not the employee that companies are looking for. A lot of them have copy-paste projects or no portofilo at all!  A lot of them are not problem solver. A lot of them are not in love with software development so they won't go far eventhough they get a job. 

Don't get me wrong, I'm not here to denounce people, these people might make it with time, they might organize their portfolio and github pages while applying jobs or get better and better, what i'm saying is at any given time the market doesn't have enough competent developers. Even for entry level positions. That's why developers are in demand while market is saturated this much. Otherwise isn't this a bit contradictive?

In my opinion, the developer market will never be saturated to the point that actual competent developers can't find a job. Being a developer is hard enough to not attract everyone in the world.

My biggest advise to people who are looking for a job, build projects that you can say ""it's 100% mine from start to finish"". Dont' code along, don't follow a video that says ""BUILD THIS BLA BLA ! VERY EASY PORTFOLIO PROJECT!"".",1142,261,raskolnikovcyka,2022-03-01 11:25:58,https://www.reddit.com/r/learnprogramming/comments/t45syf/there_are_a_lot_of_incompetent_developers_out/,0,learnprogramming
dpzieu,Best sites to practice programming? (i.e. coding exercises),"I've been looking for sites to practice different programming languages but I don't know which one is best.

Edit: Thanks for the 1k upvotes :D",1144,109,None,2019-11-01 04:33:15,https://www.reddit.com/r/learnprogramming/comments/dpzieu/best_sites_to_practice_programming_ie_coding/,0,learnprogramming
ykrlx6,"My teacher says to stay away from StackOverflow and other online help, is this good advice?","I understand the irony of asking this on reddit.

Someone in my intro to compsci asked if you could omit the brackets for a single line if statement in c++, and the teacher vehemently said that this was a bad idea and then went on a rant about resources like stack overflow. She went off on how contributors will do things like this that one should absolutely not do.

She says that a good coder will have a job that employs them for long hours and that they will not want to spend even more time thinking about coding and contributing to forums like these. She believes that as a result, most contributors are unemployed and are out of touch with how programming actually works and thus you will pick up their bad habits.

Is there truth to this? What kinds of people are responding if I ask questions? Am I stunting my growth by looking for help online?

&#x200B;

edit: yeah I absolutely understand the reasoning behind the clear if statement, I just wanted to show how this was brought up. I appreciate the help, even if its just from some 'out of touch and unemployed coders' lol. ",1143,465,WhatsTheHomework,2022-11-03 03:58:03,https://www.reddit.com/r/learnprogramming/comments/ykrlx6/my_teacher_says_to_stay_away_from_stackoverflow/,0,learnprogramming
irwvx9,Learning Path for Learning Algorithms and Data Structures with Python,"Hello Everyone,

I hope you’re doing well. One of our users asked for a collection to learn programming. Usually, people ask advice for which language to start.

I never believed starting from a specific language gives you a boost on learning programming. I think this [video from CheersKevin](https://www.youtube.com/watch?v=mvK0UzFNw1Q) is one of the best pieces of advice about learning programming.

He basically suggests that the best way to learn programming is to solve your own problems. So, start by trying to create toys that solve your problems.

Of course, you need a couple of basics.

I believe those basics are algorithms and data structures. Therefore, curated a list of articles, depositories, videos about “Data Structures and Algorithms”.

And I shared it with a couple of communities. Resources were on JS, so people started asking for the python version.

So, I wanted to share the python version with you guys. 

I’m not a big believer in online courses. Because, the Internet is a big library. But, it’s a mess and it’s hard to find useful pieces. Sometimes, it’s impossible to know where to start as a beginner.

I hope this gives you a quick boost on learning programming.

**Here’s the Collection:** [Algorithms and Data Structures with Python](https://jooseph.com/collections/802?utm_source=reddit.com&utm_medium=referral&utm_campaign=r%2Flearnprogramming)",1134,53,NoFunnyMan,2020-09-13 11:49:55,https://www.reddit.com/r/learnprogramming/comments/irwvx9/learning_path_for_learning_algorithms_and_data/,0,learnprogramming
dctv5f,I got my first internship!,"Hey guys, just wanted to say that I got my first internship at an IT company for the position of a front end web deloper. 
I am self taught and I've been studying actively for the past 8 months. So for anyone out there who's struggling, just keep studying hard and trust in yourself.",1140,86,amazingems,2019-10-03 17:10:24,https://www.reddit.com/r/learnprogramming/comments/dctv5f/i_got_my_first_internship/,0,learnprogramming
9vp1vv,An interesting problem from a job Interview at Google to practice during the weekend. I'll be posting solutions tomorrow. (difficulty = medium),"Hello folks! Yesterday I watched a video of a (supposed) Google interview problem that is REALLY interesting. I loved it. It's simple to explain and understand, and it has many different solutions. The most interesting part is that the solutions range from simple not so efficient ones, to some really smart ones (I have actually 4 in mind, maybe we can find others) that are more efficient and more ""technically"" advanced (introducing time complexity for example).

So I thought it'd be a good idea to introduce it to the community, giving people some time to hack at it, and then posting the solutions explained. We might even find new solutions for it.

### Problem definition

**See a detailed explanation [here](https://notebooks.rmotr.com/santiagobasulto/google-interview-question-9f26238f)**

Given a list containing **integers** in **order**, for example: `[1, 3, 5, 8, 12, 13, 22]` and a target number, for example `16`.

**Can you find a pair of numbers whose sum equals the target number?**

Here's a more graphical definition of it: https://media.giphy.com/media/1oDuNxmD6dBMkFhRIO/giphy.gif

(Also some tests included [here](https://notebooks.rmotr.com/santiagobasulto/google-interview-question-9f26238f)).

### Examples

For our original list:

```
l = [1, 3, 5, 8, 12, 13, 22]
```

* Is there a pair that adds up to `16`? **YES** 😁: `3 + 13`.
* Is there a pair that adds up to `19`? **NO** 😩.
* Is there a pair that adds up to `20`? **YES** 😁: `8 + 12`.
* Is there a pair that adds up to `33`? **NO** 😩.

### Solutions

I'll post the first solution tomorrow at 2PM Eastern! You can comment with ideas but try not to spoil the solutions 🙏. The second solution (a little bit smarter) will be posted on Sunday, also at 2PM Eastern.

EDIT 1: Solutions almost ready, I'll post them soon :)

EDIT 2: [First solution using brute force (including profiling)](https://notebooks.rmotr.com/santiagobasulto/google-interview-question-9f26238f/2.+First+Solution+-+Brute+Force.ipynb)

Edit 3: [Second solution, using Binary Search](https://notebooks.rmotr.com/santiagobasulto/google-interview-question-9f26238f/3.+Binary+Search+solution.ipynb)

---

PS: The video with the whole explanation and solutions is online and belongs to Google's official account, I will not post it so I don't spoil the solutions, but I'll share it later. You can do a quick search and find it if you're curious, but I'd recommend not to do it 
 (until you give the problem some thought 😁).",1141,286,santiagobasulto,2018-11-09 22:37:57,https://www.reddit.com/r/learnprogramming/comments/9vp1vv/an_interesting_problem_from_a_job_interview_at/,0,learnprogramming
75ovw4,250 Free Udemy Course Coupons,"**Edit: Almost all coupons have expired. I will try to post a new list when I have some time.**


Coupons are valid for a limited time only, so grab them while they last.

WEB DEVELOPMENT 

* www.udemy.com/ultimate-web/learn/v4/?couponCode=LRNWEB
* www.udemy.com/responsive-website-template-from-scratch-html-css/?couponCode=FREEFB
* www.udemy.com/web-design-creating-websites-from-scratch/?couponCode=WEBFREE
* www.udemy.com/build-responsive-website-using-html5-css3-js-and-bootstrap/?couponCode=BKTF250816
* www.udemy.com/explore-web-development/?couponCode=FREECOURSE44173
* www.udemy.com/html-online-course/?couponCode=HTMLFREE
* www.udemy.com/introduction-to-css-web-development-bootcamp/?couponCode=CSSFREE
* www.udemy.com/learn-html-css-website/?couponCode=BBHFREE
* www.udemy.com/html-css-learn-to-create-a-website-from-scratch/?couponCode=HTMLFREE
* www.udemy.com/create-a-website-from-scratch-using-html-css-in-1-hour/?couponCode=BBHTML
* www.udemy.com/html5-game-from-scratch-step-by-step-learning-javascript/?couponCode=FREECOURSE2
* www.udemy.com/building-html5-canvas-projects-from-scratch/?couponCode=CANVASFREE
* www.udemy.com/building-websites-learn-javascript-and-the-dom/?couponCode=FREEBHH
* www.udemy.com/javascript-learn-javascript-essentials-and-build-project/?couponCode=NEWBBHF
* www.udemy.com/learn-javascript-course/?couponCode=FREEJS
* www.udemy.com/javascript-intro-to-learning-javascript/?couponCode=BBHFREE
* www.udemy.com/learn-to-code-javascript-web-designers-web-developers/?couponCode=JSFREE
* www.udemy.com/amazing-javascript-code-examples-from-scratch-dom-coding/?couponCode=FREEJAVASCRIPT
* www.udemy.com/javascript-arrays/?couponCode=FREEARRAY
* www.udemy.com/building-websites-learn-javascript-and-the-dom/?couponCode=WEBSITEFREE
* www.udemy.com/vue-web-apps/?couponCode=GOHACKERS
* www.udemy.com/learn-vue-js-introduction-to-simple-reactive-javascript/?couponCode=FREEVUE
* www.udemy.com/vuejs-introduction-to-vuejs-javascript-framework/?couponCode=FREEVUE
* www.udemy.com/javascript-ajax-php-mysql-create-a-comment-submission-form/?couponCode=FREECOURSE
* www.udemy.com/object-javascript/?couponCode=fbcourselaunch
* www.udemy.com/es6-in-depth/?couponCode=GOHACKERS
* www.udemy.com/react-js-and-redux-mastering-web-apps/?couponCode=GOHACKERS2
* www.udemy.com/build-a-weather-app-with-ajax-using-open-weather-map-api/?couponCode=FREECOURSE
* www.udemy.com/try-angularjs/?couponCode=CFENOV2016
* www.udemy.com/learn-angular-2-from-beginner-to-advanced/?couponCode=JERRYBANFIELD
* www.udemy.com/learn-php-for-beginners/?couponCode=FREEPHP
* www.udemy.com/learn-object-oriented-php-by-building-a-complete-website/
* www.udemy.com/php-user-login-registration-system/?couponCode=FBFREE
* www.udemy.com/tweetme-django/?couponCode=DEC2016
* www.udemy.com/django-core/?couponCode=CFENOV2016
* www.udemy.com/bootstrap-4-website/?couponCode=b4free
* www.udemy.com/bootstrap-website-design/?couponCode=FREEBOOTSTRAP4
* www.udemy.com/bootstrap-projects-responsive-design-essential-training/?couponCode=BOOTSTRAPFREE
* www.udemy.com/responsive-website-design/?couponCode=FREEBOOTSTRAP
* www.udemy.com/build-a-responsive-singlepage-website-from-scratch-bootstrap/?couponCode=FREEWEBDEV
* www.udemy.com/interaction-design-specialist-for-web-developers/?couponCode=IXD
* www.udemy.com/wordpress-basic/?couponCode=WPFREE
* www.udemy.com/the-complete-wordpress-for-beginners-course/?couponCode=WP4BEGINNERS
* www.udemy.com/wordpress-starter/?couponCode=2017MANIFESTO
* www.udemy.com/wordpress-for-business-using-the-wordpress-dashboard/?couponCode=FBFREE
* www.udemy.com/how-to-create-your-own-website-with-wordpress/?couponCode=FREE-WORDPRESS
* www.udemy.com/unofficial-udemy-marketing-build-a-wordpress-website/?couponCode=2017MANIFESTO


Programming & IT

* www.udemy.com/learn-c-plus-plus-from-beginner-to-advanced/?couponCode=JERRYBANFIELD
* www.udemy.com/how-to-create-an-advanced-keylogger-from-scratch-for-windows/?couponCode=JERRYBANFIELD
* www.udemy.com/tic-tac-toe-sfml/?couponCode=SFMLTTT-CFREE4
* www.udemy.com/flappy-bird-sfml/?couponCode=FLAP-FREE
* www.udemy.com/android-tutorial/
* www.udemy.com/learn-c-programming-language/?couponCode=ALLFREEE
* www.udemy.com/beginners-c-programming/?couponCode=UDEMYGURUPROMO
* www.udemy.com/pointers-in-c-programming/?couponCode=FREE111
* www.udemy.com/30-days-of-python/?couponCode=CFEOCT2016
* www.udemy.com/learn-python-3-from-beginner-to-advanced/?couponCode=JERRYBANFIELD
* www.udemy.com/pre-programming-everything-you-need-to-know-before-you-code/?couponCode=freeforstudio
* www.udemy.com/swift-programming-how-to-make-an-app-for-mac-osx/?couponCode=PROMOCOUPON24_COM
* www.udemy.com/unity-multiplayer-make-a-shooter-game-code-included/?couponCode=WONDER55P9
* www.udemy.com/applewatchcourse/?couponCode=EnrollFREE
* www.udemy.com/virtualbox-advanced-features-and-practical-use/?couponCode=TWFR59
* www.udemy.com/chatbots-how-to-make-chat-bot-for-facebook-messenger/?couponCode=CHATBOTSLIFE
* www.udemy.com/c-training-series/?couponCode=BBHFPROMO
* www.udemy.com/wireshark/?couponCode=WOO052816
* www.udemy.com/red-hat-linux-centos-rhcsa/?couponCode=WOO052816
* www.udemy.com/hey-siri-whats-new-on-macos-sierra/?couponCode=UDEMYSTUD
* www.udemy.com/pass-cisa/?couponCode=FREECOUPONISACA
* www.udemy.com/networkingstepbystep-ipv6-addressing-and-basic-connectivity/?couponCode=IPv6Free
* www.udemy.com/setup-xampp-local-server/?couponCode=LOCALHOSTFREE
* www.udemy.com/hacking-complete/?couponCode=JERRYBANFIELD
* www.udemy.com/penetration-testing/?couponCode=WOO052816


Video Production

* www.udemy.com/online-cinematography-course-filmmaking-video-production-lighting/?couponCode=FREEFORFRIENDS16
* www.udemy.com/dslr-video-production-online-course-tutorial-training/?couponCode=FREEFORFRIENDS16
* www.udemy.com/camera-confidence-media-training/?couponCode=FREEFORFRIENDS16
* www.udemy.com/gopro-tutorials-for-beginners-how-to-shoot-edit-video-online-course/?couponCode=FREEFORFRIENDS16
* www.udemy.com/screenflow/?couponCode=FREEFORFRIENDS16
* www.udemy.com/easy-video-making-explaindio-video-creator-tutorial/?couponCode=BBHFREE

Video Editing

* www.udemy.com/adobe-premiere-pro-video-editing/?couponCode=FREEFORFRIENDS16
* www.udemy.com/adobe-premiere-pro/?couponCode=FREEFORFRIENDS16
* www.udemy.com/videoediting/?couponCode=FREEFORFRIENDS16
* www.udemy.com/greenscreen/?couponCode=FREEFORFRIENDS16

Motion Graphics

* www.udemy.com/aftereffects/?couponCode=FREEFORFRIENDS16
* www.udemy.com/adobe-after-effects-course-tutorial-for-beginners/?couponCode=FREEFORFRIENDS16
* www.udemy.com/adobe-after-effects-course-tutorial-for-beginners-animating-keyframes/?couponCode=FREEFORFRIENDS16
* www.udemy.com/dive-into-adobe-after-effects-flat-animation-buildup/?couponCode=FREEFORFRIENDS16
* www.udemy.com/lowerthirds/?couponCode=FREEFORFRIENDS16
* www.udemy.com/how-to-create-your-own-video-intro/?couponCode=FREEFORFRIENDS16
* www.udemy.com/after-effects-tutorials-advanced-shape-layers/?couponCode=FREEFORFRIENDS16
* www.udemy.com/after-effects-tutorial-badge-animation/?couponCode=FREEFORFRIENDS16
* www.udemy.com/learn-logo-pop-up-animation-in-after-effects-for-beginners/?couponCode=ENDYEAROFF
* www.udemy.com/kinetictypography/?couponCode=FREEFORFRIENDS16
* www.udemy.com/3d-animation-visual-effects-introduction-to-maya-autodesk/?couponCode=FREEFORFRIENDS16
* www.udemy.com/low-poly-art-create-an-abstract-wolf/?couponCode=BHF_LP

Photography

* www.udemy.com/photography-masterclass-your-complete-guide-to-photography/?couponCode=FREEFORFRIENDS16
* www.udemy.com/food-photography/?couponCode=FREEFORFRIENDS16
* www.udemy.com/wedding-photography-course/?couponCode=FREEFORFRIENDS16
* www.udemy.com/photography-for-kids-online-course/?couponCode=FREEFORFRIENDS16
* www.udemy.com/photography/?couponCode=FREEFORFRIENDS16
* www.udemy.com/tips-tricks-to-shoot-and-process-panorama-images-photoshop/?couponCode=ENDYEAROFF

Photo Editing & Design

* www.udemy.com/adobe-photoshop-course/?couponCode=FREEFORFRIENDS2017
* www.udemy.com/getting-started-in-photoshop/?couponCode=free-online-photoshop-course
* www.udemy.com/photoshop-for-entrepreneurs/?couponCode=FREEFORFRIENDS16
* www.udemy.com/photo-colorization-how-to-colorize-black-white-photos/?couponCode=FREEFORFRIENDS16
* www.udemy.com/ebook-cover-design/?couponCode=FREEFORFRIENDS16
* www.udemy.com/photoshop-effects-photo-effects/?couponCode=FBFREE
* www.udemy.com/learn-2d-game-special-effect-animation-in-photoshop/?couponCode=FREECODE
* www.udemy.com/photoshop-cc-introduction-tutorial-quick-start/?couponCode=foreverFree
* www.udemy.com/learn-abstract-concept-art-photo-manipulation-in-photoshop/?couponCode=ENDYEAROFF
* www.udemy.com/learn-sci-fi-character-photo-manipulation-in-photoshop-for-beginners/?couponCode=ENDYEAROFF
* www.udemy.com/mastering-selections-and-masks-in-photoshop/?couponCode=MASKS0
* www.udemy.com/photoshop-photo-to-ancient-grungy-art-in-photoshop/?couponCode=ENDYEAROFF
* www.udemy.com/photoshop-how-to-dodge-burn-in-adobe-photoshop/?couponCode=ENDYEAROFF
* www.udemy.com/how-to-create-digital-painting-effect-in-adobe-photoshop/?couponCode=ENDYEAROFF
* www.udemy.com/mastering-color-grading-in-photoshop/?couponCode=PSANDLR
* www.udemy.com/color-harmony-and-retouching-in-photoshop/?couponCode=GIVEAWAY
* www.udemy.com/photoshop-portrait-photography-techniques/?couponCode=REVIEWSAPPRECIATED
* www.udemy.com/retouching-essentials-in-photoshop/?couponCode=PSLR2017
* www.udemy.com/canva-graphic-design-course/?couponCode=FREEFORFRIENDS16
* www.udemy.com/ultimate-creature-design-course/?couponCode=FREETIME

Microsoft Office

* www.udemy.com/learn-microsoft-excel-formulas-and-functions-with-examples/?couponCode=BLOG_FREE
* www.udemy.com/microsoft-excel-from-basics-to-advanced-in-rapid-time/?couponCode=FREE50000
* www.udemy.com/excel-block-chart/?couponCode=freeaccess
* www.udemy.com/powerpoint-4-video-create-explainer-videos-in-powerpoint/?couponCode=UDEMYFBG
* www.udemy.com/access2013-certification/?couponCode=access2013
* www.udemy.com/the-complete-beginners-guide-to-microsoft-word-2016-part-2/?couponCode=USMLR10000

Teach Online Courses

* www.udemy.com/unofficial-teach-online-courses-complete-udemy-course-creation-guide/?couponCode=FREEFORFRIENDS16
* www.udemy.com/online-course-launch/?couponCode=FREEFORFRIENDS16
* www.udemy.com/create-and-sell-online-courses/?couponCode=FREEFORFRIENDS16
* www.udemy.com/skillshare-basics-for-new-teachers/?couponCode=UDEMY2017
* www.udemy.com/unofficial-udemy-instructor-tips-marketing-that-works/?couponCode=UCOURSECOUPON
* www.udemy.com/how-to-create-an-online-class-make-it-a-best-seller/?couponCode=2017MANIFESTO

Marketing

* www.udemy.com/become-a-marketer-learn-growth-marketing-get-a-job/?couponCode=freeforstudio
* www.udemy.com/how-to-build-your-email-list-with-mailpoet-mailchimp-aweber/?couponCode=FREEFORFRIENDS16
* www.udemy.com/email-marketing-for-affiliate-marketers/?couponCode=BBHHFF
* www.udemy.com/super-easy-google-adsense-method-2016/?couponCode=DARKGOLD15
* www.udemy.com/webmaster/?couponCode=couponliar
* www.udemy.com/super-easy-google-adsense-method-2016/?couponCode=BPVT15K
* www.udemy.com/social-media-marketing-mastery/?couponCode=FREE4NOW
* www.udemy.com/social-media-marketing-science/?couponCode=REVIEWAPPRECIATED
* www.udemy.com/social-media-marketing-strategies/?couponCode=2017MANIFESTO
* www.udemy.com/the-social-media-marketing-mega-bundle-7-courses-in-1/?couponCode=REVIEWSPECIALX
* www.udemy.com/local-business-marketing-growth-strategies/?couponCode=SPLBMBHW0
* www.udemy.com/spyfu-marketing/?couponCode=SPYFUCOURSE
* www.udemy.com/how-to-generate-leads-with-linkedin/?couponCode=FBGROUP
* www.udemy.com/mlm-network-marketing-direct-sales/?couponCode=SPMLMFB0
* www.udemy.com/traffic-flood-get-in-front-of-1000000-25000000-weekly/?couponCode=traffic
* www.udemy.com/facebook-advertising/?couponCode=FBADS0
* www.udemy.com/facebook-marketing-how-to-create-converting-ads/?couponCode=FREEACCESS
* www.udemy.com/facebook-marketing-next-level-list-building-strategies/?couponCode=YouAreAwesome
* www.udemy.com/facebook-social-media/?couponCode=SPsocialsuccess0
* www.udemy.com/facebook-live/?couponCode=FBLIVE0
* www.udemy.com/free-business-facebook-advertising/?couponCode=FREEFACEBOOKVV
* www.udemy.com/promoted-posts/?couponCode=FREEACCESS
* www.udemy.com/amazon-video-direct-course/?couponCode=FREEFORFRIENDS16
* www.udemy.com/fundraising101-pitch-fund-and-kickstart-a-video-project/?couponCode=FREEFORFRIENDS16
* www.udemy.com/weddings/?couponCode=FREEFORFRIENDS16
* www.udemy.com/youtube-masterclass/?couponCode=FREEFORFRIENDS16
* www.udemy.com/youtubeads/?couponCode=FREE0
* www.udemy.com/youtube-piggyback-method-unlimited-traffic-the-easy-way/?couponCode=FREEPiggyBack
* www.udemy.com/viralnomics-creating-youtube-video-ideas-that-go-viral/?couponCode=FORSTUDENTS

Others

* www.udemy.com/entrepreneurship-for-noobees/?couponCode=MARCH2017
* www.udemy.com/intro-to-entrepreneurship-get-started-as-an-entrepreneur/?couponCode=freeforstudio
* www.udemy.com/freelance-kickstart-launch-a-successful-freelancing-career/?couponCode=FREEFORFRIENDS16
* www.udemy.com/mba-business-tools-that-get-results-free-workbooks-included/?couponCode=FREE55000
* www.udemy.com/business-bootcamp/?couponCode=FREEFORFRIENDS16
* www.udemy.com/master-outsourcing-get-the-best-price-save-time/?couponCode=freeforstudio
* www.udemy.com/outsource-your-idea-launch-your-business-for-14-the-price/?couponCode=freeforstudio
* www.udemy.com/online-business-strategies-for-total-beginners/?couponCode=ITWORKS
* www.udemy.com/401k-plan/?couponCode=401KFREE
* www.udemy.com/online-business-strategies-for-total-beginners/?couponCode=SPRINGSALE17
* www.udemy.com/personal-finance-masterclass/?couponCode=FREEFORFRIENDS16
* www.udemy.com/financial-modeling-for-startups-small-businesses/?couponCode=freeforstudio
* www.udemy.com/the-many-ways-to-create-an-online-career-from-home/?couponCode=honest-feedback
* www.udemy.com/how-to-make-135-a-day-cloning-a-slotmachine-app/?couponCode=MOARFREE
* www.udemy.com/viral-content-buzz-boost-your-blog-traffic-by-500/?couponCode=VIRALITYNOW
* www.udemy.com/vagrant-quick-start/?couponCode=VQS_FREE_FB
* www.udemy.com/scrum-master-training/?couponCode=scrmexamplesfbfree
* www.udemy.com/scrum-case-studies/?couponCode=confessfbfree
* www.udemy.com/idea-generation-coming-up-with-killer-business-deas/?couponCode=freeforstudio
* www.udemy.com/1-day-mvp-find-the-right-idea-and-build-a-demo-in-1-day/?couponCode=studiocoupon
* www.udemy.com/fundamentals-of-accountancy/?couponCode=FEBFREE
* www.udemy.com/capital-structuring-decisions/?couponCode=FEBFREE
* www.udemy.com/economics-for-accounting-and-finance-professionals/?couponCode=FEBFREE
* www.udemy.com/accounting-through-visual-presentation/?couponCode=FEBFREE
* www.udemy.com/marginal-costing-theory-and-practice/?couponCode=FEBFREE
* www.udemy.com/learn-critical-path-analysis/?couponCode=FEBFREE
* www.udemy.com/leasing-a-comprehensive-study/?couponCode=FEBFREE
* www.udemy.com/statistics-regression-analysis/?couponCode=FEBFREE
* www.udemy.com/transfer-pricing-a-complete-analysis/?couponCode=FEBFREE
* www.udemy.com/four-fundamentals-of-financial-planning/?couponCode=SP4FUNDBHW0
* www.udemy.com/how-to-build-a-successful-e-commerce-business/?couponCode=YouAreAwesome&pmtag=AUG103USN
* www.udemy.com/dropshipping-with-bigcommerce/?couponCode=2017MANIFESTO
* www.udemy.com/how-to-make-money-online-with-shopify/?couponCode=1000TH
* www.udemy.com/how-to-publish-an-amazon-best-seller/?couponCode=FREEFORFRIENDS16
* www.udemy.com/sell-on-amazon-simple-effective-work-from-home-strategies/?couponCode=2017MANIFESTO
* www.udemy.com/ebay-selling-no-inventory/?couponCode=2017MANIFESTO
* www.udemy.com/alibabamini/?couponCode=BBFH2017
* www.udemy.com/create-passive-income-from-photography-sell-your-images/?couponCode=ENDYEAROFF
* www.udemy.com/how-to-get-your-first-1000-customers/?couponCode=freeforstudio
* www.udemy.com/introduction-to-japanese-candlesticks/?couponCode=WELCOMETRADERS134
* www.udemy.com/basics-of-international-finance/?couponCode=FEBFREE
* www.udemy.com/investing-fundamentals-how-to-develop-an-investors-mindset/?couponCode=2017MANIFESTO
* www.udemy.com/how-to-be-happy-what-the-scientists-dont-want-you-to-know/?couponCode=FREEBIE
* www.udemy.com/happiness-and-resiliency-now/?couponCode=SPBHW0
* www.udemy.com/game-conventions-and-conferences/?couponCode=ConventionsFree
* www.udemy.com/writing-productivity-habits/?couponCode=FBFREE
* www.udemy.com/malcolm-gladwell/?couponCode=200ONLY
* www.udemy.com/write1bookin6hours/?couponCode=FREECOURSE
* www.udemy.com/google-advanced-search/?couponCode=GOOGLESEARCHXYZ
* www.udemy.com/10-simple-travel-hacks-that-will-save-you-thousands/?couponCode=GIVEAWAY
* www.udemy.com/ideas-bank/?couponCode=922280BH00001
* www.udemy.com/growth-mindset-learn-to-shift-your-mindset-to-reach-success/?couponCode=SUCCESSFREE
* www.udemy.com/ace-every-job-interview-master-blueprint-and-get-your-dream-job/?couponCode=HAPPYNEWYEAR_2017
* www.udemy.com/design-thinking-for-long-term-business-success/?couponCode=HAPPYNEWYEAR_2017
* www.udemy.com/how-to-love-your-job-and-make-an-impact/?couponCode=BESTBLACKHAT
* www.udemy.com/get-job-interviews-using-social-media/?couponCode=blog13
* www.udemy.com/productivity-secrets-for-entrepreneurs/?couponCode=2017MANIFESTO
* www.udemy.com/healing-relationships-with-eft/?couponCode=SPFB00
* www.udemy.com/relationship-recovery/?couponCode=SPRRBHW0
* www.udemy.com/rapid-fat-loss-challenge/?couponCode=free_UDEMY_courses_FBgroup
* www.udemy.com/how-i-cured-my-chronic-pain/?couponCode=GALWAYISTHEBEST
* www.udemy.com/no-oil-cooking-recipes-no-cholesterol-fat-free-food/?couponCode=PROMOCOUPONS24.COM
* www.udemy.com/master-meditation-in-28-days/?couponCode=M2V14FR
* www.udemy.com/healthy-habits-101/?couponCode=PromoCoupons24.com
* www.udemy.com/boomerfitness/?couponCode=VETERANSHEROS
* www.udemy.com/garageband-course/?couponCode=FREE2017
* www.udemy.com/beginner-guitar-masterclass/?couponCode=FREEFIVER
* www.udemy.com/steps-to-take-to-effectively-sell-music-online/?couponCode=EMAILLISTFREE
* www.udemy.com/conceiving-a-new-game-tips/?couponCode=ConceiveFree
* www.udemy.com/college-freshman-tips/?couponCode=UCOURSECOUPON
* www.udemy.com/aws-test-practice/?couponCode=COUPONFREELIMITED
* www.udemy.com/balanced-scorecard-master-your-data-driven-performance/?couponCode=FACEBOOK1
* www.udemy.com/esl-understand-business-english/?couponCode=SPENGLISH2ND0
* www.udemy.com/digital-nomads-world-travel/?couponCode=SPTRAVELBHW0",1139,160,commandrbond,2017-10-11 12:59:46,https://www.reddit.com/r/learnprogramming/comments/75ovw4/250_free_udemy_course_coupons/,0,learnprogramming
4pt0vo,"[ShowerThought] StackOverflow should allow us to mark answers as ""deprecated"" ""no longer works"" so we don't have to sift through the comments.","Or say, put every question up for re-assessment every year or so. Mods can finally do something productive instead of shutting down every question as 'not constructive'. How the fuck does it have 127 upvotes if it's 'not constructive' you idiot.",1135,34,devandro,2016-06-25 15:48:05,https://www.reddit.com/r/learnprogramming/comments/4pt0vo/showerthought_stackoverflow_should_allow_us_to/,0,learnprogramming
eaz2jn,"Great Resources: Python, Computer Science, algorithms, how computers and internet work.","Hey Guys: I'm trying to line up some of the best courses and

Resources for getting good at Computer science,  programming (Python)

and also for building a clear understanding of computer and the internet work in depth (Curiosity). I will be studying 1-2 hours a day for probably some years while working and doing other stuff. I would really appreciate your help and feedback  by contributing with your recommendations - what are effective ressources what are not?

My goal is to get a solid understanding of Computer Science ( how computers work,

how the internet works, programming languages ) while learning some programming languages (Python as a start).Knowledge of Computers, Hardware, Netowork and Security can also be very useful for a programmer,

&#x200B;

**Let me start by defining what i mean by a Good course /book**

&#x200B;

\* short and to the point (no drawn out fluff talk)

\* Clear definitions that are easy to understand

\* good visual and practical examples that explain the definitions / subject

\* optional: exercises and quizzes (can be nice, but you can also invent your own quizzes)

In an Ideal world a large group of university teachers would work together to write materials that are intuitive, fast to digest, have enough exercises for students to learn basic concepts in a progressive manner in order to later dive into more in depth and progressively challenging experience tasks.

I want to leave a video /chapter feeling like ""I understand it, i get it"" I don't like wasting time so I'd rather spend extra time finding good quality ressources. With some books or coures you may sit for days without really understanding a thing, either because too many steps are skipped,  it's lacking visuals, it's just not defined corectly etc.  while other ressources teach you those same concepts you needed in just hours, os let's save time and share the best ressources for learning things in depth and with enough clarity to not leave students in constant doubt.

&#x200B;

&#x200B;

**For Python - Best ressources?**

1. **Automate the boring stuff:** not sure if i should get the book, just use the website or get the udemy course [https://automatetheboringstuff.com/](https://automatetheboringstuff.com/)
2. **Python Crash Course**  [https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr\_1\_3?keywords=python+crash+course&qid=1576416310&sr=8-3](https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_3?keywords=python+crash+course&qid=1576416310&sr=8-3)
3. **Sololearn: Just for begenning python / refreshing syntax** [https://www.sololearn.com/](https://www.sololearn.com/)
4. **Corey Shaffer (youtube)** [https://www.youtube.com/watch?v=YYXdXT2l-Gg&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU](https://www.youtube.com/watch?v=YYXdXT2l-Gg&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU)
5. **Sentdex (youtube for Python)**
6. **Colt Steele at Udemy**

&#x200B;

**Computer Science - Best resources**

1. Crash course: [https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo](https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo)
2. Computer Science Tutor: [https://www.youtube.com/watch?v=uMDQiZg8rWE&list=PL04uZ7242\_M60Z2F8qV7sId99cuwV\_Z3T](https://www.youtube.com/watch?v=uMDQiZg8rWE&list=PL04uZ7242_M60Z2F8qV7sId99cuwV_Z3T)
3. Learn.com   ( I don't have experience with this but the courses look really good in terms of quality, any opinions?)
4. Update: CS50x Harvard University's introduction to Computer science (Thank you Bizkigto and jjp7) [https://www.edx.org/course/cs50s-introduction-to-computer-science](https://www.edx.org/course/cs50s-introduction-to-computer-science)
5. Update: ""Computer Science: An interdisciplinary approach""  - Great Amazon Reviews (Thank you HeroicMishy) [https://www.amazon.com/Computer-Science-Interdisciplinary-Robert-Sedgewick/dp/0134076427](https://www.amazon.com/Computer-Science-Interdisciplinary-Robert-Sedgewick/dp/0134076427)

&#x200B;

&#x200B;

**For algorithms i was considering**

1. Grokking Alogorithms (book)
2. Coursera algorithms 1 and algorithms 2
3. Update:  ""Algorithms 4th edition"", both by Robert Sedgewick - This uses Java, not Python (Thank you HeroicMishy)
4. other recommendations?

**For learning how computers work I was thinking**

1. Ben Eater 8 bit computer [https://www.youtube.com/user/eaterbc](https://www.youtube.com/user/eaterbc)
2. Book on amazon ""How does it know?""

&#x200B;

**For understanding The Internet: protocols, TCP, Routers etc**

1. Udemy Network + by jason Dion [https://www.udemy.com/course/networkplus/](https://www.udemy.com/course/networkplus/)
2. Ben Eater (really good!) [https://www.youtube.com/watch?v=XaGXPObx2Gs&list=PLowKtXNTBypH19whXTVoG3oKSuOcw\_XeW](https://www.youtube.com/watch?v=XaGXPObx2Gs&list=PLowKtXNTBypH19whXTVoG3oKSuOcw_XeW)
3. UPDATE: powercert animated Videos for Network + (Thank you TheOneScroogeMcDuck -  Very illustrative) [https://www.youtube.com/watch?v=cn8Zxh9bPio&feature=youtu.be](https://www.youtube.com/watch?v=cn8Zxh9bPio&feature=youtu.be)
4. UPDATE: The Complete Networking Fundamentals Course. Your CCNA start [https://www.udemy.com/course/complete-networking-fundamentals-course-ccna-start/](https://www.udemy.com/course/complete-networking-fundamentals-course-ccna-start/)
5. Update: Professor MEsser (Network+, Comptia, Security) (Thank you 9Jarvis8)  [https://www.professormesser.com/free-a-plus-training/220-1001/220-1000-training-course/](https://www.professormesser.com/free-a-plus-training/220-1001/220-1000-training-course/)
6. Update :Sunny classroom (helphed me a lot and has great visual illustrations) [https://www.youtube.com/user/sunnylearning/videos](https://www.youtube.com/user/sunnylearning/videos)

&#x200B;

I hope this can help some of you and I would be glad if you can recommend some good courses /materials as well to gain a good all around knowledge of computers, the internet and programming. So please write a comment about the above recommendations (what is good about it what is not?) and share your own recommendations. Kind regards Julia.",1134,55,julia-os,2019-12-15 13:42:40,https://www.reddit.com/r/learnprogramming/comments/eaz2jn/great_resources_python_computer_science/,0,learnprogramming
odcijb,A website that gave git commands by using dropdowns,"A few months back, I had come across a website that allowed me to choose a ""What do you want to do dropdown"" with options like ""Create a branch"",""Merge a branch"",""Push to server""... etc and then I would get the git command for it. I cant seem to remember what website it was. If anyone knows what I am talking about, please comment the URL.

EDIT:

Shortly after posting this, I found the link luckily: [https://gitexplorer.com/](https://gitexplorer.com/)

&#x200B;

This website is amazing. Check it out if you want to get a command using ELI5 way",1135,30,crypticcall,2021-07-04 03:40:17,https://www.reddit.com/r/learnprogramming/comments/odcijb/a_website_that_gave_git_commands_by_using/,0,learnprogramming
iaatt4,Stop burning yourself out working on a project,"  

I’ve taught CS and programming for many years and have seen students get burned out and quit when working on a programming project. Since school is starting, as a reminder,  I wanted to share these 3 simple pointers on how to approach your projects to avoid being burned out:

1- If you are on a due date, start early and budget your time wisely to allow break time. Do NOT Procrastinate! If you know you have a problem with procrastination, now it’s a good time to practice TOP (Time management, Organization, Prioritization). There are many free online tools and apps you can use to help you out.

2- If you are working on your own project with no due dates. Set boundaries for yourself, prioritize, and purposefully implement break time for yourself. It’s easy to get lost in your own project and lose track of time! Avoid falling for programming addiction. It’s a real thing and it will either burn you out or affect all the other aspects of your life. 

3- If there is a bug that you can NOT fix. It’s ok! It’s very normal in programming for debugging to take much longer than writing the actual code. Take a break from it and sleep on it. Go do something completely unrelated and then come back to it!

Best of luck!",1128,70,WSTEMadvocate,2020-08-15 16:53:06,https://www.reddit.com/r/learnprogramming/comments/iaatt4/stop_burning_yourself_out_working_on_a_project/,0,learnprogramming
134qz1f,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (May 2023)","UPDATE: The codes are all used. But you can still watch [the first 15 videos on YouTube](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1) and also watch the rest on the course page on Udemy. Scroll down to find and click ""Expand All Sections"" and then click the preview link for each video.

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https:// udemy. com/course/automate/?couponCode=MAY2023FREE~~

~~https:// udemy. com/course/automate/?couponCode=MAY2023FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student) If you have a VPN service, try to sign up from a North American or European proxy.

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, Python Programming Exercises Gently Explained is a set of 42 programming exercises for beginners [for free](https://inventwithpython.com/pythongently/) or as a [99 cent ebook](https://www.amazon.com/Python-Programming-Exercises-Gently-Explained-ebook/dp/B0BGYJ7G6T/).


**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1135,118,AlSweigart,2023-05-01 16:19:32,https://www.reddit.com/r/learnprogramming/comments/134qz1f/2000_free_sign_ups_available_for_the_automate_the/,1,learnprogramming
sk9f51,How I got a nice full time job before graduating,"Hey guys, yesterday was probably one of the best days in my life for my career. I just receveid the news that I got slated for a offer at Microsoft, full time Software Engineer, while I'm still at college. 

I follow this sub anonymously for a long time, and I see that people sometimes struggle to find and guarantee jobs, ever after graduation, so I though that I could give some advice with my limited experience. Also, feel free to ask any questions.


. Limit the things that can distract you

Limiting the things you worry about is probably one of my life motos. I know this is hard to do, specially if are from the USA, with student debt and things like that. 

If you can, having non-toxic relationships, letting people go and don't involving yourself in drama is freeing. You'll be able to focus much more on each task you are doing.


. Don't do many things at once

These companies tends to focus a lot on your data structure and algorithms fundamentals, because they want a Software Engineer, and not someone who just can type some code. Focus on what really matters, study these concepts from start-to-end and try to use your side projects as a way to show some useful applications of this concepts. Just don't go crazy on learning several things at once. 

A few months ago I was trying to learn Elixir, Rust, Clojure and how to use Datomic at the same time, I really thought that I would get something from it, but in the end I was just learning a bunch of tools that I was not sure how to use them yet.


. Play the Game

Time and time again I read about how broken tech interviews are, and you know what? I agree, it is a exhausting process. Another thing that I agree with is that you should play this game.

Go study, go do some leetcode. It will be painful in the beginning, but later you will start to enjoy figuring out solutions on your own (I promise). A few months ago I knew nothing about leetcode, nor knew how to solve even the simplest medium questions, so I studied heaps, linked lists, tree traversals, graph algorithms, array and string manipulation. I still can't solve a bunch of questions there, but I felt that I have become a stronger engineer knowing these core fundamentals.

For me, the best youtube channel for leetcode is NeetCode.


. Do your best at college

I already had 4 work opportunities before applying to Microsoft, and all of them came from Professor recomendations. 

They have a huge network built over years of experience, so try do to your best, be nice with with them and they'll put you in the right tracks.

Do your school projects as if they were work projects, do your absolute best, do even more than you were asked for. 

You will learn a lot, and will also gain more visibility


. Go out there

No one will know who you are if you don't have visibility. No, I'm not saying that you need to be some kind of influencer, just having a nice LinkedIn profile, with insightful posts about CS and a GitHub is more than enough.

Also, try to post on platforms like Medium or Dev.to, this will give you some visibility among other developers.


. Watch good media

These days we are overflown with information, and some of this informatiob is pure trash. If you are aiming CS content, try to watch the content that will give you some insights to your carreer. These are my favourite resources:

1. Continuos Delivery (Dave Farley)
2. Go To Conferences (Robert Martin, Joe Armstrong...)
3. Techlead (before the cripto and controversial stuff)
4. Engineering with Utsav
5. Mayuko


. Enjoy victory, but embrace losing

Altough I had this recent victory, I was reject from more than 150 jobs in the past 2 years. Don't give up, just try to learn what you did wrong and improve yourself. 

I was rejected for a Google international internship in 2019, and, at the time, the feeling was awful. But I knew I had to move on. Don't give up, you only need to win once.

***

These are my tips, If you guys want, feel free to leave any critique in the comments, and also to make some questions =).


edit: removed the React part because some people thought it was serious =/.",1132,119,None,2022-02-04 09:42:29,https://www.reddit.com/r/learnprogramming/comments/sk9f51/how_i_got_a_nice_full_time_job_before_graduating/,0,learnprogramming
huv56m,I finally got a breakthrough moment with iOS programming.,"**I have been off and on programming for years now, but most of the time I just followed tutorials and never really understood what I was doing. Recently, I’ve been grinding pretty hard on programming. I had my breakthrough with Python a few months back where I could actually begin creating useful programs by myself.**

Today I had my first iOS app development breakthrough. The entire day I was following a more advanced tutorial, and I pretty much understood exactly what the guy was doing the whole time. There were still some parts that I didn’t understand fully, but most of it made sense to me. I even starting typing what I thought he was going to type next and was right about it sometimes.

The first best part came after I finished the tutorial and there was a comment down below where the guy was totally stuck. I went over his code, found the error, and gave him the answer, just like the dads do on Stack Overflow.

Just wanted to share one of my breakthrough moments on here. Not sure if its the right place to put it, but for those who haven’t gone through breakthrough moments, you’ll get there! 

&#x200B;

Just keep persisting!",1136,52,amerikayo,2020-07-20 22:19:31,https://www.reddit.com/r/learnprogramming/comments/huv56m/i_finally_got_a_breakthrough_moment_with_ios/,0,learnprogramming
b50ton,Learn it Yourself,"I've been programming for about a decade now and have been teaching others for nearly as long. One phenomenon I experience is that sometimes I get back *a lot* of questions, most of which could be answered without my help.

I realized that one of the reasons is that people don't know any better.
That's why I wrote [Learn it Yourself](https://egoless.tech/learn-it-yourself/) and described some basic methods for how you can answer most of your questions and fix most of your bugs without external help (and why you would want that).

Hope this will be useful here.

Let me know if you know any other beginner techniques—I would be glad to include them, too!
",1128,53,rasendubi,2019-03-24 20:05:25,https://www.reddit.com/r/learnprogramming/comments/b50ton/learn_it_yourself/,0,learnprogramming
seaoxv,"[META] Could we have an ""Am I too young/old"" filter?","Maybe a post that references people to or an automod responder and have the post closed. 

These posts occur multiple times daily and focus on the topic of age rather than useful information to get these people started on the right track. 

They should create a new post with easily identifiable information such as:

Have you coded before?

Are you looking to get a job or do it as a hobby?

If a job, what kind of time frame?

How many hours will you dedicate a week to learning?

I'm sure there are more valuable questions that could be added. Thoughts?",1133,156,SenorTeddy,2022-01-27 22:33:35,https://www.reddit.com/r/learnprogramming/comments/seaoxv/meta_could_we_have_an_am_i_too_youngold_filter/,0,learnprogramming
ajsbd6,New Programmer Pitfalls,"Among those learning to code, I've observed two dangerous trends.

The first is something I call the ""infinite tutorial loop."" The aspiring programmer goes from tutorial to tutorial, never breaking out and building something independently. I've seen cases where someone has been coding for less than a year and they are, frankly, more skilled and more knowledgeable than someone who has been doing it for five. This isn't because they're more intelligent or putting in more time -- it's because they've been pushing themselves out of their comfort zone, stretching themselves, and building applications and picking up necessary skills along the way. Meanwhile, the other person has been spending their time going through 75 introductory react courses on Udemy. One has an upward trajectory; the other is stuck in a loop.

The second is simple: the individual does everything related to coding that doesn't involve writing code. They attend every meetup. They share relevant content on LI daily. They're subscribed to every subreddit. But they're never actually creating anything. Zero green squares on GitHub.

If you want to become a programmer, start coding. Think of something you'd like to build and get to work!",1134,163,KovyM,2019-01-25 18:59:18,https://www.reddit.com/r/learnprogramming/comments/ajsbd6/new_programmer_pitfalls/,0,learnprogramming
a1be2l,LearnDB: Learn how to program a database from scratch,"[LearnDB](https://learndb.net/) is now available!

Back on August 11th, 2018 I made the following post in [r/LearnProgramming](https://reddit.com/r/LearnProgramming/):

[Would anyone be interested in learning how to build a database?](https://www.reddit.com/r/learnprogramming/comments/96hftg/would_anyone_be_interested_in_learning_how_to/)

There was definitely some interest, and many people filled out a survey with programming language preferences. It took me quite a bit longer than I had hoped to get the initial site online. Recently, the first chapters have been made available at [learndb.net](https://learndb.net/).

The content is a bit rough, so I'd appreciate any feedback you're willing to provide. Also, asking questions and prompting discussions here in the comments will give me ideas for how to improve current and future content.

Here's the current roadmap for the site:

## Key-value store (foundation)

* In-memory implementation *(completed)*
* Use the filesystem as a database *(completed)*
* In-memory log-structured merge-trees *(in progress)*
* Persisting log structures to disk *(planned)*
* Indexes for better performance *(planned)*

## Document store (built on top of the key-value store)

* JSON support
* JavaScript-based queries for documents
* Indexes for top-level document properties
* Indexes for any document property path (JSON path)
* Atomic operations

## Other possible interesting enhancements

* Crash durability
* Transactions
* Alternative storage techniques, such as [Hitchhiker Trees](https://blog.datopia.io/2018/11/03/hitchhiker-tree/)
* Relational tables and basic SQL queries

This roadmap includes a lot of guessing. If there are particular topics you're interested in, please mention them in the comments.

I want LearnDB to be primarily *for* the LearnProgramming community. Without the interest and support I received in my initial post here, I wouldn't have the inspiration to create such a site for learning.

I originally planned to post the full content of new chapters and sections here first, but that seems like it's going to be less useful than I had hoped due to the large amount of content and some of the custom formatting I'm using on the site. Instead, I'll start with the setup instructions for checking out the repo, and encourage you to come back and comment on this post with questions or issues.

## Node.js

The first LearnDB implementation is written in JavaScript and requires Node.js to run. As of this writing, the latest **LTS** version of Node.js is 10.13.0. You'll want that version or newer. I have verified that 11.x can also run the LearnDB code.

There are several ways you can install Node.js depending on your OS and preferences. The most straightforward way to install Node.js is to use one of the installers from the [Downloads](https://nodejs.org/en/download/) page on [nodejs.org](http://nodejs.org). There is support for a myriad of operating systems and configurations.

## [LearnDB GitHub repo](https://github.com/neodon/learndb)

LearnDB has a git repository on GitHub that contains the complete source code we'll be covering. The repo contains starting points for each chapter/section so you can follow along and add code as we cover it. It also contains the completed code for each chapter/section so you can verify your work.

To get started, clone the [LearnDB GitHub repo](https://github.com/neodon/learndb) to a convenient location on your system.

The git repo contains branches corresponding to the before and after state of the codebase for every coding exercise. For example, the first branch we'll be looking at is `key-value-store-simple_before`. You can check out the corresponding `key-value-store-simple_after` branch to see the end result for the exercise.

Continue on [learndb.net](https://learndb.net/).

---

Edit: Thanks for all the interest and comments! It's super motivating and I'm going to work hard on getting the next section online quickly.",1131,41,neodon,2018-11-28 22:56:28,https://www.reddit.com/r/learnprogramming/comments/a1be2l/learndb_learn_how_to_program_a_database_from/,0,learnprogramming
6s6xde,A two neat little C# tutorials I found that I wanted to share. Learn C# by building an RPG!,"The author walks you through creating a rather rudimentary RPG game in C# while exploring all the fundamental basics of syntax and function. 

[It's pretty neat for a newbie.](https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/)

The second one is slightly more advanced in that it doesn't hold your hand through basic syntax but instead simply holds your hand through the construction of the game. It's building a ""Roguelike"" style game - a genre popularized in the 80's and then experienced a recent resurgence. It's an RPG of sorts in that it's ASCII based and plays in the console. It uses random procedural generated game worlds you navigate in - cool stuff for a student for sure. [It can be found here.](https://roguesharp.wordpress.com/)",1127,45,None,2017-08-07 17:05:08,https://www.reddit.com/r/learnprogramming/comments/6s6xde/a_two_neat_little_c_tutorials_i_found_that_i/,0,learnprogramming
l92xu9,What's the most important thing you learned about programming that you use daily?,"Pretty much, the question in the title :)",1129,383,mutantdustbunny,2021-01-31 03:03:42,https://www.reddit.com/r/learnprogramming/comments/l92xu9/whats_the_most_important_thing_you_learned_about/,0,learnprogramming
e6xlfi,Introducing ProjectLearn.io - Project Based Learning,"Tutorials are great, but building projects is the best way to learn. Do project based learning and learn code the right way!

[ProjectLearn](https://projectlearn.io) provides a curated collection of programming tutorials (from different sources on the Internet) in which learners build an application from  scratch. These are divided into different primary programming languages and frameworks. Some have intermixed technologies and languages.

ProjectLearn is open-source on [GitHub](https://github.com/Xtremilicious/ProjectLearn-Project-Based-Learning). You can contribute to the list of projects as well!",1130,82,Xtremilicious,2019-12-06 11:30:48,https://www.reddit.com/r/learnprogramming/comments/e6xlfi/introducing_projectlearnio_project_based_learning/,0,learnprogramming
b9jcfj,I Finally Earned My Position as a Software Engineer,"As someone who has always been interested in computers it made sense how depressed I became after dropping my computer science major and switching to Information Systems, especially since my school does not even consider IS a stem major. See, I had never done any form of programming before college, I was more interested in computer hardware. After entering college and taking an intro to computer science class I quickly became intimidated and ended up failing it. It was supposed to be an intro class but it seemed like everyone already knew what was going on and I was the stupid one. 

After flunking I switched to IS and after hearing so many people shit on the major saying it was easy and took no work, I decided to take as many elective programming classes as possible. I did some small programming projects on the side, participated in hackathons, and even started developing an app. 

After graduating with my Information Systems degree I started applying to jobs and ended heading back from a lot of them. The two most interesting were a Systems Analyst position and a python developer position. Choosing between the two was harder than I thought because during my decision process I was drowned by imposter syndrome. The SA position requires no programming and I knew it would be easy but in the end not as lucrative as a Software  Engineering position would be. Even though I knew this I still leaned towards becoming a SA because I was scared that I would not be able to complete the work required of a SE.

After much motivation from my girlfriend I decided to take the Python position. It’s been two weeks and I LOVE IT! It’s challenging but rewarding and it’s so great to see how programming works in a company setting.

I guess the moral of this is please know that many of us face imposter syndrome, don’t be afraid to ask for help.... doing so doesn’t make you seem dumb... it shows that you want to learn, and to grow! You can do anything you set your mind to. Don’t expect to be the best at something you have barely started. If you show determination and grit you will always move ahead in whatever you want to do, no matter how long it takes!",1127,89,mustyrelly,2019-04-04 22:31:13,https://www.reddit.com/r/learnprogramming/comments/b9jcfj/i_finally_earned_my_position_as_a_software/,0,learnprogramming
hg2n4v,I have one year to get a job. Can I get something programming related with daily study for a year ?,"I am a shitty husband and have been leeching off of my wife for too long. We have a year long trip coming up, where we will be in Asia living and neither of us will be working. We aren't poor, we have no kids, but she is the breadwinner and I'm the house husband. And I feel like there's no better situation than a time limit for me to finally do something real.

Sorry for that. Just needed to share. Anyway, I wonder if it's possible to become self taught in programming and land a job in a year. I've read about automation engineers being hired with little more than basic knowledge of programming, and wondered if this sort of thing is attainable in a year. Or if there are Any other jobs attainable in a year of learning.",1126,248,Throwaway888921,2020-06-26 06:42:19,https://www.reddit.com/r/learnprogramming/comments/hg2n4v/i_have_one_year_to_get_a_job_can_i_get_something/,0,learnprogramming
uu54h3,"Has anyone else come to the conclusion that, when it comes to learning, something done poorly is infinitely better than something not done at all?","This might be a reoccurring epiphany on this sub but I realized that doing a bad job, but doing it is better than not doing it.

For example, if you were to submit an assignment in university that you knew would get you a 4/10, that is still infinitely more than a 0/10, even if that is a poor score.

Your goal should be to do the best job you can  knowing that it may be lousy.

Another such example is this application I'm working on. Its basically a timer that tracks where my time is allocated and updates its dashboard in real time. 

Its GUI is terrible but at least I know why its terrible and I know which features to prioritize to make it better.  In my case, when I was working on this bad project, I realized that I spent too much time trying to make a decent GUI and not enough time flushing out the necessary features to make it usable.

&#x200B;

The goal should be to identify one or two areas and make those great while you embrace the odd imperfection, then go back and improve those imperfections.

So make some lousy projects and take stock as to why they suck but be sure to start on them as a 4/10 is way better than a 0/10.

TLDR: You can fix lousy, but you can't fix that which does not exist.

Thank you for reading this.

Edit: Wow, this blew up.",1127,130,None,2022-05-20 19:00:36,https://www.reddit.com/r/learnprogramming/comments/uu54h3/has_anyone_else_come_to_the_conclusion_that_when/,0,learnprogramming
pa1oa6,I fear no language. But CSS... It scares me.,"Hey all, i'm early in my web dev learning, and my introduction to CSS has been... poor to say the least. I have very little understanding about how stuff like display, position, and all that stuff works. 

Even when I'm watching tutorial, the tutor would just magically know what kind of positioning they should use or why display: flex is the way to go, it just seem like pure black magic with no explanation. 

And so, CSS is somehow very much intimidating for me unlike HTML, JS or even Flask. Is CSS actually easier than it seems for you guys?",1123,171,satosat,2021-08-23 15:05:38,https://www.reddit.com/r/learnprogramming/comments/pa1oa6/i_fear_no_language_but_css_it_scares_me/,0,learnprogramming
3d6jx5,Hackr.io - A huge collection of the best coding tutorials online.,http://hackr.io/,1131,103,Reuels,2015-07-13 22:32:59,https://www.reddit.com/r/learnprogramming/comments/3d6jx5/hackrio_a_huge_collection_of_the_best_coding/,0,learnprogramming
164qpta,People who say they coded 8 hours everyday for a year and got a job. How realistic is that?,"I'm learning server side programming just started a few days ago. I'm basically just building stuff with absolutely zero clue what I'm doing I keep researching and learning things as I run into them. I was determined to code everyday for 8+ hours but man my brain is completely fried at around 3 hours.

How do you guys do it? I usually take a break around 2 hours and the third hour is just confusion. I do get in the zone but it's never more than 2 hours.

Would you guys give me any advice pertaining to this and any other advice for me and my journey forward. I live in a third world country and I'm hoping to turn my life around and get a remote job by the next year.


EDIT: I didn't expect this post to get so many responses, thank you guys so much I have read every single comment and even tho I've been unable to reply to every single one your advice has been extremely helpful and thank you for that. If there's any more advice please add it I'm reading every response and they've all been super helpful.",1128,441,Exartic_,2023-08-29 18:47:17,https://www.reddit.com/r/learnprogramming/comments/164qpta/people_who_say_they_coded_8_hours_everyday_for_a/,0,learnprogramming
u4vq8i,Are you a builder or a solver?,"Hey guys. I was struggling to understand why I want to learn code and for what, so I've been searching for answers and read something those of you who are learning and beginners like me may find interesting:

It was written by Dave Voorhis:

"" I’m going to generalise somewhat wildly here — and there are no doubt exceptions and overlaps — but in my experience there are two distinct groups of programmers:

Solvers, who typically like games, puzzles, chess, math for its own sake, and mathematical challenges.

Builders, who typically like mechanics (cars, motorcycles, bicycles, etc.), electronics, carpentry, plumbing, art, and often music-making.

I suspect Solvers are more inclined to take interest in LeetCode and the like. Builders, not so much.

Notably, neither group makes for better programmers than the other — though they may take wildly different approaches to implementing solutions — and a strong team consists of both.

I’m definitely in the latter category. I find LeetCode — and puzzles in general — insufferably dull and pointless. But I appreciate that others love LeetCode and puzzles.

Different strokes for different folks.""

-----

I'm not gonna lie, that was very insightful and it was like holding a mirror against me. I'm kind of in the middle ground, but surely more into solver since I was a teenager.

In this definition, what are you guys into?",1125,219,matrouxer,2022-04-16 11:22:15,https://www.reddit.com/r/learnprogramming/comments/u4vq8i/are_you_a_builder_or_a_solver/,0,learnprogramming
1alqbaz,Failed a technical interview since I “didn’t think like a programmer”,"Hi like the title said I failed my final stage technical interview where I had to code in front of a manager because I “didn’t think like a programmer”

For context, I graduated with a Physics degree and all my coding knowledge is self taught.

I did manage to complete the problem in around 30 mins but the interviewer said if I thought like a programmer I would have finished it sooner.

Disheartening to hear since I was able to solve it just had to think it through how I would see fit.

Any advice on how I can “think like a programmer”?

Thanks",1127,354,breadygirl133,2024-02-08 07:35:02,https://www.reddit.com/r/learnprogramming/comments/1alqbaz/failed_a_technical_interview_since_i_didnt_think/,0,learnprogramming
v83gbp,"Self taught developers, how did you do it?","I'm 30 and need to get my life in order and get a career. 1. How did you learn to program? How difficult was it?

2. How long did it take you from starting the training to receiving a job offer? 

3. How much was your starting salary and what is it now? 

4. Do you work from home?

5. How stressful is the job in general?

Sorry for so many questions. Thanks for taking the time to answer them.",1125,332,tuck7842,2022-06-08 23:51:51,https://www.reddit.com/r/learnprogramming/comments/v83gbp/self_taught_developers_how_did_you_do_it/,0,learnprogramming
hqqlsi,Former English teacher solves a math problem with Python.,"I left teaching after eight years and have been learning Python on Codecademy for 59 days straight and I'm having an absolute blast. Learning new things at 35 makes me feel so good I can hardly stand it and I'm thrilled to be getting into this career. 

Along with learning to program, I've been going to the gym to lift and walk on the treadmill. My watch tracks steps but can't track the flights of stairs I climb because I'm not actually moving up. My s.o is the math and chemistry person in the relationship and I hadn't touched math since sophomore year in high school so this was a true triumph for me.

I knew that there was a way of solving this but I had no idea where to start. After all of the things I had done so far in learning Python, I knew that if I spent enough time on it, I could figure it out. Two days later, a lot of math on paper, and a thousand Google searches later, I came up with this. 

    import math
    
    # angle calculated using an angle gauge on the treadmill base.
    # treadmill incline of 1.5 = 1 degree of incline
    # calculated with an average of 14' per flight of stairs.
    
    def treadmill_climb (angle, distance):
        height = (math.tan(math.radians(angle))) * distance
        flight = round((height * 5280) / 14)
        return ""Walking {} miles at a {} incline is like walking up {} flights of stairs.""\
    .format(distance, angle, flight)
    
    treadmill_climb(3, 3)

Does walking up an incline and walking up stairs to a similar height burn a similar amount of calories? I really have no idea and that's not what matters. Through learning to program I have a different way of thinking about the world and what I can do with programming as a tool. I've learned to learn in a new way and it has changed my life. 

Thank you to everyone here that continually encourages programmers of all skills and ages. We appreciate you. Go forth and be good to yourselves.",1123,80,Brimn,2020-07-13 23:44:03,https://www.reddit.com/r/learnprogramming/comments/hqqlsi/former_english_teacher_solves_a_math_problem_with/,0,learnprogramming
3qdtgs,I fucked up,"Warning: not a question. Just a parable.

It wasn't today, it was a couple years ago. I don't remember what it was, but it was such a monumental fuckup that I was actually stressing over the possibility of losing my job and being exposed as just some loser nerd who liked computers and couldn't cut it as a real programmer--and this was several years into my career, so it must have seemed like a pretty big damn mistake!

I sat down with the Astronaut in Residence (the lead developer/architect/CTO) at the company and laid my cards on the table, so to speak, and prepared for the ass chewing of a lifetime, because I just knew this guy was going to rip me to shreds. Hell, I deserved it.

But that never happened.

This dude, a C-level manager and a software engineer with nearly three decades of experience and way, way too much shit on his plate to deal with what my dumb ass had just screwed up, started by saying, ""Ok, I think I see where you went wrong,"" and then he asked me how I thought we should solve it.

That was it. That was the extent of the ball breaking, and we're talking about client facing issue in production that he was going to get blamed for. I can't remember ever having seen a more powerful example of professionalism or positive focus (and I didn't just word it that way because I like the letter P, either).

So, next time you see some noob post something here with bad formatting or poor wording or just maybe a totally clueless question, maybe cut 'em some slack. It's the professional thing to do. :)

Ok, flame away. :p",1127,95,None,2015-10-27 05:19:53,https://www.reddit.com/r/learnprogramming/comments/3qdtgs/i_fucked_up/,0,learnprogramming
10vczxy,Finally got an entry level job after 500+ applications,"So I got a job. The interview went good actually but they asked me if I could do UNI + JOB together or not. I said I can do ""anything"". They then offered me a software engineering role but said that they will test me for 1 month. I dont know if its because whether I could do JOB + UNI together or just that I might not be good enough for them. I have already been working there for two days and fixed tiny little 2 problems. One is for schema validation and another is different error message. Its taking me sometime to understand the code. But I understand better or not. Can you guys please clear my confusion. 

I passed the interview so they know what to expect right? but I still think that maybe I am not so good.

This has been troubling for past three days.",1119,134,nokibnur,2023-02-06 17:50:10,https://www.reddit.com/r/learnprogramming/comments/10vczxy/finally_got_an_entry_level_job_after_500/,0,learnprogramming
ffnc8m,PSA: Use whole real words.,"Having just read the following line, probably written by another grad student,

`for zl_nxtst in l_zl_nxtst:`

I feel compelled to make this post in hopes that the future will be brighter.

**Use whole real words to name your stuff.**

Why?

* You have one usual way to name things. Just name them whatever you call them normally, and separate words according to the style of the language. Spend less time thinking about it.
* Because you don't abbreviate things, you won't have to remember how you abbreviated something, and you are less likely to misspell an abbreviation later, mitigating bugs.
* If you work with other developers, they won't have to spend time and brainpower trying to figure out what your names mean. If you think you'll come back to this project after a while, you might as well be a different developer.
* When you read code out loud, you can speak real words, like a normal person.
* During code reviews, there will be more time to talk about structural issues instead of ""what's that?""

Common complaints to using whole real words, and their refutation:

* ""I have to type more."" Press Tab. Also, most people type real words faster than they type fake words. Also, if whatever you're writing is so trivial that your typing speed is the limiting factor, delegate it to someone less experienced, or write less code (i.e. git gud!)
* ""That's how <some language> does it."" C and other old languages had limits on how long names could be. Programmers used to such old languages have read a lot of abbreviated names, such as ""memcpy,"" ""malloc,"" ""SIGCHLD,"" etc. These names are standard though, and programmers know what they mean. You shouldn't use these as examples of how to name your stuff.
* ""I don't know what to name things."" If it doesn't matter, then perhaps you shouldn't name it. Just pass it into something that does matter. If it's a function, maybe use a lambda. If the variable is short-lived, then you can definitely just name it `i` or something. You can name name ""number of something"" as `n_something`, because it's common practice. People understand.
* ""I write comments explaining what stuff is."" Or you could name things what they are. Also, if you have comments everywhere, no one will read any of them.

tl;dr. Name your stuff using whole real words. To do otherwise doesn't save you, and especially others, any time.",1122,171,None,2020-03-09 02:01:02,https://www.reddit.com/r/learnprogramming/comments/ffnc8m/psa_use_whole_real_words/,0,learnprogramming
7y78uj,I am the Code Bootcamp Grad that posted here before about getting declined from over 100 jobs. I've started making tutorials for things I wish I learned when I was there.,"Hey r/learnprogramming!

I made [this](https://www.reddit.com/r/learnprogramming/comments/7cokyr/i_have_been_rejected_by_over_100_jobs_in_my_past/) post a while back.

Since making that I wanted to make tutorials starting at the very basics from the viewpoint of the way I wish I had learned that things. The things that helped make the concepts click. To go from [this](https://media.giphy.com/media/sauYjWmJJ18xW/giphy.gif) feeling of having no idea to when it [clicks](https://media.giphy.com/media/3XR0chfiSTtAI/giphy.gif) to [when suddenly you are the master of everything code](https://media.giphy.com/media/6oMKugqovQnjW/giphy.gif)

I'm starting at HTML here and the video could use work. My goals of this video are:

I want to become a better speaker and less scatter brained as a result of these videos. I don't read from a script although I do create rough scripts of the topics. (Talking to a camera is weird, man.)

I want to see what is important to other people. And I want to help others be able to do what I've done. I'm sure these videos will either

**A**.) Be helpful.

**B**.) Make other people wonder how I actually do this for a living.

Since the topics I'm making these tutorials on are such broad topics - I know there are going to be 'get this trash out of here' and 'you missed the ONE THING THATS MOST IMPORTANT?!'.

Again, this is for the extreme basics of HTML 5 and just a quick little overview. 

**TL;DR** ~~Shit on my tutorial video~~ Looking for feedback on my tutorial [video](https://www.youtube.com/watch?v=o_6TjJPXON4) with advice for what I could improve^^^mybodyisready 


",1119,36,Tychos1,2018-02-17 15:30:10,https://www.reddit.com/r/learnprogramming/comments/7y78uj/i_am_the_code_bootcamp_grad_that_posted_here/,0,learnprogramming
4uufni,What are your favorite youtube channel for general computer science related stuff?,"They don't have to be explicitly just tutorial channels.             
My favorites are                
1. [Computerphile](https://www.youtube.com/user/Computerphile)             
2. [Tom Scott](https://www.youtube.com/user/enyay) (Not always computer science related stuff, but most of the times he relates obscure quirks of everyday life to how computers work)                
3. [Icc0612](https://www.youtube.com/channel/UCTCvWvqjktIq0uvM3trAHCg) ( I don't know how i found this guy, but his channel is awesome, one of youtube's hidden gem, bet you haven't heard of him, he covers some really technical topics like Logic gates, K-map simplification etc. in 5-10 min video, if you haven't checked him out already definitely recommend you to do that)               
4. [Jack Tech](https://www.youtube.com/channel/UC008MpfclY6ap-QGzoTMNKg/videos) (Basically teaches you basic assembly by explaining how gameboy works)                
There are other tangentially related channels, like [The 8-bit guy](https://www.youtube.com/channel/UC8uT9cgJorJPWu7ITLGo9Ww) (for old tech and how tapes etc. work) etc.                      
Who are your favorites?                      
      
EDIT: Just remembered one more          
[Films by Kris](https://www.youtube.com/user/metalx1000/videos), has made a lot of videos on Unix toolkit among other things, definitely take a look.",1117,112,unnewbie12q,2016-07-27 12:48:37,https://www.reddit.com/r/learnprogramming/comments/4uufni/what_are_your_favorite_youtube_channel_for/,0,learnprogramming
evgiew,An Open Letter to Those Who Want to Learn Programming,"I found a list of courses on Instagram which had some interesting mostly free places to learning programming, forgot who the poster was but here goes:

Introduction to Interactive Programming in Python by Rice University

Programming for Everyone  by University of Michigan

Introduction to Programming with MATLAB by Vanderbilt University

Machine Learning for Musician and Artists by University of London

Elements of AI by University of Helsinki

Machine Learning by Stanford University

Learn to Program: The Fundamentals by University of Toronto

Divide & Conquer, Sorting & Searching, and Randomized Algorithms by Stanford University

Creative Applications of Deep Learning with TensorFlow by Kadenze

The Analytics Edge by MIT

Computing in Python I by Georgia Tech

Runestone Interactive by Georgia Tech (one of my personal favorites, had a great time with this site [https://runestone.academy](https://runestone.academy/runestone/default/user/login?_next=/runestone/default/index) )

Cryptography I by Stanford University

Internet History, Technology, and Security by University of Michigan

Functional Programming Principles in Scala by EPFL

CS50's Introduction to Computer Science by Harvard University

Introduction to CS and Programming Using Python by MIT

How to Use Git and GitHub by Udacity (Personally I would really recommend learning about GitHub, feel free to message me if you want a quite rundown)

Python for Data Science by UCSD

Python and Statistics for Finacial Analysis by HKUST

Introduction to HTML5 by University of Michigan

As a personal side note, with programming, it is more of learning the principles and applying them to different languages as most object-oriented languages have the same four core principles of inheritance, polymorphism, abstraction, and encapsulation. Then there are markup languages such as HTML or XML, they all share some similarities. With the number of languages I know, I often get the syntactical elements mixed up. Hope this help \~Jun

&#x200B;

EDIT: Due to a large number of people asking me to explain Git [here](https://www.reddit.com/r/learnprogramming/comments/evpxcm/an_introduction_to_git_and_github/) is a link to a full explanation of Git.",1117,131,chen_jun07,2020-01-29 02:44:20,https://www.reddit.com/r/learnprogramming/comments/evgiew/an_open_letter_to_those_who_want_to_learn/,0,learnprogramming
u3cumh,"To be a top 1% programmer in the world, what do you need to know?","For a super ambitious self-taught programmer that wants to be one of the best, like a star athlete, what would they need to know in depth? What skills woild they need to master? I'm talking ideally, I do realise a self-starter has small chances to reach that unless they started when they were like 8yo or they are a genius and can get there even if they start at 40 yo.  But I think that this kind of profile could be motivating and aspirational in terms of having something to measure up against and compete with.",1120,356,illotempore,2022-04-14 08:54:33,https://www.reddit.com/r/learnprogramming/comments/u3cumh/to_be_a_top_1_programmer_in_the_world_what_do_you/,0,learnprogramming
j5iv6p,Hacktober Fest: How to participate and contribute to the open-source community as a beginner.,"It's October which means it's Hacktober Fest time. 

Hacktober is an event from Digital Ocean which gives free 'swag' away for anyone that contributes 4 pull requests to open-source communities in the month of October. 

Making your first open-source pull request can be scary so here is a video on how to contribute to Hacktober Fest even as a complete beginner but still make helpful contributions. 

[https://youtu.be/\_Oq8PfZXmK4](https://youtu.be/_Oq8PfZXmK4)",1115,40,Mackenzie-GG,2020-10-05 12:55:32,https://www.reddit.com/r/learnprogramming/comments/j5iv6p/hacktober_fest_how_to_participate_and_contribute/,0,learnprogramming
fdwt9a,wrote my first successful code :),"i wrote my first code!! it was for a python class and wasnt super complex but it involved elif commands and while loops and that shit used to be so hard for me and still is tbh!!! i had to look a couple things up but still!! pulled an all nighter for this and finally finishedddddd!! the satisfaction of when it works out is unbeatable!!!

edit: thank you for all the support/comments/upvotes and being so supportive! i really appreciate it

edit pt2: thank u for the silver it was so unexpected! also for ppl that wanted try it out or see the pdf heres a link 

https://imgur.com/gallery/1ClQ9kf",1118,101,so_rutheless,2020-03-05 15:27:09,https://www.reddit.com/r/learnprogramming/comments/fdwt9a/wrote_my_first_successful_code/,1,learnprogramming
ezedi1,About to finish CS degree but can't code.,"So, I'm about to finish my CS degree but I can't code.

I know the theory. I studied and watched numerous courses for C, Java, Python, javascript, HTML, CSS, Angular. I can look at code someone else wrote and understand it. 

I can only write things if I'm following a step-by-step guide. Ask me to do something by myself, and I can't write code to save my life. I don't even know where do I begin. I just spend hours looking at documentations and tutorials and type one line of code.

I did an internership where I only did basic things under someone else's guidance. I fear this barely counts as ""experience"".

I can't even watch courses anymore, I'd have to go through hours of videos teaching basic things that I already know, so I get bored. I fear I'm going to end up unemployed at this point. What should I do?",1121,199,Welfz,2020-02-05 18:56:17,https://www.reddit.com/r/learnprogramming/comments/ezedi1/about_to_finish_cs_degree_but_cant_code/,0,learnprogramming
11i189l,New learners - please understand that everyone has to google things,"You’re not “too stupid” for programming or anything like that. Even very experienced people don’t know what they’re doing half the time and have to google stuff all the time. It’s normal in this field. 

I’m just tired of beginners thinking they can’t do it because they don’t know everything.",1119,100,thedarklord176,2023-03-04 15:01:39,https://www.reddit.com/r/learnprogramming/comments/11i189l/new_learners_please_understand_that_everyone_has/,0,learnprogramming
z99mho,learning git early will save you headaches,"Can't remember whether you're working on v0.3.4 or v0.3.5? Spending 5  minutes ctrl-z'ing in a desperate bid to fix whatever you broke before you stood up to let the dog out? Forgetting to save the modified API file to your cloud folder?

Friends, I've been there.

I've been designing a GUI application in Python since about September as a way of learning how to  program, and it's been a deeply rewarding experience. My workflow up until this week was Heath Robinson-esque at best but can probably be summarised with a story inspired by real events:

1. working on `test_new_wizard2.py` on tab 1, `main_window(1)test.py` on 2 - (home pc)
2. save to cloud shared folder in `/project/1.0/test_programs/11.22`
3. realise on the train that I added additional methods to [`dbinterface.py`](https://dbinterface.py) but didn't save a new version to cloud
4. re-implement features from memory to get `main_window(1)test.py` to run so it can call `test_new_wizard2.py` so I can finish adding the `thing` method
5. forget `thing` method idea
6. also now there's an annoying spacing issue on the status bar fuck you

Up until now I didn't realise or understand what git was and found it vaguely intimidating because I didn't know that there were 'Version Control Systems' in the proper-noun sense of the term. Carrying numbered flashdrives about is also a version control system, but not one you should employ for anything important.

Anyway, I watched a couple of videos where people politely explained these very simple concepts to me and realised that you can just use a GUI from an IDE to do all the 'command remembering' and 'basic abstract thinking' stuff for you.

My basic workflow now with git is more like:

1. create `branch 1.12` in local
2. commit to `branch 1.12` whenever I add something that works
3. push to remote whenever I finish working
4. pull from remote on laptop
5. merge `branch 1.12` into master when I've hit my milestone

It doesn't prevent you doing stupid things like forgetting to push before you log off at work but the merging process makes everything so much easier than manually handling lines from one .py to another.

This post might very well be like telling you that you can hotkey selective screenshot on W10/11 (win+shift-s, btw) but it's genuinely come as a bit of a revelation to me.",1117,99,foxaru,2022-12-01 01:11:58,https://www.reddit.com/r/learnprogramming/comments/z99mho/learning_git_early_will_save_you_headaches/,0,learnprogramming
vbq4xp,For the people who have made it and got coding jobs what would you have done differently if you could start over?,Edit: Thanks for all the replies. I think i know what to do now.,1116,367,jisatsukid,2022-06-13 23:58:09,https://www.reddit.com/r/learnprogramming/comments/vbq4xp/for_the_people_who_have_made_it_and_got_coding/,0,learnprogramming
adr8v8,"Last year, I got my first software developer internship - these are the personal projects that helped me get there!","[Link to article](https://krisbogdanov.com/personal-projects-before-first-internship/?fbclid=IwAR1hna-buWCrhA7pd2qRp-NkNXGEN0pUrUNoll8peSpOK6F3H-ceeevkcNE)

I wrote an article that showcases the projects that I did in the months leading up to me getting my first software developer internship.

Be welcome to inspect the Github repos and the websites (included with every project in the article).

The main point to take away from this article is that you don't need to have these massive, good-looking projects before you start applying for jobs.

Many of you are already really good and create better projects than the ones I have done in early 2018.

So just start applying, you might be surprised how much better you are than the competition!",1115,79,kris_ventures,2019-01-08 05:56:03,https://www.reddit.com/r/learnprogramming/comments/adr8v8/last_year_i_got_my_first_software_developer/,0,learnprogramming
5awyh8,I want to watch someone creating a full scale application so I can learn to go beyond the fundamentals of programming. I want to learn the process by which someone breaks down problems and translates them into good code. How do I find these types of videos?,"I've been learning ruby for a few months now and have made many small programs of my own (hangman, tic tac toe, linked lists), but when it comes to learning to use classes effectively I don't know how to break down my logic very well. I have tried reading other peoples code for the same projects I've undertaken but still cannot take away much from it.

It would be ideal for me to be able to see someone breaking down an application step by step and coding it live, even if it's a text based game or something along those lines. I've found a few of these types of videos but they are often poorly done (ie, the persons code in the end is not very good). Does anyone know of any decent videos that show by example good programming practices?",1118,127,dajlie,2016-11-03 14:19:07,https://www.reddit.com/r/learnprogramming/comments/5awyh8/i_want_to_watch_someone_creating_a_full_scale/,0,learnprogramming
yu5k7d,Has anyone else been roasted by a senior dev?,"Long story short,

I work for a huge company, recently started a web dev boot camp in addition to self study, I mainly needed additional structure and guidance. I was on a work call ( i manage the support of 7 different software projects in production) , one of the senior devs was talking about assigning various tasks to ""freshies"" ie new devs. After the call I pinged him on skype and explained to him that I've been coding for about 2 months and was really interested in learning more and if he had any advice on what I should focus on etc.. , dude this guy proceeded to just destroy me. I actually got nervous on the call because I wasn't prepared for it to turn so confrontational , since i wasn't even asking for a job.

&#x200B;

Him- "" I can ask you three questions right now to show you don't know enough, if you want""

me- "" ummm I don't think thats necessary, I really just wanted some guidance on the industry and where I should focus my studies""

him- proceeds with asking me these three questions anyways

\- continues by giving me some speech about how he's read over 250 books on software development , this was a literal quote by him. "" i'm here in this role because I have a masters in software dev and have read over 250 books on the subject "". i'm thinking, Jesus dude I just came for a simple pointer I'm not questioning your credentials.  Out of showing respect and playing the political  office game  I had to listen to this guy tear me down for 20 minutes and just smile/nod and then THANK HIM after. Ironically this whole episode made me realize he's probably not as talented as I thought he was, self confidence comes from mastery, in any discipline, self confident people don't need to grandstand like this. Also its just kind of scummy to gateKeep and punch down.

&#x200B;

anyways yea, so my first forray into this world was a punch in the face lol. but idrc I love it.

Could I have played this any better? Should you defend yourself or just take your beating?

I guess my thinking is its best he doesn't know my true feelings and theirs no point in saying something stupid back because I don't gain anything except padding my ego lol.

&#x200B;

&#x200B;

Edit:

&#x200B;

woahhh I did not expect this to blow up. So to address a few points, I wouldn't go to HR , that would be tons of extra drama for little to no gain. He's way to protected and it's not wise to make an enemy like that.   As for the 3 questions he asked me, I only remember the first one which was "" whats the difference between the app running in the browser versus an application, or something to that affect. To be honest he just came out swinging and I was so caught of guard. Prior to the call my brain was thinking this was going to be a friendly chat with the guy, nothing serious or this intense. He also told me a few other things that I left out in the original post:

""don't ever tell anyone you went to a bootcamp, its a money making pyramid and they don't teach you anything"".  Which also kind of tied into another comment of him stating ""tech has a bar, even though its super low we do have a bar"", which I think comes from the fact that a lot of people are self taught and successful , and in his gen that probably stings/hurts to see when your in your 50s have tons of degrees etc on the subject but the market has changed a bit.

&#x200B;

Honestly though, I don't feel the need to drag the dude, he's an older man in his late 50s, and idk I just get the vibe things aren't going well in his personal life, hence it manifests in some sort of cocky attitude in his job. At the end of the day theirs a ton of development going on in the company and I'll just steer clear of his projects. Also I think I won the exchange because I kept a calm and respectful demeanor towards him the entire time. I didn't take offense to anything he said and genuinely tried to understand his POV even to statements I disagreed with.  


&#x200B;",1112,323,SenatorSmeagol2020,2022-11-13 15:55:47,https://www.reddit.com/r/learnprogramming/comments/yu5k7d/has_anyone_else_been_roasted_by_a_senior_dev/,0,learnprogramming
tmkwmm,"Lessons learned from bombing the ""hardest"" interview ever","So, yesterday I was scheduled for an interview for a front end developer role. According to the recruiter it was not a technical interview but a systems design interview. Having never heard that, I went on Google, typed in the term, and got results like [this](https://www.geeksforgeeks.org/top-10-system-design-interview-questions-and-answers/). At this point I am in complete panic mode. The questions are so hard! So I dug deeper and found that systems design was common for big tech. So okay, they probably ask the hard stuff to see how good I really am. ""Okay, fine, no problem."" I thought. ""I have three days. I've taken four finals in one day once (and got all A's). I just need a plan.""

For the next three days, I had a plan to get me up to speed. I collected all the learning material I need from friends, and looked up resources online. At one point I had a panic attack from all the material, so I called my boyfriend in the morning to have him comfort me. I also did 2 practice tests, and 2 mock interviews with my best friend, even though she did not do software at all. She was such a champ to me, too, since the interviews took an hour each and it was a work day for her.

Finally at the end of the three days, I felt nervous still, since I did not study for long, but I am ready to not completely bomb this. So the interview happened, and I was ready to do something like ""Design an API rate limiter"". This is how it went.

Interviewer: So, I am going to show you a mock UI and you have to tell me how you will design this.

Me: Wait...I thought you were going to ask be about databases, caching, and load balancers. You're not going to?

Interviewer: No. You just need to design the UI.

That's when my mouth literally dropped. I had studied the wrong material! My head was so crammed from a 40 hour studying sprint that I could not change gears at all. The interviewer knew I was struggling and tried to ask guiding questions but my mind still thought I needed to do systems design. At one point I even started doing a basic systems diagram with a webserver and database. I ended up completely tripping over my words, and the interview was ended early.

Afterwards I was so completely stunned. I did not expect it to go well, sure, but not THIS bad. So many people had helped me get this interview, too. I had mentors who prepped me and recommended me. I had a friend who referred me. I had more friends help me study, both software and non-software people. My parents bought me takeout so I will remember to eat. And I myself, too, spent a lot to make sure I did not embarrass myself.

Lessons learned from this.

\- Recruiters are not coder. They are only using notes, which can get mixed up, or in this case, be vague, and they would not know.

\- When googling for prep, be sure to also put in the job title you are expected to apply to. Otherwise, you will end up [here](https://www.educative.io/courses/grokking-the-system-design-interview) rather than [here](https://www.frontendinterviewhandbook.com/front-end-system-design). <- this is a big one

\- Big tech interviews are hard, sure, but not THAT hard.

\- It's okay to ask a recruiter if they have a sample interview question so that you can know what the format is like and properly prepare for it. This might have cleared the ambiguities. <- this is also a big one

And that's about it. I'm still so mortified that I don't know how to break to everyone how disappointing it was. Even though this is all my fault, I'm trying to remember that mistakes happen. Life sometimes rolls a 1 on my wisdom check, even if I have a +7 wisdom modifier. But, tbh, don't end up like me. :(

\*cringe\*

&#x200B;

**Edit:** Sorry, y'all. I'm a dense person, so I think I might have not been clear about the situation. A lot of y'all are saying I'm bad for cramming. But the reason I crammed was because the coding exam (that I thought I was going to get), was a topic completely different from the role I was applying for.

To use an extreme, unrealistic example to illustrate, imagine you applied to be a chef for a...meat-only bbq place, and they say there will be a baking exam. So you panic because, the last time you baked a cake was 5 years ago. So you looked up recipes, made basically 8 cakes, relearn to decorate cakes and all that. Then when the day comes, they tell you to bake some ribs. And you're all like, ""holy shit fuck fuck fuck, I accidentally made frosting with all the sugar"" because your muscle memory hates you. So you had to glaze your ribs with frosting and call it your grandpa's secret recipe.

Don't get me wrong, I'm mortified that I made a dumbass move like that, and I'll be laughing about it a year from now. But, this is 100% not normal for me. This is me making the most of the dumbass situation I put myself in by misinterpreting baking as baking a cake.

**Edit2:** Some of y'all 5e players wondering where I got +7 wis from. This is not as interesting as you'd think. I have 12 wisdom, +3 prof bonus, and rolled for wisdom(insight) with expertise. Honestly, I should have asked the cleric for guidance, but I thought I got this.",1120,149,Sad_One_6291,2022-03-24 16:21:03,https://www.reddit.com/r/learnprogramming/comments/tmkwmm/lessons_learned_from_bombing_the_hardest/,0,learnprogramming
jq3dmm,"I have a 10-year-old Nephew, he is excelling in math and I would like to push him towards coding for kids. Can anyone recommend any great resources for coding for kids?","I'm unfamiliar of what kids should be studying at this level, any help is appreciated!

Edit: Thank you all for the suggestions! 

Also, just wanted to say that my use of the word ""push"" has garnered many replies that are not necessary. Nobody is forcing anything on him and he is living a great life. The ""let him live his life"" and ""don't force him"" comments are really unnecessary and irrelevant. You're really assuming a lot to make this statement.",1115,222,96dpi,2020-11-08 02:03:52,https://www.reddit.com/r/learnprogramming/comments/jq3dmm/i_have_a_10yearold_nephew_he_is_excelling_in_math/,0,learnprogramming
y7x5lo,Is there a site to practice SQL Queries?,When not using SQL Queries I'm slowly forgetting them. So I tried looking for a website that gives you custom and maybe even random data you can query just so you can practice but I didn't find good sites for that. Maybe you have a secret tip for me.,1111,108,DasEvoli,2022-10-19 08:39:32,https://www.reddit.com/r/learnprogramming/comments/y7x5lo/is_there_a_site_to_practice_sql_queries/,0,learnprogramming
w4wws2,"Well friends, I did it! I got a job in software engineering","After years of self-teaching, a whole ass bootcamp, dozens of applications, I managed to land an interview thanks to a recommendation from a friend, and after two rounds, I got a job in this field! I'll be working primarily with Angular, [ASP.NET](https://ASP.NET), and MySQL.  LearnProgramming has been a valuable resource for me in the past few years, and reading your stories really gave me the push I needed to pursue this as a career after years in Advertising.

Thanks friends, and cheers!",1112,64,EkezEtomer,2022-07-22 00:51:44,https://www.reddit.com/r/learnprogramming/comments/w4wws2/well_friends_i_did_it_i_got_a_job_in_software/,0,learnprogramming
kpp2ft,Beginner friendly project idea: Command-line chess,"Try writing the game of chess, but instead of having to do GUI programming at first, use unicode chess piece characters to show the board (""♜♞♝♛♚♟♖♘♗♕♔♙""). Take command line input for moves like ""e2 e4"". Make sure to only allow legal moves, keep track of castling availability for both sides, en passant, check and checkmate, and even threefold repetition and the fifty-move rule.

Should make for a meaty project for beginners, and has opportunity for expansion into more advanced topics if you are up for it afterwards (GUI, AI (through minimax or alpha-beta algorithms), exporting and importing games)

[simple example board output i made](https://i.imgur.com/mZUXqts.png)",1114,103,Swend_,2021-01-03 17:50:59,https://www.reddit.com/r/learnprogramming/comments/kpp2ft/beginner_friendly_project_idea_commandline_chess/,0,learnprogramming
368gek,How I learned Rails from absolute scratch — and got to the point where I get offered jobs,"Hey reddit,

I hope that this post not only informs, but inspires. I also invite feedback from Sr engineers. I'm not famous (not yet anyway). I'll get straight to it.

As the title says, I learned Rails from absolute scratch. No prior programming language knowledge. Though I did drop out of a Visual Basic class at a local community college in 2010.

I started with the desire to have my own startup last year. I just had an idea on my couch. I would say that I didn't know where to turn, but that's not quite true. The truth is I didn't know where the *fuck* to turn!

Everybody talks about mobile apps this and mobile apps that, so I started by trying to learn to make Android apps. Did some research (Google) and found out they were made in Java. 

I picked up [Sam's Teach Yourself Java in 21 Days](http://www.barnesandnoble.com/listing/2671546007587?r=1&kpid=2671546007587&cm_mmc=GooglePLA-_-Book_25To44-_-Q000000633-_-2671546007587) from the bookstore and got to studying. I just knew that now that I had this book, understanding programming would be the easiest thing I'd ever done.

Understanding programming was the hardest thing I'd ever done.

There were many times where I wanted to give up. I made it 1/3 through the book and made very little headway. 

Then I discovered an article that said that making a web application would be easier/faster and more cost-effective than a mobile app. Not sure if that's true, but I'm so glad I went with it.

I dug a little bit deeper (with Google). That's when I discovered the Ruby on Rails
framework. It was supposed to make web development fast. I found [Mattan Griffel's talk](https://www.youtube.com/watch?v=T0qAjgQFR4c) on Youtube and watched it. I agree with what he says, though I still don't see how it's possible to learn Ruby on Rails in one month, even in a bootcamp.

I began to learn Ruby on Rails through [Michael Hartl's online book](https://www.railstutorial.org/). I struggled about halfway through the book before I just gave up. It got to the point where I was just copying and pasting the code and had no idea what I was doing.

Fortunately, by this point coding became something like a fun little hobby of mine. I decided to check out [Codecademy.com](http://www.codecademy.com/learn) and worked my way through the HTML & CSS course.

After about 2 weeks of working through that course (mind you, I did not finish it. Only 42%), I signed up for Lynda.com and did the HTML Essential Training course by Bill Weinman. It was very helpful in understanding the web. I was so motivated by my progress that I then did several CSS courses and got started on a Javascript course that I never finished. During all of this, I took notes (real, physical notes) and did a lot of coding with paper and pen. No syntax highlighting. No autocomplete. Then I would type it up in a basic text editor (Notepad on Windows7) to test myself.

I wrote one site using the HTML and CSS skills I acquired and after about 2 months of that, I said, what the hell, and tried Hartl's book again.

It finally clicked!

I could now see what Ruby on Rails was. The reason it was so difficult before was because I couldn't differentiate between HTML, CSS, and Ruby injections. I also knew how to reference the files and where they would go if I wasn't using Rails.

That meant that the only thing left for me to learn was what a Ruby injection was. It's Ruby code.

Learning Ruby was actually easy at this point because Ruby's syntax is a lot easier to remember than Java's, though I like to write in Java still, because it's harder for non-developers to read, which makes me look smart.

I binged watched these courses on Lynda.com:

* HTML Essential Training (Bill Weinman)
* CSS Fundamentals (James Williamson)
* Foundations of Programming: Object Oriented Design (Simon Allardice)
* Ruby Essential Training (Kevin Skoglund)
* Ruby on Rails 4 Essential Training (Kevin Skoglund)

I want to make it clear that for about six months I made it a point to get in at least 1 hour of learning to program for at least five nights out of the week. There were a lot of days where I would study for 3.5 to 4 hours.

As I mentioned earlier, I began this whole endeavor with a startup in mind. Now that I was around 6 months in, tutorials were kind of getting repetitive and becoming less helpful to my mission. What I had to do was watch a tutorial and figure out how I could change what I needed to change to make it fit into my project.

I started to google more and more Rails material. I ended up reading through half of the [Rails docs](http://guides.rubyonrails.org/index.html). Then I found these really helpful tutorials my [Mackenzie Child](https://www.youtube.com/user/mackenziechild/videos), and not a moment too soon!

By now, it's the end of 2014 and there's a TEDx event coming up where I live (imagine that!). It was a great event and I made just a couple connections and found out about two key things: 

1) 1 Million Cups - a weekly event where entrepreneurs present their businesses and get support and awareness in their communities.

2) Kansas City Startup Village - a community of densely positioned startups that go out of their way to help anyone and everyone trying to break out in the startup world and disrupt the scene.

I did a presentation at my local 1MC and finally was getting ready for launch. I was also reading [Beginning Rails 4](http://www.amazon.com/Beginning-Rails-Experts-Voice-Development/dp/1430260343) and [Beginning Ruby](http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1430223634/ref=sr_1_1?ie=UTF8&qid=1431746711&sr=8-1&keywords=begining+ruby) on the side.

I ran into some bumps in the code-road and since I was the only person I knew who programmed, I could see the value of being part of the startup community in Kansas City — even if it was 800 miles away.

With relatively short notice, I tried my luck and moved up to KC.

That was the turning point. Being around other developers made it easy to ask questions and look at code written by other people. I realized that, for at least a good while, it's normal not to be the very best developer in the world. Everyone has to learn to make workarounds for what they're trying to accomplish and oftentimes projects don't go as straightfoward as you write them out initially. That's ok. <- At least it has been so far.

While in KC I learned the importance of tools like Git, Heroku, and virtual machines/Linux, as well as what testing is actually for. I also read the book [""The Rails 4 Way""](http://www.amazon.com/Rails-Edition-Addison-Wesley-Professional-Series/dp/0321944275).

It was in KC that I learned how to take a project from the whiteboard all the way to live on the web. A painstaking process, I might add, but it feels great once you can do it.

Not only did I learn more about programming and project management, I also got to do another 1MC presentation in KC. I started talking to other startups and seeing what they were doing and what tools they were using. Now my name was out there and being able to present my startup with actual pictures of what I was making proved that I was at least capable of that much.

It wasn't just programming though. Probably about half of the reason I got any offers and recommendations was due to the fact that I seem to be able to make great first impressions. Talking to people in person makes a huge difference.

I don't have a degree, so I really have to be able to sell myself and get people to see why they should work with me. Being a 1-year developer carries a lot of risk with it, especially without formal training.

Now, from personal experience, I can say that you really can pick up coding and learn enough to make a career change if that's your goal. But I should stress that people will pay you less and trust you with less without a degree. It will also be quite difficult to move up in the ranks. When you take up programming without formal training, you are starting from the bottom — you're one notch below a Private in the Army. 

Without years of experience, which you cannot accelerate, I would say that your best option would be to have your own vision in mind that you want to bring to fruition. Everybody respects someone who made something that people use. With your own vision to work on, you will be more motivated to stick with your training plan, all the while racking up hours of experience which will eventually become years.

Finally, a major contribution to my name spreading now is the fact that people can see I'm serious about what I'm doing, and I don't live in a major startup city like Austin, TX or Silicon Valley. There's hardly any noise at all where I live. If I so much as hear about someone needing help with a site, I reach out to them and offer a certain amount of help for free. Spreading my name is worth it, but also note that my end goal is not to become a full-time developer, though I may do that if none of my ideas work out.

** I should note that with the exception of the Java book, I was able to find all books online for free and downloaded them as PDFs. Some of them have since been taken down

EDIT: Forgot to mention [Railscasts](http://railscasts.com)! That's a great source once you understand the basics of Rails!



---- **TL;DR** ----

If you want to have a much smoother time learning Ruby on Rails than I did, here is what I definitely recommend in hindsight (in this order) All links are above:

1) Learn HTML & CSS. You can do this through the Codecademy course. You should only have to do 50% of it before you're ready to move on.

2) Take the Ruby Essential Training course on Lynda.com. You get a free trial for a week with Lynda. If you're broke, use it wisely! (take notes on pen and paper)

3) Take the Ruby on Rails 4 Essential Training course on Lynda right after. It still won't all make sense but a lot of things should be coming into focus at this point. You should start regaining your self-esteem here. (take notes on pen and paper)

4) *Now* you're ready to read Michael Hartl's book. Go through the entire thing. If you don't understand something, re-read it. It's worth it at this point and for the most part, Hartl does a great job at explaining things.

5) Check out Mackenzie Child's Ruby on Rails tutorials on Youtube. Saved my ass, frankly. 

6) If you can get your hands on one of them, read either: Beginning Rails 4 OR The Rails 4 way.

7) Re-read Michael Hartl's book. No joke. His book is so helpful, but you didn't even realize what you missed. Go back and re-read it!

Once you've done these things you should be at the point where you are able to feed yourself Rails-wise. I'm going to be doing tutorials on my blog on the gray areas or not-well-explained areas. In the meantime, if you're curious about my startup you can go check it out [here](http://facebook.com/gather.the.world/)",1118,89,_FlyingGeese,2015-05-17 04:32:50,https://www.reddit.com/r/learnprogramming/comments/368gek/how_i_learned_rails_from_absolute_scratch_and_got/,0,learnprogramming
7ryma6,Awesome list for Computer Science Students,https://github.com/anu0012/awesome-computer-science-opportunities,1112,36,None,2018-01-21 16:26:29,https://www.reddit.com/r/learnprogramming/comments/7ryma6/awesome_list_for_computer_science_students/,0,learnprogramming
d3mrdv,Learn programming by doing projects repository,"I've found this while searching for some react tutorials.

[https://github.com/tuvtran/project-based-learning](https://github.com/tuvtran/project-based-learning)

&#x200B;

Update:

/u/is_cool_as_fuck provided some more links:

* [Project-Based-Tutorials-in-C](https://github.com/rby90/Project-Based-Tutorials-in-C)
* [awesome-diy-software](https://github.com/cweagans/awesome-diy-software)
* [build-your-own-x](https://github.com/danistefanovic/build-your-own-x)
* [Projects-from-Scratch](https://github.com/AlgoryL/Projects-from-Scratch)",1108,28,RamboCambo15,2019-09-13 09:35:06,https://www.reddit.com/r/learnprogramming/comments/d3mrdv/learn_programming_by_doing_projects_repository/,0,learnprogramming
r6ols7,I want to be a programmer but have no motivation/discipline to learn,"It will be 2 years since I started to learn Java and I can't count how many times I had a breaks which mostly resulted in forgetting what I learned. I tried to do some projects which I never finished. I tried to learn some frameworks but with no success.  


Still, at the end of the day I dream to work as a programmer. What is wrong with me?",1111,319,koci53z,2021-12-01 20:41:12,https://www.reddit.com/r/learnprogramming/comments/r6ols7/i_want_to_be_a_programmer_but_have_no/,0,learnprogramming
i281ms,Build a project. Don’t rely on tutorials,"Hi Reddit (first-time poster here) 

I’m a software instructor on Udemy (Rayan). I’m also filling an enterprise development position for the government of Canada. 

I noticed a lot of posters were discussing “tutorial hell”. This is something my students have messaged me about as well. 

If you’re in that position, I can’t give you a concrete solution to becoming a professional developer. But, I can tell you what worked for me. 

1. Do not aimlessly watch tutorials. Look for tutorials that will help you build a project that you’re planning. 

2. Plan a large scale project. Build it at any cost. I first learned how to program by building an anonymous chat application. This incorporated front-end and back-end. This also forced me to learn crucial design patterns (i.e MVC)

3. Never fear bugs. Embrace them. Encountering a bug means you found a vulnerability in your app. This is great news! The easiest way to fix bugs is to set a series of breakpoints. Then, run print statements at each breakpoint. Or, sometimes it helps to compare the current version of your code to a previous version. See what changed. This may help isolate the issue. Of course, there are many ways to debug a program (some beyond the scope of this post). In any case, do not leave a bug unsolved. Resolve it at any cost. It’s only when we struggle that we learn.

4. A coder’s best friend is stack. Everybody uses stack. It doesn’t matter what level. 

5. There are many things I could write about. But, I believe the first 4 points are the best advice I can give to a beginner in development. 

This may get lost in the millions of programming posts. But, I hope this can at least guide one person. 

Head up and happy coding!

Edit: word

Edit 2: Waking up to these comments was a pleasant surprise! Sorry for the jargon. By stack, I meant stack-overflow (I reposted the rest of edit 2 as a reply).",1111,153,rslim087aa,2020-08-02 07:11:32,https://www.reddit.com/r/learnprogramming/comments/i281ms/build_a_project_dont_rely_on_tutorials/,1,learnprogramming
v8xi65,"To people with ADHD, how do you code?",Does it happen that you forget what you were trying to write like a minute ago?,1107,546,Eggcellent_DTR,2022-06-10 02:38:03,https://www.reddit.com/r/learnprogramming/comments/v8xi65/to_people_with_adhd_how_do_you_code/,0,learnprogramming
cr3m01,S.O.L.I.D design principles for everyone,"A big number of the questions I often get from people learning to program is about the best way to structure code.

Most tutorials just teach you basic programming logic, and if they talk about the structure of the code is something like ""Modules have classes, classes have functions and functions do things"". Learning how to structure your code requires a lot of practice and experience, and software design&architecture is something that takes a while to learn, but there are important tools that guide you in this task: software design principles.

Some say that people still learning to program can't benefit from learning about this topic, but if I look back I really wish someone told me about these things from the beginning. It would have made a lot of stuff much easier, so I decided to write a series of articles explaining 5 of the most popular/important software principles, the S.O.L.I.D principles.

Briefly, they are:  
**S for the Single Responsibility Principle(SRP),** which guides you in creating classes that are responsible for one, and only one actor.  
**O for the Open/Closed Principle(OCP),** which makes your code easy to extend by ensuring that it stays open for extension but closed for modification (this might be the most important of all 5)  
**L for the Liskov Substitution Principle(LSP),** which keeps semantic consistency in complex inheritance hierarchies, making your classes easier to understand and use.  
**I for the Interface Segregation Principle(ISP),** which protects objects from depending on the behavior they don't really need.  
**D for the Dependency Inversion Principle(DIP),** which controls the direction of dependencies in your code, ensuring that it always flows in the direction of more abstract entities.  


If you are interested in the topic, you can find the 5 articles I wrote here:  


* [The Single Responsibility Principle](https://www.brainstobytes.com/the-single-responsibility-principle/)
* [The Open/Closed Principle](https://www.brainstobytes.com/the-open-closed-principle/)
* [The Liskov Substitution Principle](https://www.brainstobytes.com/the-liskov-substitution-principle/)
* [The Interface Segregation Principle](https://www.brainstobytes.com/interface-segregation-principle/)
* [Dependency Injection and the famous DIP](https://www.brainstobytes.com/dependency-injection/)

  
Thank you very much for reading, and I really hope this information will help you achieve success in your career.",1107,57,juanorozcov,2019-08-16 08:43:41,https://www.reddit.com/r/learnprogramming/comments/cr3m01/solid_design_principles_for_everyone/,2,learnprogramming
twd09g,Y’all still get a dopamine hit after getting something to work?,"I’m pretty new to coding, been working my way through a python program and just solved this tricky thing with modules. That rush as I saw the code was working was awesome. Just wondering if it goes away after you get to be doing this for a while?",1108,139,ETsUncle,2022-04-04 21:03:19,https://www.reddit.com/r/learnprogramming/comments/twd09g/yall_still_get_a_dopamine_hit_after_getting/,0,learnprogramming
fnxyq7,How to ACTUALLY learn CS,"I want to preface this by saying this is not a get quick and learn programming post. This is how to actually, legitimately learn Computer Science, then Programming without wasting your money or time in the process.

I decided to start learning CS almost a year ago. When I first looked for resources I was overwhelmed by Udemy, [OSSU](https://github.com/ossu/computer-science), [teachyourselfcs.com](https://teachyourselfcs.com), etc. I tried an Udemy intro to programming class and requested my money back after 2 hours. The class wasn't going into the theory or the fundamentals or why to do things or how they work but was just someone reading steps and typing code. From my experience in college, I knew that lectures are great but you only truly know something by applying it to homework and project. Furthermore, College curriculums are designed to build up a foundation of fundamentals through progressively increasing the application of what you previously learned. Personal wealth is built through long term growth of compounding interest and dividends. There is no such thing as getting rich quick. The get rich quick internet stocks of the 2000s lost 90% of their value in a year. Similar to CS there is no 20-hour course that will teach you CS. Next.

With that said, I found [OSSU](https://github.com/ossu/computer-science) open source CS degree with every topic from an accreditated university. Great! Too bad half the classes are decent at best for the reasons stated above and also the amount of time needed to complete them would have been like 3 years. Subpar return on my investment for a long time period. Pass.

This led me to a more succinct program [https://teachyourselfcs.com/](https://teachyourselfcs.com/). I recommend reading the section on ""Why learn CS"". It validates my point about the online classes. So I bought the SICP book which is to CS as is Benjamin Graham is to value investing. Too bad this was written by an MIT professor but, to be frank, the examples were fucking hard. Without any online solutions bank, I found validating my work to be hard. This is probably one of the reasons I didn't go to MIT. I needed to find a more user-friendly resource that was easier and more engaging.

I didn't give up though. I decided to take the [Hardvard CS50](https://www.edx.org/course/cs50s-introduction-to-computer-science) class which from many online curriculums they recommend as the first class. The class was a nice refresher to the C++ class I took in college. I didn't do most of the homework but that was because I was using this class as an overview of ""what can CS do"". A primer as you may say. This class was helpful in teaching me what I don't know so that I could at least use the right terminology when googling my questions on stackoverflow. I learned a lot! This was not a coincidence since I was actually applying critical thinking but what I was learning was the application of CS, which most refer to as programming. Knowing how to connect to a database is great but you won't pass an interview if you don't know Big O notation and algorithms. So I stopped my project for the time being.

At about the same time I came across this [yt video](https://www.youtube.com/watch?v=lDTKnzrX6qU) and Cal Berkly online CS classes. Coincidently, the author validates much of the same points I found over my journey up until this point. In order to actually learn CS work through the entire course of [CS61A](https://cs61a.org/) and then [CS61B](http://inst.eecs.berkeley.edu/~cs61b/sp20/). You can goggle to find the previous semester's classes. I used their recommended [curriculum](http://guide.berkeley.edu/undergraduate/degree-programs/computer-science/#sampleplanofstudytext) and online directory of classes to find the course websites. Some classes have better resources than others but you can at the very least watch videos for topics like performance computer, AI, ML, Databases, Internet, Cyber Security, Networking, etc. I recommend just doing the two CS61 classes and then as needed, watch videos on other topics. For instance, I watched a handful of database classes and did some homework to understand them better.

Now once you at the very least finish the two CS61 classes you will be pretty prepared for entry-level computer software engineering interviews. Now go create a decent project and then practice for interviews through leetcode or any other website.

EDIT: A few people pointed out the How to Design Programs book as pointed out on [teachyourselfcs.com](https://teachyourselfcs.com) I haven't been on that site in over a year so thank you for pointing it out. Since I never read the book I cannot talk about it. Cal Berkeley is a reputable university and I found CS61's projects, homeworks, and labs with automated tests very helpful and therefore I recommend them.

EDIT2: Computer Science is basically a runaway branch of mathematics. The more math you know the easier the logic will be to learn CS. Some people have pointed out not knowing algebra, or pre-calc so how can they do this course. For those people who do not have a strong STEM background I recommend finding some used math textbook on amazon and go through some of the sections. [Khan Acedemy](https://www.khanacademy.org/) has great overviews of math concepts but to the same point at the Udemy courses without in-depth practice and critical thinking, you will not retain any of it.  

EDIT3: I should have added this into the preface but just like personal finance there is no such thing as a get rich quick scheme. Similarly, there is no master CS quickly scheme. It's called a 4 year B.S. degree. My point of the post was to give advice on people looking where to actually learn CS and get a good foundation under them. This is not an exhaustive list because like mentioned you could spend 3 years on the OSSU courses and I bet 99% of the people who start that track don't finish it. IMO what I recommended is a realistic balance of hard time-consuming classes without overloading you on every elective under the sun.

TL;DR: Stop wasting your time on tutorials free or paid that faux you into thinking you actually know computer science. Take CS50, then CS61A, then CS61B, then go and apply your fundamental knowledge to create some project. Use leet code or anywhere else to reinforce your skills when preparing for interviews.",1104,113,sat5344,2020-03-24 03:21:04,https://www.reddit.com/r/learnprogramming/comments/fnxyq7/how_to_actually_learn_cs/,0,learnprogramming
9bpoct,"Last year I decided to teach myself to program, today my startup went into beta.","I just wanted to thank you all for all of the advice I've gotten by reading though this sub over the past year. Your contributions help more than you know. My site, [Chat Circles](https://chatcircles.com/), just went into beta and I owe a bit of the fact that I got here to you all. Thank you!",1102,120,None,2018-08-31 02:09:24,https://www.reddit.com/r/learnprogramming/comments/9bpoct/last_year_i_decided_to_teach_myself_to_program/,0,learnprogramming
8jvlk9,My first 500 hours of learning to program and learning fundamentals that are covered in some sites in 10 hours.,"Read my story [here](https://medium.com/@ltp235/500-hours-learning-programming-concepts-taught-in-10-30-hours-by-other-sites-2861da5ffcb5).

This is how my first 500 hours went on learning how to program starting with Ruby as my first language In the article I also made a list of common programming concepts. If you're a beginner, you'll see why software devs say it doesn't matter what language you learn first, so long as you learn it well. Looking forward to your feedback and feel free to ask me any questions.",1101,115,worstbrook,2018-05-16 15:02:01,https://www.reddit.com/r/learnprogramming/comments/8jvlk9/my_first_500_hours_of_learning_to_program_and/,0,learnprogramming
220oqq,Here's a list of 52 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2014),"This is not the complete list of MOOCs starting in April 2014, just the ones relevant to this community. The complete list of courses starting in April 2014 can be found over at [Class Central blog (128 courses)](http://www.blog.class-central.com/mooc-report-april-2014/). I maintain a much bigger list of these courses over at [Class Central](https://www.class-central.com)

Get this list every month via email : [Subscribe](https://www.class-central.com/newsletters/subscribe/mooc-report-programming)


BEGINNER(12)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Introduction to VBA/Excel Programming](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_286445_1)|Apr 1st|10 weeks|CourseSites|[NA](https://www.class-central.com/mooc/1797/coursesites-introduction-to-vba-excel-programming#course-reviews)
[CS 101: Building a Search Engine](http://www.udacity.com/overview/Course/cs101)|Self Paced|7 weeks|Udacity|[5](https://www.class-central.com/mooc/320/udacity-introduction-to-computer-science#course-reviews) (4 reviews)
[Introduction to Internetworking with TCP/IP](https://openhpi.de/course/internetworking)|Self Paced|6 weeks|openHPI|[NA](https://www.class-central.com/mooc/590/openhpi-introduction-to-internetworking-with-tcp-ip#course-reviews)
[DCO042 - Python For Informatics](https://online.dr-chuck.com/index.php)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/1010/dco042-python-for-informatics#course-reviews)
[Program Arcade Games - Learn Computer Science](http://programarcadegames.com/)|Self Paced|NA|Others|[NA](https://www.class-central.com/mooc/640/program-arcade-games-learn-computer-science#course-reviews)
[Introduction to Programming in Java](https://www.udacity.com/course/cs046)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/831/udacity-introduction-to-programming-in-java#course-reviews)
[User Experience for the Web](https://www.open2study.com/courses/user-experience-for-the-web)|Self Paced|4 weeks|Open2Study|[4](https://www.class-central.com/mooc/904/open2study-user-experience-for-the-web#course-reviews) (1 review)
[Introduction to Salesforce App Development](https://www.udacity.com/course/ud162)|Self Paced|2 weeks|Udacity|[NA](https://www.class-central.com/mooc/1481/udacity-introduction-to-salesforce-app-development#course-reviews)
[CS50x: Introduction to Computer Science](https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022)|Self Paced|16 weeks|EdX|[4.75](https://www.class-central.com/mooc/442/edx-cs50x-introduction-to-computer-science#course-reviews) (4 reviews)
[Mobile Web Development](https://www.udacity.com/course/cs256)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1046/udacity-mobile-web-development#course-reviews)
[Introduction to Databases](https://www.coursera.org/course/db)|Self Paced|NA|Coursera|[4.6](https://www.class-central.com/mooc/303/coursera-introduction-to-databases#course-reviews) (5 reviews)
[Computer Science 101](https://www.coursera.org/course/cs101)|Self Paced|NA|Coursera|[4.5](https://www.class-central.com/mooc/375/coursera-computer-science-101#course-reviews) (2 reviews)

INTERMEDIATE(36)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[Cryptography I](https://www.coursera.org/course/crypto)|Apr 1st|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/616/coursera-cryptography-i#course-reviews)
[Introduction à HTML5 - Animations et jeux](https://www.france-universite-numerique-mooc.fr/courses/groupeinsa/13001/Trimestre_2_2014/about)|Apr 1st|7 weeks|France Université Numerique|[NA](https://www.class-central.com/mooc/1881/france-universite-numerique-introduction-a-html5-animations-et-jeux#course-reviews)
[R Programming](https://www.coursera.org/course/rprog)|Apr 7th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1713/coursera-r-programming#course-reviews)
[The Data Scientist’s Toolbox](https://www.coursera.org/course/datascitoolbox)|Apr 7th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1712/coursera-the-data-scientist-s-toolbox#course-reviews)
[Getting and Cleaning Data](https://www.coursera.org/course/getdata)|Apr 7th|4 weeks|Coursera|[NA](https://www.class-central.com/mooc/1714/coursera-getting-and-cleaning-data#course-reviews)
[SAP Business Suite powered by SAP HANA](https://open.sap.com/course/suitehana1)|Apr 9th|4 weeks|openSAP|[NA](https://www.class-central.com/mooc/1865/opensap-sap-business-suite-powered-by-sap-hana#course-reviews)
[Machine Learning 2—Unsupervised Learning](https://www.udacity.com/course/ud741)|Apr 14th|NA|Udacity|[NA](https://www.class-central.com/mooc/1848/udacity-machine-learning-2-unsupervised-learning#course-reviews)
[Algorithmen und Datenstrukturen](https://iversity.org/courses/algorithmen-und-datenstrukturen)|Apr 14th|14 weeks|iversity|[NA](https://www.class-central.com/mooc/1206/iversity-algorithmen-und-datenstrukturen#course-reviews)
[Документы и презентации в LaTeX (Introduction to LaTeX)](https://www.coursera.org/course/latex)|Apr 15th|5 weeks|Coursera|[NA](https://www.class-central.com/mooc/1377/coursera-----latex-introduction-to-latex#course-reviews)
[CS169.1x: Software as a Service](https://www.edx.org/course/uc-berkeleyx/uc-berkeleyx-cs169-1x-engineering-1377)|Apr 18th|5 weeks|EdX|[5](https://www.class-central.com/mooc/443/edx-cs169-1x-software-as-a-service#course-reviews) (1 review)
[Technology and Ethics](https://www.coursera.org/course/techethics)|Apr 21st|7 weeks|Coursera|[NA](https://www.class-central.com/mooc/1529/coursera-technology-and-ethics#course-reviews)
[Functional Programming Principles in Scala](https://www.coursera.org/course/progfun)|Apr 25th|7 weeks|Coursera|[5](https://www.class-central.com/mooc/422/coursera-functional-programming-principles-in-scala#course-reviews) (1 review)
[Comprendre les Microcontrôleurs](https://www.coursera.org/course/microcontroleurs)|Apr 28th|7 weeks|Coursera|[NA](https://www.class-central.com/mooc/1238/coursera-comprendre-les-microcontroleurs#course-reviews)
[Malicious Software and its Underground Economy: Two Sides to Every Story](https://www.coursera.org/course/malsoftware)|Apr 28th|6 weeks|Coursera|[NA](https://www.class-central.com/mooc/531/coursera-malicious-software-and-its-underground-economy-two-sides-to-every-story#course-reviews)
[Programmation sur iPhone et iPad](https://www.france-universite-numerique-mooc.fr/courses/UPMC/18001/Trimestre_2_2014/about)|Apr 28th|6 weeks|France Université Numerique|[NA](https://www.class-central.com/mooc/1875/france-universite-numerique-programmation-sur-iphone-et-ipad#course-reviews)
[M202: MongoDB Advanced Deployment and Operations](https://education.mongodb.com/courses/10gen/M202/2014_April/about)|Apr 29th|7 weeks|MongoDB|[NA](https://www.class-central.com/mooc/1777/mongodb-m202-mongodb-advanced-deployment-and-operations#course-reviews)
[Algorithms: Design and Analysis, Part 1](https://www.coursera.org/course/algo)|Apr 29th|6 weeks|Coursera|[4.65](https://www.class-central.com/mooc/374/coursera-algorithms-design-and-analysis-part-1#course-reviews) (3 reviews)
[More Data Mining with Weka](https://weka.waikato.ac.nz/moredataminingwithweka)|NA|5 weeks|Others|[NA](https://www.class-central.com/mooc/1748/more-data-mining-with-weka#course-reviews)
[CS212 - The Design of Computer Programs](http://www.udacity.com/overview/Course/cs212)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/323/udacity-design-of-computer-programs#course-reviews)
[CS253 - Web Application Engineering - Building a Blog](http://www.udacity.com/overview/Course/cs253)|Self Paced|7 weeks|Udacity|[3.5](https://www.class-central.com/mooc/324/udacity-web-development#course-reviews) (2 reviews)
[CS262 - Programming Languages - Building a Browser](http://www.udacity.com/overview/Course/cs262)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/325/udacity-programming-languages#course-reviews)
[CS215 - Algorithms - Crunching Social Networks](http://www.udacity.com/overview/Course/cs215/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/364/udacity-algorithms#course-reviews)
[CS258 - Software Testing - How to Make Software Fail](http://www.udacity.com/overview/Course/cs258/CourseRev/1)|Self Paced|7 weeks|Udacity|[4](https://www.class-central.com/mooc/365/udacity-software-testing#course-reviews)(2 reviews)
[CS259 - Software Debugging - Automating The Boring Tasks](http://www.udacity.com/overview/Course/cs259/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/457/udacity-software-debugging#course-reviews)
[CS313 - Intro to Theoretical Computer Science - Dealing with Challenging Problems](http://www.udacity.com/overview/Course/cs313/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/455/udacity-intro-to-theoretical-computer-science#course-reviews)
[CS271 - Introduction to Artificial Intelligence](http://www.udacity.com/overview/Course/cs271/CourseRev/1)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/592/udacity-introduction-to-artificial-intelligence#course-reviews)
[CS255 - HTML5 Game Development - Building High Performance Web Applications](http://www.udacity.com/overview/Course/cs255/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/551/udacity-html5-game-development#course-reviews)
[Learning from Data (Introductory Machine Learning course)](http://work.caltech.edu/telecourse.html)|Self Paced|10 weeks|Others|[NA](https://www.class-central.com/mooc/366/learning-from-data-introductory-machine-learning-course#course-reviews)
[Python for Informatics: Exploring Information](https://www.coursesites.com/webapps/Bb-sites-course-creation-BBLEARN/courseHomepage.htmlx?course_id=_250824_1)|Self Paced|NA|CourseSites|[NA](https://www.class-central.com/mooc/795/coursesites-python-for-informatics-exploring-information#course-reviews)
[Introduction to Hadoop and MapReduce](https://www.udacity.com/course/ud617)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1470/udacity-introduction-to-hadoop-and-mapreduce#course-reviews)
[CS 8802, Artificial Intelligence for Robotics: Programming a Robotic Car](https://www.udacity.com/course/cs373)|Self Paced|NA|Georgia Tech Online Master of Science in Computer Science|[NA](https://www.class-central.com/mooc/1021/georgia-tech-online-master-of-science-in-computer-science-cs-8802-artificial-intelligence-for-robotics-programming-a-robotic-car#course-reviews)
[Intro to Data Science](https://www.udacity.com/course/ud359)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/1480/udacity-intro-to-data-science#course-reviews)
[How to create a Windows 8 App](http://www.opencourseworld.de/pages/coursedescription.jsf?courseId=487693)|Self Paced|8 weeks|OpenCourseWorld|[NA](https://www.class-central.com/mooc/1788/opencourseworld-how-to-create-a-windows-8-app#course-reviews)
[Data Wrangling with MongoDB](https://www.udacity.com/course/ud032)|Self Paced|8 weeks|Udacity|[NA](https://www.class-central.com/mooc/1479/udacity-data-wrangling-with-mongodb#course-reviews)
[Exploratory Data Analysis](https://www.udacity.com/course/ud651)|Self Paced|8 weeks|Udacity|[5](https://www.class-central.com/mooc/1478/udacity-exploratory-data-analysis#course-reviews) (1 review)
[Compilers](https://www.coursera.org/course/compilers)|Self Paced|11 weeks|Coursera|[NA](https://www.class-central.com/mooc/328/coursera-compilers#course-reviews)
ADVANCED(7)

Course Name|Start Date|Length|Provider|Rating
:--|:--:|:--:|:--:|:--:
[CS 373: Programming a Robotic Car](http://www.udacity.com/overview/Course/cs373)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics#course-reviews)
[CS387 - Applied Cryptography](http://www.udacity.com/overview/Course/cs387)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/326/udacity-cs387-applied-cryptography#course-reviews)
[In-Memory Data Management](https://openhpi.de/course/inmemorydatabases)|Self Paced|6 weeks|openHPI|[NA](https://www.class-central.com/mooc/465/openhpi-in-memory-data-management#course-reviews)
[CS344 - Introduction to Parallel Programming  - Using CUDA to Harness the Power of GPUs](http://www.udacity.com/overview/Course/cs344/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/549/udacity-intro-to-parallel-programming#course-reviews)
[CS291 - Interactive Rendering - Introduction to 3D Computer Graphics](http://www.udacity.com/overview/Course/cs291/CourseRev/1)|Self Paced|10 weeks|Udacity|[NA](https://www.class-central.com/mooc/552/udacity-interactive-3d-graphics#course-reviews)
[CS348 - Functional Hardware Verification - How to Verify Chips and Eliminate Bugs](http://www.udacity.com/overview/Course/cs348/CourseRev/1)|Self Paced|7 weeks|Udacity|[NA](https://www.class-central.com/mooc/550/udacity-functional-hardware-verification#course-reviews)
[Machine Learning 1—Supervised Learning](https://www.udacity.com/course/ud675)|Self Paced|NA|Udacity|[NA](https://www.class-central.com/mooc/1847/udacity-machine-learning-1-supervised-learning#course-reviews)",1099,88,dhawal,2014-04-02 15:22:01,https://www.reddit.com/r/learnprogramming/comments/220oqq/heres_a_list_of_52_free_online_programmingcs/,1,learnprogramming
fr4gjr,How do programmers learn cybersecurity for software development?,"I've built a few web applications for classes, and it always gets me thinking ""I'm glad no one knows about this because it could probably get hacked very easily""...since  I have no idea what I'm doing on the security side and I don't really implement much for it. (Basically, I know how I should hash passwords.) This is probably really bad, and I feel like this is a skill I should've learned a lot earlier, but I wasn't really ever taught in school. Googling it is kind of difficult and I have a lot to ask so: **Where could / how do I learn how to make safe software?** How could I prevent it from easily being hacked? How do I keep user information safe? How can I as a software developer prevent from making easily detectable cybersecurity mistakes (e.g. for the customer, or for me - like being my app's secret key on Github or something). Does this question classify under 'cybersecurity' - if not, could someone give me a better word?

**Are there any collection of resources to learn about these topics?**   
(e.g. something like MIT's Missing Semester [https://missing.csail.mit.edu/2020/](https://missing.csail.mit.edu/2020/), which has one section on security) 

Also, kinda off-topic question if that's cool - when 'genius hackers' and such build their startups, what do they do for security? Did someone like Mark Zuckerburg already know about cybersecurity or does he get a guy to specialize in it?

To cybersecurity people, sorry I am basically clueless so I probably sound like I'm all the non-tech people in your life who ask you about fixing their printer.",1107,85,dolliebot,2020-03-29 11:24:56,https://www.reddit.com/r/learnprogramming/comments/fr4gjr/how_do_programmers_learn_cybersecurity_for/,0,learnprogramming
xrqs5o,"It took me three days to figure out a bug on my calculator project, but I feel great for figuring it out.","I'm sorry, but I just wanted to share. I thought I had finally hit a roadblock that I couldn't pass. My calculator for The Odin Project is 99% done, but one of the few issues I had came after I added keyboard support.

When I typed my numbers in, and hit enter, the calculator did exactly the right thing. The problem came after I hit my All Clear button. For some reason, if I hit enter at any time, all of my screen data would disappear. It was the only condition I found that would reproduce this error.

I thought I was going crazy pouring through my code. I learned how to use dev tools so much more trying to debug the damn thing. I was console logging everything trying to figure out what happened. All of my values were being assigned correctly, but for some reason it was disappearing.

Finally, after three days, I noticed it and my heart sank. My AC button was staying focused, it wasn't my logic at all. Pressing the enter key was ""clicking"" that button...and then I learned blur().

I just want to say for noobies like me don't give up, no matter how frustrating. This was a great and aggravating experience.

&#x200B;

\*\*Edit

I just wanted to say a big thanks to everyone who took the time to comment on this. I really thought 14 total people would see this and I might  ~~here~~ hear (long day moving zzz) from a single person. I would've been fine with it too, because I really just wanted to share this moment with others. I'm very thankful for all of the supportive feedback and I tried my best to reply to everyone.",1099,89,bluemoonreflection,2022-09-30 03:14:07,https://www.reddit.com/r/learnprogramming/comments/xrqs5o/it_took_me_three_days_to_figure_out_a_bug_on_my/,0,learnprogramming
vo4cxb,I finished The Odin Project's Foundations course yesterday!,"Hello everyone!!

# My Background

I'm a 15 year old (turning 16 this year) student. I'm about to move up to Grade 11 and take STEM as my strand for SHS, then I plan to take Computer Science as my course for college. Ever since I was young (7-8 years old) I've always been into coding, and computers in general but I've never really took the time to actually learn it. When I was 10, I built (probably watched a tutorial on YouTube) a web browser with VB.NET, and I thought I was a god at the time 🤣. I never knew how much I didn't know until recently.

&#x200B;

I've always had the interest in learning it properly but I just didn't know how.. The first thing I tried was Udemy, I purchased Angela Yu's python course (since I was using and studying it at the time, at that point I've probably already been using python for over a year to make small projects like discord bots) and within a week I just totally gave up. It just wasn't for me.. I wanted to escape the so called ""tutorial hell"". While looking for Udemy courses though I discovered this subreddit! r/learnprogramming. There was a lot of mention of something called **The Odin Project**. So I thought I'd give it a try so why not!

&#x200B;

Back to now, I just wanted to share that I was finally able to complete all the projects in The Odin Project's foundation course. I do feel like I went too fast though, as I finished it in about a week. Admittedly I skimmed through the chapters about the web and most of the basic stuff in HTML (I took a short separate course that taught some of it) and heavily focused on JS and CSS , which was really tough in my opinion. I plan to take the full stack JavaScript path and take it way more seriously and not skim through anything to make sure I fully understand everything.

&#x200B;

Check out my Odin Project Submissions! [My Projects](https://github.com/itsalexi)

If you have any tips or advice for me it would be greatly appreciated!",1098,94,alexionreddit,2022-06-30 09:36:49,https://www.reddit.com/r/learnprogramming/comments/vo4cxb/i_finished_the_odin_projects_foundations_course/,0,learnprogramming
12f0od3,"I thought programming would save my life, but I gave up, and that's ok"," if you're reading this I know what you are on about.

I'm your case of a person with a horrible job(mover) who thought that maybe, things could look brighter for me if I started learning how to code, I know some people who did that and hey, why not?

Things couldn't have been further from the truth, I tried learning how to program in Javascript, python and  then Salesforce but things just didn't ""click"" for me at all, they actually never did. Perhaps my problem was my method? I was trying to become self taught, coding in the truck in my free time.

So after failing TOP and CS50P I decided to enroll in a bootcamp, a Salesforce bootcamp. After 6 months of intense coding.

And I made the teacher frustrated at how logic-averse a human being could be, my parents hired a private tutor back when I was 15 and she was extremely frustrated because she couldn't fathom how a human being could lack any kind of logic reasoning, she even suggested that I may have a learning disability , and it made sense. Everything went smoothly with the admin part, but the moment we hit any kind of logic, my mind would obliterate itself no matter how many times I tried. It was blank.

You see, I graduated with a degree in International Relations. But in my high school years I failed every physics, chemistry and maths class for 5 years in a row. Do you see the pattern here? you may be maths averse, but you CANNOT be logic averse. If you have interest but lack any kind of aptitude for it, I'm sorry, but this is just not for you. There are many things out there you could do, but most people who learn how to code have somewhat of an aptitude and natural skills towards it. It just didn't happen for me.

And that's ok, you can always find other things that might work for you :). Not every story has to be a success one.",1097,185,Madurascercahazclick,2023-04-07 21:49:27,https://www.reddit.com/r/learnprogramming/comments/12f0od3/i_thought_programming_would_save_my_life_but_i/,0,learnprogramming
ali3s5,Is there interest in learning to code via live stream with an Amazon dev?,"I've been a dev at Amazon for \~6 years now and I'd like to start paying it forward a bit. I'm trying to reach people that are more or less in the position I was in about 10 years ago -- playing way too much video games, not having a clue about where I'd be in the future, and never having been exposed to programming.

I recently stumbled upon some [good advice](https://youtu.be/AImlHYal3cI?t=4234) that boils down to helping people who want to be where you are. Would there be any interest here (or perhaps, somewhere else) in learning to code via something like Twitch/Youtube live? My current thought is to do something around front end development (React in particular). For me, I needed to be able to speak and argue with people when learning so I'd like to try and provide that for others and doing this via stream seems like it would be the most accessible to people (and the recordings could help more people as well).

&#x200B;

EDIT: So, looks like there is clearly interest. Sorry to the people that I didn't respond to directly yet. Some of the commenters are a little skeptical because there have apparently been offers like this in the past. I've set a calendar event to plan out exactly what to teach (and how/where) for Saturday at 6am PST. I'll try to get something scrappy together. In the mean time, here are a few polls that would help me plan.

&#x200B;

What OS do you use? [https://www.strawpoll.me/17336706](https://www.strawpoll.me/17336706)

Would you be interested in a front end learning stream? [https://www.strawpoll.me/17336714](https://www.strawpoll.me/17336714)

What time works best? [https://www.strawpoll.me/17336758](https://www.strawpoll.me/17336758)

Youtube or Twitch? [https://www.strawpoll.me/17336798](https://www.strawpoll.me/17336798)

&#x200B;

I'm pretty sure I'm going to start with front end stuff because I know it really well. Not to say there won't be other things in the future.

Also, I want to be very clear that Amazon isn't sponsoring this and isn't affiliated in anyway. This is 100% something that I own.

&#x200B;

**EDIT2**: Just a heads up, I won't be able to respond on this thread much until the weekend. A few people expressed concern about not knowing how to find out what I end up picking for times/material. I just spun up this twitter account for this purpose: [https://twitter.com/reddit\_code\_exp](https://twitter.com/reddit_code_exp). I'm going to plan it out this weekend and I'll update this thread as well as that twitter.

**EDIT3**: Got a summary page up: [https://naddeo.org/2019/02/reddit-coding-experiment.html](https://naddeo.org/2019/02/reddit-coding-experiment.html). I'll announce a stream time soon. I think the first stream will be next weekend. I might do some testing for it tomorrow to make sure it actually works.

**EDIT4**: First stream location for Sat 2/9/2019 @8PM PST: [https://www.youtube.com/channel/UCxqec40kpbkHs9XIKPgRh\_w/live](https://www.youtube.com/channel/UCxqec40kpbkHs9XIKPgRh_w/live)",1098,229,antman8969,2019-01-30 22:03:18,https://www.reddit.com/r/learnprogramming/comments/ali3s5/is_there_interest_in_learning_to_code_via_live/,0,learnprogramming
5wgefy,Many devs here on Reddit and on Slack were asking about open source projects they can contribute to. So I made a form for people who want to get notified about OSS contribution opportunities. (beginners are welcome),"tl;dr: signup to get open source contribution opportunities based on your skills/level.  
**Form link: [https://devchat.devolio.net/hellocode/](https://devchat.devolio.net/hellocode/)**  
Please note this is a community effort and we will not send you spam emails.  
  
(x-post r/learnpython)",1095,80,None,2017-02-27 12:15:30,https://www.reddit.com/r/learnprogramming/comments/5wgefy/many_devs_here_on_reddit_and_on_slack_were_asking/,0,learnprogramming
boapne,"So I've been a professional developer for a little while now. Will the targeted ads for ""LEARN TO CODE IN SIX WEEKS"" ever stop?","PYTHON'S WHERE ITS AT LEARN PYTHON IN 6 MINUTES MAKE 100 BILLION DOLLARS A YEAR ON AVERAGE LEARN FOR LOOPS WANNA MAKE A WEBSITE

I'm being silly about it but it's a real question.",1091,203,ComposerShield,2019-05-13 23:06:00,https://www.reddit.com/r/learnprogramming/comments/boapne/so_ive_been_a_professional_developer_for_a_little/,0,learnprogramming
a3vtph,"Just landed my first dev job, super stress, have no idea what coworkers are talking about, need advice","Hey guys, I'm self taught and landed my first development job which I started this week (I'd actually like to thank learnprogramming for answering all my dumb questions along the way). However, it's just been a couple days and I'm already super stressed. I haven't even started coding really and I already feel like I know nothing. 

My first couple days, my coworkers have been talking about stuff like development, staging, production, setting up and updating vagrant, moving to new vagrant soon, merging it, switching to it or setting up this server or taking this server down and moving to the new one etc etc, and I have to be honest, I have no idea what they are talking about at all. Like I know what a server is and I thought I knew what setting up a server meant until now I guess. 

It almost feels like nothing I learned throughout the year applies at all. I haven't even started coding and I'm already super confused. Is the stuff they're talking about the so called DevOps? Like how do I understand this stuff they're talking about? I don't even know how to explain this. It's not the coding aspect I'm confused about, it's the configs and the setting up and knowing what the server is pointing to or whatever else they talk about that I'm confused about if that makes any sense. Where does learning this stuff come in? 

EDIT: Thanks everyone for your replies, I've read all the comments and I wish I could reply to everyone. I'm still pretty stressed but I'm gonna try to take a breather and take things one step at a time and make sure to ask questions. I guess since I'm new to this industry, I just don't know what the expectations are and how much time the tech industry gives you to settle in, so I keep stressing about getting fired if I don't pick things up quickly. I guess I wasn't prepared to feel so clueless already. In my previous jobs, you really don't get much time to pick things up, for those industries, one week is a long time and if I didn't pick things up in a few days, I'd be fired. I just don't know if the people at my workplace feel the same way that I need more time than the first week to understand things. ",1088,189,WTFMatchmake,2018-12-07 03:24:10,https://www.reddit.com/r/learnprogramming/comments/a3vtph/just_landed_my_first_dev_job_super_stress_have_no/,1,learnprogramming
gjf5sr,What are some good YouTube channels for learning about computer science and programming?,"I’m looking for more channels or playlists similar to Computerphile. Good quality videos explaining anything related to programming or CS. I’m not looking for coding tutorials or even worse, shameless self promotion videos from self proclaimed entrepreneurs telling me how to be successful. 

Im new to this world, so I’m trying to emerge myself as much as possible. 

Thank you",1095,198,myceliatedmerchant,2020-05-14 04:20:13,https://www.reddit.com/r/learnprogramming/comments/gjf5sr/what_are_some_good_youtube_channels_for_learning/,0,learnprogramming
cu8reu,Is it normal to spend an hour(s) reading just to write like 2 lines of code?,"I'm in the learning process and it seems that I do a lot more reading than writing when it comes to coding.


I always have to read documentation on some library that helps me do something, or maybe look up a guide online on how to start on a problem. 


I hear about projects with 10s of thousands of lines of code, and I'm wondering if I'm doing something wrong if it takes me this long to write such a small amount.",1089,256,ithrowcox,2019-08-23 04:15:29,https://www.reddit.com/r/learnprogramming/comments/cu8reu/is_it_normal_to_spend_an_hours_reading_just_to/,1,learnprogramming
xk470z,A friend of mine that is an expert in learning development sent me this and I think it will help people gain some perspective on how they acquire expertise.,"[The Five-Stage Model of Adult Skill Acquisition](https://www.bumc.bu.edu/facdev-medicine/files/2012/03/Dreyfus-skill-level.pdf)

Read it. It's short enough and well written enough for anyone to digest.

Some highlights are below.

This part is about moving from Advanced Beginner (Stage 2) to Competence (Stage 3).

>With more experience, the number of potentially relevant elements and procedures that the learner is able to recognize and follow becomes overwhelming. At this point, because a sense of what is important in any particular situation is missing, performance becomes nerve-wracking and exhausting, and the student might well wonder how anybody ever masters the skill.  
>  
>To cope with this overload, and to achieve competence, people learn, through instruction or experience, to devise a plan or choose a perspective that then determines those elements of the situation or domain that must be treated as important and those that can be ignored. As students learn to restrict themselves to only a few of the vast number of possibly relevant features and aspects, understanding and decision making becomes easier.

About moving from Competence (Stage 3) to Proficiency (Stage 4)

>What matters is taking responsibility for one’s successful and unsuccessful choices, even brooding over them—not just feeling good or bad about winning or losing, but replaying one’s performance in one’s mind step by step or move by move. The point, however, is not to analyze one’s mistakes and insights but just to let them sink in. Experience shows that only then will one become an expert.

**EDIT:** Just to clarify some things. My friend is an expert in learning development as in he studies how people learn in general and makes training programs for large corporations as his job. This is a well written summary of the Dreyfus model of skill acquisition if you want further reading on the subject. 

I'm 20+ years in on my career in software development. Within that sphere I'm an expert. The challenge for me now is to make the other people that work with me into experts. 

At a certain point in my career people started looking at me for guidance and that's when I realized that being a great software developer definitely does not mean I am good at teaching people how to be a great software developer. I'm much better at going into my cave, not talking to anyone and coming up with a solution than getting other people to come up with a solution. I still have to do that sometimes, but when it comes to making really big software solutions I can't do it all by myself.",1088,55,MrBleah,2022-09-21 12:57:11,https://www.reddit.com/r/learnprogramming/comments/xk470z/a_friend_of_mine_that_is_an_expert_in_learning/,0,learnprogramming
8ohgp7,Learn Basics of Intro to Data Science this weekend. 4-hour bootcamp course for serious learners,"Important Announcement: **A few hundred people signed up for the bootcamp and so the emails I have sent have started to bounce back. Here's the link to the class this Sunday:** [**https://www.youtube.com/watch?v=d1XO9I6b2ao**](https://www.youtube.com/watch?v=d1XO9I6b2ao) **Please take a look at the Discord Server App\-**[**https://discord.gg/PqkB5b2**](https://discord.gg/PqkB5b2) **\- I created for all the latest updates. Thanks!**

Hi folks, two months ago I ran a 4\-week into to Python course that over 50 people attended and enjoyed. See here\-\> [https://www.reddit.com/r/learnpython/comments/81ed7v/learning\_programming\_can\_be\_like\_walking\_in\_the/](https://www.reddit.com/r/learnpython/comments/81ed7v/learning_programming_can_be_like_walking_in_the/)

Based on your feedback, I have created a a 4\-hour bootcamo course on data science and I plan to teach it this Sunday.

Who is this for? Complete beginners who are serious about learning data science using Python.

Interested to know more? Take a look here: [https://docs.google.com/forms/d/e/1FAIpQLSdg2OUwCBMHCuSpbpYPOciuAaxV\-AdsfMk4wfUZPMcZKxJqdw/viewform?usp=sf\_link](https://docs.google.com/forms/d/e/1FAIpQLSdg2OUwCBMHCuSpbpYPOciuAaxV-AdsfMk4wfUZPMcZKxJqdw/viewform?usp=sf_link)",1091,136,g_pal,2018-06-04 13:58:54,https://www.reddit.com/r/learnprogramming/comments/8ohgp7/learn_basics_of_intro_to_data_science_this/,0,learnprogramming
s4hcj8,Any self taught developers who were able to get into anything else besides web development?,"Please tell what it is and how your experiences are with it so far...


Edit: guys, I wrote anything other than web dev",1091,391,None,2022-01-15 10:16:18,https://www.reddit.com/r/learnprogramming/comments/s4hcj8/any_self_taught_developers_who_were_able_to_get/,0,learnprogramming
nlj8wz,"What is a term (or a basic concept) that beginner's tutorials etc. tend to use, assuming you already know what it means, that confused you?","I'll go first. I started my journey a little over a year ago, and have been focusing mostly on Python. What tripped me up was when I would take a course and the instructor would say something like 'this is a high-level concept' or a 'high-level view of a project'. Maybe this makes me sound daft, but I was picturing... like how you level up in a video game or something. The higher the level, the harder it must be, right? But alas, finally figured out it meant more of 'a bird's eye view' type of deal. Needless to say, I was confused as to why I was learning such 'high level concepts' at the beginning, thinking they meant advanced concepts, not broad or sweeping ideas haha. Anyone else have a story like this?
Edit: clarification.",1092,455,LambGeck,2021-05-26 15:07:07,https://www.reddit.com/r/learnprogramming/comments/nlj8wz/what_is_a_term_or_a_basic_concept_that_beginners/,0,learnprogramming
houlss,Turning 30. Looking to get into the field but have no education or experience. Is it too late for me?,"So I’m a freshly-minted member of the 3-0 club, and getting to the point where I’m starting to feel a little disillusioned with my career path. I graduated with a Geography and Forestry degree but my career is completely unrelated. I’ve been financial risk management for the past 5 years or so and have a decent-paying job at a large company. I am, however, pretty bored of finance and don’t really see myself doing this for much longer. I’m not particularly interested in the advancement and education path it requires.

Programming is something that’s always been of interest to me, and I feel like it’s a path that will continue to grow in the future, and will let me continue learning and adapting to it.

Problem is that I have absolutely zero experience coding/languages and no education whatsoever. I’m willing to learn and put time in however. My job is fairly stress-free and I have a lot of time once I clock out at 5 pm. So I have a few questions related to breaking into the programming field:

-    Do I need to have a degree to get my foot in the door? Realize I’m a little late to the party on this. I’m open to doing some kind of online degree if I can find it but does it hurt me in the long run? Is it possible to get an entry level job by being self-taught?

-    What are the best structured programs for a total noob? I need structure and accountability and following a “lesson plan” of some kind would be amazing. Some research shows that The Odin project, CS50, App Academy Open and Full Stack Open are some of the best free courses. Which of these would you recommend I start with? I’m interested in back-end stuff although at this point I’m open to learning anything and everything

-    Are bootcamps worth it? There are a ton of them here in Toronto and I’ve heard mixed things about them. I do have a couple of friends that ended up getting jobs through them though so they seem at least somewhat effective.

I guess ultimately my main goal is to get that foot in the door and land the entry level job that’ll let me make some money and learn at the same time for bigger things. Is this possible without a degree? And if so, where do I start?",1090,366,OnlyWannaEat,2020-07-10 18:44:50,https://www.reddit.com/r/learnprogramming/comments/houlss/turning_30_looking_to_get_into_the_field_but_have/,0,learnprogramming
qsz7nm,Had my first proper technical interview and absolutely bombed it!,"This was yesterday, the last interview after having an initial video call and a take home technical test. The first half of the interview was great, I could answer all the technical questions and was feeling good, then they asked me to do a live coding challenge whilst they watched...

I'd practiced the whole take it slowly, repeat the question, verbalise your thought process and so the first few minutes was feeling okay but slowly the pressure began to mount. I started to lose my way as they started to add a little more complexity to the challenge, I could feel my heart beating faster and my brain slowly shutting down.

At one point I asked a couple of questions and when they responded I was actively thinking ""none of this is going in, I am hearing words, but when they stop speaking I'll remember nothing"", and that's exactly what happened. It was terrible. Nothing could save me. It was like my brain had just packed up and left saying ""you're on your own for this one, mate"".

It felt like it was going to last forever, I was in pain, I am sure everyone else was too. Eventually I was put out of my misery and they drew the interview to a close. They asked if I wanted to ask any questions, I had prepared a list of killer things... ""nope, I'm all good for now"". Everyone shut their cameras off and I looked at the live ide and then it too died of embarrassment, displaying some message about timing out and went white.

But, I am glad to have got it done! It was good experience and at least I'll never have my first live technical again. And yes, if I think of the challenge now I realise how simple it is.

This is a wonderful community, keep it up everyone :)

EDIT: Few of you have asked what the question was. Being self taught I have only started to touch on data structures and algorithms properly, so this question is probably something very common.

I was given an array of objects and had to modify the value of an object with matching id.

The next part was to modify the same value in each object that were children of the original (parent) object - for example, each object had an id and a parent property, if an object was a child then the parent value of that object would match the id of its parent. Of course each child could be a parent itself, and so on. Eventually you would reach an object who had no children.

The key parts were determining whether an object had any children (there were other objects whose parent value matched the parent's id value) and if so to modify the value of its children.

Efficiency wasn't important, they just wanted to see how I would break the problem down. ",1090,124,YakushimaIsland,2021-11-13 11:16:20,https://www.reddit.com/r/learnprogramming/comments/qsz7nm/had_my_first_proper_technical_interview_and/,0,learnprogramming
oxupq8,"Is it normal to start reading the documentation, get bored and then try to go find a YouTube video on the topic?",Because I do this a lot.,1090,118,gtrman571,2021-08-04 15:10:24,https://www.reddit.com/r/learnprogramming/comments/oxupq8/is_it_normal_to_start_reading_the_documentation/,0,learnprogramming
cx5s3v,Project Ideas for people without a project,"**UPDATE:** **Way More Projects**

Looks like people enjoy reading these project ideas!  Since the article I linked only had a measly 7 projects, I figured the good people of r/learnprogramming deserve *more*.

So I went through a bunch of project listings and compiled a list of 100+ projects that people who are learning programming can actually do.  By my estimate, this list is rapidly approaching the Reddit character limit, so I've posted it on my website.

Check it out here if you're interested: [https://pickaframework.com/articles/projects/](https://pickaframework.com/articles/projects/)

**Original Post:**

Hi Everyone.  I noticed a lot of people that are learning programming but don't have any specific goal in mind.  I find that having a project to work on can help block out some of the other distractions, like wondering whether or not you're using the right language.

I happened to see this article that has a couple of neat ideas:

[https://medium.com/better-programming/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c](https://medium.com/better-programming/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c)

You might have to view in incognito, it's behind one of those medium paywalls.

All those screenshots look really nice, but even a stripped-down html version of these projects could be a lot of fun to build and a great learning experience.",1090,75,mibzman,2019-08-29 19:41:49,https://www.reddit.com/r/learnprogramming/comments/cx5s3v/project_ideas_for_people_without_a_project/,0,learnprogramming
rn2er5,"You really want to code, but not sure you can, if I can do it, so can you!!!","So I'm 39 now and been doing this professionally for 9 ish years. (self taught),

Here's a quick overview of my timeline:

age 16:

* dropped out of school (was a troubled teen, shit happens) live on/off the street for 2 years.

age 18-27:

* Work a slew of different jobs. I've done retail, labor, security, worked in restaurants... However, I think the general work force can relate. without schooling, in the early 2000s, doing anything other than shit jobs... well not a thing.
   * Actually did worked my way up a couple times, one of those times was in window cleaning, to the point of general manager of 20 people, than owned my own for a year.
* Made mods for games using whatever scripting languages were part of the toolkit, played with Qbasic and some C. Nothing major. The reality is that, 15-20 years ago, self taught programmers getting jobs, was not really common. So I had no ambitions to even try. I just assumed, I'm a drop out, why should I try. I can't afford school, and I needed to work 40 hours a week to live, just not possible...

age 27-30:

* That window cleaning company I mentioned I owned briefly above? well there was an accident, someone totaled my truck while it was parked and I was given a choice, buy a new one (I the had money + insurance) or think about what I really wanted to do.
   * I wanted to really learn to code, and actually for random reasons, decide I was going to give it a real shot. But I also needed a job that was easier than owning a business (*you know, not work 7 days a week*).
   * Change to a new job, I went into a wholesaler company for 4 years. I had descent sales skills, so was ok.
* Started studying programming. Regimented 20-25 hours a week for 3 years. I made myself a schedule and stuck to it. I had goals to really understand it.

age 30-33:

* Programmer Year 1: My first coding work was right where I already was. That wholesale company needed some new softwares to handle a couple things. So my last year working there was mostly just coding. I used C# to create those.
* Programmer Year 2-3: I was still a junior programmer at this stage and started working as a backend python developer. I learned a lot in those 2 years and worked with some talented senior devs.

age 33-39:

* Programmer Year 4-9: I got into the game industry. Been in a couple games studios already, mid-size ones with big publishers. Doing competitive multiplayer mobile strategy games and mobile rpgs. These have been mostly C++/C#. I've worked with both an in-house C++ engine and Unity. Server side always C# though.
   * Year 4-6 I was mostly considered a mid level programmer.
   * Year 7-9 I became senior and started tutoring others at work, and designing large systems. Senior level is a lot less actual coding, as you spend more time writing technical documents, etc.

Alright. So I went from dropped out trouble kid to senior programmer. there are two major bits here:

1. Try it if you really want to do it, no matter what anyone will tell you, you can.
2. You will need dedicated study time of some sort.

For the rest of this post I will focus on what I did to self teach myself and my recommendation after working in the industry (mostly because If I knew what I know now, I might of studied a bit differently)

The first thing I did was get myself a few programming books. One on C#, one on C++, a book on algorithms and one on design patterns. I did get more books over time too. But I stated with that. It took me a while to really understand C# properly (beyond just the basics of OOP and code flow). .Net is a huge library and that alone took a good year to grasp a lot of it. Then I spent another year doing mostly C++ and algorithms from the other books.

Books alone were not enough. I joined a C++ forum and took part for a couple years. Frequently looked at open source code and small projects people would post in Dream in Code site. Spent a lot of time Googling problems.

I also got myself a python book and played with that a bit. I though it important to understand dynamic vs static languages.

That 3 years was actually a long journey. 10 years ago, it was still not that common for self taught programmers to get jobs and I really doubted I could do it almost daily. There are times I actually cried because I figured, if had proper teenage years, and went to college, I wouldn't have to deal with this. No matter how much people will tell you their stories of success, it's hard to believe in yourself. But just hang in there.

Now when I got into it for a living, especially when I got into the gaming industry, I learn a shit-ton more. I really knew nothing until I had to work on a large team with tons of code veterans. Here's a hint, my CTO/Lead in one studio was the lead behind a major hit game from 2000. I learned a lot from him alone. I started working for him I only had 3 years experience, he had 20. Some of the things I learned though, I could of done on my own if I knew about it. Meaning, there are books and web articles about everything, you just need to know what to look for.

I learned how much programming languages are just tools and not what makes you a programmer. You should really learn how code works under the hood. How memory gets allocated, how a CPU handles that memory, what are L caches on a CPU and how they process code. You should really learn to build solutions in different types of patterns and see why maybe one style might be better than another. Like Composition vs Inheritance. I see a lot of juniors (and I did this too), do a giant mess of inherited stuff, when its not always the best option. Functional programming still has its purpose in the world.

I see debates on languages... that's a waste of time. I can confidently work with 4, and understand fairly well another 5. That should never be your focus, it should be how to build systems. We are hired to write solutions to problems, not code.

Now I also have a side project I do with my wife. We are making a metroidvania and I find my years of experience are really helping making this in a proper timeline with a solid structure of reusable code which I will be able to use in other project. A game I code now looks nothing like a game I coded years ago. You can look that one up, its on Steam: Goo Keeper

Finally. Read and look up anything from: Robert C. Martin. Clean code is very important. VERY VERY!!!!",1089,70,SebOriaGames,2021-12-23 18:48:50,https://www.reddit.com/r/learnprogramming/comments/rn2er5/you_really_want_to_code_but_not_sure_you_can_if_i/,0,learnprogramming
8mydxv,I made a basic site that shows NYT headlines about anything but Trump.,"I decided I was sick of reading headlines about Trump, and I needed some practice with APIS/JSON. I made a simple one page application that shows all of today's NYT headlines that don't contain the words Donald Trump.

https://github.com/chrishughallen/noTrumpNews/blob/master/index.html",1092,111,schraderbrau,2018-05-29 11:33:58,https://www.reddit.com/r/learnprogramming/comments/8mydxv/i_made_a_basic_site_that_shows_nyt_headlines/,0,learnprogramming
64733l,Programming got me a non tech job. Thank you all who help teach.,"Since I first started learning python a year and a half ago I have always thought everyone should learn at least programming fundamentals. The way it can make you think applies to so many real world applications.  

My plan is to try to break into a programming field when my wife graduates college in 2019. So I started learning Python in January 2016, then Java, and then Go. I have never had a tech related job or received a college degree so I thought the more I knew and the more I could show the better. To practice I created several things to make my job easier. I work outside a lot so I made a Django website to do my daily reports on. Which I soon realized I could store all the data and process it to see trends in production and such. We keep 100's of GB of pictures we have to print after each project so I made a little automated script to compress, resize and format all the pages before printing. Plus several other things of that sort.  

Anyways I interviewed for a job last week that is the job of a lifetime. I was the youngest interview by probably 20 years. My problem solving skills helped a ton and I actually managed to have them rethink company policies because of things I brought up in the interview. Plus they were really impressed with a few of the things I made at my previous job. Namely how I used all the data we received to improve our efficiency and quality. They seemed very worried about my age. But to my surprise I got an offer letter yesterday for a large pile of money. So I just wanted to stop by and thank everyone that helps us new people learn how to program.",1086,68,thisisbeer,2017-04-08 13:46:20,https://www.reddit.com/r/learnprogramming/comments/64733l/programming_got_me_a_non_tech_job_thank_you_all/,0,learnprogramming
tt80vg,Do you know that awesome feeling when you write a huge chunk of code and it works exactly as intended?,I fucking LOVE it,1085,139,NeedhelpSOSplz,2022-03-31 19:48:24,https://www.reddit.com/r/learnprogramming/comments/tt80vg/do_you_know_that_awesome_feeling_when_you_write_a/,0,learnprogramming
9p72tl,"Upcase is now free! - loads of high quality tutorials on Ruby, JS, TDD, Git, Vim etc.",https://thoughtbot.com/upcase,1085,52,BobWhitelock,2018-10-18 07:35:48,https://www.reddit.com/r/learnprogramming/comments/9p72tl/upcase_is_now_free_loads_of_high_quality/,0,learnprogramming
pf1m3c,Starting a job in 3 days that requires JavaScript. I know zero JavaScript. How should I make the most of the next 3+ days?,"The title sounds silly but here's the situation.

I've been hired in a QA position. I have experience in QA and manual testing, zero in automation. The job is automation focused. The main tools I have zero experience in are JavaScript, Node.js, Cucumber, Selenium, Selenoid.

I know basic, beginner level Python. I need a good month or two and some larger projects under my belt before I'd say I'm adequate in Python. I also know basic HTML.

I have never worked with JavaScript. The hiring managers know this and I was open about my lack of skills in this area; they hired me for other skills with the expectation that I get up to speed quickly.

The current plan is a beginner's crash course in JavaScript from Udemy that can be pumped out in a day or two (all syntax, no real projects or advanced features). Other than that, I expect to just look at a few tutorials in the other programs and hope for the best.

Any advice for what I can do in the next 3 days, 3 weeks, and 3 months to not crash and burn?

Edit: Day one. I can now do a basic FizzBuzz for all integers up to a given number. Syntax all makes sense. Except for truthy and falsy, what the fuck is that?

Plan to introduce myself to Selenium soon.",1085,251,Monitor_343,2021-08-31 08:20:48,https://www.reddit.com/r/learnprogramming/comments/pf1m3c/starting_a_job_in_3_days_that_requires_javascript/,0,learnprogramming
fuuku9,Guy at work thinks the best modern programmers use bots to write their code,"I was talking to a 20 something year old guy at work about Python, which I am leaning currently. He says, ""well the thing about programming is the best programmers use bots to write their code for them."" Then proceeds to talk about hacking and says, ""really to take down a large company or something you just need to send out like thousands of spam bots.""

I wasn't even going to, and didn't have time to get into a discussion about either with him, so I just left it. Why do people think this way? I believe he was thinking of scripts but I don't know.

I know this isn't necessarily learning, but I found it amusing and maybe you will also.",1089,343,oblivion-age,2020-04-04 14:27:40,https://www.reddit.com/r/learnprogramming/comments/fuuku9/guy_at_work_thinks_the_best_modern_programmers/,0,learnprogramming
11hp9fc,I admire those who study after hours but to learn something as mentally demanding as coding you need to be well rested otherwise you won't take much.,"Sometimes there are comments of those who have full time job, study in the evening, then study all weekend. Where is the time for rest in that? You brain needs a rest (both to absorb and later to remember that), you are not a machine.

If you are dead tired then 3 hours of learning won't give you almost any results. Even if you think you've learned something you will forget that quickly. On the other hand, even 1 hour of intense study after good rest and while being well fed and hydrated will have very good results. The quality time of studying is so much more important than the amount of time you spend on it.

&#x200B;

You might say, but what can I do? Life is so busy. Just having full time job, add to that eating, bathroom breaks, socializing, girlfriend, any interests, chores, time needed for rest and there is literally nothing left. Even without studying it's difficult to keep up to the schedule.

I don't know about you but for example when I had a job as a teacher with 6 contact hours, after that I could only lay and rest. If I tried studying my brain would laugh at me. And I am healthy and efficient when doing my tasks. But there are things you can do. You can study early in the morning before your job (even short time), while you're still rested. Just make sure to finish your day early so you can do that the next day. It will be more efficient than studying in the evening. I'm saying take care of your lifestyle. If you have any more suggestions how to increase efficiency share them.",1079,112,jsveyfjc,2023-03-04 04:20:21,https://www.reddit.com/r/learnprogramming/comments/11hp9fc/i_admire_those_who_study_after_hours_but_to_learn/,0,learnprogramming
u1a3q6,Some tips and advice for absolute beginners who think they are struggling or not good enough. YOU GOT THIS!,"Context: I have depression, ADHD, Anxiety and have had 15 traumatic brain injuries to the back of my head. So learning is a little harder for me, not impossible.   


Here are some tips.    


1. You are *not* going to remember everything, you are going to google, google, google. This is absolutely ok. You are learning, this is a hard field but here is the thing, if I, someone who forgets if he has eaten the same day can get as far as I have in the odin project and remember it, you can.  **YOU GOT THIS!**
2. You are not me, I am not you, you are not the guru, unless you are. **Your time to learn is going to differ**; This means you *may take longer* or *you may learn faster*. If you take longer to learn that is absolutely ok, this is not a race, the career is going to be there. ***Take your time, ensure you understand the concept***. Understanding the concept does not mean you *remember* the commands, but that you understand *what the command* is meant for. If you understand the command, it will be much easier to google for that command when you need it.  **YOU GOT THIS!**
3. Do not rush, this goes back to subject 2.  Take your time in each section. For example, I struggle with selectors in CSS, so I am going over videos and docs about selectors to learn how they work and how they interact with flexbox currently.  This is something you should do. Which leads me to my next point.  **YOU GOT THIS!** 
4. Learn the basics, learn them good. Do not worry about ""mastering,"" you need time and experience to master something and from what I can see in this world, you wont master it all. However, you can be excellent at or even eventually master the basics. The things that are every day use, the things that everything builds upon.  If you learn the basics, you understand the basics, the rest will be just that much easier to learn and understand.  **YOU GOT THIS!** 
5. ***IMPORTANT IMPORTANT IMPORTANT:*** DO NOT CRAM, you can read and learn for 8 hours a day if you want but do not cram, do not hurt your self. Cramming is for losers, cramming is for failures.  (disclaimer; some people can cram and retain, this is not for you then).  Use a system called ***SPACED REPETITION SYSTEM*** ( Links below). This system essentially is based off the idea that you learn something and retain it naturally for xxx amount of time. Then when not using it, you start to forget; During this starting to forget phase, if you recall it for a flashcard or for use... your brain ""attaches"" importance to that bit of knowledge and it retains a little longer, you then recall it as you are about to naturally lose it which retains it longer.   This is how the SRS was explained to me by WaniKani (a site that is based on the SRS for learning Japanese).  This system is extremely good to use in conjunction with things such as The Odin Project.  **YOU GOT THIS!**
6. Go to a bookstore, grab your self a nice journal, something with a fun cover rather than a cardboard on spiral.  Write things down in it as you learn; For some people, writing things down helps solidify that knowledge.  Then you can try and recall it later in the SRS.   I was going to put this on its own but it can be here, grab a plain notebook, like one you would use for school (bigger pages) and try to write your code down on paper, then in an IDE.  This will help you remember how to write everything out, some IDE like with HTML and CSS in VScode have TAB complete, I use that a lot. Writing things out, such as during flexbox zombies has really helped a lot.  **YOU GOT THIS!** 
7. The biggest tip is this; You are going to struggle, you are going to feel stupid, you are going to feel like this is not meant for you. Those are intrusive thoughts (link below). Intrusive thoughts are bad thoughts we have but rarely, if  ever act upon.  Some examples are things like ""man I suck today"" to some people thinking ""I could just destroy that car"" to thoughts of harm of self or others.  So long as we don't act on these thoughts they are just intrusive thoughts that every one gets to some degree. It's ok, you're not the only one who has thought it was too hard, or they were not good enough and guess what... they WERE!  Let's look at painters, you look at a painting and see beauty, while the artist who created it sees every... single... imperfection... and... mistake.....   YOU are the artist, you are your own worst critique but you are also NOT a critic, so stop acting like one. Build that site, then get peer review, that peer review WILL be what you want to hear because the peer review is the end user who will be using your code / site  what not.   **YOU GOT THIS!** 

&#x200B;

When it comes down to it, you will get out what you put in. If you are lazy and don't practice often, those who do every day will surpass you. You need to understand however, that it's ok for others to learn faster and slower than you, we're all different.    


**RESOURCES**   
So here are some of the resources that I mentioned above.    


SRS = ***Spaces Repetition System***.  
From the wiki:   
"" **Spaced repetition** is an evidence-based learning technique that is usually performed with flashcards. Newly introduced and more difficult flashcards are shown more frequently, while older and less difficult flashcards are shown less frequently in order to exploit the psychological spacing effect. The use of spaced repetition has been proven to increase the rate of learning.\[1\] ""

SRS is best used with learning languages, however since this really is similar to ""language"" it should fit really well.    


[Here is the wiki on it.](https://en.wikipedia.org/wiki/Spaced_repetition)

[Here is another resource about SRS,](https://collegeinfogeek.com/spaced-repetition-memory-technique/) with a section called ""The Analog Spaced Repetition System"" which helps you understand and set up a way to handle SRS offline. 

&#x200B;

Here are two resources for online handling of SRS online or in an app. I have not used these but have thought about it.  

[Memo Stack](https://memostack.app/)

[Memoo](https://memoo.app/)  


&#x200B;

Intrusive Thoughts; 

Now, while this is for dangerous intrusive thoughts, such as hurting or even murder, or suicide, it can be used to help manage less dangerous thoughts, such as feeling stupid. *If you have thoughts of harming others, from just hurting to murdering someone, to suicide please reach out for help.* [National Suicide Prevention Hotline](https://suicidepreventionlifeline.org/).  


Now, for learning how to overcome intrusive thoughts: [Managing intrusive thoughts.](https://www.health.harvard.edu/mind-and-mood/managing-intrusive-thoughts)  


  
Enjoy your time learning, it's a process and we need to enjoy the journey, not the destination. Enjoy those little ""AHA!"" moments no matter how big or small. Each one is that much closer to learning the next thing!  What have I been saying? YOU GOT THIS! You really do.  Enjoy!

&#x200B;

***P.S. Not everyone will benefit from my advice, that is ok, we're all different and some people will learn totally different. That is ok!***

##",1087,73,TotoroDreams,2022-04-11 15:16:51,https://www.reddit.com/r/learnprogramming/comments/u1a3q6/some_tips_and_advice_for_absolute_beginners_who/,1,learnprogramming
cpmese,How I Went From a Depressed College Dropout to a Software Engineer,"Hey everyone, I wanted to share my story for some that have dealt with depression or hard times on their path. I was depressed and dropped out of college and got my way through it to be hired as an iOS Software Engineer. I hope my story can inspire others to keep going and keep building!

[Check it out on Medium here](https://medium.com/@coinjordan/how-i-went-from-a-depressed-college-dropout-to-a-software-engineer-73679364805b?source=friends_link&sk=0b32bfd06d5d5dc588088beb6189a0ba)",1086,101,william4991,2019-08-13 02:04:12,https://www.reddit.com/r/learnprogramming/comments/cpmese/how_i_went_from_a_depressed_college_dropout_to_a/,0,learnprogramming
10m2z9r,My method for learning new languages without getting stuck in tutorial hell,"I have learned, forgotten, and re-learned a few languages and frameworks over the years, and this is something I learned about how to use tutorials and learning materials.

What I did when I first started learning was I would get a book or a udemy course and sit through the whole thing, code along, do all the challenges, and try to retain as much of the information I was getting as possible. This kind of works, but it is extremely slow and you don't really retain all that much by doing this anyway. You can sit through a 70 hour udemy tutorial on python or whatever, and it might at some point spend hours telling you every possible thing there is to know about lists in python, but there is no way in hell you are actually going to remember all the fine details from this. At best you're going to just remember a vague overview of what is possible so you know what to google for later when it comes time to actually use these things.

Once I realized this I realized there is a much more efficient way to use tutorials, and that is to specifically look for ones which just give a general overview of a language/framework works, and to blaze through them at 2x speed. I do not try to code along with them or do coding challenges. Basically the only thing you need from tutorials is a very vague idea of how the language/framework works so that you have a basic starting point and know what kinds of things are possible so that you know what to google for later. And that's where the actual learning happens: you take that vague overview of the language that you have in your mind and start making things with it, googling the details as you go along.

Basically, use tutorials only for a brief overview and see documentation for the fine details. These overly long books and udemy courses are a waste of time imo.",1084,81,FOURforEIGHT,2023-01-26 21:25:33,https://www.reddit.com/r/learnprogramming/comments/10m2z9r/my_method_for_learning_new_languages_without/,0,learnprogramming
ge1c09,The final year of my degree. Age 25 and feel helpless and stupid.,"Long text. TL:DR final year of my degree. Feel like I'm clueless. I know a bit of most languages but mastered none. Need advice.

I'm currently 25  which makes me feel like a failure and in the final year of my degree in software engineering and I feel like I have not learned anything to use in the real world. 

I've done c#, c++, java, sql, wpf, php and html,css. We would learn like 2 weeks of one language before they gave us a generic inventory project and then stop there and move onto the next language.  I would say I have a basic understanding of these languages and how they work but I cannot code any of this stuff off the top of my head or solve a problem without looking at online stuff. I need to look at online material, like stack flow, youtube videos, or other stuff. I never copy-paste full source codes, or just edit someone else's I find online, I type everything by myself and read the code out loud to myself to help me understand it. I understand most of the codes I write, why the code works the way it is. Sadly, most projects we are assigned are just inventory systems or management systems. During my 3 years, I've done like maybe 10 or so inventory/management systems which are just added, delete, update, and search style systems. 


My biggest issue is that sometimes I lack any sort of motivation to do my projects or my personal projects. For days and weeks, I'll go without coding and find some motivation or force myself to do it and I'll enjoy coding and feel some sort of achievement and then I'll go back into my slump after a week and the process starts again. It makes it very difficult to learn anything this way. It's 100% my fault.  

Currently, I'm just looking for advice from others. I know this is probably another sob post and I’m not looking for pity. Criticism is more than welcome. But I'm just looking for solutions. Right now, I plan on taking some Udemy classes on my own. I also plan on watching the cs50. I have some bookmarked GitHub resource pages that I found from this subreddit. The issue is just forcing my shitty state of mind to learn something than just waste time gaming or sleeping.  I just want to learn one language, because I feel like I know a little bit of all the languages but have not mastered any. I’m more interested in systems development or mobile development and have no interest in websites and stuff. I have jumped into kotlin and tried to learn it myself with online codes and such, but I can’t say I enjoyed it as much. I found it complicated, it might be because I didn’t find any good material to start from all the beginning.",1084,247,primo21212,2020-05-05 16:48:58,https://www.reddit.com/r/learnprogramming/comments/ge1c09/the_final_year_of_my_degree_age_25_and_feel/,0,learnprogramming
xdekf0,"DSA Study Material: I have been prepping for interviews for about 5 months and compiled a lot of studying materials for Interviews. I would like to share Anki Flashcards 450+, Common Data Structures and Algorithm Templates / Patterns, and the Leetcode questions I grinded with notes.","Hi All!

Over the course of studying for multiple months I have compiled a lot of study material I'd like to give back like other individuals who supported me on this journey. In my compiled study material I have an Anki Flashcard Deck that covers all topics over 450+ flashcards, a compiled list of common data structures and algorithms patterns / templates, and the list of Leetcode questions I practiced on with notes about how to solve them.  Hopefully this can save everyone some time without having to compile your own study information to continue the journey! Good luck everyone it is a fun Journey! Github Repository: [https://github.com/Pradetto/DSA-Cheat-Sheets](https://github.com/Pradetto/DSA-Cheat-Sheets)

&#x200B;

Flashcard Topics:

\*\*Topic(s)\*\*General /Time Complexity / Space Complexity / Big OArraysGraphs / BFS /DFS / MatrixHash TablesHeaps & Priority QueuesLinked ListsRecursion / Backtracking /Memoization / Dynammic ProgrammingSorting and Search AlgorithmsStack and Queues and DEQues StringsTrees / Balanced Search Trees / Binary Search Trees / Binary Trees / Tries

&#x200B;

Common Pattern Templates:

\*\*Topic(s)\*\*Recursion / Backtracking (Subsets, Permutations and Combinations)Sorting AlgorithmsBinary Trees, Traversals and BST Recursive / Iterative ImplementationGraphs / GridsHeaps and Priority Queues

&#x200B;

I can't post images is this group, so if you want to see a table list of topics it is available on the github readme! If anyone has additional content you have that might be related feel free to message me.",1081,33,X18PUMA,2022-09-13 18:23:04,https://www.reddit.com/r/learnprogramming/comments/xdekf0/dsa_study_material_i_have_been_prepping_for/,0,learnprogramming
9cf9rx,"Hacking MMO designed to help you learn how to hack, program and code","Hi, we're (defun games ()) and we are working on a hacking and espionage MMO called Spycursion.

Although we are aiming to make it accessible to people with zero hacking/coding skills, we want to make it rewarding to those who already have some degree of expertise. We want it to be a good tool for people to develop their skills. We also hope it will encourage people to develop more of an interest in the field.

We would love your feedback on the hacking elements of the game.

For more info, see our website: https://defungames.com/

To stay up to date on the latest updates and developments follow our Twitter: https://twitter.com/DefunGames (@DefunGames)

Thanks for reading, and we hope you'll check out our exciting project!

Edit 1: Wow, we never expected this kind of support! Thanks so much to everyone who hopped into this thread and gave up their time to look at our project. I hope you stick with us and I really hope we can deliver something truly awesome.",1083,81,uberunit183,2018-09-02 20:30:50,https://www.reddit.com/r/learnprogramming/comments/9cf9rx/hacking_mmo_designed_to_help_you_learn_how_to/,0,learnprogramming
vkat7f,"a friend of mine said you should go through Harvard's CS50 first then other 'heavy' stuff, when I asked why he said ""just do it"". Please tell me why😭",Title explains it pretty much,1075,221,Shiva_Sharma1,2022-06-25 08:52:44,https://www.reddit.com/r/learnprogramming/comments/vkat7f/a_friend_of_mine_said_you_should_go_through/,0,learnprogramming
rgqjgj,Why it's so much harder to get your first job as a junior engineer,"I went to dinner a few nights ago with a software engineering manager who makes north of $500k/yr, and they told me something I found profound:

""I could easily get a senior engineering job because of my experience. I don't think, in today's environment, I would easily get a junior engineering job.""

Turns out companies prefer to hire engineers with experience. But how do you get experience if you don't get a job? That's the entirety of the challenge of breaking into the software engineering field.

**So how do you get experience if you don't have any?**

# Understanding the Job Market

While it may be tempting to shout at the world (and the job market) that they are wrong to only look for experienced candidates, we need to fight that temptation and face reality. There are reasons companies don’t hire junior candidates, and we need to understand what those reasons are, and how we can overcome them at the many companies that *do* hire junior candidates.

First, accept that the companies that opt to not hire junior people are rational, not evil. They have reasons, and understanding and countering those reasons are the key to our getting hired. 

This problem is particularly pronounced in technical fields or fields where there are high levels of burnout, turnover, or rapid increases in salaries (for reasons we’ll see shortly).

Before we think about how to overcome this hurdle, let’s first seek to understand.

Usually it goes something like this:

### Why Companies Shy Away from Hiring Junior Candidates

AcmeCorp measures the output of its engineering team. It’s a somewhat crude measure, but they try to quantify exactly how much output they get out of each engineer and each team numerically, and their goal is to achieve the maximum output with the minimum investment. 

Let’s say a junior engineer outputs 1. A more senior engineer might be 2 or 3. Susan, who is phenomenal (and expensive), produces output at a level 4. In other words, Susan produces about four times as much output as a junior engineer. 

Susan has been going it alone for some time, and the company hopes to increase productivity on her team from 4 to 7 or 8. In order to do so, they decide to hire 4 junior engineers (Susan’s 4 + 4 engineers at 1 each = 8).

Susan gets paid $300,000/year (and is constantly turning down offers from Google and Facebook for higher), but junior engineers can be hired for only $80,000/year for a total of $320k. So to get the additional four points from junior engineers will be a little more expensive than getting the same from Susan, but if you factor in the recruiting costs of finding another Susan (which could be $30-$50k) it’s a reasonable tradeoff.

(Quick note: If you’re in shock about how high the salary and recruiting costs are for a Susan, know these are perfectly realistic numbers at a certain levels of software engineering).

So AcmeCorp hires four junior engineers, each at $80,000/year. 

It quickly becomes clear that one wasn’t a good fit, so they are let go after the first month (and only $10,000 in salary), Susan works on training the other three. The other three are bright, talented, and hard-working. 

But instead of output instantly shooting to 7 (Susan’s 4 + the three engineers at 1 each), instead Susan is spending most of her time mentoring the new engineers. She’s spending so much time training she’s not really writing any code at all, and the three engineers combined are only producing at 2 as they learn the ropes.

So AcmeCorp is now spending $540,000/yr in salary - almost twice what it was spending before - and output has actually *decreased* from 4 to 2. That’s an investment AcmeCorp is willing to make, but it stings a little, and they really want to see output increasing to what was originally planned as time moves on.

After 6 months the junior engineers are where AcmeCorp had hopped, each has an output of 1. (combined for 3). Huge success. Except for one thing: Susan has to spend *some* time managing those three, so her output has only returned to a 2. AcmeCorp ended up with an output of 5 for $540k instead of an output of 4 for $300k. They start to wonder if they should have hired another Susan instead of the four junior engineers.

But then… right as things are getting ramped up, 2 of the 3 engineers get offers at other companies, for $120k and $150k, respectively. AcmeCorp matches the lower salary ($120k) but can’t justify the $150k, and that engineer moves on. AcmeCorp has now spent about $60,000 training that engineer for very little return.

Now AcmeCorp has moved from a productivity of 4 at a cost of $300k to a productivity of 5 at a cost of $500k, not including the $70,000 of cost incurred training the two engineers who have now left, or the decreased productivity from Susan to reach this point.

If they would have hired another Susan, maybe they would have spent another $50k in recruiting costs, but then they’d be at 8 for $600k instead of 5 for $500k, and they wouldn’t have lost additional time and money ramping up to get to this point. Next time, maybe they’ll just hire senior.

This scenario is pretty common. 

A company wants to invest in young talent, and it does so, but doing so **slows productivity**, **distracts top performers**, and as soon as the junior talent is at a level of self-sufficiency it **leaves**. This happens especially often if the company is not good at or efficient at bringing in junior talent.

The reality is hiring junior talent can be a risky, thankless, painful task. 

It doesn’t always happen this way, and some companies plan for some elements of this to happen (or they literally can’t find enough Susans anyway and are forced to hire juniors), but in looking at the frustration we can clearly see what our job is to overcome when trying to convince the companies that are hiring juniors to hire you:

To the extent possible,

# The three things you have to show:

You have to show them you **won’t slow productivity**. That is a mix of programming ability, having shipped actual production code, and that you learn quickly.

You have to show them you **won’t distract the top performers.** That means that you're a self-starter, that you can solve some of your own problems, and that you are respectful of the time of those who are (generally) happy to help you.

And, perhaps counterintuitively, you want to show them you **won’t leave.** This is the advice that is probably the most controversial, but you want to signal, in every way you can, that you won't bounce after six months. That can look like talking about how excited you are for the opportunity, how much you love the company, talk about your level of commitment, etc.

There are many criteria for being hired generally that still apply, but when you’re interviewing for a junior role (or fighting to get an interview) these will be the questions nagging your interviewer - these are the things they’ll be keeping in their mind.",1079,143,tianan,2021-12-15 04:34:01,https://www.reddit.com/r/learnprogramming/comments/rgqjgj/why_its_so_much_harder_to_get_your_first_job_as_a/,0,learnprogramming
c9dwe2,"I highly encourage everyone, but especially newbies, to use linting plugins for their prefered IDE","# Learning alone enforces bad habits

When you start coding by yourself, after you've already finished with mimicking what someone else did for a tutorial or lecture, especially if you either learn alone, or your school (college) is kinda bad / meh and doesn't actually check your code, just your result - then you are fairly susceptible to bad code practices. Also it's very difficult to learn good code practices without working on a large and well maintained codebase with coder reviews. A good option is books, but it's not foolproof either.

## OK, so how can I fix this?

#### Linting! 

I personally use [SonarLint](https://www.sonarlint.org/) but anything is fine, however an IDE plugin / addon would be best, see your mistakes in real time. Ever since I've started using it, I have personally made great, visible, measurable, improvements - not only to my code quality, but I've also developed a better understanding of things and I can't praise linting enough.

## But what is this magic you speak of?

For anyone who doesn't know, linting is basically a code analyzer that detects bad practices and possible errors. It's not like the compiler yelling at you ""I don't know what you meant by _pulbic_,  expected a visibility modifier"", it tells you that trying to call a method, from a nullable object that you did not check if it is null or not, might cause a null pointer exception at runtime.

However that is not all it does, it tracks even bad practices, things that make no sense, things that could simply be better, it explains why that particular thing is not ok, gives examples of an ok replacement and, my personal favorite (though I don't know if this is for all linting services) it gives you a searchable code for that exact thing, that has usually already been discussed about on the internet.

## All this sounds nice and all, but could you give me more tangible examples?

I shall be using java, and my examples will be on the simple side of things, but I hope it's enough to convince people.

    if (thingIsTrue) {
        return true;
    } else {
        return false;
    }

or 

    if (thingIsTrue) {
        return false;
    } else {
        return true;
    }

Both are bad, it will tell you they are bad and it will say ""why write it that way, this is way better""

`return thingIsTrue;` or `return !thingIsTrue` It does the exact same thing, it's much more readable, it takes one line, it's better.

--------------

    @Override
    public dispose() {
        super.dispose();
    }

No need to override a method, and do exactly what that method does anyhow, let the parent class do its job.


--------------


    if (A) {
        if (B) {
            ...
        }
    }

No sense in adding a level of indentation here. Just do this:

    if (A && B) {
        ...
    }

--------------

    if (A && B) {
        ...
        if (C) {
            ...
            if (D) {
            ...
            }
        }
        return result;
    }
    return null;

Here you can't combine  A && B && C && D because you have actions between ifs. But you can still remove levels of complexity with this trick

    if (!A || !B)  {
        return null;
    } // without the first condition, nothing is done
    // so end the logic here, remove a level of indentation.
    ...
    etc

Side note: From my experience, though this is not from lint, usually statements with many ifs like this, can be somewhat changed into a front loaded approach, aka move all exit conditions in 1-2-3 ifs, put them at the top, then do the logic, aka:

    public Result getResult(DataType input) {
        if (input == null || input.isEmpty()) {
            return null;
        }

        Object processedInput = intermediateAction(input);

        if (processedInput == null) {
            return null;
        }

        ...

        return new Result(processedInput);
    }

--------------

## FINI!

And many more. Do yourself a favor, and get lint. [Insert this_is_not_a_sponsorhisp joke here]


# Post Scriptum

I also really love using a dark theme with syntax coloring. I don't have to ask myself stuff like ""Why can't I make a new Whatever without it forcing me to implement this method"". Because ""Ahhh it's blue, so it's an abstract class"". Or purple is a static final, deep purple is an interface, etc. I know when I'm talking with a local variable or a field on color alone. That helps a lot too IMHO.",1080,91,ZukoBestGirl,2019-07-05 09:18:12,https://www.reddit.com/r/learnprogramming/comments/c9dwe2/i_highly_encourage_everyone_but_especially/,0,learnprogramming
b32lb5,Thank you!,"Thank you to this community and to r/learnpython

&#x200B;

I work in big data now and utilize Python and SQL and sometimes Ruby.  2 years ago I was just starting to learn how to program  - I was about halfway through first college programming course. I had never worked with any programming language before when I went back to school at 37.  People told me that a woman my age had no business trying to do this.  

  
Like I said though: I have a professional job in big data now.  I work from home. I really like my job, and I know that I have security in my career with the skills I have built.  Thank you to this community and so many others who helped me learn this skillset that I am improving my life and the lives of others with.  ",1083,52,DollyPartonsFarts,2019-03-19 20:41:58,https://www.reddit.com/r/learnprogramming/comments/b32lb5/thank_you/,0,learnprogramming
g9uu1r,What is it like to be an actual programmer,"I'm a high school student who plans to be a programmer, but what is it actually like? How many programming languages do you need, how hard is university and what does a typical work day in a programmers life look like

P. S. Specifiicly software engineer",1078,237,Audxius,2020-04-28 20:24:45,https://www.reddit.com/r/learnprogramming/comments/g9uu1r/what_is_it_like_to_be_an_actual_programmer/,0,learnprogramming
s2ft5a,will the new generation of kids who are learning computer science during school make it harder for the people with no computer science degree to get a job/keep their job when those kids get older?,"I hope this isn't a stupid question. It seems to be increasingly more common for children to learn computer science from a younger age in their school. I think this is incredibly awesome and honestly definitely needed considering how tech savvy our society is turning.

But, will this have a negative effect for the people who work in tech or are planning to work in tech who don't have a computer science degree?",1072,387,MrCodeNewbie,2022-01-12 20:18:33,https://www.reddit.com/r/learnprogramming/comments/s2ft5a/will_the_new_generation_of_kids_who_are_learning/,0,learnprogramming
7idmr2,"Yale Professor's Notes on C, C++, Data Structures & Algorithms, and Discrete Math","Hello, I came across the [webpage of Professor James Aspnes](http://www.cs.yale.edu/homes/aspnes/), Director of Undergraduate Studies in the CS department at Yale, a couple of weeks ago and have been blown away by how extensive and well written some of the resources are on it. He has a thorough introduction to [discrete math](http://www.cs.yale.edu/homes/aspnes/classes/202/notes.pdf) and a great overview of [C and C++ with data structures & algorithms](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html). 

I have found his writing style to be quite engaging, and I really like how he provides bookmarks for the various sections in the texts so one doesn't have to scroll forever or rely on control/command+f. I have noticed professors from various institutions will post notes online on various topics. These can be great resources that for whatever reason are posted for free use. ",1076,40,bookingly,2017-12-08 08:11:51,https://www.reddit.com/r/learnprogramming/comments/7idmr2/yale_professors_notes_on_c_c_data_structures/,0,learnprogramming
wmktdd,Landed First Job (Self-Taught),"I have been self-teaching (Javascript/React/Node, Python/Django) at the age of 30 for the past 9 months while working full time and I just landed my first job. Boot camps are great, but I'm really glad I saved myself a nice chunk of change and went self-taught. I just wanted to give some encouragement to anyone else out there who is going through the same journey. It's going to be really difficult and you're going to feel uncertain at times, but you can absolutely do it. Good luck!",1078,112,Similar-Leopard-5740,2022-08-12 13:05:36,https://www.reddit.com/r/learnprogramming/comments/wmktdd/landed_first_job_selftaught/,0,learnprogramming
53cgjn,3 years unemployed. Got my first job as a programmer. Lacking skills and doing a very disappointing performance. My first job became a nightmare.,"Hello. I don't know where to post this and i need some guidance on what to do next. As what the title has said i have been unemployed for 2-3 years due to sickness and depression. After battling it for almost 2 years i tried to look for a job and finally got a programming position. But it has been a very hard and grueling experience and it's turning into a nightmare. I thought i was going to be trained but i was thrown into the fire and i am performing really really bad. I only know basic programming i haven't done any big project and all i have been doing is messing everything up. I studied CS for 4 years and i enjoyed programming when i was still studying but now i don't even want to program anymore. But i can't quit because this is my first job but it's slowly killing me from the inside. For the first time in my whole life i broke down from the immense pressure of the project that i handled. I still need to complete it and I'm already giving up. I don't know what to do anymore i tried asking my superiors but they couldn't help me because they already have tight schedules from other projects that they are handling. I couldn't eat well and sleep well because of the pressure and i already lost weight because of the stress that i have been feeling. I don't know where to go to anymore.  I know i have no rights to complain but due to the level of my skills and the mistakes that i have been making is really getting into me. I can't stop thinking about it.

I'm sorry for my English it's not my native language.

Thank you.",1076,145,ineedhelppleaseprog1,2016-09-18 14:55:45,https://www.reddit.com/r/learnprogramming/comments/53cgjn/3_years_unemployed_got_my_first_job_as_a/,0,learnprogramming
ltngms,I'm a software engineer looking for beginners to pair program on algorithms in Python,"Edit: I'm completely booked! 42 sessions in the next week. If you'd like to know when I'm doing more sessions, [send me your email](https://airtable.com/shrh7vuWeXKjmEH0L).

Hi everyone, I'm a software engineer with fiveish years of experience. I'm working on leveling up my algorithm skills, and I'm looking for beginner programmers to pair program with in [Strong Style](https://martinfowler.com/articles/on-pair-programming.html#Strong-stylePairing). You'll be typing the code, but I'll be ""writing"" the code by giving instructions. The instructions will be as high level as possible, but if there's something you don't understand we'll just drop down to very detailed.

Beginners welcome! The minimum amount of knowledge for us to be productive will just be having done one Python book/tutorial/course. If you can follow the instructions ""Make a list of 1, 2, 3 and save it to x"", then you're good. More experience is welcome, of course.

Why am I doing this? I'm one of those rare breed of extrovert software engineers. I get more energy from interacting with other people and that's kinda hard to do while studying. I also think it will help beginners [and](https://www.reddit.com/r/learnprogramming/comments/i9vuhr/i_wrote_a_syllabus_for_learning_python_and_django/) [I](https://www.reddit.com/r/learnprogramming/comments/i0kld3/how_students_get_themselves_into_tutorial_hell/) [like](https://www.reddit.com/r/learnprogramming/comments/ibt0ni/im_looking_to_mentor_someone_who_wants_to_become/) [doing](https://www.reddit.com/r/chile/comments/gdxuf0/want_to_learn_to_how_to_code_im_a_software/) [that](https://www.reddit.com/r/learnprogramming/comments/fm0ip2/im_a_software_engineer_looking_to_better/).

If this sounds cool, book something on my [Calendly](https://calendly.com/travisjungroth/pair-programming-algorithms-45-minutes). Or, I'll be happy to answer any questions.",1069,75,TravisJungroth,2021-02-27 12:49:32,https://www.reddit.com/r/learnprogramming/comments/ltngms/im_a_software_engineer_looking_for_beginners_to/,0,learnprogramming
dkciwu,"Learn SQL, SQL Server and SSMS With 200+ Interactive Challenges (free course)","Edit: a large portion of this course is now paid.   


Edit: it looks like I may have misconfigured my firewalls and was blocking every ip address except my own (doh!). Also, sounds like firefox doesn't recognize my ssl certificate issuer. Chrome, IE and several mobile browser work fine.

Here is the link to the free course:  [https://app.sixweeksql.com/](https://app.sixweeksql.com/)

Full disclosure, I created this course. Also, it is specific to SQL Server.

When I started my first gig as a software developer, I quickly realized that my SQL skills were non-existent and that my new employer expected me to be able to write moderately complex SQL.

At the time, I used  [https://sqlzoo.net](https://sqlzoo.net/), which was a life saver! I still recommend it. The interactive exercises let you learn SQL through the browser, giving you instant feedback on whether your SQL is correct.

&#x200B;

However, I often noticed that in-depth explanations were lacking and that there were no exercises for creating functions, stored procedures and table types, which I needed to know for my job. This is partly because sqlzoo is geared mostly toward MySQL and not SQL Server.

&#x200B;

Another thing I struggled with was setting up a local development environment and learning to use Sql Server Management Studio. This course will walk you through that step-by-step

&#x200B;

I created this course with the beginner in mind. It assumes absolutely zero knowledge and strives to explain concepts through analogies, intuition and hands-on practice. It is exactly what I wish I would have had a few weeks before starting my first dev job.

Here are covered topics:

* select statements
* using the where clause
* SQL operators
* setting up SQL Server locally
* setting up SSMS
* restoring a database
* creating tables
* inserts
* updates
* deletes
* ordering data
* importing/exporting data
* calculated fields
* data types
* group by
* data analysis
* using schemas
* subqueries
* inner joins
* left joins
* primary keys
* foreign keys
* using variables
* functions
* stored procedures
* user defined table types
* programming with SQL",1067,115,jpayne0061,2019-10-20 00:51:20,https://www.reddit.com/r/learnprogramming/comments/dkciwu/learn_sql_sql_server_and_ssms_with_200/,0,learnprogramming
9nwkao,Useful link for learning Git interactively (for beginners),https://learngitbranching.js.org/,1067,32,None,2018-10-13 19:34:20,https://www.reddit.com/r/learnprogramming/comments/9nwkao/useful_link_for_learning_git_interactively_for/,0,learnprogramming
18m8mnx,Why are there so many arrogant programmers?,"Hello, I'm slowly learning programming and a lot about IT in general and, when I read other people asking questions in forums I always see someone making it a competition about who is the best programmer or giving a reply that basically says ''heh, I'm too smart to answer this... you should learn on your own''. I don't know why I see it so much, but this make beginners feel very bad when trying to enter programming forums. I don't know if someone else feel the same way, I can't even look at stack overflow without getting angry at some users that are too harsh on newbies.",1066,544,YorJaeger,2023-12-19 18:23:02,https://www.reddit.com/r/learnprogramming/comments/18m8mnx/why_are_there_so_many_arrogant_programmers/,0,learnprogramming
b4b54x,You can only stare at the code so long expecting to find your error.,"After two hours staring at the code, I decided to post it.

And then I saw it before I hit post.

Try starting to post.

You might find it.

Edit:  Thank you for the upvotes.  ",1070,143,justanotheranon8,2019-03-22 22:04:53,https://www.reddit.com/r/learnprogramming/comments/b4b54x/you_can_only_stare_at_the_code_so_long_expecting/,0,learnprogramming
k1h7ja,How difficult is it to make money with programming by yourself?,"When I say “by yourself” I mean creating some sort of project,site, app or automation that generates money. 

If you have some experience, weather positive or negative, then please share.",1064,190,None,2020-11-26 15:33:58,https://www.reddit.com/r/learnprogramming/comments/k1h7ja/how_difficult_is_it_to_make_money_with/,0,learnprogramming
hao01w,"Started a new job, completely overwhelmed","Just started my first development position and I'm feeling completely overwhelmed.

The company that I work for have written their own program related to finance and the thing is a monster. It's seriously the biggest thing I have ever worked on and I'm so lost.

I've no idea what any of the classes are for, what the methods do, how they interact with each other. It seems like these things are calling each other on layers that are almost unending.

I feel inadequate. Like I'm in over my head.

Today was my 3rd day, and I feel like I'm spending most of my time staring at the screen doing nothing, or trying to find a bug fix / new feature that I am actually capable of doing.

In the 3 days I have been there I have basically just rewritten/tidied up a couple of if statements.

I got the solution for our project and was basically told to play around, experiment etc but I have honestly no idea where to start.

Two other new people started at the same time as I did, but they have a few years of experience behind them. It seems like they almost immediately went to work on more intermediate problems whereas I am struggling to do literally anything.

Is this normal for your first position? Or am I actually in way over my head?

Logically I understand it is probably normal for someone in their first development position, but I feel as though I've been dropped in the deep end and feel absolutely useless.

I want to do well, I was so lucky to get this positon and I sure as hell don't want to lose it.",1068,169,littletray26,2020-06-17 09:34:59,https://www.reddit.com/r/learnprogramming/comments/hao01w/started_a_new_job_completely_overwhelmed/,0,learnprogramming
11fan3u,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (March 2023)","UPDATE: The codes are used up. You can still watch [the first 15 videos on YouTube](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW). You can also go to [the course page](https://www.udemy.com/course/automate/) and click ""Expand All Sections"" and click the ""Preview"" link for each video to watch them on the site.

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https ://udemy. com/course/automate/?couponCode=MAR2023FREE~~

~~https ://udemy. com/course/automate/?couponCode=MAR2023FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student) If you have a VPN service, try to sign up from a North American or European proxy.

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, Python Programming Exercises Gently Explained is a set of 42 programming exercises for beginners [for free](https://inventwithpython.com/pythongently/) or as a [99 cent ebook](https://www.amazon.com/Python-Programming-Exercises-Gently-Explained-ebook/dp/B0BGYJ7G6T/).


**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1036,57,AlSweigart,2023-03-01 18:04:47,https://www.reddit.com/r/learnprogramming/comments/11fan3u/2000_free_sign_ups_available_for_the_automate_the/,0,learnprogramming
1349iej,"Today i programed something useful for me, for the first time","After studying for 6 months (stoping and returning), i never used programming for something useful or something that i needed. Well, today, i needed to make a list with dates in a notepad like this:

01/05/2023:

02/05/2023:

03/05/2023: 

i noticed that i can do this with a for loop and i did it. Even if it was such a simple thing, if i didn't know the basics of a programming language, i would have had to do it all myself.",1023,47,EstoyResfriado,2023-05-01 01:52:26,https://www.reddit.com/r/learnprogramming/comments/1349iej/today_i_programed_something_useful_for_me_for_the/,0,learnprogramming
133hjfb,Who Knew Programming Could Be This Fun?,"Greeting smart people,

As the title implies, I found programming to be so fun and exciting. The idea of instructing a machine to do what we want still amazes me every time. I still cannot imagine the feeling I get from coding. Perhaps it feels like I am a magician or an alien who magically controls a magical machine to calculate a math problem. Recently, I have been learning the ""under the hood"" of a particular compiler, and it is really complex but also interesting. Moreover, to start coding, all we need is a computer and a text editor. They are easily accessible. I love programming so much.

Best regards,

random student on the internet",1010,192,BuildTopia,2023-04-30 06:17:27,https://www.reddit.com/r/learnprogramming/comments/133hjfb/who_knew_programming_could_be_this_fun/,0,learnprogramming
16ujnzp,The Secret to Why Programmers Say Languages Don't Matter: We Think in Pseudo Code Logic; Implement via Syntax!,"At first, it's broad strokes of input, output, conditions of what is to happen when, what data types are coming in and out, how we handle that, and how to get from beginning to end and make it do what we want - the Happy Path, we call it.  (edit: /u/robhanz brilliantly reminds me this is Data-Flow like a ""DFD"").  Then we think a bit deeper and go, ok, how do we implement that... and then we think variables, repetition and loops, grouped logic for making decisions... we think about design patterns, like callbacks, and command patterns, dependency injection, sorts, caching, matching... and maybe only then do we translate that to the specific language we're in by thinking about what language features best fit the specific patterns... sometimes, though, we go straight from conditions and loops to code and variable assignments and class declarations so fast we don't even notice because we already think in that language, so the loops and ifs have colons at the end... or curly braces... and sometimes it's elif or elsif or else if or not at all, but it's... all... the... same.

They're just loops.  They're justs arrays or lists and can be .map() or map(...) -ed  one way or another - or there are possibly better or worse ways to handle it.  They're just dicts or json.  Sure, it does suck when you can't just make a function a first class citizen, but I guess you make pointers or references one way or another...

In the end... go learn programming, not Javascript.  Learn web development, not React.  Learn Python, not Tensorflow.",989,116,Flamesilver_0,2023-09-28 15:53:18,https://www.reddit.com/r/learnprogramming/comments/16ujnzp/the_secret_to_why_programmers_say_languages_dont/,0,learnprogramming
1bhxg3n,DON'T QUIT unless you have something lined up,"Today, March 18, marks the 1-year ""anniversary"" of me quitting my dev job. 

One year later and I'm more regretful than ever. Sure, the environment was toxic. My manager was the most intimidating manager I ever had. He would message me on my personal Facebook profile if he saw me offline on Slack (even though I was working during this time, I would just stupidly forget to open Slack sometimes). Six months after quitting, he messaged me on social media AGAIN, telling me to take down the ""shameful"" reviews I left on Glassdoor, even though they weren't even mine. Again, he was paranoid as hell, and he always thought I wanted to ruin his reputation/his firm's reputation, when in reality, I had no such intentions. He would ask me to delete Facebook comments that I wrote on posts that were unrelated to his firm or programming in general...just stuff that he didn't agree with and that he thought was ""not reflecting"" his company's ""core values"".

&nbsp;

On top of that, I wasn't learning anything. There were no code reviews. No meetings. No agile. Nothing. I did the grunt work of ""slicing"" and translating Figma designs into HTML/CSS.  One day I got really pissed and I gave my manager my resignation letter. One year later and I'm still looking for a dev job. 

&nbsp;

I know this might not be the healthiest advice, but if you're a junior, the best thing right now is to just accept your job as it is. It may be toxic, but at least it's a job. When things in tech will shift towards a normal direction, you can make that change. But please, for the love of god, DON'T DO IT unless you have another job lined up. I know it's tempting as hell to just say ""fuck it"" and hand in your resignation letter in the heat of the moment, but you will most likely regret it. Don't repeat my mistake. I'm still regretting it one year later and it doesn't get easier. The job market right now is unforgiving, and this is literally the worst time to quit your job.",926,160,FeatheredDrake,2024-03-18 18:08:33,https://www.reddit.com/r/learnprogramming/comments/1bhxg3n/dont_quit_unless_you_have_something_lined_up/,0,learnprogramming
16gh9a1,You have 6 months and unlimited resources to become a s***-hot programmer. How do you do it?,Assume money isn't a factor.,926,527,tensor0910,2023-09-12 04:08:56,https://www.reddit.com/r/learnprogramming/comments/16gh9a1/you_have_6_months_and_unlimited_resources_to/,0,learnprogramming
16zz6hl,"Programming languages are overrated, learn how to use a debugger.","Hot take, but in my opinion this is the difference between copy-paste gremlins and professionals. Being able to quickly pinpoint and diagnose problems. Especially being able to debug multithreaded programs, it’s like a superpower.

Edit: for clarification, I often see beginners fall into the trap of agonising over which language to learn. Of course programming languages are important, but are they worth building a personality around at this early stage? What I’m proposing for beginners is: take half an hour away from reading “top 10 programming languages of 2023” and get familiar with your IDE’s debugger.",916,247,Comfortable-Ad-9865,2023-10-04 21:27:09,https://www.reddit.com/r/learnprogramming/comments/16zz6hl/programming_languages_are_overrated_learn_how_to/,0,learnprogramming
